import time
import tkinter as tk
from tkinter import messagebox, scrolledtext
from tkinter import font as tkFont
import threading
from datetime import datetime

# Bluetooth configuration
USE_BLUETOOTH = False  # Set to False for GUI-only mode
PORT = 'COM8'  # Replace with your HC-05 Bluetooth serial port
BAUD_RATE = 9600

# Global variables
bt = None
response_log = []
message_counter = 0  # Track message sequence numbers

# Initialize Bluetooth connection
if USE_BLUETOOTH:
    try:
        import serial
        bt = serial.Serial(PORT, BAUD_RATE, timeout=1)
        time.sleep(2)
        print(f"‚úÖ Connected to {PORT} at {BAUD_RATE} baud.")
        print(f"üîç Serial port info: {bt}")
    except ImportError:
        messagebox.showerror("Missing Module", "pyserial module not found. Install with: pip install pyserial")
        USE_BLUETOOTH = False
        bt = None
    except serial.SerialException as e:
        messagebox.showerror("Connection Error", f"Failed to connect to Bluetooth: {e}")
        bt = None
else:
    bt = None
    print("üîå Running in GUI-only mode. Bluetooth is disabled.")

def debug_bluetooth_status():
    """Check and print detailed Bluetooth status"""
    if bt and bt.is_open:
        print(f"üì° Bluetooth Status:")
        print(f"   Port: {bt.port}")
        print(f"   Baudrate: {bt.baudrate}")
        print(f"   Is Open: {bt.is_open}")
        print(f"   Bytes in buffer: {bt.in_waiting}")
        return True
    else:
        print("‚ùå Bluetooth not connected or closed")
        return False

def send_command_with_confirmation(command):
    """Send command with sequence number and wait for device confirmation"""
    global message_counter
    message_counter += 1
    
    timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    
    print(f"\n{'='*60}")
    print(f"üöÄ [{timestamp}] SENDING COMMAND #{message_counter}: '{command}'")
    
    if not USE_BLUETOOTH or not bt:
        print("‚ö†Ô∏è  Bluetooth disabled - running in simulation mode")
        response = f"[SIMULATED] Command #{message_counter} '{command}' acknowledged"
        update_response_log(f"#{message_counter} {command}", response, timestamp, True)
        return
    
    if not bt.is_open:
        print("‚ùå Bluetooth connection is closed")
        response = "‚ùå Error: Bluetooth connection closed"
        update_response_log(f"#{message_counter} {command}", response, timestamp, False)
        return
    
    try:
        # Clear any existing data in buffer first
        if bt.in_waiting > 0:
            old_data = bt.read(bt.in_waiting)
            print(f"üóëÔ∏è  Cleared old buffer data: {old_data}")
        
        # Send command with sequence number and newline
        command_with_seq = f"#{message_counter}:{command}"
        command_with_newline = command_with_seq + '\r\n'
        command_bytes = command_with_newline.encode()
        bytes_sent = bt.write(command_bytes)
        bt.flush()  # Ensure data is sent immediately
        
        print(f"üì§ Sent {bytes_sent} bytes: '{command_with_seq}' (with \\r\\n)")
        print(f"üì§ Raw bytes sent: {command_bytes}")
        
        # Wait for device confirmation
        confirmation_result = wait_for_device_confirmation(command_with_seq, message_counter)
        
        if confirmation_result['success']:
            print(f"‚úÖ DEVICE CONFIRMED: {confirmation_result['message']}")
            update_response_log(f"#{message_counter} {command}", confirmation_result['message'], timestamp, True)
        else:
            print(f"‚ùå DEVICE CONFIRMATION FAILED: {confirmation_result['message']}")
            update_response_log(f"#{message_counter} {command}", confirmation_result['message'], timestamp, False)
        
    except Exception as e:
        error_msg = f"‚ùå Error sending command: {e}"
        print(error_msg)
        update_response_log(f"#{message_counter} {command}", error_msg, timestamp, False)

def wait_for_device_confirmation(command_with_seq, seq_number, timeout=3):
    """Wait for device confirmation with sequence number verification"""
    if not bt or not bt.is_open:
        return {'success': False, 'message': 'Bluetooth not available'}
    
    start_time = time.time()
    received_data = b""
    expected_responses = [
        f"#{seq_number}",          # Sequence number echo
        command_with_seq,         # Full command echo
        f"#{seq_number}:OK",      # Seq + OK
        f"#{seq_number}:ACK",     # Seq + ACK
        'OK',                     # Generic OK
        'ACK',                    # Generic ACK
    ]
    
    print(f"‚è±Ô∏è  Waiting up to {timeout}s for device confirmation...")
    print(f"üéØ Looking for responses with sequence #{seq_number}: {expected_responses}")
    
    while time.time() - start_time < timeout:
        try:
            bytes_available = bt.in_waiting
            if bytes_available > 0:
                print(f"üì• {bytes_available} bytes available in buffer")
                
                # Read all available data
                new_data = bt.read(bytes_available)
                received_data += new_data
                
                print(f"üì® Raw bytes: {new_data}")
                print(f"üì® Hex: {new_data.hex()}")
                
                # Try to decode and analyze
                try:
                    decoded = received_data.decode('utf-8', errors='ignore').strip()
                    print(f"üìñ Decoded response: '{decoded}'")
                    
                    # Check for complete response (contains newline or reasonable length)
                    if b'\n' in received_data or b'\r' in received_data or len(decoded) >= 3:
                        print(f"üîç Analyzing complete response: '{decoded}'")
                        
                        # Check if response contains our sequence number
                        if f"#{seq_number}" in decoded:
                            print(f"üéØ SEQUENCE #{seq_number} CONFIRMED in response!")
                            return {
                                'success': True, 
                                'message': f"‚úÖ Device confirmed #{seq_number}: '{decoded}'"
                            }
                        
                        # Check for other expected confirmations
                        for expected in expected_responses:
                            if expected.upper() in decoded.upper():
                                return {
                                    'success': True, 
                                    'message': f"‚úÖ Device acknowledged #{seq_number} with: '{decoded}'"
                                }
                        
                        # If we got data but without sequence number
                        if decoded:
                            return {
                                'success': False, 
                                'message': f"‚ö†Ô∏è Device responded '{decoded}' but missing sequence #{seq_number}"
                            }
                
                except UnicodeDecodeError as e:
                    print(f"‚ö†Ô∏è  Decode error: {e}")
            
            # Progress indicator
            elapsed = time.time() - start_time
            if int(elapsed * 2) != int((elapsed - 0.1) * 2):  # Print every 0.5 seconds
                print(f"‚è≥ Waiting for confirmation #{seq_number}... {elapsed:.1f}s")
            
            time.sleep(0.1)  # Small delay
        
        except Exception as e:
            print(f"‚ùå Error while waiting for confirmation: {e}")
            break
    
    # Timeout reached - analyze what we got
    if received_data:
        partial_response = received_data.decode('utf-8', errors='ignore').strip()
        print(f"‚è∞ Timeout reached with partial data: '{partial_response}'")
        
        # Check if partial response contains sequence number
        if f"#{seq_number}" in partial_response:
            return {
                'success': True, 
                'message': f"‚è∞ Partial confirmation #{seq_number}: '{partial_response}'"
            }
        else:
            return {
                'success': False, 
                'message': f"‚è∞ Timeout - response '{partial_response}' missing sequence #{seq_number}"
            }
    else:
        print(f"‚è∞ TIMEOUT - No response from device for sequence #{seq_number}")
        print(f"üí° Expected device to respond with sequence #{seq_number}")
        return {
            'success': False, 
            'message': f"‚è∞ No confirmation received for sequence #{seq_number} (timeout after {timeout}s)"
        }

def update_response_log(command, response, timestamp, success):
    """Update the response log in the GUI with success indicator"""
    global response_log
    
    # Add success/failure indicator
    status_icon = "‚úÖ" if success else "‚ùå"
    log_entry = f"[{timestamp}] {status_icon} {command} ‚Üí {response}"
    response_log.append(log_entry)
    
    # Update the log display
    log_text.config(state='normal')
    log_text.insert('end', log_entry + '\n')
    log_text.see('end')
    log_text.config(state='disabled')
    
    # Update status with more detailed information
    if success:
        if "SIMULATED" in response:
            status_var.set("üîå Simulation Mode - OK")
            status_label.config(fg="#ff9500")
        else:
            status_var.set("‚úÖ Device Confirmed")
            status_label.config(fg="#00ff88")
    else:
        if "timeout" in response.lower() or "no confirmation" in response.lower():
            status_var.set("‚è∞ Device Not Responding")
            status_label.config(fg="#ff4757")
        elif "connection" in response.lower():
            status_var.set("‚ùå Connection Error")
            status_label.config(fg="#ff4757")
        else:
            status_var.set("‚ö†Ô∏è Communication Issue")
            status_label.config(fg="#ffa502")

def send_command(command):
    """Send command in separate thread to avoid GUI freezing"""
    def send_in_thread():
        send_command_with_confirmation(command)
    
    thread = threading.Thread(target=send_in_thread, daemon=True)
    thread.start()

def test_connection():
    """Enhanced connection test with confirmation check"""
    print(f"\nüîß TESTING BLUETOOTH CONNECTION & DEVICE RESPONSE")
    print("="*60)
    
    if not debug_bluetooth_status():
        return
    
    print("üì° Sending test command and waiting for device confirmation...")
    send_command("TEST")
    
    # Additional connectivity test
    print("\nüîç Testing basic communication...")
    if bt and bt.is_open:
        try:
            # Send a simple ping
            bt.write(b'PING\r\n')
            bt.flush()
            time.sleep(0.5)
            
            if bt.in_waiting > 0:
                response = bt.read(bt.in_waiting).decode('utf-8', errors='ignore').strip()
                print(f"üì® Raw test response: '{response}'")
            else:
                print("üì® No immediate response to PING")
        except Exception as e:
            print(f"‚ùå Test communication error: {e}")

# Enhanced test function for simple confirmation testing
def simple_confirmation_test():
    """Simple test function with sequence numbers"""
    global message_counter
    
    if not USE_BLUETOOTH or not bt:
        print("‚ùå Cannot test - Bluetooth not available")
        return
    
    print(f"\nüß™ SIMPLE CONFIRMATION TEST WITH SEQUENCE NUMBERS")
    print("="*50)
    
    try:
        message_counter += 1
        test_message = f"#{message_counter}:HELLO"
        print(f"üì§ Sending: '{test_message}'")
        
        bt.write((test_message + '\r\n').encode())
        bt.flush()
        
        # Wait for echo/response
        time.sleep(0.5)  # Give device time to respond
        
        if bt.in_waiting > 0:
            response = bt.readline().decode('utf-8', errors='ignore').strip()
            if response:
                if f"#{message_counter}" in response:
                    print(f"‚úÖ DEVICE CONFIRMED WITH SEQUENCE: '{response}'")
                else:
                    print(f"‚ö†Ô∏è Device responded but missing sequence #{message_counter}: '{response}'")
            else:
                print("‚ùå Empty response received")
        else:
            print(f"‚ùå NO RESPONSE from device for sequence #{message_counter}")
            
    except Exception as e:
        print(f"‚ùå Test error: {e}")

class ModernButton:
    def __init__(self, parent, text, command, row, col, bg_color="#4a9eff", hover_color="#357ae8"):
        self.bg_color = bg_color
        self.hover_color = hover_color
        self.pressed_color = "#2563eb"
        self.command = command
        
        self.button = tk.Button(
            parent,
            text=text,
            font=("Segoe UI", 20, "bold"),
            bg=bg_color,
            fg="white",
            relief="flat",
            bd=0,
            width=4,
            height=2,
            cursor="hand2",
            command=lambda: send_command(command)
        )
        
        # Add hover effects
        self.button.bind("<Enter>", self.on_enter)
        self.button.bind("<Leave>", self.on_leave)
        self.button.bind("<Button-1>", self.on_press)
        self.button.bind("<ButtonRelease-1>", self.on_release)
        
        self.button.grid(row=row, column=col, padx=12, pady=12, sticky="nsew")
    
    def on_enter(self, event):
        self.button.config(bg=self.hover_color)
        
    def on_leave(self, event):
        self.button.config(bg=self.bg_color)
        
    def on_press(self, event):
        self.button.config(bg=self.pressed_color)
        
    def on_release(self, event):
        self.button.config(bg=self.hover_color)

# GUI setup
root = tk.Tk()
root.title("ü§ñ Enhanced Robot Controller with Confirmation")
root.geometry("1000x800")
root.configure(bg="#0f0f0f")

# Configure grid weights
root.grid_rowconfigure(2, weight=1)
root.grid_columnconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=1)

# Create fonts
header_font = tkFont.Font(family="Segoe UI", size=24, weight="bold")
status_font = tkFont.Font(family="Consolas", size=11)

# Left panel - Controls
left_panel = tk.Frame(root, bg="#0f0f0f")
left_panel.grid(row=0, column=0, sticky="nsew", padx=(30, 15), pady=30)

# Header
title_label = tk.Label(
    left_panel,
    text="üîß CONFIRMATION CONTROLLER",
    font=header_font,
    fg="#ff6b6b",
    bg="#0f0f0f"
)
title_label.pack(pady=(0, 20))

# Status section
status_frame = tk.Frame(left_panel, bg="#161b22", relief="solid", bd=1)
status_frame.pack(fill="x", pady=(0, 20))

connection_status = "üîó Bluetooth Active" if USE_BLUETOOTH and bt else "üîå Simulation Mode"
status_color = "#00ff88" if USE_BLUETOOTH and bt else "#ff9500"

bluetooth_status_label = tk.Label(
    status_frame,
    text=f"Connection: {connection_status}",
    font=status_font,
    fg=status_color,
    bg="#161b22"
)
bluetooth_status_label.pack(pady=(10, 5))

status_var = tk.StringVar()
status_var.set("üîÑ Ready for commands")
status_label = tk.Label(
    status_frame,
    textvariable=status_var,
    font=status_font,
    fg="#8b949e",
    bg="#161b22"
)
status_label.pack(pady=(0, 10))

# Test buttons frame
test_frame = tk.Frame(left_panel, bg="#0f0f0f")
test_frame.pack(pady=(0, 20))

test_btn = tk.Button(
    test_frame,
    text="üîß Full Test",
    font=("Segoe UI", 11),
    bg="#ff6b6b",
    fg="white",
    relief="flat",
    cursor="hand2",
    command=test_connection
)
test_btn.pack(side="left", padx=(0, 10))

simple_test_btn = tk.Button(
    test_frame,
    text="üß™ Simple Test",
    font=("Segoe UI", 11),
    bg="#9c88ff",
    fg="white",
    relief="flat",
    cursor="hand2",
    command=simple_confirmation_test
)
simple_test_btn.pack(side="left")

# Control section
control_frame = tk.Frame(left_panel, bg="#0f0f0f")
control_frame.pack(expand=True, fill="both")

for i in range(3):
    control_frame.grid_rowconfigure(i, weight=1)
    control_frame.grid_columnconfigure(i, weight=1)

# Control buttons
forward_btn = ModernButton(control_frame, "‚Üë", "FORWARD", 0, 1, "#00ff88", "#00e67a")
left_btn = ModernButton(control_frame, "‚Üê", "LEFT", 1, 0, "#4a9eff", "#357ae8")
stop_btn = ModernButton(control_frame, "‚óæ", "STOP", 1, 1, "#ff4757", "#ff3742")
right_btn = ModernButton(control_frame, "‚Üí", "RIGHT", 1, 2, "#4a9eff", "#357ae8")
backward_btn = ModernButton(control_frame, "‚Üì", "BACKWARD", 2, 1, "#ffa502", "#ff9500")

# Right panel - Debug Log
right_panel = tk.Frame(root, bg="#0f0f0f")
right_panel.grid(row=0, column=1, sticky="nsew", padx=(15, 30), pady=30)

log_header = tk.Label(
    right_panel,
    text="üìã Communication Log with Confirmations",
    font=("Segoe UI", 16, "bold"),
    fg="#ff6b6b",
    bg="#0f0f0f"
)
log_header.pack(pady=(0, 10))

log_frame = tk.Frame(right_panel, bg="#161b22", relief="solid", bd=1)
log_frame.pack(fill="both", expand=True)

log_text = scrolledtext.ScrolledText(
    log_frame,
    bg="#0d1117",
    fg="#8b949e",
    font=("Consolas", 9),
    state='disabled',
    wrap='word',
    height=35
)
log_text.pack(fill="both", expand=True, padx=10, pady=10)

# Clear log button
def clear_log():
    global response_log
    response_log.clear()
    log_text.config(state='normal')
    log_text.delete('1.0', 'end')
    log_text.config(state='disabled')
    status_var.set("üîÑ Ready for commands")
    status_label.config(fg="#8b949e")

clear_btn = tk.Button(
    right_panel,
    text="üóëÔ∏è Clear Log",
    font=("Segoe UI", 10),
    bg="#ff4757",
    fg="white",
    relief="flat",
    cursor="hand2",
    command=clear_log
)
clear_btn.pack(pady=(10, 0))

# Keyboard controls
def on_key_press(event):
    key_commands = {
        'Up': 'FORWARD',
        'Down': 'BACKWARD', 
        'Left': 'LEFT',
        'Right': 'RIGHT',
        'space': 'STOP'
    }
    
    if event.keysym in key_commands:
        send_command(key_commands[event.keysym])

root.bind('<Key>', on_key_press)
root.focus_set()

# Clean exit
def on_closing():
    if USE_BLUETOOTH and bt and bt.is_open:
        bt.close()
        print("üîå Bluetooth connection closed.")
    root.destroy()

root.protocol("WM_DELETE_WINDOW", on_closing)

# Initialize with enhanced logging
initial_msg = f"üîß ENHANCED CONTROLLER INITIALIZED - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
if USE_BLUETOOTH and bt:
    initial_msg += f"\nüîó Connected to {PORT} at {BAUD_RATE} baud"
    initial_msg += f"\nüì° Serial: {bt}"
else:
    initial_msg += "\nüîå Running in simulation mode"

initial_msg += "\n" + "="*50
initial_msg += "\n‚úÖ NEW FEATURES:"
initial_msg += "\n   ‚Ä¢ Message sequence numbers (#1, #2, #3...)"
initial_msg += "\n   ‚Ä¢ Device confirmation tracking with sequence"
initial_msg += "\n   ‚Ä¢ Enhanced response analysis"
initial_msg += "\n   ‚Ä¢ Success/failure indicators"
initial_msg += "\n   ‚Ä¢ Timeout detection"
initial_msg += "\nüí° Commands sent as: #1:FORWARD, #2:LEFT, etc."
initial_msg += "\nüí° Device should echo sequence number back"
initial_msg += "\n" + "="*50

log_text.config(state='normal')
log_text.insert('end', initial_msg + '\n')
log_text.config(state='disabled')

print("üîß ENHANCED ROBOT CONTROLLER WITH CONFIRMATION STARTED")
print("="*60)
print("‚úÖ NEW FEATURES:")
print("   ‚Ä¢ Message sequence numbers (#1, #2, #3...)")
print("   ‚Ä¢ Waits for device confirmation with sequence verification")
print("   ‚Ä¢ Shows SUCCESS/FAILURE status for each numbered command")
print("   ‚Ä¢ Detailed timeout and response analysis")
print("   ‚Ä¢ Terminal shows exact confirmation status with sequence")
print("="*60)
print("üí° Commands are sent with sequence numbers: #1:FORWARD, #2:LEFT, etc.")
print("üí° Make sure your Arduino/device code echoes the sequence number!")
print("   Example Arduino code:")
print("   if(Serial.available()) {")
print("     String cmd = Serial.readString();")
print("     cmd.trim();")
print("     Serial.println(cmd + \"_OK\");  // Echo with sequence: #1:FORWARD_OK")
print("     // OR just echo the sequence:")
print("     // Serial.println(\"#1:OK\");")
print("   }")
print("="*60)

# Run initial connection test
if USE_BLUETOOTH and bt:
    root.after(1000, test_connection)

root.mainloop()
