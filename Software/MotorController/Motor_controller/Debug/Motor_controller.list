
Motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077cc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007994  08007994  00008994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a38  08007a38  00009014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a38  08007a38  00008a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a40  08007a40  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a40  08007a40  00008a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a44  08007a44  00008a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007a48  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000014  08007a5c  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08007a5c  000094e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137bb  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319f  00000000  00000000  0001c7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df5  00000000  00000000  00020bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002579d  00000000  00000000  000219a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178fe  00000000  00000000  00047142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df869  00000000  00000000  0005ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e2a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc0  00000000  00000000  0013e2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00142eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800797c 	.word	0x0800797c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	0800797c 	.word	0x0800797c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <ExecuteCommand>:
extern UART_HandleTypeDef huart2;


// Execute received command
void ExecuteCommand(uint8_t command, uint8_t value)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	71bb      	strb	r3, [r7, #6]

    // Clamp velocity value
    if (value > MAX_VELOCITY) value = MAX_VELOCITY;
    if (value < MIN_VELOCITY) value = MIN_VELOCITY;

    switch (command)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d822      	bhi.n	8000eee <ExecuteCommand+0x5e>
 8000ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb0 <ExecuteCommand+0x20>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ed5 	.word	0x08000ed5
 8000eb4:	08000ee1 	.word	0x08000ee1
 8000eb8:	08000eef 	.word	0x08000eef
 8000ebc:	08000eef 	.word	0x08000eef
 8000ec0:	08000eef 	.word	0x08000eef
 8000ec4:	08000eef 	.word	0x08000eef
 8000ec8:	08000eef 	.word	0x08000eef
 8000ecc:	08000eef 	.word	0x08000eef
 8000ed0:	08000eef 	.word	0x08000eef
    {
        case CMD_FORWARD:
            // All motors forward
        	HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 8000ed4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed8:	4807      	ldr	r0, [pc, #28]	@ (8000ef8 <ExecuteCommand+0x68>)
 8000eda:	f003 fe18 	bl	8004b0e <HAL_GPIO_TogglePin>
//        	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
            break;
 8000ede:	e007      	b.n	8000ef0 <ExecuteCommand+0x60>

        case CMD_BACKWARD:
            // All motors backward
        	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee6:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <ExecuteCommand+0x68>)
 8000ee8:	f003 fdf8 	bl	8004adc <HAL_GPIO_WritePin>
            break;
 8000eec:	e000      	b.n	8000ef0 <ExecuteCommand+0x60>
            //currentVelocity = value;
            return; // Don't update motors, just store velocity

        default:

            return;
 8000eee:	bf00      	nop
    }

}
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020000 	.word	0x40020000

08000efc <SendTelemetryPacket>:


// Send individual telemetry packet
void SendTelemetryPacket(uint8_t dataType, uint16_t value)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	80bb      	strh	r3, [r7, #4]
    uint8_t packet[2];
    packet[0] = dataType;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	733b      	strb	r3, [r7, #12]
    packet[1] = value;  // High byte
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	737b      	strb	r3, [r7, #13]
//	packet[0] = dataType;
//	packet[1] = (value >> 8) & 0xFF;  // High byte
//	packet[2] = value & 0xFF;         // Low byte
//	packet[3] = 0xFF;                 // End marker

    HAL_UART_Transmit(&huart3, packet, 2, 100);
 8000f16:	f107 010c 	add.w	r1, r7, #12
 8000f1a:	2364      	movs	r3, #100	@ 0x64
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <SendTelemetryPacket+0x30>)
 8000f20:	f005 fce2 	bl	80068e8 <HAL_UART_Transmit>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000035c 	.word	0x2000035c

08000f30 <SendTelemetryData>:


void SendTelemetryData(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    // Send battery voltage
    SendTelemetryPacket(TELEM_BATTERY_VOLT, 69);
 8000f34:	2145      	movs	r1, #69	@ 0x45
 8000f36:	20a2      	movs	r0, #162	@ 0xa2
 8000f38:	f7ff ffe0 	bl	8000efc <SendTelemetryPacket>
//    HAL_Delay(2);
//
//    // Send motor status
//    SendTelemetryPacket(TELEM_MOTOR_STATUS, telemetryData.motorStatus);
//    HAL_Delay(2);
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <int_to_str>:
#include "stdio.h"  // only for strlen
#include "stdlib.h"

// Convert integer to string
void int_to_str(int num, char *str)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	@ 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    char temp[12];
    int i = 0, j = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
    int is_negative = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

    if (num < 0)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da04      	bge.n	8000f66 <int_to_str+0x26>
    {
        is_negative = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
        num = -num;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	425b      	negs	r3, r3
 8000f64:	607b      	str	r3, [r7, #4]
    }

    do {
        temp[i++] = (num % 10) + '0';
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <int_to_str+0xbc>)
 8000f6a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f6e:	1099      	asrs	r1, r3, #2
 8000f70:	17d3      	asrs	r3, r2, #31
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	460b      	mov	r3, r1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	1ad1      	subs	r1, r2, r3
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	1c59      	adds	r1, r3, #1
 8000f84:	61f9      	str	r1, [r7, #28]
 8000f86:	3230      	adds	r2, #48	@ 0x30
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	3320      	adds	r3, #32
 8000f8c:	443b      	add	r3, r7
 8000f8e:	f803 2c18 	strb.w	r2, [r3, #-24]
        num /= 10;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <int_to_str+0xbc>)
 8000f96:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9a:	1092      	asrs	r2, r2, #2
 8000f9c:	17db      	asrs	r3, r3, #31
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	607b      	str	r3, [r7, #4]
    } while (num != 0);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1de      	bne.n	8000f66 <int_to_str+0x26>

    if (is_negative)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d017      	beq.n	8000fde <int_to_str+0x9e>
        temp[i++] = '-';
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	61fa      	str	r2, [r7, #28]
 8000fb4:	3320      	adds	r3, #32
 8000fb6:	443b      	add	r3, r7
 8000fb8:	222d      	movs	r2, #45	@ 0x2d
 8000fba:	f803 2c18 	strb.w	r2, [r3, #-24]

    // Reverse string
    while (i > 0)
 8000fbe:	e00e      	b.n	8000fde <int_to_str+0x9e>
        str[j++] = temp[--i];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	61ba      	str	r2, [r7, #24]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	f107 0108 	add.w	r1, r7, #8
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	440a      	add	r2, r1
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	701a      	strb	r2, [r3, #0]
    while (i > 0)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dced      	bgt.n	8000fc0 <int_to_str+0x80>

    str[j] = '\0';
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	66666667 	.word	0x66666667

08001000 <UART_Init>:
    str[len] = '\0';
}

// UART Initialization
void UART_Init(UART_HandleTypeDef *huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    HAL_UART_Init(huart);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f005 fc1d 	bl	8006848 <HAL_UART_Init>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <UART_Transmit_Int>:
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}

// Transmit int with header
void UART_Transmit_Int(UART_HandleTypeDef *huart, const char *header, int number)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b096      	sub	sp, #88	@ 0x58
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
    char int_str[12];
    char buffer[60];

    int_to_str(number, int_str);
 8001024:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff88 	bl	8000f40 <int_to_str>

    strcpy(buffer, header);
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fc98 	bl	800796c <strcpy>
    strcat(buffer, ":");
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f8e1 	bl	8000208 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4413      	add	r3, r2
 8001050:	4916      	ldr	r1, [pc, #88]	@ (80010ac <UART_Transmit_Int+0x94>)
 8001052:	461a      	mov	r2, r3
 8001054:	460b      	mov	r3, r1
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	8013      	strh	r3, [r2, #0]
    strcat(buffer, int_str);
 800105a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f006 fc4d 	bl	8007904 <strcat>
    strcat(buffer, "\r\n");
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f8ca 	bl	8000208 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4413      	add	r3, r2
 800107e:	4a0c      	ldr	r2, [pc, #48]	@ (80010b0 <UART_Transmit_Int+0x98>)
 8001080:	8811      	ldrh	r1, [r2, #0]
 8001082:	7892      	ldrb	r2, [r2, #2]
 8001084:	8019      	strh	r1, [r3, #0]
 8001086:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f8bb 	bl	8000208 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	b29a      	uxth	r2, r3
 8001096:	f107 0110 	add.w	r1, r7, #16
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f005 fc22 	bl	80068e8 <HAL_UART_Transmit>
}
 80010a4:	bf00      	nop
 80010a6:	3758      	adds	r7, #88	@ 0x58
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	08007994 	.word	0x08007994
 80010b0:	08007998 	.word	0x08007998

080010b4 <clampf>:

const float MAXINTCLAMP = 1;


// Clamp float
float clampf(float val, float min, float max) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80010be:	edc7 0a02 	vstr	s1, [r7, #8]
 80010c2:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val < min) return min;
 80010c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d501      	bpl.n	80010dc <clampf+0x28>
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	e00b      	b.n	80010f4 <clampf+0x40>
    if (val > max) return max;
 80010dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	dd01      	ble.n	80010f2 <clampf+0x3e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	e000      	b.n	80010f4 <clampf+0x40>
    return val;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <Controller_Init>:
#include "controller.h"
#include "config.h"
#include "kinematics.h"
#include "motors.h"

void Controller_Init(Controller *controller) {
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->x_error = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	controller->y_error = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
	controller->w_error = 0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
	controller->previous_x_error = 0;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
	controller->previous_y_error = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
	controller->previous_w_error = 0;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	615a      	str	r2, [r3, #20]

	controller->x_velocity = 0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
	controller->y_velocity = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
	controller->omega = 0;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	621a      	str	r2, [r3, #32]

	controller->controllers_enabled = 1;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <Controller_ResetControllers>:


void Controller_ResetControllers(Controller *controller) {
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	controller->x_error = 0;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
	controller->y_error = 0;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
	controller->w_error = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
	controller->previous_x_error = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
	controller->previous_y_error = 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
	controller->previous_w_error = 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <UpdateControllers>:


void UpdateControllers(Controller *controller, float x_velocity, float y_velocity,  float omega, float steering_adjustment) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b090      	sub	sp, #64	@ 0x40
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6178      	str	r0, [r7, #20]
 80011b8:	ed87 0a04 	vstr	s0, [r7, #16]
 80011bc:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c0:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c4:	edc7 1a01 	vstr	s3, [r7, #4]
    float forward_output, strafe_output, rotational_output;
//    float left_speed, right_speed;
//
    controller->x_velocity = x_velocity;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	619a      	str	r2, [r3, #24]
    controller->y_velocity = y_velocity;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	61da      	str	r2, [r3, #28]
    controller->omega = omega;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	621a      	str	r2, [r3, #32]
//
    float x_increment = x_velocity * CONTROLLER_LOOP_INTERVAL;
 80011da:	4b65      	ldr	r3, [pc, #404]	@ (8001370 <UpdateControllers+0x1c0>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    controller->x_error += x_increment - current_robot_velocity.vx * CONTROLLER_LOOP_INTERVAL;
 80011ec:	4b61      	ldr	r3, [pc, #388]	@ (8001374 <UpdateControllers+0x1c4>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001370 <UpdateControllers+0x1c0>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	edc3 7a00 	vstr	s15, [r3]
    float x_diff = controller->x_error - controller->previous_x_error;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001224:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    controller->previous_x_error = controller->x_error;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	60da      	str	r2, [r3, #12]
    forward_output = FWD_KP * controller->x_error + FWD_KD * x_diff;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	ed93 7a00 	vldr	s14, [r3]
 8001236:	4b50      	ldr	r3, [pc, #320]	@ (8001378 <UpdateControllers+0x1c8>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001240:	4b4e      	ldr	r3, [pc, #312]	@ (800137c <UpdateControllers+0x1cc>)
 8001242:	edd3 6a00 	vldr	s13, [r3]
 8001246:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800124a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001252:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    float y_increment = y_velocity * CONTROLLER_LOOP_INTERVAL;
 8001256:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <UpdateControllers+0x1c0>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	controller->y_error += y_increment - current_robot_velocity.vy * CONTROLLER_LOOP_INTERVAL;
 8001268:	4b42      	ldr	r3, [pc, #264]	@ (8001374 <UpdateControllers+0x1c4>)
 800126a:	ed93 7a01 	vldr	s14, [r3, #4]
 800126e:	4b40      	ldr	r3, [pc, #256]	@ (8001370 <UpdateControllers+0x1c0>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800127c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	edd3 7a01 	vldr	s15, [r3, #4]
 8001286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	edc3 7a01 	vstr	s15, [r3, #4]
	float y_diff = controller->y_error - controller->previous_y_error;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	ed93 7a01 	vldr	s14, [r3, #4]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	edd3 7a04 	vldr	s15, [r3, #16]
 800129c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	controller->previous_y_error = controller->y_error;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	611a      	str	r2, [r3, #16]
	strafe_output = STRAFE_KP * controller->y_error + STRAFE_KD * y_diff;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80012b2:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <UpdateControllers+0x1d0>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012bc:	4b31      	ldr	r3, [pc, #196]	@ (8001384 <UpdateControllers+0x1d4>)
 80012be:	edd3 6a00 	vldr	s13, [r3]
 80012c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        //x_output = K
	float w_increment = omega * CONTROLLER_LOOP_INTERVAL;
 80012d2:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <UpdateControllers+0x1c0>)
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	controller->w_error += w_increment - current_robot_velocity.omega * CONTROLLER_LOOP_INTERVAL;
 80012e4:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <UpdateControllers+0x1c4>)
 80012e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80012ea:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <UpdateControllers+0x1c0>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80012f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	edc3 7a02 	vstr	s15, [r3, #8]
	float w_diff = controller->w_error - controller->previous_w_error;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	edd3 7a05 	vldr	s15, [r3, #20]
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	edc7 7a08 	vstr	s15, [r7, #32]
	controller->previous_w_error = controller->w_error;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	615a      	str	r2, [r3, #20]
	rotational_output = ROT_KP * controller->omega + ROT_KD * w_diff;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	ed93 7a08 	vldr	s14, [r3, #32]
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <UpdateControllers+0x1d8>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <UpdateControllers+0x1dc>)
 800133a:	edd3 6a00 	vldr	s13, [r3]
 800133e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	edc7 7a07 	vstr	s15, [r7, #28]

	if (controller->controllers_enabled) {
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <UpdateControllers+0x1b8>
		set_robot_velocity(forward_output, strafe_output, rotational_output);
 8001358:	ed97 1a07 	vldr	s2, [r7, #28]
 800135c:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001360:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001364:	f000 fa50 	bl	8001808 <set_robot_velocity>
	}
}
 8001368:	bf00      	nop
 800136a:	3740      	adds	r7, #64	@ 0x40
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	080079f0 	.word	0x080079f0
 8001374:	20000030 	.word	0x20000030
 8001378:	080079fc 	.word	0x080079fc
 800137c:	08007a00 	.word	0x08007a00
 8001380:	08007a04 	.word	0x08007a04
 8001384:	08007a08 	.word	0x08007a08
 8001388:	08007a0c 	.word	0x08007a0c
 800138c:	08007a10 	.word	0x08007a10

08001390 <Controller_Stop>:


void Controller_Stop(){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	resetMotors();
 8001394:	f001 f9f8 	bl	8002788 <resetMotors>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <Controller_EnableControllers>:

/**
 * Enable motor controllers.
 */
void Controller_EnableControllers(Controller *controller) {
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <Controller_DisableControllers>:

/**
 * Disable motor controllers.
 */
void Controller_DisableControllers(Controller *controller) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <getForwardLeftEncoderCounts>:
float m_x_change = 0;
float m_rot_change = 0;



int16_t getForwardLeftEncoderCounts() {
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 80013d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	b21b      	sxth	r3, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <getForwardRightEncoderCounts>:

int16_t getForwardRightEncoderCounts() {
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	return (int16_t) TIM3->CNT;
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <getForwardRightEncoderCounts+0x14>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	b21b      	sxth	r3, r3
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40000400 	.word	0x40000400

08001404 <getRearLeftEncoderCounts>:

int16_t getRearLeftEncoderCounts() {
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	return (int16_t) TIM4->CNT;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <getRearLeftEncoderCounts+0x14>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140c:	b21b      	sxth	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40000800 	.word	0x40000800

0800141c <getRearRightEncoderCounts>:

int16_t getRearRightEncoderCounts() {
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	return (int16_t) TIM5->CNT;
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <getRearRightEncoderCounts+0x14>)
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	b21b      	sxth	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40000c00 	.word	0x40000c00

08001434 <resetEncoders>:

void resetEncoders() {
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 8001438:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = (int16_t) 0;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <resetEncoders+0x68>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CNT = (int16_t) 0;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <resetEncoders+0x6c>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->CNT = (int16_t) 0;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <resetEncoders+0x70>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24

	m_robot_distance = 0;
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <resetEncoders+0x74>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <resetEncoders+0x78>)
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

	ForwardLeft_delta = 0;
 8001462:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <resetEncoders+0x7c>)
 8001464:	2200      	movs	r2, #0
 8001466:	801a      	strh	r2, [r3, #0]
	ForwardRight_delta = 0;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <resetEncoders+0x80>)
 800146a:	2200      	movs	r2, #0
 800146c:	801a      	strh	r2, [r3, #0]
	RearLeft_delta = 0;
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <resetEncoders+0x84>)
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]
	RearRight_delta = 0;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <resetEncoders+0x88>)
 8001476:	2200      	movs	r2, #0
 8001478:	801a      	strh	r2, [r3, #0]

	previous_ForwardLeft_count = 0;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <resetEncoders+0x8c>)
 800147c:	2200      	movs	r2, #0
 800147e:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = 0;
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <resetEncoders+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = 0;
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <resetEncoders+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = 0;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <resetEncoders+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	801a      	strh	r2, [r3, #0]

}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40000400 	.word	0x40000400
 80014a0:	40000800 	.word	0x40000800
 80014a4:	40000c00 	.word	0x40000c00
 80014a8:	2000005c 	.word	0x2000005c
 80014ac:	20000060 	.word	0x20000060
 80014b0:	20000064 	.word	0x20000064
 80014b4:	20000066 	.word	0x20000066
 80014b8:	20000068 	.word	0x20000068
 80014bc:	2000006a 	.word	0x2000006a
 80014c0:	2000006c 	.word	0x2000006c
 80014c4:	2000006e 	.word	0x2000006e
 80014c8:	20000070 	.word	0x20000070
 80014cc:	20000072 	.word	0x20000072

080014d0 <update_Encoder_Data>:
	TIM4->CNT = (int16_t) 0;
	TIM5->CNT = (int16_t) 0;
}


void update_Encoder_Data(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
	int16_t ForwardLeft_count= getForwardLeftEncoderCounts();
 80014d6:	f7ff ff7d 	bl	80013d4 <getForwardLeftEncoderCounts>
 80014da:	4603      	mov	r3, r0
 80014dc:	82fb      	strh	r3, [r7, #22]
	int16_t ForwardRight_count = getForwardRightEncoderCounts();
 80014de:	f7ff ff85 	bl	80013ec <getForwardRightEncoderCounts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	82bb      	strh	r3, [r7, #20]
	int16_t RearLeft_count = getRearLeftEncoderCounts();
 80014e6:	f7ff ff8d 	bl	8001404 <getRearLeftEncoderCounts>
 80014ea:	4603      	mov	r3, r0
 80014ec:	827b      	strh	r3, [r7, #18]
	int16_t RearRight_count = getRearRightEncoderCounts();
 80014ee:	f7ff ff95 	bl	800141c <getRearRightEncoderCounts>
 80014f2:	4603      	mov	r3, r0
 80014f4:	823b      	strh	r3, [r7, #16]


	ForwardLeft_delta = ForwardLeft_count - previous_ForwardLeft_count;
 80014f6:	8afa      	ldrh	r2, [r7, #22]
 80014f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001624 <update_Encoder_Data+0x154>)
 80014fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	b29b      	uxth	r3, r3
 8001504:	b21a      	sxth	r2, r3
 8001506:	4b48      	ldr	r3, [pc, #288]	@ (8001628 <update_Encoder_Data+0x158>)
 8001508:	801a      	strh	r2, [r3, #0]
	previous_ForwardLeft_count = ForwardLeft_count;
 800150a:	4a46      	ldr	r2, [pc, #280]	@ (8001624 <update_Encoder_Data+0x154>)
 800150c:	8afb      	ldrh	r3, [r7, #22]
 800150e:	8013      	strh	r3, [r2, #0]

	ForwardRight_delta = ForwardRight_count - previous_ForwardRight_count;
 8001510:	8aba      	ldrh	r2, [r7, #20]
 8001512:	4b46      	ldr	r3, [pc, #280]	@ (800162c <update_Encoder_Data+0x15c>)
 8001514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001518:	b29b      	uxth	r3, r3
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b29b      	uxth	r3, r3
 800151e:	b21a      	sxth	r2, r3
 8001520:	4b43      	ldr	r3, [pc, #268]	@ (8001630 <update_Encoder_Data+0x160>)
 8001522:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = ForwardRight_count;
 8001524:	4a41      	ldr	r2, [pc, #260]	@ (800162c <update_Encoder_Data+0x15c>)
 8001526:	8abb      	ldrh	r3, [r7, #20]
 8001528:	8013      	strh	r3, [r2, #0]

	RearLeft_delta = RearLeft_count - previous_RearLeft_count;
 800152a:	8a7a      	ldrh	r2, [r7, #18]
 800152c:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <update_Encoder_Data+0x164>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	b29b      	uxth	r3, r3
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	b29b      	uxth	r3, r3
 8001538:	b21a      	sxth	r2, r3
 800153a:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <update_Encoder_Data+0x168>)
 800153c:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = RearLeft_count;
 800153e:	4a3d      	ldr	r2, [pc, #244]	@ (8001634 <update_Encoder_Data+0x164>)
 8001540:	8a7b      	ldrh	r3, [r7, #18]
 8001542:	8013      	strh	r3, [r2, #0]


	RearRight_delta = RearRight_count - previous_RearRight_count;
 8001544:	8a3a      	ldrh	r2, [r7, #16]
 8001546:	4b3d      	ldr	r3, [pc, #244]	@ (800163c <update_Encoder_Data+0x16c>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	b29b      	uxth	r3, r3
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <update_Encoder_Data+0x170>)
 8001556:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = RearRight_count;
 8001558:	4a38      	ldr	r2, [pc, #224]	@ (800163c <update_Encoder_Data+0x16c>)
 800155a:	8a3b      	ldrh	r3, [r7, #16]
 800155c:	8013      	strh	r3, [r2, #0]

	float ForwardLeft = ForwardLeft_delta * RAD_PER_COUNT_FORWARD_LEFT;
 800155e:	4b32      	ldr	r3, [pc, #200]	@ (8001628 <update_Encoder_Data+0x158>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001644 <update_Encoder_Data+0x174>
 8001570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001574:	edc7 7a03 	vstr	s15, [r7, #12]
	float ForwardRight = ForwardRight_delta * RAD_PER_COUNT_FORWARD_RIGHT;
 8001578:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <update_Encoder_Data+0x160>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001586:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001644 <update_Encoder_Data+0x174>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	edc7 7a02 	vstr	s15, [r7, #8]
	float RearLeft = RearLeft_delta * RAD_PER_COUNT_REAR_LEFT;
 8001592:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <update_Encoder_Data+0x168>)
 8001594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001644 <update_Encoder_Data+0x174>
 80015a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a8:	edc7 7a01 	vstr	s15, [r7, #4]
	float RearRight = RearRight_delta * RAD_PER_COUNT_REAR_RIGHT;
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <update_Encoder_Data+0x170>)
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ba:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001644 <update_Encoder_Data+0x174>
 80015be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c2:	edc7 7a00 	vstr	s15, [r7]
//	current_wheel_W.front_left = ForwardLeft * LOOP_FREQUENCY;
//	current_wheel_W.rear_left = RearLeft * LOOP_FREQUENCY;
//	current_wheel_W.front_right = ForwardRight * LOOP_FREQUENCY;
//	current_wheel_W.rear_right = RearRight * LOOP_FREQUENCY;

	current_wheel_W.front_left = ForwardLeft * LOOP_FREQUENCY;
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <update_Encoder_Data+0x178>)
 80015c8:	ed93 7a00 	vldr	s14, [r3]
 80015cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <update_Encoder_Data+0x17c>)
 80015d6:	edc3 7a00 	vstr	s15, [r3]
	current_wheel_W.rear_left = RearLeft * LOOP_FREQUENCY;
 80015da:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <update_Encoder_Data+0x178>)
 80015dc:	ed93 7a00 	vldr	s14, [r3]
 80015e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <update_Encoder_Data+0x17c>)
 80015ea:	edc3 7a01 	vstr	s15, [r3, #4]
	current_wheel_W.front_right = ForwardRight * LOOP_FREQUENCY;
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <update_Encoder_Data+0x178>)
 80015f0:	ed93 7a00 	vldr	s14, [r3]
 80015f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <update_Encoder_Data+0x17c>)
 80015fe:	edc3 7a03 	vstr	s15, [r3, #12]
	current_wheel_W.rear_right = RearRight * LOOP_FREQUENCY;
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <update_Encoder_Data+0x178>)
 8001604:	ed93 7a00 	vldr	s14, [r3]
 8001608:	edd7 7a00 	vldr	s15, [r7]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <update_Encoder_Data+0x17c>)
 8001612:	edc3 7a02 	vstr	s15, [r3, #8]

	calculate_robot_velocity();
 8001616:	f000 f92d 	bl	8001874 <calculate_robot_velocity>
	//UART_Transmit_Float(&huart2, ">z", current_robot_velocity.omega, 3);

}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000006c 	.word	0x2000006c
 8001628:	20000064 	.word	0x20000064
 800162c:	2000006e 	.word	0x2000006e
 8001630:	20000066 	.word	0x20000066
 8001634:	20000070 	.word	0x20000070
 8001638:	20000068 	.word	0x20000068
 800163c:	20000072 	.word	0x20000072
 8001640:	2000006a 	.word	0x2000006a
 8001644:	3a723872 	.word	0x3a723872
 8001648:	080079e8 	.word	0x080079e8
 800164c:	2000003c 	.word	0x2000003c

08001650 <mecanum_inverse_kinematics>:
 * ω1 = (1/R) * (vx - vy - (L+W)*ω)  // Front Left
 * ω2 = (1/R) * (vx + vy - (L+W)*ω)  // Rear Left
 * ω3 = (1/R) * (vx - vy + (L+W)*ω)  // Rear Right
 * ω4 = (1/R) * (vx + vy + (L+W)*ω)  // Front Right
 */
void mecanum_inverse_kinematics(RobotVelocity robot_vel, WheelVelocities* wheel_vel) {
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	eef0 6a40 	vmov.f32	s13, s0
 800165a:	eeb0 7a60 	vmov.f32	s14, s1
 800165e:	eef0 7a41 	vmov.f32	s15, s2
 8001662:	6038      	str	r0, [r7, #0]
 8001664:	edc7 6a01 	vstr	s13, [r7, #4]
 8001668:	ed87 7a02 	vstr	s14, [r7, #8]
 800166c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate wheel angular velocities (rad/s)

	wheel_vel->front_left  = inv_radius * (robot_vel.vx - robot_vel.vy - L_plus_W * robot_vel.omega);
 8001670:	ed97 7a01 	vldr	s14, [r7, #4]
 8001674:	edd7 7a02 	vldr	s15, [r7, #8]
 8001678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800167c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <mecanum_inverse_kinematics+0xe4>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800168e:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <mecanum_inverse_kinematics+0xe8>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	edc3 7a00 	vstr	s15, [r3]
	wheel_vel->front_right = inv_radius * (robot_vel.vx + robot_vel.vy + L_plus_W * robot_vel.omega);
 800169e:	ed97 7a01 	vldr	s14, [r7, #4]
 80016a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016aa:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ae:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <mecanum_inverse_kinematics+0xe4>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <mecanum_inverse_kinematics+0xe8>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	edc3 7a03 	vstr	s15, [r3, #12]
	wheel_vel->rear_left   = inv_radius * (robot_vel.vx + robot_vel.vy - L_plus_W * robot_vel.omega);
 80016cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80016d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d8:	edd7 6a03 	vldr	s13, [r7, #12]
 80016dc:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <mecanum_inverse_kinematics+0xe4>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <mecanum_inverse_kinematics+0xe8>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	edc3 7a01 	vstr	s15, [r3, #4]
	wheel_vel->rear_right  = inv_radius * (robot_vel.vx - robot_vel.vy + L_plus_W * robot_vel.omega);
 80016fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80016fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001706:	edd7 6a03 	vldr	s13, [r7, #12]
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <mecanum_inverse_kinematics+0xe4>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <mecanum_inverse_kinematics+0xe8>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <mecanum_forward_kinematics>:
//
//    robot_vel->omega = R_over_4 / L_plus_W * (-wheel_vel.front_left - wheel_vel.rear_left +
//                                              wheel_vel.rear_right + wheel_vel.front_right);
//}

void mecanum_forward_kinematics(WheelVelocities wheel_vel, volatile RobotVelocity* robot_vel) {
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	eeb0 6a40 	vmov.f32	s12, s0
 8001746:	eef0 6a60 	vmov.f32	s13, s1
 800174a:	eeb0 7a41 	vmov.f32	s14, s2
 800174e:	eef0 7a61 	vmov.f32	s15, s3
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	ed87 6a02 	vstr	s12, [r7, #8]
 8001758:	edc7 6a03 	vstr	s13, [r7, #12]
 800175c:	ed87 7a04 	vstr	s14, [r7, #16]
 8001760:	edc7 7a05 	vstr	s15, [r7, #20]
    float R_over_4 = WHEEL_RADIUS / 4.0f;
 8001764:	4b26      	ldr	r3, [pc, #152]	@ (8001800 <mecanum_forward_kinematics+0xc4>)
 8001766:	61fb      	str	r3, [r7, #28]
    float L_plus_W = HALF_LENGTH + HALF_WIDTH;
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <mecanum_forward_kinematics+0xc8>)
 800176a:	61bb      	str	r3, [r7, #24]

    // Calculate robot velocities
    robot_vel->vx = R_over_4 * (wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left + wheel_vel.rear_right);
 800176c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001770:	edd7 7a05 	vldr	s15, [r7, #20]
 8001774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001778:	edd7 7a03 	vldr	s15, [r7, #12]
 800177c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001780:	edd7 7a04 	vldr	s15, [r7, #16]
 8001784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001788:	edd7 7a07 	vldr	s15, [r7, #28]
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	edc3 7a00 	vstr	s15, [r3]

    robot_vel->vy = R_over_4 * (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right);
 8001796:	ed97 7a05 	vldr	s14, [r7, #20]
 800179a:	edd7 7a02 	vldr	s15, [r7, #8]
 800179e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edc3 7a01 	vstr	s15, [r3, #4]

    robot_vel->omega = R_over_4 / L_plus_W * (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right);
 80017c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80017c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017cc:	edd7 6a05 	vldr	s13, [r7, #20]
 80017d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80017f2:	bf00      	nop
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	3c1fbe77 	.word	0x3c1fbe77
 8001804:	3ea8f5c2 	.word	0x3ea8f5c2

08001808 <set_robot_velocity>:



void set_robot_velocity(float vx, float vy, float omega) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001812:	edc7 0a02 	vstr	s1, [r7, #8]
 8001816:	ed87 1a01 	vstr	s2, [r7, #4]
    RobotVelocity desired_vel = {vx, vy, omega};
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    WheelVelocities wheel_targets;

    // Convert robot velocity to wheel velocities
    mecanum_inverse_kinematics(desired_vel, &wheel_targets);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800182e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001832:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001836:	4618      	mov	r0, r3
 8001838:	eeb0 0a66 	vmov.f32	s0, s13
 800183c:	eef0 0a47 	vmov.f32	s1, s14
 8001840:	eeb0 1a67 	vmov.f32	s2, s15
 8001844:	f7ff ff04 	bl	8001650 <mecanum_inverse_kinematics>

    // Set target velocities for the motor controller
    setTargetVelocities(wheel_targets.front_left,  // m1
 8001848:	edd7 7a05 	vldr	s15, [r7, #20]
 800184c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001850:	edd7 6a07 	vldr	s13, [r7, #28]
 8001854:	ed97 6a08 	vldr	s12, [r7, #32]
 8001858:	eef0 1a46 	vmov.f32	s3, s12
 800185c:	eeb0 1a66 	vmov.f32	s2, s13
 8001860:	eef0 0a47 	vmov.f32	s1, s14
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	f001 faf4 	bl	8002e54 <setTargetVelocities>
                       wheel_targets.rear_left,    // m2
                       wheel_targets.rear_right,   // m3
                       wheel_targets.front_right); // m4
}
 800186c:	bf00      	nop
 800186e:	3730      	adds	r7, #48	@ 0x30
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <calculate_robot_velocity>:

void calculate_robot_velocity(){
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	mecanum_forward_kinematics(current_wheel_W, &current_robot_velocity);
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <calculate_robot_velocity+0x30>)
 800187a:	ed93 6a00 	vldr	s12, [r3]
 800187e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001882:	ed93 7a02 	vldr	s14, [r3, #8]
 8001886:	edd3 7a03 	vldr	s15, [r3, #12]
 800188a:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <calculate_robot_velocity+0x34>)
 800188c:	eeb0 0a46 	vmov.f32	s0, s12
 8001890:	eef0 0a66 	vmov.f32	s1, s13
 8001894:	eeb0 1a47 	vmov.f32	s2, s14
 8001898:	eef0 1a67 	vmov.f32	s3, s15
 800189c:	f7ff ff4e 	bl	800173c <mecanum_forward_kinematics>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000003c 	.word	0x2000003c
 80018a8:	20000030 	.word	0x20000030

080018ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b2:	f001 ffe9 	bl	8003888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b6:	f000 f8b9 	bl	8001a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ba:	f000 fc2f 	bl	800211c <MX_GPIO_Init>
  MX_DMA_Init();
 80018be:	f000 fc0d 	bl	80020dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018c2:	f000 fbb7 	bl	8002034 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80018c6:	f000 f923 	bl	8001b10 <MX_ADC1_Init>
  MX_TIM1_Init();
 80018ca:	f000 f973 	bl	8001bb4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018ce:	f000 fa19 	bl	8001d04 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018d2:	f000 fa6b 	bl	8001dac <MX_TIM3_Init>
  MX_TIM4_Init();
 80018d6:	f000 fabd 	bl	8001e54 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018da:	f000 fb0f 	bl	8001efc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80018de:	f000 fbd3 	bl	8002088 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80018e2:	f000 fb83 	bl	8001fec <MX_TIM14_Init>
  MX_TIM13_Init();
 80018e6:	f000 fb5d 	bl	8001fa4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018ea:	2100      	movs	r1, #0
 80018ec:	483d      	ldr	r0, [pc, #244]	@ (80019e4 <main+0x138>)
 80018ee:	f004 f871 	bl	80059d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018f2:	2104      	movs	r1, #4
 80018f4:	483b      	ldr	r0, [pc, #236]	@ (80019e4 <main+0x138>)
 80018f6:	f004 f86d 	bl	80059d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018fa:	2108      	movs	r1, #8
 80018fc:	4839      	ldr	r0, [pc, #228]	@ (80019e4 <main+0x138>)
 80018fe:	f004 f869 	bl	80059d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001902:	210c      	movs	r1, #12
 8001904:	4837      	ldr	r0, [pc, #220]	@ (80019e4 <main+0x138>)
 8001906:	f004 f865 	bl	80059d4 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800190a:	213c      	movs	r1, #60	@ 0x3c
 800190c:	4836      	ldr	r0, [pc, #216]	@ (80019e8 <main+0x13c>)
 800190e:	f004 f9cf 	bl	8005cb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001912:	213c      	movs	r1, #60	@ 0x3c
 8001914:	4835      	ldr	r0, [pc, #212]	@ (80019ec <main+0x140>)
 8001916:	f004 f9cb 	bl	8005cb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800191a:	213c      	movs	r1, #60	@ 0x3c
 800191c:	4834      	ldr	r0, [pc, #208]	@ (80019f0 <main+0x144>)
 800191e:	f004 f9c7 	bl	8005cb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001922:	213c      	movs	r1, #60	@ 0x3c
 8001924:	4833      	ldr	r0, [pc, #204]	@ (80019f4 <main+0x148>)
 8001926:	f004 f9c3 	bl	8005cb0 <HAL_TIM_Encoder_Start>

//  // Initialize kinematics system
//  init_kinematics();

  // Reset encoders
  resetEncoders();
 800192a:	f7ff fd83 	bl	8001434 <resetEncoders>

  // Init BLuetooth Debug
  UART_Init(&huart2);
 800192e:	4832      	ldr	r0, [pc, #200]	@ (80019f8 <main+0x14c>)
 8001930:	f7ff fb66 	bl	8001000 <UART_Init>

  // Start UART receive interrupt
  HAL_UART_Receive_IT(&huart3, &rxBuffer[rxIndex], 1);
 8001934:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <main+0x150>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <main+0x154>)
 800193c:	4413      	add	r3, r2
 800193e:	2201      	movs	r2, #1
 8001940:	4619      	mov	r1, r3
 8001942:	4830      	ldr	r0, [pc, #192]	@ (8001a04 <main+0x158>)
 8001944:	f005 f85b 	bl	80069fe <HAL_UART_Receive_IT>

  // Velocity timer
  HAL_TIM_Base_Start_IT(&htim14);
 8001948:	482f      	ldr	r0, [pc, #188]	@ (8001a08 <main+0x15c>)
 800194a:	f003 ff83 	bl	8005854 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 800194e:	482f      	ldr	r0, [pc, #188]	@ (8001a0c <main+0x160>)
 8001950:	f003 ff80 	bl	8005854 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800195a:	482d      	ldr	r0, [pc, #180]	@ (8001a10 <main+0x164>)
 800195c:	f003 f8be 	bl	8004adc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001960:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001964:	f002 f802 	bl	800396c <HAL_Delay>
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800196e:	4828      	ldr	r0, [pc, #160]	@ (8001a10 <main+0x164>)
 8001970:	f003 f8b4 	bl	8004adc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001974:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001978:	f001 fff8 	bl	800396c <HAL_Delay>

  Controller_Init(&controller);
 800197c:	4825      	ldr	r0, [pc, #148]	@ (8001a14 <main+0x168>)
 800197e:	f7ff fbc2 	bl	8001106 <Controller_Init>
  setTargetVelocities(0, 0, 0, 0);
 8001982:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8001a18 <main+0x16c>
 8001986:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8001a18 <main+0x16c>
 800198a:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8001a18 <main+0x16c>
 800198e:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001a18 <main+0x16c>
 8001992:	f001 fa5f 	bl	8002e54 <setTargetVelocities>
  Profile_Reset(&x_profile);
 8001996:	4821      	ldr	r0, [pc, #132]	@ (8001a1c <main+0x170>)
 8001998:	f001 fa7c 	bl	8002e94 <Profile_Reset>
  Profile_Reset(&y_profile);
 800199c:	4820      	ldr	r0, [pc, #128]	@ (8001a20 <main+0x174>)
 800199e:	f001 fa79 	bl	8002e94 <Profile_Reset>
  Profile_Reset(&W_profile);
 80019a2:	4820      	ldr	r0, [pc, #128]	@ (8001a24 <main+0x178>)
 80019a4:	f001 fa76 	bl	8002e94 <Profile_Reset>

  Motion_Init(&motion, &controller, &x_profile, &y_profile, &W_profile);
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <main+0x178>)
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <main+0x174>)
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <main+0x170>)
 80019b0:	4918      	ldr	r1, [pc, #96]	@ (8001a14 <main+0x168>)
 80019b2:	481d      	ldr	r0, [pc, #116]	@ (8001a28 <main+0x17c>)
 80019b4:	f000 fcec 	bl	8002390 <Motion_Init>
  Controller_ResetControllers(&controller);
 80019b8:	4816      	ldr	r0, [pc, #88]	@ (8001a14 <main+0x168>)
 80019ba:	f7ff fbd6 	bl	800116a <Controller_ResetControllers>
  Motion_ResetDriveSystem(&motion);
 80019be:	481a      	ldr	r0, [pc, #104]	@ (8001a28 <main+0x17c>)
 80019c0:	f000 fd1f 	bl	8002402 <Motion_ResetDriveSystem>

  HAL_Delay(5000);
 80019c4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80019c8:	f001 ffd0 	bl	800396c <HAL_Delay>
//  Profile_Move(&W_profile, 0, 0, 0, 0);

 //Motion_X(&motion, 3);
 //Motion_Y(&motion, -1);

  HAL_Delay(1000);
 80019cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019d0:	f001 ffcc 	bl	800396c <HAL_Delay>
	//UART_Transmit_Float(&huart2, "i", current, 2);
//    UART_Transmit_Int(&huart2, "S", i);
//    UART_Transmit_Int(&huart3, "S", i);
//    i++;
//    HAL_Delay(1000);
	  SendTelemetryData();
 80019d4:	f7ff faac 	bl	8000f30 <SendTelemetryData>
	  HAL_Delay(100);
 80019d8:	2064      	movs	r0, #100	@ 0x64
 80019da:	f001 ffc7 	bl	800396c <HAL_Delay>
	  SendTelemetryData();
 80019de:	bf00      	nop
 80019e0:	e7f8      	b.n	80019d4 <main+0x128>
 80019e2:	bf00      	nop
 80019e4:	2000011c 	.word	0x2000011c
 80019e8:	20000164 	.word	0x20000164
 80019ec:	200001ac 	.word	0x200001ac
 80019f0:	200001f4 	.word	0x200001f4
 80019f4:	2000023c 	.word	0x2000023c
 80019f8:	20000314 	.word	0x20000314
 80019fc:	200004ce 	.word	0x200004ce
 8001a00:	200004cc 	.word	0x200004cc
 8001a04:	2000035c 	.word	0x2000035c
 8001a08:	200002cc 	.word	0x200002cc
 8001a0c:	20000284 	.word	0x20000284
 8001a10:	40020000 	.word	0x40020000
 8001a14:	20000410 	.word	0x20000410
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	200003a4 	.word	0x200003a4
 8001a20:	200003c8 	.word	0x200003c8
 8001a24:	200003ec 	.word	0x200003ec
 8001a28:	20000438 	.word	0x20000438

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	@ 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2234      	movs	r2, #52	@ 0x34
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f005 ff5a 	bl	80078f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <SystemClock_Config+0xdc>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	4a2b      	ldr	r2, [pc, #172]	@ (8001b08 <SystemClock_Config+0xdc>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <SystemClock_Config+0xdc>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <SystemClock_Config+0xe0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a25      	ldr	r2, [pc, #148]	@ (8001b0c <SystemClock_Config+0xe0>)
 8001a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <SystemClock_Config+0xe0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a90:	2310      	movs	r3, #16
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001aa0:	23b4      	movs	r3, #180	@ 0xb4
 8001aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fbdf 	bl	8005278 <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ac0:	f000 fc60 	bl	8002384 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ac4:	f003 f83e 	bl	8004b44 <HAL_PWREx_EnableOverDrive>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ace:	f000 fc59 	bl	8002384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad2:	230f      	movs	r3, #15
 8001ad4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ade:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	2105      	movs	r1, #5
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 f877 	bl	8004be4 <HAL_RCC_ClockConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001afc:	f000 fc42 	bl	8002384 <Error_Handler>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3750      	adds	r7, #80	@ 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b22:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b24:	4a21      	ldr	r2, [pc, #132]	@ (8001bac <MX_ADC1_Init+0x9c>)
 8001b26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b42:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b50:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b52:	4a17      	ldr	r2, [pc, #92]	@ (8001bb0 <MX_ADC1_Init+0xa0>)
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b56:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b70:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b72:	f001 ff1f 	bl	80039b4 <HAL_ADC_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b7c:	f000 fc02 	bl	8002384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b80:	2304      	movs	r3, #4
 8001b82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b84:	2301      	movs	r3, #1
 8001b86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <MX_ADC1_Init+0x98>)
 8001b92:	f001 ff53 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b9c:	f000 fbf2 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000074 	.word	0x20000074
 8001bac:	40012000 	.word	0x40012000
 8001bb0:	0f000001 	.word	0x0f000001

08001bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b092      	sub	sp, #72	@ 0x48
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2220      	movs	r2, #32
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f005 fe88 	bl	80078f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be4:	4b45      	ldr	r3, [pc, #276]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001be6:	4a46      	ldr	r2, [pc, #280]	@ (8001d00 <MX_TIM1_Init+0x14c>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bea:	4b44      	ldr	r3, [pc, #272]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b42      	ldr	r3, [pc, #264]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001bf6:	4b41      	ldr	r3, [pc, #260]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001bf8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c04:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c10:	483a      	ldr	r0, [pc, #232]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001c12:	f003 fe8f 	bl	8005934 <HAL_TIM_PWM_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c1c:	f000 fbb2 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4833      	ldr	r0, [pc, #204]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001c30:	f004 fd28 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c3a:	f000 fba3 	bl	8002384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3e:	2360      	movs	r3, #96	@ 0x60
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	4826      	ldr	r0, [pc, #152]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001c64:	f004 f9a2 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c6e:	f000 fb89 	bl	8002384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	2204      	movs	r2, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4820      	ldr	r0, [pc, #128]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001c7c:	f004 f996 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c86:	f000 fb7d 	bl	8002384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	2208      	movs	r2, #8
 8001c90:	4619      	mov	r1, r3
 8001c92:	481a      	ldr	r0, [pc, #104]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001c94:	f004 f98a 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001c9e:	f000 fb71 	bl	8002384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4814      	ldr	r0, [pc, #80]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001cac:	f004 f97e 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001cb6:	f000 fb65 	bl	8002384 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001cde:	f004 fd4d 	bl	800677c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001ce8:	f000 fb4c 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <MX_TIM1_Init+0x148>)
 8001cee:	f001 fc1b 	bl	8003528 <HAL_TIM_MspPostInit>

}
 8001cf2:	bf00      	nop
 8001cf4:	3748      	adds	r7, #72	@ 0x48
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000011c 	.word	0x2000011c
 8001d00:	40010000 	.word	0x40010000

08001d04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	@ 0x30
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	2224      	movs	r2, #36	@ 0x24
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 fdee 	bl	80078f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <MX_TIM2_Init+0xa4>)
 8001d22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d28:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <MX_TIM2_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <MX_TIM2_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <MX_TIM2_Init+0xa4>)
 8001d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <MX_TIM2_Init+0xa4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <MX_TIM2_Init+0xa4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d50:	2301      	movs	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d60:	2301      	movs	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4619      	mov	r1, r3
 8001d72:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <MX_TIM2_Init+0xa4>)
 8001d74:	f003 fef6 	bl	8005b64 <HAL_TIM_Encoder_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d7e:	f000 fb01 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4806      	ldr	r0, [pc, #24]	@ (8001da8 <MX_TIM2_Init+0xa4>)
 8001d90:	f004 fc78 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d9a:	f000 faf3 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	3730      	adds	r7, #48	@ 0x30
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000164 	.word	0x20000164

08001dac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	@ 0x30
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	2224      	movs	r2, #36	@ 0x24
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fd9a 	bl	80078f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <MX_TIM3_Init+0xa0>)
 8001dca:	4a21      	ldr	r2, [pc, #132]	@ (8001e50 <MX_TIM3_Init+0xa4>)
 8001dcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <MX_TIM3_Init+0xa0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <MX_TIM3_Init+0xa0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <MX_TIM3_Init+0xa0>)
 8001ddc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001de0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <MX_TIM3_Init+0xa0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de8:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <MX_TIM3_Init+0xa0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dee:	2303      	movs	r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001df2:	2302      	movs	r3, #2
 8001df4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001df6:	2301      	movs	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e06:	2301      	movs	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4619      	mov	r1, r3
 8001e18:	480c      	ldr	r0, [pc, #48]	@ (8001e4c <MX_TIM3_Init+0xa0>)
 8001e1a:	f003 fea3 	bl	8005b64 <HAL_TIM_Encoder_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 faae 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4805      	ldr	r0, [pc, #20]	@ (8001e4c <MX_TIM3_Init+0xa0>)
 8001e36:	f004 fc25 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e40:	f000 faa0 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	@ 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200001ac 	.word	0x200001ac
 8001e50:	40000400 	.word	0x40000400

08001e54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f005 fd46 	bl	80078f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e70:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <MX_TIM4_Init+0xa0>)
 8001e72:	4a21      	ldr	r2, [pc, #132]	@ (8001ef8 <MX_TIM4_Init+0xa4>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <MX_TIM4_Init+0xa0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <MX_TIM4_Init+0xa0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <MX_TIM4_Init+0xa0>)
 8001e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <MX_TIM4_Init+0xa0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <MX_TIM4_Init+0xa0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e96:	2303      	movs	r3, #3
 8001e98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <MX_TIM4_Init+0xa0>)
 8001ec2:	f003 fe4f 	bl	8005b64 <HAL_TIM_Encoder_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ecc:	f000 fa5a 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	4619      	mov	r1, r3
 8001edc:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <MX_TIM4_Init+0xa0>)
 8001ede:	f004 fbd1 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ee8:	f000 fa4c 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	3730      	adds	r7, #48	@ 0x30
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200001f4 	.word	0x200001f4
 8001ef8:	40000800 	.word	0x40000800

08001efc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	2224      	movs	r2, #36	@ 0x24
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 fcf2 	bl	80078f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f18:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <MX_TIM5_Init+0xa0>)
 8001f1a:	4a21      	ldr	r2, [pc, #132]	@ (8001fa0 <MX_TIM5_Init+0xa4>)
 8001f1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <MX_TIM5_Init+0xa0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <MX_TIM5_Init+0xa0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <MX_TIM5_Init+0xa0>)
 8001f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <MX_TIM5_Init+0xa0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <MX_TIM5_Init+0xa0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001f42:	2302      	movs	r3, #2
 8001f44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f46:	2301      	movs	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	4619      	mov	r1, r3
 8001f68:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <MX_TIM5_Init+0xa0>)
 8001f6a:	f003 fdfb 	bl	8005b64 <HAL_TIM_Encoder_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001f74:	f000 fa06 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <MX_TIM5_Init+0xa0>)
 8001f86:	f004 fb7d 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001f90:	f000 f9f8 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	@ 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000023c 	.word	0x2000023c
 8001fa0:	40000c00 	.word	0x40000c00

08001fa4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <MX_TIM13_Init+0x40>)
 8001faa:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe8 <MX_TIM13_Init+0x44>)
 8001fac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1800-1;
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <MX_TIM13_Init+0x40>)
 8001fb0:	f240 7207 	movw	r2, #1799	@ 0x707
 8001fb4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <MX_TIM13_Init+0x40>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <MX_TIM13_Init+0x40>)
 8001fbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fc2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <MX_TIM13_Init+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <MX_TIM13_Init+0x40>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <MX_TIM13_Init+0x40>)
 8001fd2:	f003 fbef 	bl	80057b4 <HAL_TIM_Base_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001fdc:	f000 f9d2 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000284 	.word	0x20000284
 8001fe8:	40001c00 	.word	0x40001c00

08001fec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <MX_TIM14_Init+0x40>)
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8002030 <MX_TIM14_Init+0x44>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1800-1;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <MX_TIM14_Init+0x40>)
 8001ff8:	f240 7207 	movw	r2, #1799	@ 0x707
 8001ffc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <MX_TIM14_Init+0x40>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 500-1;
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <MX_TIM14_Init+0x40>)
 8002006:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800200a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <MX_TIM14_Init+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <MX_TIM14_Init+0x40>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002018:	4804      	ldr	r0, [pc, #16]	@ (800202c <MX_TIM14_Init+0x40>)
 800201a:	f003 fbcb 	bl	80057b4 <HAL_TIM_Base_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8002024:	f000 f9ae 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200002cc 	.word	0x200002cc
 8002030:	40002000 	.word	0x40002000

08002034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <MX_USART2_UART_Init+0x50>)
 800203c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_USART2_UART_Init+0x4c>)
 800206c:	f004 fbec 	bl	8006848 <HAL_UART_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002076:	f000 f985 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000314 	.word	0x20000314
 8002084:	40004400 	.word	0x40004400

08002088 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 800208e:	4a12      	ldr	r2, [pc, #72]	@ (80020d8 <MX_USART3_UART_Init+0x50>)
 8002090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 8002094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <MX_USART3_UART_Init+0x4c>)
 80020c0:	f004 fbc2 	bl	8006848 <HAL_UART_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020ca:	f000 f95b 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000035c 	.word	0x2000035c
 80020d8:	40004800 	.word	0x40004800

080020dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <MX_DMA_Init+0x3c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002118 <MX_DMA_Init+0x3c>)
 80020ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <MX_DMA_Init+0x3c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2038      	movs	r0, #56	@ 0x38
 8002104:	f001 ffa3 	bl	800404e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002108:	2038      	movs	r0, #56	@ 0x38
 800210a:	f001 ffbc 	bl	8004086 <HAL_NVIC_EnableIRQ>

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b43      	ldr	r3, [pc, #268]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a42      	ldr	r2, [pc, #264]	@ (8002244 <MX_GPIO_Init+0x128>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b40      	ldr	r3, [pc, #256]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b3c      	ldr	r3, [pc, #240]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a3b      	ldr	r2, [pc, #236]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b39      	ldr	r3, [pc, #228]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b32      	ldr	r3, [pc, #200]	@ (8002244 <MX_GPIO_Init+0x128>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b2e      	ldr	r3, [pc, #184]	@ (8002244 <MX_GPIO_Init+0x128>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a2d      	ldr	r2, [pc, #180]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <MX_GPIO_Init+0x128>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 80021a2:	2200      	movs	r2, #0
 80021a4:	f640 711c 	movw	r1, #3868	@ 0xf1c
 80021a8:	4827      	ldr	r0, [pc, #156]	@ (8002248 <MX_GPIO_Init+0x12c>)
 80021aa:	f002 fc97 	bl	8004adc <HAL_GPIO_WritePin>
                          |M2_INB_Pin|M1_INA_Pin|M1_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2136      	movs	r1, #54	@ 0x36
 80021b2:	4826      	ldr	r0, [pc, #152]	@ (800224c <MX_GPIO_Init+0x130>)
 80021b4:	f002 fc92 	bl	8004adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021be:	4824      	ldr	r0, [pc, #144]	@ (8002250 <MX_GPIO_Init+0x134>)
 80021c0:	f002 fc8c 	bl	8004adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_INA_Pin M4_INB_Pin TX_EN_Pin M2_INA_Pin
                           M1_INA_Pin M1_INB_Pin */
  GPIO_InitStruct.Pin = M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 80021c4:	f640 531c 	movw	r3, #3356	@ 0xd1c
 80021c8:	617b      	str	r3, [r7, #20]
                          |M1_INA_Pin|M1_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	481a      	ldr	r0, [pc, #104]	@ (8002248 <MX_GPIO_Init+0x12c>)
 80021de:	f002 fae9 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RX_Pin LED_TX_Pin M3_INA_Pin M3_INB_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin;
 80021e2:	2336      	movs	r3, #54	@ 0x36
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4814      	ldr	r0, [pc, #80]	@ (800224c <MX_GPIO_Init+0x130>)
 80021fa:	f002 fadb 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_INB_Pin */
  GPIO_InitStruct.Pin = M2_INB_Pin;
 80021fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_INB_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	480c      	ldr	r0, [pc, #48]	@ (8002248 <MX_GPIO_Init+0x12c>)
 8002218:	f002 facc 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 800221c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	2301      	movs	r3, #1
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4806      	ldr	r0, [pc, #24]	@ (8002250 <MX_GPIO_Init+0x134>)
 8002236:	f002 fabd 	bl	80047b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	@ 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40020800 	.word	0x40020800
 800224c:	40020400 	.word	0x40020400
 8002250:	40020000 	.word	0x40020000

08002254 <HAL_TIM_PeriodElapsedCallback>:
{
    return &hadc1;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002254:	b580      	push	{r7, lr}
 8002256:	ed2d 8b02 	vpush	{d8}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d104      	bne.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x1e>
		update_Encoder_Data();
 8002268:	f7ff f932 	bl	80014d0 <update_Encoder_Data>
		updateMotors();
 800226c:	f000 fab0 	bl	80027d0 <updateMotors>
		Motion_Update(&motion);
//		UpdateControllers(&controller, Profile_GetSpeed(&x_profile), Profile_GetSpeed(&y_profile),  Profile_GetSpeed(&W_profile), 0);
		UpdateControllers(&controller, Motion_XVelocity(&motion), Motion_YVelocity(&motion),  Motion_Omega(&motion), 0);

	}
}
 8002270:	e020      	b.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x60>
	else if(htim == &htim13){
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a13      	ldr	r2, [pc, #76]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d11c      	bne.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x60>
		Motion_Update(&motion);
 800227a:	4813      	ldr	r0, [pc, #76]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800227c:	f000 f8e8 	bl	8002450 <Motion_Update>
		UpdateControllers(&controller, Motion_XVelocity(&motion), Motion_YVelocity(&motion),  Motion_Omega(&motion), 0);
 8002280:	4811      	ldr	r0, [pc, #68]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002282:	f000 f912 	bl	80024aa <Motion_XVelocity>
 8002286:	eeb0 8a40 	vmov.f32	s16, s0
 800228a:	480f      	ldr	r0, [pc, #60]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800228c:	f000 f91d 	bl	80024ca <Motion_YVelocity>
 8002290:	eef0 8a40 	vmov.f32	s17, s0
 8002294:	480c      	ldr	r0, [pc, #48]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002296:	f000 f928 	bl	80024ea <Motion_Omega>
 800229a:	eef0 7a40 	vmov.f32	s15, s0
 800229e:	eddf 1a0b 	vldr	s3, [pc, #44]	@ 80022cc <HAL_TIM_PeriodElapsedCallback+0x78>
 80022a2:	eeb0 1a67 	vmov.f32	s2, s15
 80022a6:	eef0 0a68 	vmov.f32	s1, s17
 80022aa:	eeb0 0a48 	vmov.f32	s0, s16
 80022ae:	4808      	ldr	r0, [pc, #32]	@ (80022d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022b0:	f7fe ff7e 	bl	80011b0 <UpdateControllers>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	ecbd 8b02 	vpop	{d8}
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200002cc 	.word	0x200002cc
 80022c4:	20000284 	.word	0x20000284
 80022c8:	20000438 	.word	0x20000438
 80022cc:	00000000 	.word	0x00000000
 80022d0:	20000410 	.word	0x20000410

080022d4 <HAL_UART_RxCpltCallback>:
int j = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <HAL_UART_RxCpltCallback+0x8c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d138      	bne.n	8002358 <HAL_UART_RxCpltCallback+0x84>
	    {
	        rxIndex++;
 80022e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <HAL_UART_RxCpltCallback+0x90>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_UART_RxCpltCallback+0x90>)
 80022f0:	701a      	strb	r2, [r3, #0]
	        j++;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002368 <HAL_UART_RxCpltCallback+0x94>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <HAL_UART_RxCpltCallback+0x94>)
 80022fa:	6013      	str	r3, [r2, #0]
	        HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 80022fc:	2102      	movs	r1, #2
 80022fe:	481b      	ldr	r0, [pc, #108]	@ (800236c <HAL_UART_RxCpltCallback+0x98>)
 8002300:	f002 fc05 	bl	8004b0e <HAL_GPIO_TogglePin>

	        if (rxIndex >= 2)
 8002304:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <HAL_UART_RxCpltCallback+0x90>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d91b      	bls.n	8002344 <HAL_UART_RxCpltCallback+0x70>
	        {
	            // Complete command received
	            commandReceived = 1;
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <HAL_UART_RxCpltCallback+0x9c>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
	            rxIndex = 0;
 8002312:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HAL_UART_RxCpltCallback+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
	            if (commandReceived)
 8002318:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <HAL_UART_RxCpltCallback+0x9c>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d011      	beq.n	8002344 <HAL_UART_RxCpltCallback+0x70>
				{
	            	UART_Transmit_Int(&huart2, "R", rxBuffer[0]);
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <HAL_UART_RxCpltCallback+0xa0>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4914      	ldr	r1, [pc, #80]	@ (8002378 <HAL_UART_RxCpltCallback+0xa4>)
 8002328:	4814      	ldr	r0, [pc, #80]	@ (800237c <HAL_UART_RxCpltCallback+0xa8>)
 800232a:	f7fe fe75 	bl	8001018 <UART_Transmit_Int>
					ExecuteCommand(rxBuffer[0], rxBuffer[1]);
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_UART_RxCpltCallback+0xa0>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4a10      	ldr	r2, [pc, #64]	@ (8002374 <HAL_UART_RxCpltCallback+0xa0>)
 8002334:	7852      	ldrb	r2, [r2, #1]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fda9 	bl	8000e90 <ExecuteCommand>
					commandReceived = 0;
 800233e:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <HAL_UART_RxCpltCallback+0x9c>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
	            //HAL_UART_Transmit(&huart2, rxBuffer, 2, 100);

	        }

	        // Continue receiving
	        HAL_UART_Receive_IT(&huart3, &rxBuffer[rxIndex], 1);
 8002344:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <HAL_UART_RxCpltCallback+0x90>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_UART_RxCpltCallback+0xa0>)
 800234c:	4413      	add	r3, r2
 800234e:	2201      	movs	r2, #1
 8002350:	4619      	mov	r1, r3
 8002352:	480b      	ldr	r0, [pc, #44]	@ (8002380 <HAL_UART_RxCpltCallback+0xac>)
 8002354:	f004 fb53 	bl	80069fe <HAL_UART_Receive_IT>
//    HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
//
//    // Restart reception
//    HAL_UART_Receive_IT(&huart3, rx_data, 1);
//  }
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40004800 	.word	0x40004800
 8002364:	200004ce 	.word	0x200004ce
 8002368:	200004d0 	.word	0x200004d0
 800236c:	40020400 	.word	0x40020400
 8002370:	200004cf 	.word	0x200004cf
 8002374:	200004cc 	.word	0x200004cc
 8002378:	080079e4 	.word	0x080079e4
 800237c:	20000314 	.word	0x20000314
 8002380:	2000035c 	.word	0x2000035c

08002384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002388:	b672      	cpsid	i
}
 800238a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <Error_Handler+0x8>

08002390 <Motion_Init>:

#include "motion.h"
#include "config.h"


void Motion_Init(Motion *motion, Controller *controller, Profile *x_profile, Profile *y_profile, Profile *W_profile) {
 8002390:	b4b0      	push	{r4, r5, r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4614      	mov	r4, r2
 80023a4:	461d      	mov	r5, r3
 80023a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023b2:	e884 0003 	stmia.w	r4, {r0, r1}
    motion->x_profile = *x_profile;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80023be:	4615      	mov	r5, r2
 80023c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	6023      	str	r3, [r4, #0]
    motion->y_profile = *y_profile;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 80023d4:	4615      	mov	r5, r2
 80023d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023de:	682b      	ldr	r3, [r5, #0]
 80023e0:	6023      	str	r3, [r4, #0]
    motion->W_profile = *W_profile;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 80023ea:	4615      	mov	r5, r2
 80023ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	6023      	str	r3, [r4, #0]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bcb0      	pop	{r4, r5, r7}
 8002400:	4770      	bx	lr

08002402 <Motion_ResetDriveSystem>:


void Motion_ResetDriveSystem(Motion *motion) {
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
	Motion_Stop(motion);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f837 	bl	800247e <Motion_Stop>
	Motion_DisableDrive(motion);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f83e 	bl	8002492 <Motion_DisableDrive>
    resetEncoders();
 8002416:	f7ff f80d 	bl	8001434 <resetEncoders>
    Profile_Reset(&(motion->x_profile));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3328      	adds	r3, #40	@ 0x28
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fd38 	bl	8002e94 <Profile_Reset>
    Profile_Reset(&(motion->y_profile));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	334c      	adds	r3, #76	@ 0x4c
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fd33 	bl	8002e94 <Profile_Reset>
    Profile_Reset(&(motion->W_profile));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3370      	adds	r3, #112	@ 0x70
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fd2e 	bl	8002e94 <Profile_Reset>
    Controller_ResetControllers(&(motion->controller));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fe95 	bl	800116a <Controller_ResetControllers>
    Controller_EnableControllers(&(motion->controller));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe ffaa 	bl	800139c <Controller_EnableControllers>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <Motion_Update>:


void Motion_Update(Motion *motion) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->x_profile));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3328      	adds	r3, #40	@ 0x28
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fd5b 	bl	8002f18 <Profile_Update>
    Profile_Update(&(motion->y_profile));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	334c      	adds	r3, #76	@ 0x4c
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fd56 	bl	8002f18 <Profile_Update>
    Profile_Update(&(motion->W_profile));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3370      	adds	r3, #112	@ 0x70
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fd51 	bl	8002f18 <Profile_Update>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <Motion_Stop>:

void Motion_Stop(Motion *motion) {
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
	Controller_Stop();
 8002486:	f7fe ff83 	bl	8001390 <Controller_Stop>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <Motion_DisableDrive>:

void Motion_DisableDrive(Motion *motion) {
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
	Controller_DisableControllers(&(motion->controller));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ff8b 	bl	80013b8 <Controller_DisableControllers>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <Motion_XVelocity>:

float Motion_YPosition(Motion *motion) {
    return Profile_GetPosition(&(motion->y_profile));
}

float Motion_XVelocity(Motion *motion) {
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->x_profile));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3328      	adds	r3, #40	@ 0x28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fdf4 	bl	80030a4 <Profile_GetSpeed>
 80024bc:	eef0 7a40 	vmov.f32	s15, s0
}
 80024c0:	eeb0 0a67 	vmov.f32	s0, s15
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <Motion_YVelocity>:

float Motion_YVelocity(Motion *motion) {
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->y_profile));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	334c      	adds	r3, #76	@ 0x4c
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fde4 	bl	80030a4 <Profile_GetSpeed>
 80024dc:	eef0 7a40 	vmov.f32	s15, s0
}
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->W_profile));
}

float Motion_Omega(Motion *motion) {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->W_profile));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3370      	adds	r3, #112	@ 0x70
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fdd4 	bl	80030a4 <Profile_GetSpeed>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
}
 8002500:	eeb0 0a67 	vmov.f32	s0, s15
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	0000      	movs	r0, r0
 800250c:	0000      	movs	r0, r0
	...

08002510 <limitPWM>:
volatile float m4_int = 0;




float limitPWM(float pwm) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	ed87 0a01 	vstr	s0, [r7, #4]
    if (pwm > PWM_MAX)
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fd ffe0 	bl	80004e0 <__aeabi_f2d>
 8002520:	a313      	add	r3, pc, #76	@ (adr r3, 8002570 <limitPWM+0x60>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe fac3 	bl	8000ab0 <__aeabi_dcmpgt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <limitPWM+0x24>
        return PWM_MAX;
 8002530:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <limitPWM+0x58>)
 8002532:	e00d      	b.n	8002550 <limitPWM+0x40>
    else if (pwm < -PWM_MAX)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7fd ffd3 	bl	80004e0 <__aeabi_f2d>
 800253a:	a309      	add	r3, pc, #36	@ (adr r3, 8002560 <limitPWM+0x50>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe fa98 	bl	8000a74 <__aeabi_dcmplt>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <limitPWM+0x3e>
        return -PWM_MAX;
 800254a:	4b08      	ldr	r3, [pc, #32]	@ (800256c <limitPWM+0x5c>)
 800254c:	e000      	b.n	8002550 <limitPWM+0x40>
    return pwm;
 800254e:	687b      	ldr	r3, [r7, #4]
}
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eeb0 0a67 	vmov.f32	s0, s15
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	7ae147ae 	.word	0x7ae147ae
 8002564:	bfefae14 	.word	0xbfefae14
 8002568:	3f7d70a4 	.word	0x3f7d70a4
 800256c:	bf7d70a4 	.word	0xbf7d70a4
 8002570:	7ae147ae 	.word	0x7ae147ae
 8002574:	3fefae14 	.word	0x3fefae14

08002578 <setForwardLeftMotorPWM>:

void setForwardLeftMotorPWM(float pwm) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8002582:	ed97 0a01 	vldr	s0, [r7, #4]
 8002586:	f7ff ffc3 	bl	8002510 <limitPWM>
 800258a:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 800258e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	db0f      	blt.n	80025bc <setForwardLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M1_INA = PC10, M1_INB = PC11
        // Reset bit 10 and Set bit 11 simultaneously
        GPIOC->BSRR = (1U << (10 + 16)) | (1U << 11);
 800259c:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <setForwardLeftMotorPWM+0x70>)
 800259e:	4a13      	ldr	r2, [pc, #76]	@ (80025ec <setForwardLeftMotorPWM+0x74>)
 80025a0:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80025f0 <setForwardLeftMotorPWM+0x78>
 80025aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ae:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <setForwardLeftMotorPWM+0x7c>)
 80025b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b4:	ee17 2a90 	vmov	r2, s15
 80025b8:	635a      	str	r2, [r3, #52]	@ 0x34
        // Reverse direction: INA=1, INB=0
        // Set bit 10 and Reset bit 11 simultaneously
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80025ba:	e010      	b.n	80025de <setForwardLeftMotorPWM+0x66>
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <setForwardLeftMotorPWM+0x70>)
 80025be:	4a0e      	ldr	r2, [pc, #56]	@ (80025f8 <setForwardLeftMotorPWM+0x80>)
 80025c0:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80025c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c6:	eef1 7a67 	vneg.f32	s15, s15
 80025ca:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80025f0 <setForwardLeftMotorPWM+0x78>
 80025ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <setForwardLeftMotorPWM+0x7c>)
 80025d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d8:	ee17 2a90 	vmov	r2, s15
 80025dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40020800 	.word	0x40020800
 80025ec:	04000800 	.word	0x04000800
 80025f0:	45e0f800 	.word	0x45e0f800
 80025f4:	40010000 	.word	0x40010000
 80025f8:	08000400 	.word	0x08000400

080025fc <setForwardRightMotorPWM>:

void setForwardRightMotorPWM(float pwm) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8002606:	ed97 0a01 	vldr	s0, [r7, #4]
 800260a:	f7ff ff81 	bl	8002510 <limitPWM>
 800260e:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002612:	edd7 7a01 	vldr	s15, [r7, #4]
 8002616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261e:	db0f      	blt.n	8002640 <setForwardRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M2_INA = PC8, M2_INB = PC9
        // Set bit 8 and Reset bit 9 simultaneously
        GPIOC->BSRR = (1U << 8) | (1U << (9 + 16));
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <setForwardRightMotorPWM+0x70>)
 8002622:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <setForwardRightMotorPWM+0x74>)
 8002624:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002626:	edd7 7a01 	vldr	s15, [r7, #4]
 800262a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002674 <setForwardRightMotorPWM+0x78>
 800262e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <setForwardRightMotorPWM+0x7c>)
 8002634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002638:	ee17 2a90 	vmov	r2, s15
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reverse direction: INA=0, INB=1
        // Reset bit 8 and Set bit 9 simultaneously
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 800263e:	e010      	b.n	8002662 <setForwardRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <setForwardRightMotorPWM+0x70>)
 8002642:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <setForwardRightMotorPWM+0x80>)
 8002644:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8002646:	edd7 7a01 	vldr	s15, [r7, #4]
 800264a:	eef1 7a67 	vneg.f32	s15, s15
 800264e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002674 <setForwardRightMotorPWM+0x78>
 8002652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <setForwardRightMotorPWM+0x7c>)
 8002658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800265c:	ee17 2a90 	vmov	r2, s15
 8002660:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40020800 	.word	0x40020800
 8002670:	02000100 	.word	0x02000100
 8002674:	45e0f800 	.word	0x45e0f800
 8002678:	40010000 	.word	0x40010000
 800267c:	01000200 	.word	0x01000200

08002680 <setRearLeftMotorPWM>:

void setRearLeftMotorPWM(float pwm) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 800268a:	ed97 0a01 	vldr	s0, [r7, #4]
 800268e:	f7ff ff3f 	bl	8002510 <limitPWM>
 8002692:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002696:	edd7 7a01 	vldr	s15, [r7, #4]
 800269a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	db0f      	blt.n	80026c4 <setRearLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M3_INA = PB4, M3_INB = PB5
        // Reset bit 4 and Set bit 5 simultaneously
        GPIOB->BSRR = (1U << (4 + 16)) | (1U << 5);
 80026a4:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <setRearLeftMotorPWM+0x70>)
 80026a6:	4a13      	ldr	r2, [pc, #76]	@ (80026f4 <setRearLeftMotorPWM+0x74>)
 80026a8:	619a      	str	r2, [r3, #24]
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 0);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);
        TIM1->CCR3 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 80026aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ae:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80026f8 <setRearLeftMotorPWM+0x78>
 80026b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <setRearLeftMotorPWM+0x7c>)
 80026b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026bc:	ee17 2a90 	vmov	r2, s15
 80026c0:	63da      	str	r2, [r3, #60]	@ 0x3c
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 1);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 0);
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80026c2:	e010      	b.n	80026e6 <setRearLeftMotorPWM+0x66>
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
 80026c4:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <setRearLeftMotorPWM+0x70>)
 80026c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002700 <setRearLeftMotorPWM+0x80>)
 80026c8:	619a      	str	r2, [r3, #24]
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80026ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ce:	eef1 7a67 	vneg.f32	s15, s15
 80026d2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80026f8 <setRearLeftMotorPWM+0x78>
 80026d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <setRearLeftMotorPWM+0x7c>)
 80026dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e0:	ee17 2a90 	vmov	r2, s15
 80026e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40020400 	.word	0x40020400
 80026f4:	00100020 	.word	0x00100020
 80026f8:	45e0f800 	.word	0x45e0f800
 80026fc:	40010000 	.word	0x40010000
 8002700:	00200010 	.word	0x00200010

08002704 <setRearRightMotorPWM>:

void setRearRightMotorPWM(float pwm) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 800270e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002712:	f7ff fefd 	bl	8002510 <limitPWM>
 8002716:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 800271a:	edd7 7a01 	vldr	s15, [r7, #4]
 800271e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002726:	db0f      	blt.n	8002748 <setRearRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M4_INA = PC2, M4_INB = PC3
        // Set bit 2 and Reset bit 3 simultaneously
        GPIOC->BSRR = (1U << 2) | (1U << (3 + 16));
 8002728:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <setRearRightMotorPWM+0x70>)
 800272a:	4a13      	ldr	r2, [pc, #76]	@ (8002778 <setRearRightMotorPWM+0x74>)
 800272c:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 800272e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002732:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800277c <setRearRightMotorPWM+0x78>
 8002736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800273a:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <setRearRightMotorPWM+0x7c>)
 800273c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002740:	ee17 2a90 	vmov	r2, s15
 8002744:	641a      	str	r2, [r3, #64]	@ 0x40
        // Reverse direction: INA=0, INB=1
        // Reset bit 2 and Set bit 3 simultaneously
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 8002746:	e010      	b.n	800276a <setRearRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
 8002748:	4b0a      	ldr	r3, [pc, #40]	@ (8002774 <setRearRightMotorPWM+0x70>)
 800274a:	4a0e      	ldr	r2, [pc, #56]	@ (8002784 <setRearRightMotorPWM+0x80>)
 800274c:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 800274e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002752:	eef1 7a67 	vneg.f32	s15, s15
 8002756:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800277c <setRearRightMotorPWM+0x78>
 800275a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275e:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <setRearRightMotorPWM+0x7c>)
 8002760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002764:	ee17 2a90 	vmov	r2, s15
 8002768:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020800 	.word	0x40020800
 8002778:	00080004 	.word	0x00080004
 800277c:	45e0f800 	.word	0x45e0f800
 8002780:	40010000 	.word	0x40010000
 8002784:	00040008 	.word	0x00040008

08002788 <resetMotors>:

void resetMotors(void) {
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
    // Stop all motors by setting PWM to 0
    TIM1->CCR1 = 0;
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <resetMotors+0x34>)
 800278e:	2200      	movs	r2, #0
 8002790:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8002792:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <resetMotors+0x34>)
 8002794:	2200      	movs	r2, #0
 8002796:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR3 = 0;
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <resetMotors+0x34>)
 800279a:	2200      	movs	r2, #0
 800279c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM1->CCR4 = 0;
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <resetMotors+0x34>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Set all control pins low simultaneously for each port
    // GPIOC: Reset M1_INA(PC10), M1_INB(PC11), M2_INA(PC8), M2_INB(PC9), M4_INA(PC2), M4_INB(PC3)
    GPIOC->BSRR = (1U << (10 + 16)) | (1U << (11 + 16)) |
 80027a4:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <resetMotors+0x38>)
 80027a6:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <resetMotors+0x3c>)
 80027a8:	619a      	str	r2, [r3, #24]
                  (1U << (8 + 16)) | (1U << (9 + 16)) |
                  (1U << (2 + 16)) | (1U << (3 + 16));

    // GPIOB: Reset M3_INA(PB4), M3_INB(PB5)
    GPIOB->BSRR = (1U << (4 + 16)) | (1U << (5 + 16));
 80027aa:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <resetMotors+0x40>)
 80027ac:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80027b0:	619a      	str	r2, [r3, #24]
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40020800 	.word	0x40020800
 80027c4:	0f0c0000 	.word	0x0f0c0000
 80027c8:	40020400 	.word	0x40020400
 80027cc:	00000000 	.word	0x00000000

080027d0 <updateMotors>:


void updateMotors(){
 80027d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027d4:	b088      	sub	sp, #32
 80027d6:	af00      	add	r7, sp, #0
    // Calculate velocity errors
	float m1_err = target_wheel_W.front_left - current_wheel_W.front_left;
 80027d8:	4ba7      	ldr	r3, [pc, #668]	@ (8002a78 <updateMotors+0x2a8>)
 80027da:	ed93 7a00 	vldr	s14, [r3]
 80027de:	4ba7      	ldr	r3, [pc, #668]	@ (8002a7c <updateMotors+0x2ac>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e8:	edc7 7a03 	vstr	s15, [r7, #12]
	float m2_err = target_wheel_W.rear_left - current_wheel_W.rear_left;
 80027ec:	4ba2      	ldr	r3, [pc, #648]	@ (8002a78 <updateMotors+0x2a8>)
 80027ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80027f2:	4ba2      	ldr	r3, [pc, #648]	@ (8002a7c <updateMotors+0x2ac>)
 80027f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80027f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fc:	edc7 7a02 	vstr	s15, [r7, #8]
	float m3_err = target_wheel_W.rear_right - current_wheel_W.rear_right;
 8002800:	4b9d      	ldr	r3, [pc, #628]	@ (8002a78 <updateMotors+0x2a8>)
 8002802:	ed93 7a02 	vldr	s14, [r3, #8]
 8002806:	4b9d      	ldr	r3, [pc, #628]	@ (8002a7c <updateMotors+0x2ac>)
 8002808:	edd3 7a02 	vldr	s15, [r3, #8]
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	edc7 7a01 	vstr	s15, [r7, #4]
	float m4_err = target_wheel_W.front_right - current_wheel_W.front_right;
 8002814:	4b98      	ldr	r3, [pc, #608]	@ (8002a78 <updateMotors+0x2a8>)
 8002816:	ed93 7a03 	vldr	s14, [r3, #12]
 800281a:	4b98      	ldr	r3, [pc, #608]	@ (8002a7c <updateMotors+0x2ac>)
 800281c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002824:	edc7 7a00 	vstr	s15, [r7]




    m1_int += m1_err * LOOP_INTERVAL;
 8002828:	4b95      	ldr	r3, [pc, #596]	@ (8002a80 <updateMotors+0x2b0>)
 800282a:	ed93 7a00 	vldr	s14, [r3]
 800282e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002836:	4b93      	ldr	r3, [pc, #588]	@ (8002a84 <updateMotors+0x2b4>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002840:	4b90      	ldr	r3, [pc, #576]	@ (8002a84 <updateMotors+0x2b4>)
 8002842:	edc3 7a00 	vstr	s15, [r3]
    m2_int += m2_err * LOOP_INTERVAL;
 8002846:	4b8e      	ldr	r3, [pc, #568]	@ (8002a80 <updateMotors+0x2b0>)
 8002848:	ed93 7a00 	vldr	s14, [r3]
 800284c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002854:	4b8c      	ldr	r3, [pc, #560]	@ (8002a88 <updateMotors+0x2b8>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	4b8a      	ldr	r3, [pc, #552]	@ (8002a88 <updateMotors+0x2b8>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
    m3_int += m3_err * LOOP_INTERVAL;
 8002864:	4b86      	ldr	r3, [pc, #536]	@ (8002a80 <updateMotors+0x2b0>)
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	edd7 7a01 	vldr	s15, [r7, #4]
 800286e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002872:	4b86      	ldr	r3, [pc, #536]	@ (8002a8c <updateMotors+0x2bc>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287c:	4b83      	ldr	r3, [pc, #524]	@ (8002a8c <updateMotors+0x2bc>)
 800287e:	edc3 7a00 	vstr	s15, [r3]
    m4_int += m4_err * LOOP_INTERVAL;
 8002882:	4b7f      	ldr	r3, [pc, #508]	@ (8002a80 <updateMotors+0x2b0>)
 8002884:	ed93 7a00 	vldr	s14, [r3]
 8002888:	edd7 7a00 	vldr	s15, [r7]
 800288c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002890:	4b7f      	ldr	r3, [pc, #508]	@ (8002a90 <updateMotors+0x2c0>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a90 <updateMotors+0x2c0>)
 800289c:	edc3 7a00 	vstr	s15, [r3]


    m1_int = clampf(m1_int, -MAXINTCLAMP, MAXINTCLAMP);
 80028a0:	4b78      	ldr	r3, [pc, #480]	@ (8002a84 <updateMotors+0x2b4>)
 80028a2:	ed93 7a00 	vldr	s14, [r3]
 80028a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002a94 <updateMotors+0x2c4>)
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	eef1 7a67 	vneg.f32	s15, s15
 80028b0:	4b78      	ldr	r3, [pc, #480]	@ (8002a94 <updateMotors+0x2c4>)
 80028b2:	edd3 6a00 	vldr	s13, [r3]
 80028b6:	eeb0 1a66 	vmov.f32	s2, s13
 80028ba:	eef0 0a67 	vmov.f32	s1, s15
 80028be:	eeb0 0a47 	vmov.f32	s0, s14
 80028c2:	f7fe fbf7 	bl	80010b4 <clampf>
 80028c6:	eef0 7a40 	vmov.f32	s15, s0
 80028ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002a84 <updateMotors+0x2b4>)
 80028cc:	edc3 7a00 	vstr	s15, [r3]
    m2_int = clampf(m2_int, -MAXINTCLAMP, MAXINTCLAMP);
 80028d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <updateMotors+0x2b8>)
 80028d2:	ed93 7a00 	vldr	s14, [r3]
 80028d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002a94 <updateMotors+0x2c4>)
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	eef1 7a67 	vneg.f32	s15, s15
 80028e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a94 <updateMotors+0x2c4>)
 80028e2:	edd3 6a00 	vldr	s13, [r3]
 80028e6:	eeb0 1a66 	vmov.f32	s2, s13
 80028ea:	eef0 0a67 	vmov.f32	s1, s15
 80028ee:	eeb0 0a47 	vmov.f32	s0, s14
 80028f2:	f7fe fbdf 	bl	80010b4 <clampf>
 80028f6:	eef0 7a40 	vmov.f32	s15, s0
 80028fa:	4b63      	ldr	r3, [pc, #396]	@ (8002a88 <updateMotors+0x2b8>)
 80028fc:	edc3 7a00 	vstr	s15, [r3]
    m3_int = clampf(m3_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002900:	4b62      	ldr	r3, [pc, #392]	@ (8002a8c <updateMotors+0x2bc>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	4b63      	ldr	r3, [pc, #396]	@ (8002a94 <updateMotors+0x2c4>)
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	eef1 7a67 	vneg.f32	s15, s15
 8002910:	4b60      	ldr	r3, [pc, #384]	@ (8002a94 <updateMotors+0x2c4>)
 8002912:	edd3 6a00 	vldr	s13, [r3]
 8002916:	eeb0 1a66 	vmov.f32	s2, s13
 800291a:	eef0 0a67 	vmov.f32	s1, s15
 800291e:	eeb0 0a47 	vmov.f32	s0, s14
 8002922:	f7fe fbc7 	bl	80010b4 <clampf>
 8002926:	eef0 7a40 	vmov.f32	s15, s0
 800292a:	4b58      	ldr	r3, [pc, #352]	@ (8002a8c <updateMotors+0x2bc>)
 800292c:	edc3 7a00 	vstr	s15, [r3]
    m4_int = clampf(m4_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002930:	4b57      	ldr	r3, [pc, #348]	@ (8002a90 <updateMotors+0x2c0>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	4b57      	ldr	r3, [pc, #348]	@ (8002a94 <updateMotors+0x2c4>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	eef1 7a67 	vneg.f32	s15, s15
 8002940:	4b54      	ldr	r3, [pc, #336]	@ (8002a94 <updateMotors+0x2c4>)
 8002942:	edd3 6a00 	vldr	s13, [r3]
 8002946:	eeb0 1a66 	vmov.f32	s2, s13
 800294a:	eef0 0a67 	vmov.f32	s1, s15
 800294e:	eeb0 0a47 	vmov.f32	s0, s14
 8002952:	f7fe fbaf 	bl	80010b4 <clampf>
 8002956:	eef0 7a40 	vmov.f32	s15, s0
 800295a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a90 <updateMotors+0x2c0>)
 800295c:	edc3 7a00 	vstr	s15, [r3]


    float m1_output = Kp_Vel * m1_err + Ki_Vel * m1_int;
 8002960:	4b4d      	ldr	r3, [pc, #308]	@ (8002a98 <updateMotors+0x2c8>)
 8002962:	ed93 7a00 	vldr	s14, [r3]
 8002966:	edd7 7a03 	vldr	s15, [r7, #12]
 800296a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a9c <updateMotors+0x2cc>)
 8002970:	edd3 6a00 	vldr	s13, [r3]
 8002974:	4b43      	ldr	r3, [pc, #268]	@ (8002a84 <updateMotors+0x2b4>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002982:	edc7 7a07 	vstr	s15, [r7, #28]
    float m2_output = Kp_Vel * m2_err + Ki_Vel * m2_int;
 8002986:	4b44      	ldr	r3, [pc, #272]	@ (8002a98 <updateMotors+0x2c8>)
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002994:	4b41      	ldr	r3, [pc, #260]	@ (8002a9c <updateMotors+0x2cc>)
 8002996:	edd3 6a00 	vldr	s13, [r3]
 800299a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <updateMotors+0x2b8>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a8:	edc7 7a06 	vstr	s15, [r7, #24]
    float m3_output = Kp_Vel * m3_err + Ki_Vel * m3_int;
 80029ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002a98 <updateMotors+0x2c8>)
 80029ae:	ed93 7a00 	vldr	s14, [r3]
 80029b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ba:	4b38      	ldr	r3, [pc, #224]	@ (8002a9c <updateMotors+0x2cc>)
 80029bc:	edd3 6a00 	vldr	s13, [r3]
 80029c0:	4b32      	ldr	r3, [pc, #200]	@ (8002a8c <updateMotors+0x2bc>)
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ce:	edc7 7a05 	vstr	s15, [r7, #20]
    float m4_output = Kp_Vel * m4_err + Ki_Vel * m4_int;
 80029d2:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <updateMotors+0x2c8>)
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	edd7 7a00 	vldr	s15, [r7]
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a9c <updateMotors+0x2cc>)
 80029e2:	edd3 6a00 	vldr	s13, [r3]
 80029e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a90 <updateMotors+0x2c0>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	edc7 7a04 	vstr	s15, [r7, #16]

    //  integral windup prevention
    // If output is saturated, reduce integral term
    if (m1_output > PWM_MAX) {
 80029f8:	69f8      	ldr	r0, [r7, #28]
 80029fa:	f7fd fd71 	bl	80004e0 <__aeabi_f2d>
 80029fe:	a31c      	add	r3, pc, #112	@ (adr r3, 8002a70 <updateMotors+0x2a0>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fe f854 	bl	8000ab0 <__aeabi_dcmpgt>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d04a      	beq.n	8002aa4 <updateMotors+0x2d4>
        m1_int -= (m1_output - PWM_MAX) / Ki_Vel;
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <updateMotors+0x2b4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fd64 	bl	80004e0 <__aeabi_f2d>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
 8002a1c:	69f8      	ldr	r0, [r7, #28]
 8002a1e:	f7fd fd5f 	bl	80004e0 <__aeabi_f2d>
 8002a22:	a313      	add	r3, pc, #76	@ (adr r3, 8002a70 <updateMotors+0x2a0>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fd fbfa 	bl	8000220 <__aeabi_dsub>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4690      	mov	r8, r2
 8002a32:	4699      	mov	r9, r3
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <updateMotors+0x2cc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fd51 	bl	80004e0 <__aeabi_f2d>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4640      	mov	r0, r8
 8002a44:	4649      	mov	r1, r9
 8002a46:	f7fd fecd 	bl	80007e4 <__aeabi_ddiv>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7fd fbe5 	bl	8000220 <__aeabi_dsub>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7fe f831 	bl	8000ac4 <__aeabi_d2f>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4a07      	ldr	r2, [pc, #28]	@ (8002a84 <updateMotors+0x2b4>)
 8002a66:	6013      	str	r3, [r2, #0]
        m1_output = PWM_MAX;
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <updateMotors+0x2d0>)
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	e054      	b.n	8002b18 <updateMotors+0x348>
 8002a6e:	bf00      	nop
 8002a70:	7ae147ae 	.word	0x7ae147ae
 8002a74:	3fefae14 	.word	0x3fefae14
 8002a78:	2000004c 	.word	0x2000004c
 8002a7c:	2000003c 	.word	0x2000003c
 8002a80:	080079ec 	.word	0x080079ec
 8002a84:	200004d4 	.word	0x200004d4
 8002a88:	200004d8 	.word	0x200004d8
 8002a8c:	200004dc 	.word	0x200004dc
 8002a90:	200004e0 	.word	0x200004e0
 8002a94:	08007a14 	.word	0x08007a14
 8002a98:	080079f4 	.word	0x080079f4
 8002a9c:	080079f8 	.word	0x080079f8
 8002aa0:	3f7d70a4 	.word	0x3f7d70a4
    } else if (m1_output < -PWM_MAX) {
 8002aa4:	69f8      	ldr	r0, [r7, #28]
 8002aa6:	f7fd fd1b 	bl	80004e0 <__aeabi_f2d>
 8002aaa:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002d70 <updateMotors+0x5a0>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd ffe0 	bl	8000a74 <__aeabi_dcmplt>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02e      	beq.n	8002b18 <updateMotors+0x348>
        m1_int -= (m1_output + PWM_MAX) / Ki_Vel;
 8002aba:	4baf      	ldr	r3, [pc, #700]	@ (8002d78 <updateMotors+0x5a8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fd0e 	bl	80004e0 <__aeabi_f2d>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	460d      	mov	r5, r1
 8002ac8:	69f8      	ldr	r0, [r7, #28]
 8002aca:	f7fd fd09 	bl	80004e0 <__aeabi_f2d>
 8002ace:	a3a6      	add	r3, pc, #664	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fba6 	bl	8000224 <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4690      	mov	r8, r2
 8002ade:	4699      	mov	r9, r3
 8002ae0:	4ba6      	ldr	r3, [pc, #664]	@ (8002d7c <updateMotors+0x5ac>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fcfb 	bl	80004e0 <__aeabi_f2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4640      	mov	r0, r8
 8002af0:	4649      	mov	r1, r9
 8002af2:	f7fd fe77 	bl	80007e4 <__aeabi_ddiv>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4620      	mov	r0, r4
 8002afc:	4629      	mov	r1, r5
 8002afe:	f7fd fb8f 	bl	8000220 <__aeabi_dsub>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7fd ffdb 	bl	8000ac4 <__aeabi_d2f>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4a99      	ldr	r2, [pc, #612]	@ (8002d78 <updateMotors+0x5a8>)
 8002b12:	6013      	str	r3, [r2, #0]
        m1_output = -PWM_MAX;
 8002b14:	4b9a      	ldr	r3, [pc, #616]	@ (8002d80 <updateMotors+0x5b0>)
 8002b16:	61fb      	str	r3, [r7, #28]
    }

    if (m2_output > PWM_MAX) {
 8002b18:	69b8      	ldr	r0, [r7, #24]
 8002b1a:	f7fd fce1 	bl	80004e0 <__aeabi_f2d>
 8002b1e:	a392      	add	r3, pc, #584	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd ffc4 	bl	8000ab0 <__aeabi_dcmpgt>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d02f      	beq.n	8002b8e <updateMotors+0x3be>
        m2_int -= (m2_output - PWM_MAX) / Ki_Vel;
 8002b2e:	4b95      	ldr	r3, [pc, #596]	@ (8002d84 <updateMotors+0x5b4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcd4 	bl	80004e0 <__aeabi_f2d>
 8002b38:	4604      	mov	r4, r0
 8002b3a:	460d      	mov	r5, r1
 8002b3c:	69b8      	ldr	r0, [r7, #24]
 8002b3e:	f7fd fccf 	bl	80004e0 <__aeabi_f2d>
 8002b42:	a389      	add	r3, pc, #548	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd fb6a 	bl	8000220 <__aeabi_dsub>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4690      	mov	r8, r2
 8002b52:	4699      	mov	r9, r3
 8002b54:	4b89      	ldr	r3, [pc, #548]	@ (8002d7c <updateMotors+0x5ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fd fcc1 	bl	80004e0 <__aeabi_f2d>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4640      	mov	r0, r8
 8002b64:	4649      	mov	r1, r9
 8002b66:	f7fd fe3d 	bl	80007e4 <__aeabi_ddiv>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4620      	mov	r0, r4
 8002b70:	4629      	mov	r1, r5
 8002b72:	f7fd fb55 	bl	8000220 <__aeabi_dsub>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fd ffa1 	bl	8000ac4 <__aeabi_d2f>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4a7f      	ldr	r2, [pc, #508]	@ (8002d84 <updateMotors+0x5b4>)
 8002b86:	6013      	str	r3, [r2, #0]
        m2_output = PWM_MAX;
 8002b88:	4b7f      	ldr	r3, [pc, #508]	@ (8002d88 <updateMotors+0x5b8>)
 8002b8a:	61bb      	str	r3, [r7, #24]
 8002b8c:	e039      	b.n	8002c02 <updateMotors+0x432>
    } else if (m2_output < -PWM_MAX) {
 8002b8e:	69b8      	ldr	r0, [r7, #24]
 8002b90:	f7fd fca6 	bl	80004e0 <__aeabi_f2d>
 8002b94:	a376      	add	r3, pc, #472	@ (adr r3, 8002d70 <updateMotors+0x5a0>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd ff6b 	bl	8000a74 <__aeabi_dcmplt>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d02e      	beq.n	8002c02 <updateMotors+0x432>
        m2_int -= (m2_output + PWM_MAX) / Ki_Vel;
 8002ba4:	4b77      	ldr	r3, [pc, #476]	@ (8002d84 <updateMotors+0x5b4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fc99 	bl	80004e0 <__aeabi_f2d>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	460d      	mov	r5, r1
 8002bb2:	69b8      	ldr	r0, [r7, #24]
 8002bb4:	f7fd fc94 	bl	80004e0 <__aeabi_f2d>
 8002bb8:	a36b      	add	r3, pc, #428	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbe:	f7fd fb31 	bl	8000224 <__adddf3>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4690      	mov	r8, r2
 8002bc8:	4699      	mov	r9, r3
 8002bca:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <updateMotors+0x5ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fc86 	bl	80004e0 <__aeabi_f2d>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4640      	mov	r0, r8
 8002bda:	4649      	mov	r1, r9
 8002bdc:	f7fd fe02 	bl	80007e4 <__aeabi_ddiv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4620      	mov	r0, r4
 8002be6:	4629      	mov	r1, r5
 8002be8:	f7fd fb1a 	bl	8000220 <__aeabi_dsub>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fd ff66 	bl	8000ac4 <__aeabi_d2f>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4a62      	ldr	r2, [pc, #392]	@ (8002d84 <updateMotors+0x5b4>)
 8002bfc:	6013      	str	r3, [r2, #0]
        m2_output = -PWM_MAX;
 8002bfe:	4b60      	ldr	r3, [pc, #384]	@ (8002d80 <updateMotors+0x5b0>)
 8002c00:	61bb      	str	r3, [r7, #24]
    }

    if (m3_output > PWM_MAX) {
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7fd fc6c 	bl	80004e0 <__aeabi_f2d>
 8002c08:	a357      	add	r3, pc, #348	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd ff4f 	bl	8000ab0 <__aeabi_dcmpgt>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d02f      	beq.n	8002c78 <updateMotors+0x4a8>
        m3_int -= (m3_output - PWM_MAX) / Ki_Vel;
 8002c18:	4b5c      	ldr	r3, [pc, #368]	@ (8002d8c <updateMotors+0x5bc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fc5f 	bl	80004e0 <__aeabi_f2d>
 8002c22:	4604      	mov	r4, r0
 8002c24:	460d      	mov	r5, r1
 8002c26:	6978      	ldr	r0, [r7, #20]
 8002c28:	f7fd fc5a 	bl	80004e0 <__aeabi_f2d>
 8002c2c:	a34e      	add	r3, pc, #312	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f7fd faf5 	bl	8000220 <__aeabi_dsub>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4690      	mov	r8, r2
 8002c3c:	4699      	mov	r9, r3
 8002c3e:	4b4f      	ldr	r3, [pc, #316]	@ (8002d7c <updateMotors+0x5ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc4c 	bl	80004e0 <__aeabi_f2d>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4640      	mov	r0, r8
 8002c4e:	4649      	mov	r1, r9
 8002c50:	f7fd fdc8 	bl	80007e4 <__aeabi_ddiv>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	f7fd fae0 	bl	8000220 <__aeabi_dsub>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fd ff2c 	bl	8000ac4 <__aeabi_d2f>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a47      	ldr	r2, [pc, #284]	@ (8002d8c <updateMotors+0x5bc>)
 8002c70:	6013      	str	r3, [r2, #0]
        m3_output = PWM_MAX;
 8002c72:	4b45      	ldr	r3, [pc, #276]	@ (8002d88 <updateMotors+0x5b8>)
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e039      	b.n	8002cec <updateMotors+0x51c>
    } else if (m3_output < -PWM_MAX) {
 8002c78:	6978      	ldr	r0, [r7, #20]
 8002c7a:	f7fd fc31 	bl	80004e0 <__aeabi_f2d>
 8002c7e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002d70 <updateMotors+0x5a0>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fef6 	bl	8000a74 <__aeabi_dcmplt>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02e      	beq.n	8002cec <updateMotors+0x51c>
        m3_int -= (m3_output + PWM_MAX) / Ki_Vel;
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d8c <updateMotors+0x5bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc24 	bl	80004e0 <__aeabi_f2d>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	460d      	mov	r5, r1
 8002c9c:	6978      	ldr	r0, [r7, #20]
 8002c9e:	f7fd fc1f 	bl	80004e0 <__aeabi_f2d>
 8002ca2:	a331      	add	r3, pc, #196	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f7fd fabc 	bl	8000224 <__adddf3>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4690      	mov	r8, r2
 8002cb2:	4699      	mov	r9, r3
 8002cb4:	4b31      	ldr	r3, [pc, #196]	@ (8002d7c <updateMotors+0x5ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc11 	bl	80004e0 <__aeabi_f2d>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4640      	mov	r0, r8
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	f7fd fd8d 	bl	80007e4 <__aeabi_ddiv>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4620      	mov	r0, r4
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	f7fd faa5 	bl	8000220 <__aeabi_dsub>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd fef1 	bl	8000ac4 <__aeabi_d2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a29      	ldr	r2, [pc, #164]	@ (8002d8c <updateMotors+0x5bc>)
 8002ce6:	6013      	str	r3, [r2, #0]
        m3_output = -PWM_MAX;
 8002ce8:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <updateMotors+0x5b0>)
 8002cea:	617b      	str	r3, [r7, #20]
    }

    if (m4_output > PWM_MAX) {
 8002cec:	6938      	ldr	r0, [r7, #16]
 8002cee:	f7fd fbf7 	bl	80004e0 <__aeabi_f2d>
 8002cf2:	a31d      	add	r3, pc, #116	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd feda 	bl	8000ab0 <__aeabi_dcmpgt>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d048      	beq.n	8002d94 <updateMotors+0x5c4>
        m4_int -= (m4_output - PWM_MAX) / Ki_Vel;
 8002d02:	4b23      	ldr	r3, [pc, #140]	@ (8002d90 <updateMotors+0x5c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fbea 	bl	80004e0 <__aeabi_f2d>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	460d      	mov	r5, r1
 8002d10:	6938      	ldr	r0, [r7, #16]
 8002d12:	f7fd fbe5 	bl	80004e0 <__aeabi_f2d>
 8002d16:	a314      	add	r3, pc, #80	@ (adr r3, 8002d68 <updateMotors+0x598>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fa80 	bl	8000220 <__aeabi_dsub>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4690      	mov	r8, r2
 8002d26:	4699      	mov	r9, r3
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <updateMotors+0x5ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fbd7 	bl	80004e0 <__aeabi_f2d>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4640      	mov	r0, r8
 8002d38:	4649      	mov	r1, r9
 8002d3a:	f7fd fd53 	bl	80007e4 <__aeabi_ddiv>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4620      	mov	r0, r4
 8002d44:	4629      	mov	r1, r5
 8002d46:	f7fd fa6b 	bl	8000220 <__aeabi_dsub>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7fd feb7 	bl	8000ac4 <__aeabi_d2f>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a0d      	ldr	r2, [pc, #52]	@ (8002d90 <updateMotors+0x5c0>)
 8002d5a:	6013      	str	r3, [r2, #0]
        m4_output = PWM_MAX;
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <updateMotors+0x5b8>)
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e052      	b.n	8002e08 <updateMotors+0x638>
 8002d62:	bf00      	nop
 8002d64:	f3af 8000 	nop.w
 8002d68:	7ae147ae 	.word	0x7ae147ae
 8002d6c:	3fefae14 	.word	0x3fefae14
 8002d70:	7ae147ae 	.word	0x7ae147ae
 8002d74:	bfefae14 	.word	0xbfefae14
 8002d78:	200004d4 	.word	0x200004d4
 8002d7c:	080079f8 	.word	0x080079f8
 8002d80:	bf7d70a4 	.word	0xbf7d70a4
 8002d84:	200004d8 	.word	0x200004d8
 8002d88:	3f7d70a4 	.word	0x3f7d70a4
 8002d8c:	200004dc 	.word	0x200004dc
 8002d90:	200004e0 	.word	0x200004e0
    } else if (m4_output < -PWM_MAX) {
 8002d94:	6938      	ldr	r0, [r7, #16]
 8002d96:	f7fd fba3 	bl	80004e0 <__aeabi_f2d>
 8002d9a:	a32c      	add	r3, pc, #176	@ (adr r3, 8002e4c <updateMotors+0x67c>)
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	f7fd fe68 	bl	8000a74 <__aeabi_dcmplt>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02e      	beq.n	8002e08 <updateMotors+0x638>
        m4_int -= (m4_output + PWM_MAX) / Ki_Vel;
 8002daa:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <updateMotors+0x670>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fb96 	bl	80004e0 <__aeabi_f2d>
 8002db4:	4604      	mov	r4, r0
 8002db6:	460d      	mov	r5, r1
 8002db8:	6938      	ldr	r0, [r7, #16]
 8002dba:	f7fd fb91 	bl	80004e0 <__aeabi_f2d>
 8002dbe:	a31e      	add	r3, pc, #120	@ (adr r3, 8002e38 <updateMotors+0x668>)
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f7fd fa2e 	bl	8000224 <__adddf3>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4690      	mov	r8, r2
 8002dce:	4699      	mov	r9, r3
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e44 <updateMotors+0x674>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fb83 	bl	80004e0 <__aeabi_f2d>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4640      	mov	r0, r8
 8002de0:	4649      	mov	r1, r9
 8002de2:	f7fd fcff 	bl	80007e4 <__aeabi_ddiv>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4620      	mov	r0, r4
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7fd fa17 	bl	8000220 <__aeabi_dsub>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f7fd fe63 	bl	8000ac4 <__aeabi_d2f>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4a0f      	ldr	r2, [pc, #60]	@ (8002e40 <updateMotors+0x670>)
 8002e02:	6013      	str	r3, [r2, #0]
        m4_output = -PWM_MAX;
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <updateMotors+0x678>)
 8002e06:	613b      	str	r3, [r7, #16]
    }


    setForwardLeftMotorPWM(m1_output);
 8002e08:	ed97 0a07 	vldr	s0, [r7, #28]
 8002e0c:	f7ff fbb4 	bl	8002578 <setForwardLeftMotorPWM>
    setForwardRightMotorPWM(m4_output);
 8002e10:	ed97 0a04 	vldr	s0, [r7, #16]
 8002e14:	f7ff fbf2 	bl	80025fc <setForwardRightMotorPWM>
    setRearLeftMotorPWM(m2_output);
 8002e18:	ed97 0a06 	vldr	s0, [r7, #24]
 8002e1c:	f7ff fc30 	bl	8002680 <setRearLeftMotorPWM>
    setRearRightMotorPWM(m3_output);
 8002e20:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e24:	f7ff fc6e 	bl	8002704 <setRearRightMotorPWM>
}
 8002e28:	bf00      	nop
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e32:	bf00      	nop
 8002e34:	f3af 8000 	nop.w
 8002e38:	7ae147ae 	.word	0x7ae147ae
 8002e3c:	3fefae14 	.word	0x3fefae14
 8002e40:	200004e0 	.word	0x200004e0
 8002e44:	080079f8 	.word	0x080079f8
 8002e48:	bf7d70a4 	.word	0xbf7d70a4
 8002e4c:	7ae147ae 	.word	0x7ae147ae
 8002e50:	bfefae14 	.word	0xbfefae14

08002e54 <setTargetVelocities>:
    m3_int = 0;
    m4_int = 0;
}


void setTargetVelocities(float m1_target, float m2_target, float m3_target, float m4_target) {
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e5e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002e62:	ed87 1a01 	vstr	s2, [r7, #4]
 8002e66:	edc7 1a00 	vstr	s3, [r7]
	target_wheel_W.front_left = m1_target;
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <setTargetVelocities+0x3c>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6013      	str	r3, [r2, #0]
	target_wheel_W.rear_left = m2_target;
 8002e70:	4a07      	ldr	r2, [pc, #28]	@ (8002e90 <setTargetVelocities+0x3c>)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6053      	str	r3, [r2, #4]
	target_wheel_W.rear_right = m3_target;
 8002e76:	4a06      	ldr	r2, [pc, #24]	@ (8002e90 <setTargetVelocities+0x3c>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6093      	str	r3, [r2, #8]
	target_wheel_W.front_right = m4_target;
 8002e7c:	4a04      	ldr	r2, [pc, #16]	@ (8002e90 <setTargetVelocities+0x3c>)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	60d3      	str	r3, [r2, #12]

}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000004c 	.word	0x2000004c

08002e94 <Profile_Reset>:
#include "bluetoothDebug.h"

extern UART_HandleTypeDef huart2;

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <Profile_GetBrakingDistance>:
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
    profile->state = PS_ACCELERATING;
}

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	edd3 6a07 	vldr	s13, [r3, #28]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef2:	eef0 7ae7 	vabs.f32	s15, s15
 8002ef6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002efa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f04:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002f08:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <Profile_Update>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80b5 	beq.w	8003096 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * CONTROLLER_LOOP_INTERVAL;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f32:	4b5b      	ldr	r3, [pc, #364]	@ (80030a0 <Profile_Update+0x188>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3c:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f46:	eeb0 7ae7 	vabs.f32	s14, s15
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f50:	eef0 7ae7 	vabs.f32	s15, s15
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d128      	bne.n	8002fb8 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffad 	bl	8002ec6 <Profile_GetBrakingDistance>
 8002f6c:	eeb0 7a40 	vmov.f32	s14, s0
 8002f70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	d51c      	bpl.n	8002fb8 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	d10b      	bne.n	8002fac <Profile_Update+0x94>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002faa:	e002      	b.n	8002fb2 <Profile_Update+0x9a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	d519      	bpl.n	8003002 <Profile_Update+0xea>
        profile->speed += delta_v;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff6:	dd28      	ble.n	800304a <Profile_Update+0x132>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	e023      	b.n	800304a <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	ed93 7a01 	vldr	s14, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	edd3 7a06 	vldr	s15, [r3, #24]
 800300e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	dd18      	ble.n	800304a <Profile_Update+0x132>
        profile->speed -= delta_v;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	ed93 7a01 	vldr	s14, [r3, #4]
 800301e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	edd3 7a06 	vldr	s15, [r3, #24]
 8003038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	d503      	bpl.n	800304a <Profile_Update+0x132>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * CONTROLLER_LOOP_INTERVAL;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003050:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <Profile_Update+0x188>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b03      	cmp	r3, #3
 8003072:	d011      	beq.n	8003098 <Profile_Update+0x180>
 8003074:	edd7 7a02 	vldr	s15, [r7, #8]
 8003078:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 800307c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003084:	d508      	bpl.n	8003098 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2203      	movs	r2, #3
 800308a:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
 8003094:	e000      	b.n	8003098 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8003096:	bf00      	nop
    }
    //UART_Transmit_Float(&huart2, ">V", profile->speed, 2);

}
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	080079f0 	.word	0x080079f0

080030a4 <Profile_GetSpeed>:
        HAL_Delay(2);
    }
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
    return profile->speed;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	ee07 3a90 	vmov	s15, r3
}
 80030b4:	eeb0 0a67 	vmov.f32	s0, s15
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <HAL_MspInit+0x4c>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003110 <HAL_MspInit+0x4c>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030da:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <HAL_MspInit+0x4c>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_MspInit+0x4c>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	4a08      	ldr	r2, [pc, #32]	@ (8003110 <HAL_MspInit+0x4c>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f6:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_MspInit+0x4c>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	@ 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2f      	ldr	r2, [pc, #188]	@ (80031f0 <HAL_ADC_MspInit+0xdc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d157      	bne.n	80031e6 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	4b2e      	ldr	r3, [pc, #184]	@ (80031f4 <HAL_ADC_MspInit+0xe0>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	4a2d      	ldr	r2, [pc, #180]	@ (80031f4 <HAL_ADC_MspInit+0xe0>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003144:	6453      	str	r3, [r2, #68]	@ 0x44
 8003146:	4b2b      	ldr	r3, [pc, #172]	@ (80031f4 <HAL_ADC_MspInit+0xe0>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b27      	ldr	r3, [pc, #156]	@ (80031f4 <HAL_ADC_MspInit+0xe0>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	4a26      	ldr	r2, [pc, #152]	@ (80031f4 <HAL_ADC_MspInit+0xe0>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6313      	str	r3, [r2, #48]	@ 0x30
 8003162:	4b24      	ldr	r3, [pc, #144]	@ (80031f4 <HAL_ADC_MspInit+0xe0>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = M1_CS_Pin|M2_CS_Pin|M3_CS_Pin|M4_CS_Pin;
 800316e:	23f0      	movs	r3, #240	@ 0xf0
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003172:	2303      	movs	r3, #3
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	481d      	ldr	r0, [pc, #116]	@ (80031f8 <HAL_ADC_MspInit+0xe4>)
 8003182:	f001 fb17 	bl	80047b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003186:	4b1d      	ldr	r3, [pc, #116]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 8003188:	4a1d      	ldr	r2, [pc, #116]	@ (8003200 <HAL_ADC_MspInit+0xec>)
 800318a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800318c:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 800318e:	2200      	movs	r2, #0
 8003190:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003192:	4b1a      	ldr	r3, [pc, #104]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003198:	4b18      	ldr	r3, [pc, #96]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 800319a:	2200      	movs	r2, #0
 800319c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800319e:	4b17      	ldr	r3, [pc, #92]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031ae:	4b13      	ldr	r3, [pc, #76]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031b6:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031be:	4b0f      	ldr	r3, [pc, #60]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c4:	4b0d      	ldr	r3, [pc, #52]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031ca:	480c      	ldr	r0, [pc, #48]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031cc:	f000 ff76 	bl	80040bc <HAL_DMA_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80031d6:	f7ff f8d5 	bl	8002384 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a07      	ldr	r2, [pc, #28]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031de:	639a      	str	r2, [r3, #56]	@ 0x38
 80031e0:	4a06      	ldr	r2, [pc, #24]	@ (80031fc <HAL_ADC_MspInit+0xe8>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031e6:	bf00      	nop
 80031e8:	3728      	adds	r7, #40	@ 0x28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40012000 	.word	0x40012000
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020000 	.word	0x40020000
 80031fc:	200000bc 	.word	0x200000bc
 8003200:	40026410 	.word	0x40026410

08003204 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0e      	ldr	r2, [pc, #56]	@ (800324c <HAL_TIM_PWM_MspInit+0x48>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d115      	bne.n	8003242 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <HAL_TIM_PWM_MspInit+0x4c>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <HAL_TIM_PWM_MspInit+0x4c>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6453      	str	r3, [r2, #68]	@ 0x44
 8003226:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <HAL_TIM_PWM_MspInit+0x4c>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	2019      	movs	r0, #25
 8003238:	f000 ff09 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800323c:	2019      	movs	r0, #25
 800323e:	f000 ff22 	bl	8004086 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40010000 	.word	0x40010000
 8003250:	40023800 	.word	0x40023800

08003254 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b090      	sub	sp, #64	@ 0x40
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003274:	d153      	bne.n	800331e <HAL_TIM_Encoder_MspInit+0xca>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327a:	4b81      	ldr	r3, [pc, #516]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	4a80      	ldr	r2, [pc, #512]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6413      	str	r3, [r2, #64]	@ 0x40
 8003286:	4b7e      	ldr	r3, [pc, #504]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
 8003296:	4b7a      	ldr	r3, [pc, #488]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	4a79      	ldr	r2, [pc, #484]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a2:	4b77      	ldr	r3, [pc, #476]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]
 80032b2:	4b73      	ldr	r3, [pc, #460]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	4a72      	ldr	r2, [pc, #456]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032be:	4b70      	ldr	r3, [pc, #448]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1_EncoderCH1_Pin;
 80032ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032dc:	2301      	movs	r3, #1
 80032de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH1_GPIO_Port, &GPIO_InitStruct);
 80032e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032e4:	4619      	mov	r1, r3
 80032e6:	4867      	ldr	r0, [pc, #412]	@ (8003484 <HAL_TIM_Encoder_MspInit+0x230>)
 80032e8:	f001 fa64 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_EncoderCH2_Pin;
 80032ec:	2308      	movs	r3, #8
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	2300      	movs	r3, #0
 80032fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032fc:	2301      	movs	r3, #1
 80032fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH2_GPIO_Port, &GPIO_InitStruct);
 8003300:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003304:	4619      	mov	r1, r3
 8003306:	4860      	ldr	r0, [pc, #384]	@ (8003488 <HAL_TIM_Encoder_MspInit+0x234>)
 8003308:	f001 fa54 	bl	80047b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800330c:	2200      	movs	r2, #0
 800330e:	2100      	movs	r1, #0
 8003310:	201c      	movs	r0, #28
 8003312:	f000 fe9c 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003316:	201c      	movs	r0, #28
 8003318:	f000 feb5 	bl	8004086 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800331c:	e0ac      	b.n	8003478 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5a      	ldr	r2, [pc, #360]	@ (800348c <HAL_TIM_Encoder_MspInit+0x238>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d134      	bne.n	8003392 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	4b54      	ldr	r3, [pc, #336]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	4a53      	ldr	r2, [pc, #332]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	6413      	str	r3, [r2, #64]	@ 0x40
 8003338:	4b51      	ldr	r3, [pc, #324]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	4b4d      	ldr	r3, [pc, #308]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334c:	4a4c      	ldr	r2, [pc, #304]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6313      	str	r3, [r2, #48]	@ 0x30
 8003354:	4b4a      	ldr	r3, [pc, #296]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2_EncoderCH1_Pin|M2_EncoderCH2_Pin;
 8003360:	23c0      	movs	r3, #192	@ 0xc0
 8003362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003370:	2302      	movs	r3, #2
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003374:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003378:	4619      	mov	r1, r3
 800337a:	4845      	ldr	r0, [pc, #276]	@ (8003490 <HAL_TIM_Encoder_MspInit+0x23c>)
 800337c:	f001 fa1a 	bl	80047b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003380:	2200      	movs	r2, #0
 8003382:	2100      	movs	r1, #0
 8003384:	201d      	movs	r0, #29
 8003386:	f000 fe62 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800338a:	201d      	movs	r0, #29
 800338c:	f000 fe7b 	bl	8004086 <HAL_NVIC_EnableIRQ>
}
 8003390:	e072      	b.n	8003478 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a3f      	ldr	r2, [pc, #252]	@ (8003494 <HAL_TIM_Encoder_MspInit+0x240>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d134      	bne.n	8003406 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	4b37      	ldr	r3, [pc, #220]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	4a36      	ldr	r2, [pc, #216]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ac:	4b34      	ldr	r3, [pc, #208]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	4b30      	ldr	r3, [pc, #192]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_EncoderCH1_Pin|M3_EncoderCH2_Pin;
 80033d4:	23c0      	movs	r3, #192	@ 0xc0
 80033d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e0:	2300      	movs	r3, #0
 80033e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033e4:	2302      	movs	r3, #2
 80033e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033ec:	4619      	mov	r1, r3
 80033ee:	4826      	ldr	r0, [pc, #152]	@ (8003488 <HAL_TIM_Encoder_MspInit+0x234>)
 80033f0:	f001 f9e0 	bl	80047b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2100      	movs	r1, #0
 80033f8:	201e      	movs	r0, #30
 80033fa:	f000 fe28 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033fe:	201e      	movs	r0, #30
 8003400:	f000 fe41 	bl	8004086 <HAL_NVIC_EnableIRQ>
}
 8003404:	e038      	b.n	8003478 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <HAL_TIM_Encoder_MspInit+0x244>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d133      	bne.n	8003478 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	4b1a      	ldr	r3, [pc, #104]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	4a19      	ldr	r2, [pc, #100]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 800341a:	f043 0308 	orr.w	r3, r3, #8
 800341e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003420:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	4a12      	ldr	r2, [pc, #72]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6313      	str	r3, [r2, #48]	@ 0x30
 800343c:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <HAL_TIM_Encoder_MspInit+0x22c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_EncoderCH1_Pin|M4_EncoderCH2_Pin;
 8003448:	2303      	movs	r3, #3
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003458:	2302      	movs	r3, #2
 800345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003460:	4619      	mov	r1, r3
 8003462:	4808      	ldr	r0, [pc, #32]	@ (8003484 <HAL_TIM_Encoder_MspInit+0x230>)
 8003464:	f001 f9a6 	bl	80047b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003468:	2200      	movs	r2, #0
 800346a:	2100      	movs	r1, #0
 800346c:	2032      	movs	r0, #50	@ 0x32
 800346e:	f000 fdee 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003472:	2032      	movs	r0, #50	@ 0x32
 8003474:	f000 fe07 	bl	8004086 <HAL_NVIC_EnableIRQ>
}
 8003478:	bf00      	nop
 800347a:	3740      	adds	r7, #64	@ 0x40
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	40020000 	.word	0x40020000
 8003488:	40020400 	.word	0x40020400
 800348c:	40000400 	.word	0x40000400
 8003490:	40020800 	.word	0x40020800
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00

0800349c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_TIM_Base_MspInit+0x80>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d116      	bne.n	80034dc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_TIM_Base_MspInit+0x84>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003520 <HAL_TIM_Base_MspInit+0x84>)
 80034b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80034be:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <HAL_TIM_Base_MspInit+0x84>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	202c      	movs	r0, #44	@ 0x2c
 80034d0:	f000 fdbd 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80034d4:	202c      	movs	r0, #44	@ 0x2c
 80034d6:	f000 fdd6 	bl	8004086 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 80034da:	e01a      	b.n	8003512 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a10      	ldr	r2, [pc, #64]	@ (8003524 <HAL_TIM_Base_MspInit+0x88>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d115      	bne.n	8003512 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <HAL_TIM_Base_MspInit+0x84>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003520 <HAL_TIM_Base_MspInit+0x84>)
 80034f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003520 <HAL_TIM_Base_MspInit+0x84>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	202d      	movs	r0, #45	@ 0x2d
 8003508:	f000 fda1 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800350c:	202d      	movs	r0, #45	@ 0x2d
 800350e:	f000 fdba 	bl	8004086 <HAL_NVIC_EnableIRQ>
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40001c00 	.word	0x40001c00
 8003520:	40023800 	.word	0x40023800
 8003524:	40002000 	.word	0x40002000

08003528 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <HAL_TIM_MspPostInit+0x68>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d11e      	bne.n	8003588 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <HAL_TIM_MspPostInit+0x6c>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	4a10      	ldr	r2, [pc, #64]	@ (8003594 <HAL_TIM_MspPostInit+0x6c>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6313      	str	r3, [r2, #48]	@ 0x30
 800355a:	4b0e      	ldr	r3, [pc, #56]	@ (8003594 <HAL_TIM_MspPostInit+0x6c>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8003566:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800356a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	2302      	movs	r3, #2
 800356e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003578:	2301      	movs	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357c:	f107 030c 	add.w	r3, r7, #12
 8003580:	4619      	mov	r1, r3
 8003582:	4805      	ldr	r0, [pc, #20]	@ (8003598 <HAL_TIM_MspPostInit+0x70>)
 8003584:	f001 f916 	bl	80047b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003588:	bf00      	nop
 800358a:	3720      	adds	r7, #32
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40010000 	.word	0x40010000
 8003594:	40023800 	.word	0x40023800
 8003598:	40020000 	.word	0x40020000

0800359c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	@ 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a45      	ldr	r2, [pc, #276]	@ (80036d0 <HAL_UART_MspInit+0x134>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d12c      	bne.n	8003618 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	4b44      	ldr	r3, [pc, #272]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a43      	ldr	r2, [pc, #268]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	4b3d      	ldr	r3, [pc, #244]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a3c      	ldr	r2, [pc, #240]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b3a      	ldr	r3, [pc, #232]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035f6:	230c      	movs	r3, #12
 80035f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003602:	2303      	movs	r3, #3
 8003604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003606:	2307      	movs	r3, #7
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	f107 031c 	add.w	r3, r7, #28
 800360e:	4619      	mov	r1, r3
 8003610:	4831      	ldr	r0, [pc, #196]	@ (80036d8 <HAL_UART_MspInit+0x13c>)
 8003612:	f001 f8cf 	bl	80047b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003616:	e057      	b.n	80036c8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2f      	ldr	r2, [pc, #188]	@ (80036dc <HAL_UART_MspInit+0x140>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d152      	bne.n	80036c8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003630:	6413      	str	r3, [r2, #64]	@ 0x40
 8003632:	4b28      	ldr	r3, [pc, #160]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	4b24      	ldr	r3, [pc, #144]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	4a23      	ldr	r2, [pc, #140]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6313      	str	r3, [r2, #48]	@ 0x30
 800364e:	4b21      	ldr	r3, [pc, #132]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	4a1c      	ldr	r2, [pc, #112]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	6313      	str	r3, [r2, #48]	@ 0x30
 800366a:	4b1a      	ldr	r3, [pc, #104]	@ (80036d4 <HAL_UART_MspInit+0x138>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003676:	2320      	movs	r3, #32
 8003678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003686:	2307      	movs	r3, #7
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	4813      	ldr	r0, [pc, #76]	@ (80036e0 <HAL_UART_MspInit+0x144>)
 8003692:	f001 f88f 	bl	80047b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800369a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036a8:	2307      	movs	r3, #7
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ac:	f107 031c 	add.w	r3, r7, #28
 80036b0:	4619      	mov	r1, r3
 80036b2:	480c      	ldr	r0, [pc, #48]	@ (80036e4 <HAL_UART_MspInit+0x148>)
 80036b4:	f001 f87e 	bl	80047b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	2027      	movs	r0, #39	@ 0x27
 80036be:	f000 fcc6 	bl	800404e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036c2:	2027      	movs	r0, #39	@ 0x27
 80036c4:	f000 fcdf 	bl	8004086 <HAL_NVIC_EnableIRQ>
}
 80036c8:	bf00      	nop
 80036ca:	3730      	adds	r7, #48	@ 0x30
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40004400 	.word	0x40004400
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40004800 	.word	0x40004800
 80036e0:	40020800 	.word	0x40020800
 80036e4:	40020400 	.word	0x40020400

080036e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036ec:	bf00      	nop
 80036ee:	e7fd      	b.n	80036ec <NMI_Handler+0x4>

080036f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036f4:	bf00      	nop
 80036f6:	e7fd      	b.n	80036f4 <HardFault_Handler+0x4>

080036f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <MemManage_Handler+0x4>

08003700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <BusFault_Handler+0x4>

08003708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <UsageFault_Handler+0x4>

08003710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800373e:	f000 f8f5 	bl	800392c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8003742:	f000 f86f 	bl	8003824 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003750:	4802      	ldr	r0, [pc, #8]	@ (800375c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003752:	f002 fb3b 	bl	8005dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000011c 	.word	0x2000011c

08003760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003764:	4802      	ldr	r0, [pc, #8]	@ (8003770 <TIM2_IRQHandler+0x10>)
 8003766:	f002 fb31 	bl	8005dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000164 	.word	0x20000164

08003774 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003778:	4802      	ldr	r0, [pc, #8]	@ (8003784 <TIM3_IRQHandler+0x10>)
 800377a:	f002 fb27 	bl	8005dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200001ac 	.word	0x200001ac

08003788 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800378c:	4802      	ldr	r0, [pc, #8]	@ (8003798 <TIM4_IRQHandler+0x10>)
 800378e:	f002 fb1d 	bl	8005dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200001f4 	.word	0x200001f4

0800379c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037a0:	4802      	ldr	r0, [pc, #8]	@ (80037ac <USART3_IRQHandler+0x10>)
 80037a2:	f003 f951 	bl	8006a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	2000035c 	.word	0x2000035c

080037b0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80037b4:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80037b6:	f002 fb09 	bl	8005dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000284 	.word	0x20000284

080037c4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80037c8:	4802      	ldr	r0, [pc, #8]	@ (80037d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80037ca:	f002 faff 	bl	8005dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200002cc 	.word	0x200002cc

080037d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80037dc:	4802      	ldr	r0, [pc, #8]	@ (80037e8 <TIM5_IRQHandler+0x10>)
 80037de:	f002 faf5 	bl	8005dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2000023c 	.word	0x2000023c

080037ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037f0:	4802      	ldr	r0, [pc, #8]	@ (80037fc <DMA2_Stream0_IRQHandler+0x10>)
 80037f2:	f000 fda3 	bl	800433c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200000bc 	.word	0x200000bc

08003800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <SystemInit+0x20>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380a:	4a05      	ldr	r2, [pc, #20]	@ (8003820 <SystemInit+0x20>)
 800380c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003810:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <SysTickFunction>:
        // Reset encoders to prevent overflow
        resetEncodersinSystick();
    }
}

void SysTickFunction(void) {
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
        //        current_robot_velocity.vx,
        //        current_robot_velocity.vy,
        //        current_robot_velocity.wz);
    }
    */
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800386c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003838:	f7ff ffe2 	bl	8003800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800383c:	480c      	ldr	r0, [pc, #48]	@ (8003870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800383e:	490d      	ldr	r1, [pc, #52]	@ (8003874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003840:	4a0d      	ldr	r2, [pc, #52]	@ (8003878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003844:	e002      	b.n	800384c <LoopCopyDataInit>

08003846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800384a:	3304      	adds	r3, #4

0800384c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800384c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800384e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003850:	d3f9      	bcc.n	8003846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003852:	4a0a      	ldr	r2, [pc, #40]	@ (800387c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003854:	4c0a      	ldr	r4, [pc, #40]	@ (8003880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003858:	e001      	b.n	800385e <LoopFillZerobss>

0800385a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800385a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800385c:	3204      	adds	r2, #4

0800385e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800385e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003860:	d3fb      	bcc.n	800385a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003862:	f004 f85f 	bl	8007924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003866:	f7fe f821 	bl	80018ac <main>
  bx  lr    
 800386a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800386c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003874:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003878:	08007a48 	.word	0x08007a48
  ldr r2, =_sbss
 800387c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003880:	200004e8 	.word	0x200004e8

08003884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003884:	e7fe      	b.n	8003884 <ADC_IRQHandler>
	...

08003888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800388c:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <HAL_Init+0x40>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0d      	ldr	r2, [pc, #52]	@ (80038c8 <HAL_Init+0x40>)
 8003892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <HAL_Init+0x40>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0a      	ldr	r2, [pc, #40]	@ (80038c8 <HAL_Init+0x40>)
 800389e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a4:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <HAL_Init+0x40>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a07      	ldr	r2, [pc, #28]	@ (80038c8 <HAL_Init+0x40>)
 80038aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b0:	2003      	movs	r0, #3
 80038b2:	f000 fbc1 	bl	8004038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b6:	200f      	movs	r0, #15
 80038b8:	f000 f808 	bl	80038cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038bc:	f7ff fc02 	bl	80030c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023c00 	.word	0x40023c00

080038cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d4:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_InitTick+0x54>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b12      	ldr	r3, [pc, #72]	@ (8003924 <HAL_InitTick+0x58>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	4619      	mov	r1, r3
 80038de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fbd9 	bl	80040a2 <HAL_SYSTICK_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00e      	b.n	8003918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b0f      	cmp	r3, #15
 80038fe:	d80a      	bhi.n	8003916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003900:	2200      	movs	r2, #0
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	f000 fba1 	bl	800404e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800390c:	4a06      	ldr	r2, [pc, #24]	@ (8003928 <HAL_InitTick+0x5c>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000008 	.word	0x20000008
 8003924:	20000010 	.word	0x20000010
 8003928:	2000000c 	.word	0x2000000c

0800392c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_IncTick+0x20>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_IncTick+0x24>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4413      	add	r3, r2
 800393c:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <HAL_IncTick+0x24>)
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000010 	.word	0x20000010
 8003950:	200004e4 	.word	0x200004e4

08003954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return uwTick;
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <HAL_GetTick+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	200004e4 	.word	0x200004e4

0800396c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7ff ffee 	bl	8003954 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d005      	beq.n	8003992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <HAL_Delay+0x44>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003992:	bf00      	nop
 8003994:	f7ff ffde 	bl	8003954 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d8f7      	bhi.n	8003994 <HAL_Delay+0x28>
  {
  }
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000010 	.word	0x20000010

080039b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e033      	b.n	8003a32 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff fb9e 	bl	8003114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d118      	bne.n	8003a24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039fa:	f023 0302 	bic.w	r3, r3, #2
 80039fe:	f043 0202 	orr.w	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f94a 	bl	8003ca0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a22:	e001      	b.n	8003a28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x1c>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e113      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x244>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b09      	cmp	r3, #9
 8003a66:	d925      	bls.n	8003ab4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68d9      	ldr	r1, [r3, #12]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b1e      	subs	r3, #30
 8003a7e:	2207      	movs	r2, #7
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43da      	mvns	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68d9      	ldr	r1, [r3, #12]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4403      	add	r3, r0
 8003aa6:	3b1e      	subs	r3, #30
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	e022      	b.n	8003afa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6919      	ldr	r1, [r3, #16]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	2207      	movs	r2, #7
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6919      	ldr	r1, [r3, #16]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4403      	add	r3, r0
 8003af0:	409a      	lsls	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b06      	cmp	r3, #6
 8003b00:	d824      	bhi.n	8003b4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	3b05      	subs	r3, #5
 8003b14:	221f      	movs	r2, #31
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	400a      	ands	r2, r1
 8003b22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4618      	mov	r0, r3
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3b05      	subs	r3, #5
 8003b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b4a:	e04c      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d824      	bhi.n	8003b9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	3b23      	subs	r3, #35	@ 0x23
 8003b66:	221f      	movs	r2, #31
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43da      	mvns	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	400a      	ands	r2, r1
 8003b74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	4618      	mov	r0, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3b23      	subs	r3, #35	@ 0x23
 8003b90:	fa00 f203 	lsl.w	r2, r0, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b9c:	e023      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	3b41      	subs	r3, #65	@ 0x41
 8003bb0:	221f      	movs	r2, #31
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	4618      	mov	r0, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3b41      	subs	r3, #65	@ 0x41
 8003bda:	fa00 f203 	lsl.w	r2, r0, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003be6:	4b29      	ldr	r3, [pc, #164]	@ (8003c8c <HAL_ADC_ConfigChannel+0x250>)
 8003be8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a28      	ldr	r2, [pc, #160]	@ (8003c90 <HAL_ADC_ConfigChannel+0x254>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10f      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1d8>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b12      	cmp	r3, #18
 8003bfa:	d10b      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <HAL_ADC_ConfigChannel+0x254>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d12b      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x23a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1c      	ldr	r2, [pc, #112]	@ (8003c94 <HAL_ADC_ConfigChannel+0x258>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <HAL_ADC_ConfigChannel+0x1f4>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b11      	cmp	r3, #17
 8003c2e:	d122      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a11      	ldr	r2, [pc, #68]	@ (8003c94 <HAL_ADC_ConfigChannel+0x258>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d111      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c52:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <HAL_ADC_ConfigChannel+0x25c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a11      	ldr	r2, [pc, #68]	@ (8003c9c <HAL_ADC_ConfigChannel+0x260>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	0c9a      	lsrs	r2, r3, #18
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c68:	e002      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f9      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012300 	.word	0x40012300
 8003c90:	40012000 	.word	0x40012000
 8003c94:	10000012 	.word	0x10000012
 8003c98:	20000008 	.word	0x20000008
 8003c9c:	431bde83 	.word	0x431bde83

08003ca0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ca8:	4b79      	ldr	r3, [pc, #484]	@ (8003e90 <ADC_Init+0x1f0>)
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6899      	ldr	r1, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	4a58      	ldr	r2, [pc, #352]	@ (8003e94 <ADC_Init+0x1f4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	e00f      	b.n	8003d9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d9c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0202 	bic.w	r2, r2, #2
 8003dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6899      	ldr	r1, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7e1b      	ldrb	r3, [r3, #24]
 8003db8:	005a      	lsls	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01b      	beq.n	8003e04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dda:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	3b01      	subs	r3, #1
 8003df8:	035a      	lsls	r2, r3, #13
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	e007      	b.n	8003e14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e12:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	051a      	lsls	r2, r3, #20
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e56:	025a      	lsls	r2, r3, #9
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6899      	ldr	r1, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	029a      	lsls	r2, r3, #10
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012300 	.word	0x40012300
 8003e94:	0f000001 	.word	0x0f000001

08003e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eca:	4a04      	ldr	r2, [pc, #16]	@ (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	60d3      	str	r3, [r2, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee4:	4b04      	ldr	r3, [pc, #16]	@ (8003ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	f003 0307 	and.w	r3, r3, #7
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	db0b      	blt.n	8003f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4907      	ldr	r1, [pc, #28]	@ (8003f34 <__NVIC_EnableIRQ+0x38>)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000e100 	.word	0xe000e100

08003f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db0a      	blt.n	8003f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	490c      	ldr	r1, [pc, #48]	@ (8003f84 <__NVIC_SetPriority+0x4c>)
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f60:	e00a      	b.n	8003f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4908      	ldr	r1, [pc, #32]	@ (8003f88 <__NVIC_SetPriority+0x50>)
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3b04      	subs	r3, #4
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	761a      	strb	r2, [r3, #24]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000e100 	.word	0xe000e100
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	@ 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	bf28      	it	cs
 8003faa:	2304      	movcs	r3, #4
 8003fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d902      	bls.n	8003fbc <NVIC_EncodePriority+0x30>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3b03      	subs	r3, #3
 8003fba:	e000      	b.n	8003fbe <NVIC_EncodePriority+0x32>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	401a      	ands	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	43d9      	mvns	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	4313      	orrs	r3, r2
         );
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	@ 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004004:	d301      	bcc.n	800400a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004006:	2301      	movs	r3, #1
 8004008:	e00f      	b.n	800402a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400a:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <SysTick_Config+0x40>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004012:	210f      	movs	r1, #15
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	f7ff ff8e 	bl	8003f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <SysTick_Config+0x40>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004022:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <SysTick_Config+0x40>)
 8004024:	2207      	movs	r2, #7
 8004026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	e000e010 	.word	0xe000e010

08004038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff29 	bl	8003e98 <__NVIC_SetPriorityGrouping>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	4603      	mov	r3, r0
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004060:	f7ff ff3e 	bl	8003ee0 <__NVIC_GetPriorityGrouping>
 8004064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7ff ff8e 	bl	8003f8c <NVIC_EncodePriority>
 8004070:	4602      	mov	r2, r0
 8004072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff5d 	bl	8003f38 <__NVIC_SetPriority>
}
 800407e:	bf00      	nop
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	4603      	mov	r3, r0
 800408e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff31 	bl	8003efc <__NVIC_EnableIRQ>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ffa2 	bl	8003ff4 <SysTick_Config>
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040c8:	f7ff fc44 	bl	8003954 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e099      	b.n	800420c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f8:	e00f      	b.n	800411a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040fa:	f7ff fc2b 	bl	8003954 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b05      	cmp	r3, #5
 8004106:	d908      	bls.n	800411a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2203      	movs	r2, #3
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e078      	b.n	800420c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e8      	bne.n	80040fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4b38      	ldr	r3, [pc, #224]	@ (8004214 <HAL_DMA_Init+0x158>)
 8004134:	4013      	ands	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800415e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	4313      	orrs	r3, r2
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0307 	bic.w	r3, r3, #7
 800419a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d117      	bne.n	80041de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fa7b 	bl	80046bc <DMA_CheckFifoParam>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2240      	movs	r2, #64	@ 0x40
 80041d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80041da:	2301      	movs	r3, #1
 80041dc:	e016      	b.n	800420c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa32 	bl	8004650 <DMA_CalcBaseAndBitshift>
 80041ec:	4603      	mov	r3, r0
 80041ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	223f      	movs	r2, #63	@ 0x3f
 80041f6:	409a      	lsls	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	f010803f 	.word	0xf010803f

08004218 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004226:	f7ff fb95 	bl	8003954 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d008      	beq.n	800424a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2280      	movs	r2, #128	@ 0x80
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e052      	b.n	80042f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0216 	bic.w	r2, r2, #22
 8004258:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004268:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <HAL_DMA_Abort+0x62>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0208 	bic.w	r2, r2, #8
 8004288:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429a:	e013      	b.n	80042c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800429c:	f7ff fb5a 	bl	8003954 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d90c      	bls.n	80042c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2203      	movs	r2, #3
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e015      	b.n	80042f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e4      	bne.n	800429c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	223f      	movs	r2, #63	@ 0x3f
 80042d8:	409a      	lsls	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d004      	beq.n	8004316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2280      	movs	r2, #128	@ 0x80
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e00c      	b.n	8004330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2205      	movs	r2, #5
 800431a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004348:	4b8e      	ldr	r3, [pc, #568]	@ (8004584 <HAL_DMA_IRQHandler+0x248>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a8e      	ldr	r2, [pc, #568]	@ (8004588 <HAL_DMA_IRQHandler+0x24c>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	0a9b      	lsrs	r3, r3, #10
 8004354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	2208      	movs	r2, #8
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01a      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d013      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0204 	bic.w	r2, r2, #4
 800438e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004394:	2208      	movs	r2, #8
 8004396:	409a      	lsls	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ac:	2201      	movs	r2, #1
 80043ae:	409a      	lsls	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d012      	beq.n	80043de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	2201      	movs	r2, #1
 80043cc:	409a      	lsls	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	2204      	movs	r2, #4
 80043e4:	409a      	lsls	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004400:	2204      	movs	r2, #4
 8004402:	409a      	lsls	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440c:	f043 0204 	orr.w	r2, r3, #4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004418:	2210      	movs	r2, #16
 800441a:	409a      	lsls	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d043      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d03c      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004436:	2210      	movs	r2, #16
 8004438:	409a      	lsls	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d018      	beq.n	800447e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d108      	bne.n	800446c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d024      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
 800446a:	e01f      	b.n	80044ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
 800447c:	e016      	b.n	80044ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d107      	bne.n	800449c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0208 	bic.w	r2, r2, #8
 800449a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b0:	2220      	movs	r2, #32
 80044b2:	409a      	lsls	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 808f 	beq.w	80045dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8087 	beq.w	80045dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d2:	2220      	movs	r2, #32
 80044d4:	409a      	lsls	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d136      	bne.n	8004554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0216 	bic.w	r2, r2, #22
 80044f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <HAL_DMA_IRQHandler+0x1da>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0208 	bic.w	r2, r2, #8
 8004524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452a:	223f      	movs	r2, #63	@ 0x3f
 800452c:	409a      	lsls	r2, r3
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004546:	2b00      	cmp	r3, #0
 8004548:	d07e      	beq.n	8004648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
        }
        return;
 8004552:	e079      	b.n	8004648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01d      	beq.n	800459e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004574:	2b00      	cmp	r3, #0
 8004576:	d031      	beq.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
 8004580:	e02c      	b.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
 8004582:	bf00      	nop
 8004584:	20000008 	.word	0x20000008
 8004588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d023      	beq.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
 800459c:	e01e      	b.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10f      	bne.n	80045cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0210 	bic.w	r2, r2, #16
 80045ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d032      	beq.n	800464a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2205      	movs	r2, #5
 80045f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	3301      	adds	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	d307      	bcc.n	8004624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f2      	bne.n	8004608 <HAL_DMA_IRQHandler+0x2cc>
 8004622:	e000      	b.n	8004626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
 8004646:	e000      	b.n	800464a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004648:	bf00      	nop
    }
  }
}
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	3b10      	subs	r3, #16
 8004660:	4a14      	ldr	r2, [pc, #80]	@ (80046b4 <DMA_CalcBaseAndBitshift+0x64>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800466a:	4a13      	ldr	r2, [pc, #76]	@ (80046b8 <DMA_CalcBaseAndBitshift+0x68>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d909      	bls.n	8004692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	1d1a      	adds	r2, r3, #4
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004690:	e007      	b.n	80046a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	aaaaaaab 	.word	0xaaaaaaab
 80046b8:	08007a30 	.word	0x08007a30

080046bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d11f      	bne.n	8004716 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d856      	bhi.n	800478a <DMA_CheckFifoParam+0xce>
 80046dc:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <DMA_CheckFifoParam+0x28>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004707 	.word	0x08004707
 80046ec:	080046f5 	.word	0x080046f5
 80046f0:	0800478b 	.word	0x0800478b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d046      	beq.n	800478e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004704:	e043      	b.n	800478e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800470e:	d140      	bne.n	8004792 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004714:	e03d      	b.n	8004792 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471e:	d121      	bne.n	8004764 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d837      	bhi.n	8004796 <DMA_CheckFifoParam+0xda>
 8004726:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <DMA_CheckFifoParam+0x70>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	0800473d 	.word	0x0800473d
 8004730:	08004743 	.word	0x08004743
 8004734:	0800473d 	.word	0x0800473d
 8004738:	08004755 	.word	0x08004755
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
      break;
 8004740:	e030      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d025      	beq.n	800479a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004752:	e022      	b.n	800479a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800475c:	d11f      	bne.n	800479e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004762:	e01c      	b.n	800479e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d903      	bls.n	8004772 <DMA_CheckFifoParam+0xb6>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d003      	beq.n	8004778 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004770:	e018      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
      break;
 8004776:	e015      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00e      	beq.n	80047a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	e00b      	b.n	80047a2 <DMA_CheckFifoParam+0xe6>
      break;
 800478a:	bf00      	nop
 800478c:	e00a      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
      break;
 800478e:	bf00      	nop
 8004790:	e008      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004792:	bf00      	nop
 8004794:	e006      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004796:	bf00      	nop
 8004798:	e004      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
      break;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <DMA_CheckFifoParam+0xe8>
      break;
 80047a2:	bf00      	nop
    }
  } 
  
  return status; 
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop

080047b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b089      	sub	sp, #36	@ 0x24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e165      	b.n	8004a9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047d0:	2201      	movs	r2, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	f040 8154 	bne.w	8004a96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d005      	beq.n	8004806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004802:	2b02      	cmp	r3, #2
 8004804:	d130      	bne.n	8004868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	2203      	movs	r2, #3
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800483c:	2201      	movs	r2, #1
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 0201 	and.w	r2, r3, #1
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4313      	orrs	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	2b03      	cmp	r3, #3
 8004872:	d017      	beq.n	80048a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d123      	bne.n	80048f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	08da      	lsrs	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	220f      	movs	r2, #15
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80ae 	beq.w	8004a96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004942:	4a5c      	ldr	r2, [pc, #368]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 8004944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004948:	6453      	str	r3, [r2, #68]	@ 0x44
 800494a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004956:	4a58      	ldr	r2, [pc, #352]	@ (8004ab8 <HAL_GPIO_Init+0x304>)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	3302      	adds	r3, #2
 800495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	220f      	movs	r2, #15
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a4f      	ldr	r2, [pc, #316]	@ (8004abc <HAL_GPIO_Init+0x308>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d025      	beq.n	80049ce <HAL_GPIO_Init+0x21a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a4e      	ldr	r2, [pc, #312]	@ (8004ac0 <HAL_GPIO_Init+0x30c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01f      	beq.n	80049ca <HAL_GPIO_Init+0x216>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a4d      	ldr	r2, [pc, #308]	@ (8004ac4 <HAL_GPIO_Init+0x310>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d019      	beq.n	80049c6 <HAL_GPIO_Init+0x212>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a4c      	ldr	r2, [pc, #304]	@ (8004ac8 <HAL_GPIO_Init+0x314>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_GPIO_Init+0x20e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a4b      	ldr	r2, [pc, #300]	@ (8004acc <HAL_GPIO_Init+0x318>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00d      	beq.n	80049be <HAL_GPIO_Init+0x20a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad0 <HAL_GPIO_Init+0x31c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d007      	beq.n	80049ba <HAL_GPIO_Init+0x206>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a49      	ldr	r2, [pc, #292]	@ (8004ad4 <HAL_GPIO_Init+0x320>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d101      	bne.n	80049b6 <HAL_GPIO_Init+0x202>
 80049b2:	2306      	movs	r3, #6
 80049b4:	e00c      	b.n	80049d0 <HAL_GPIO_Init+0x21c>
 80049b6:	2307      	movs	r3, #7
 80049b8:	e00a      	b.n	80049d0 <HAL_GPIO_Init+0x21c>
 80049ba:	2305      	movs	r3, #5
 80049bc:	e008      	b.n	80049d0 <HAL_GPIO_Init+0x21c>
 80049be:	2304      	movs	r3, #4
 80049c0:	e006      	b.n	80049d0 <HAL_GPIO_Init+0x21c>
 80049c2:	2303      	movs	r3, #3
 80049c4:	e004      	b.n	80049d0 <HAL_GPIO_Init+0x21c>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e002      	b.n	80049d0 <HAL_GPIO_Init+0x21c>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <HAL_GPIO_Init+0x21c>
 80049ce:	2300      	movs	r3, #0
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	f002 0203 	and.w	r2, r2, #3
 80049d6:	0092      	lsls	r2, r2, #2
 80049d8:	4093      	lsls	r3, r2
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049e0:	4935      	ldr	r1, [pc, #212]	@ (8004ab8 <HAL_GPIO_Init+0x304>)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	3302      	adds	r3, #2
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049ee:	4b3a      	ldr	r3, [pc, #232]	@ (8004ad8 <HAL_GPIO_Init+0x324>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a12:	4a31      	ldr	r2, [pc, #196]	@ (8004ad8 <HAL_GPIO_Init+0x324>)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a18:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad8 <HAL_GPIO_Init+0x324>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a3c:	4a26      	ldr	r2, [pc, #152]	@ (8004ad8 <HAL_GPIO_Init+0x324>)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a42:	4b25      	ldr	r3, [pc, #148]	@ (8004ad8 <HAL_GPIO_Init+0x324>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a66:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <HAL_GPIO_Init+0x324>)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad8 <HAL_GPIO_Init+0x324>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a90:	4a11      	ldr	r2, [pc, #68]	@ (8004ad8 <HAL_GPIO_Init+0x324>)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b0f      	cmp	r3, #15
 8004aa0:	f67f ae96 	bls.w	80047d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	3724      	adds	r7, #36	@ 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40013800 	.word	0x40013800
 8004abc:	40020000 	.word	0x40020000
 8004ac0:	40020400 	.word	0x40020400
 8004ac4:	40020800 	.word	0x40020800
 8004ac8:	40020c00 	.word	0x40020c00
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40021400 	.word	0x40021400
 8004ad4:	40021800 	.word	0x40021800
 8004ad8:	40013c00 	.word	0x40013c00

08004adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	807b      	strh	r3, [r7, #2]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aec:	787b      	ldrb	r3, [r7, #1]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004af2:	887a      	ldrh	r2, [r7, #2]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004af8:	e003      	b.n	8004b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004afa:	887b      	ldrh	r3, [r7, #2]
 8004afc:	041a      	lsls	r2, r3, #16
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	619a      	str	r2, [r3, #24]
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b20:	887a      	ldrh	r2, [r7, #2]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	041a      	lsls	r2, r3, #16
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	43d9      	mvns	r1, r3
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	400b      	ands	r3, r1
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	619a      	str	r2, [r3, #24]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd8 <HAL_PWREx_EnableOverDrive+0x94>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b70:	f7fe fef0 	bl	8003954 <HAL_GetTick>
 8004b74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b76:	e009      	b.n	8004b8c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b78:	f7fe feec 	bl	8003954 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b86:	d901      	bls.n	8004b8c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e01f      	b.n	8004bcc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b8c:	4b13      	ldr	r3, [pc, #76]	@ (8004bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b98:	d1ee      	bne.n	8004b78 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b9a:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba0:	f7fe fed8 	bl	8003954 <HAL_GetTick>
 8004ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ba6:	e009      	b.n	8004bbc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ba8:	f7fe fed4 	bl	8003954 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bb6:	d901      	bls.n	8004bbc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e007      	b.n	8004bcc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bbc:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bc8:	d1ee      	bne.n	8004ba8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	420e0040 	.word	0x420e0040
 8004bdc:	40007000 	.word	0x40007000
 8004be0:	420e0044 	.word	0x420e0044

08004be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0cc      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf8:	4b68      	ldr	r3, [pc, #416]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d90c      	bls.n	8004c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c06:	4b65      	ldr	r3, [pc, #404]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0e:	4b63      	ldr	r3, [pc, #396]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0b8      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c38:	4b59      	ldr	r3, [pc, #356]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4a58      	ldr	r2, [pc, #352]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c50:	4b53      	ldr	r3, [pc, #332]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4a52      	ldr	r2, [pc, #328]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5c:	4b50      	ldr	r3, [pc, #320]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	494d      	ldr	r1, [pc, #308]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d044      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d107      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c82:	4b47      	ldr	r3, [pc, #284]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d119      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e07f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e06f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e067      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cc2:	4b37      	ldr	r3, [pc, #220]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f023 0203 	bic.w	r2, r3, #3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4934      	ldr	r1, [pc, #208]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cd4:	f7fe fe3e 	bl	8003954 <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cdc:	f7fe fe3a 	bl	8003954 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e04f      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 020c 	and.w	r2, r3, #12
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d1eb      	bne.n	8004cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d04:	4b25      	ldr	r3, [pc, #148]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d20c      	bcs.n	8004d2c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b22      	ldr	r3, [pc, #136]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1a:	4b20      	ldr	r3, [pc, #128]	@ (8004d9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e032      	b.n	8004d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d38:	4b19      	ldr	r3, [pc, #100]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4916      	ldr	r1, [pc, #88]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d56:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	490e      	ldr	r1, [pc, #56]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d6a:	f000 f855 	bl	8004e18 <HAL_RCC_GetSysClockFreq>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	490a      	ldr	r1, [pc, #40]	@ (8004da4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	5ccb      	ldrb	r3, [r1, r3]
 8004d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d82:	4a09      	ldr	r2, [pc, #36]	@ (8004da8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d86:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <HAL_RCC_ClockConfig+0x1c8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fd9e 	bl	80038cc <HAL_InitTick>

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023c00 	.word	0x40023c00
 8004da0:	40023800 	.word	0x40023800
 8004da4:	08007a18 	.word	0x08007a18
 8004da8:	20000008 	.word	0x20000008
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db4:	4b03      	ldr	r3, [pc, #12]	@ (8004dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004db6:	681b      	ldr	r3, [r3, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20000008 	.word	0x20000008

08004dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dcc:	f7ff fff0 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0a9b      	lsrs	r3, r3, #10
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4903      	ldr	r1, [pc, #12]	@ (8004dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40023800 	.word	0x40023800
 8004dec:	08007a28 	.word	0x08007a28

08004df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004df4:	f7ff ffdc 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	0b5b      	lsrs	r3, r3, #13
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	4903      	ldr	r1, [pc, #12]	@ (8004e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e06:	5ccb      	ldrb	r3, [r1, r3]
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	08007a28 	.word	0x08007a28

08004e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e1c:	b0ae      	sub	sp, #184	@ 0xb8
 8004e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e3e:	4bcb      	ldr	r3, [pc, #812]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	f200 8206 	bhi.w	8005258 <HAL_RCC_GetSysClockFreq+0x440>
 8004e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e89 	.word	0x08004e89
 8004e58:	08005259 	.word	0x08005259
 8004e5c:	08005259 	.word	0x08005259
 8004e60:	08005259 	.word	0x08005259
 8004e64:	08004e91 	.word	0x08004e91
 8004e68:	08005259 	.word	0x08005259
 8004e6c:	08005259 	.word	0x08005259
 8004e70:	08005259 	.word	0x08005259
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08005259 	.word	0x08005259
 8004e7c:	08005259 	.word	0x08005259
 8004e80:	08005259 	.word	0x08005259
 8004e84:	08005089 	.word	0x08005089
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4bb9      	ldr	r3, [pc, #740]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e8e:	e1e7      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e90:	4bb8      	ldr	r3, [pc, #736]	@ (8005174 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e96:	e1e3      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e98:	4bb4      	ldr	r3, [pc, #720]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ea4:	4bb1      	ldr	r3, [pc, #708]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d071      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb0:	4bae      	ldr	r3, [pc, #696]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	099b      	lsrs	r3, r3, #6
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ebc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	462b      	mov	r3, r5
 8004eda:	f04f 0000 	mov.w	r0, #0
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	0159      	lsls	r1, r3, #5
 8004ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee8:	0150      	lsls	r0, r2, #5
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4621      	mov	r1, r4
 8004ef0:	1a51      	subs	r1, r2, r1
 8004ef2:	6439      	str	r1, [r7, #64]	@ 0x40
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8004efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004f08:	4649      	mov	r1, r9
 8004f0a:	018b      	lsls	r3, r1, #6
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f12:	4641      	mov	r1, r8
 8004f14:	018a      	lsls	r2, r1, #6
 8004f16:	4641      	mov	r1, r8
 8004f18:	1a51      	subs	r1, r2, r1
 8004f1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004f30:	4649      	mov	r1, r9
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4641      	mov	r1, r8
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4641      	mov	r1, r8
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4622      	mov	r2, r4
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	460a      	mov	r2, r1
 8004f4e:	eb42 0303 	adc.w	r3, r2, r3
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f60:	4629      	mov	r1, r5
 8004f62:	024b      	lsls	r3, r1, #9
 8004f64:	4621      	mov	r1, r4
 8004f66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	024a      	lsls	r2, r1, #9
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004f84:	f7fb fdee 	bl	8000b64 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f92:	e067      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f94:	4b75      	ldr	r3, [pc, #468]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fa0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fae:	2300      	movs	r3, #0
 8004fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	462b      	mov	r3, r5
 8004fba:	f04f 0000 	mov.w	r0, #0
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	0159      	lsls	r1, r3, #5
 8004fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc8:	0150      	lsls	r0, r2, #5
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4621      	mov	r1, r4
 8004fd0:	1a51      	subs	r1, r2, r1
 8004fd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004fe8:	4649      	mov	r1, r9
 8004fea:	018b      	lsls	r3, r1, #6
 8004fec:	4641      	mov	r1, r8
 8004fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ff2:	4641      	mov	r1, r8
 8004ff4:	018a      	lsls	r2, r1, #6
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	eb63 0b01 	sbc.w	fp, r3, r1
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800500e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005016:	4692      	mov	sl, r2
 8005018:	469b      	mov	fp, r3
 800501a:	4623      	mov	r3, r4
 800501c:	eb1a 0303 	adds.w	r3, sl, r3
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	462b      	mov	r3, r5
 8005024:	eb4b 0303 	adc.w	r3, fp, r3
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005036:	4629      	mov	r1, r5
 8005038:	028b      	lsls	r3, r1, #10
 800503a:	4621      	mov	r1, r4
 800503c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005040:	4621      	mov	r1, r4
 8005042:	028a      	lsls	r2, r1, #10
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800504c:	2200      	movs	r2, #0
 800504e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005050:	677a      	str	r2, [r7, #116]	@ 0x74
 8005052:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005056:	f7fb fd85 	bl	8000b64 <__aeabi_uldivmod>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4613      	mov	r3, r2
 8005060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005064:	4b41      	ldr	r3, [pc, #260]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	3301      	adds	r3, #1
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800507a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005086:	e0eb      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005088:	4b38      	ldr	r3, [pc, #224]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005090:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005094:	4b35      	ldr	r3, [pc, #212]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d06b      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a0:	4b32      	ldr	r3, [pc, #200]	@ (800516c <HAL_RCC_GetSysClockFreq+0x354>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	2200      	movs	r2, #0
 80050a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80050b4:	2300      	movs	r3, #0
 80050b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80050b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80050bc:	4622      	mov	r2, r4
 80050be:	462b      	mov	r3, r5
 80050c0:	f04f 0000 	mov.w	r0, #0
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	0159      	lsls	r1, r3, #5
 80050ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ce:	0150      	lsls	r0, r2, #5
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4621      	mov	r1, r4
 80050d6:	1a51      	subs	r1, r2, r1
 80050d8:	61b9      	str	r1, [r7, #24]
 80050da:	4629      	mov	r1, r5
 80050dc:	eb63 0301 	sbc.w	r3, r3, r1
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80050ee:	4659      	mov	r1, fp
 80050f0:	018b      	lsls	r3, r1, #6
 80050f2:	4651      	mov	r1, sl
 80050f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050f8:	4651      	mov	r1, sl
 80050fa:	018a      	lsls	r2, r1, #6
 80050fc:	4651      	mov	r1, sl
 80050fe:	ebb2 0801 	subs.w	r8, r2, r1
 8005102:	4659      	mov	r1, fp
 8005104:	eb63 0901 	sbc.w	r9, r3, r1
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005114:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005118:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511c:	4690      	mov	r8, r2
 800511e:	4699      	mov	r9, r3
 8005120:	4623      	mov	r3, r4
 8005122:	eb18 0303 	adds.w	r3, r8, r3
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	462b      	mov	r3, r5
 800512a:	eb49 0303 	adc.w	r3, r9, r3
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800513c:	4629      	mov	r1, r5
 800513e:	024b      	lsls	r3, r1, #9
 8005140:	4621      	mov	r1, r4
 8005142:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005146:	4621      	mov	r1, r4
 8005148:	024a      	lsls	r2, r1, #9
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005152:	2200      	movs	r2, #0
 8005154:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005156:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005158:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800515c:	f7fb fd02 	bl	8000b64 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800516a:	e065      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x420>
 800516c:	40023800 	.word	0x40023800
 8005170:	00f42400 	.word	0x00f42400
 8005174:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005178:	4b3d      	ldr	r3, [pc, #244]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x458>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	2200      	movs	r2, #0
 8005180:	4618      	mov	r0, r3
 8005182:	4611      	mov	r1, r2
 8005184:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005188:	653b      	str	r3, [r7, #80]	@ 0x50
 800518a:	2300      	movs	r3, #0
 800518c:	657b      	str	r3, [r7, #84]	@ 0x54
 800518e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005192:	4642      	mov	r2, r8
 8005194:	464b      	mov	r3, r9
 8005196:	f04f 0000 	mov.w	r0, #0
 800519a:	f04f 0100 	mov.w	r1, #0
 800519e:	0159      	lsls	r1, r3, #5
 80051a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a4:	0150      	lsls	r0, r2, #5
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4641      	mov	r1, r8
 80051ac:	1a51      	subs	r1, r2, r1
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	4649      	mov	r1, r9
 80051b2:	eb63 0301 	sbc.w	r3, r3, r1
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051c4:	4659      	mov	r1, fp
 80051c6:	018b      	lsls	r3, r1, #6
 80051c8:	4651      	mov	r1, sl
 80051ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ce:	4651      	mov	r1, sl
 80051d0:	018a      	lsls	r2, r1, #6
 80051d2:	4651      	mov	r1, sl
 80051d4:	1a54      	subs	r4, r2, r1
 80051d6:	4659      	mov	r1, fp
 80051d8:	eb63 0501 	sbc.w	r5, r3, r1
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	00eb      	lsls	r3, r5, #3
 80051e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ea:	00e2      	lsls	r2, r4, #3
 80051ec:	4614      	mov	r4, r2
 80051ee:	461d      	mov	r5, r3
 80051f0:	4643      	mov	r3, r8
 80051f2:	18e3      	adds	r3, r4, r3
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	464b      	mov	r3, r9
 80051f8:	eb45 0303 	adc.w	r3, r5, r3
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800520a:	4629      	mov	r1, r5
 800520c:	028b      	lsls	r3, r1, #10
 800520e:	4621      	mov	r1, r4
 8005210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005214:	4621      	mov	r1, r4
 8005216:	028a      	lsls	r2, r1, #10
 8005218:	4610      	mov	r0, r2
 800521a:	4619      	mov	r1, r3
 800521c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005220:	2200      	movs	r2, #0
 8005222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005224:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005226:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800522a:	f7fb fc9b 	bl	8000b64 <__aeabi_uldivmod>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4613      	mov	r3, r2
 8005234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005238:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x458>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	0f1b      	lsrs	r3, r3, #28
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800524a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005256:	e003      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005258:	4b06      	ldr	r3, [pc, #24]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x45c>)
 800525a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800525e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005264:	4618      	mov	r0, r3
 8005266:	37b8      	adds	r7, #184	@ 0xb8
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
 8005274:	00f42400 	.word	0x00f42400

08005278 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e28d      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8083 	beq.w	800539e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005298:	4b94      	ldr	r3, [pc, #592]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d019      	beq.n	80052d8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052a4:	4b91      	ldr	r3, [pc, #580]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 030c 	and.w	r3, r3, #12
        || \
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d106      	bne.n	80052be <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052b0:	4b8e      	ldr	r3, [pc, #568]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052bc:	d00c      	beq.n	80052d8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052be:	4b8b      	ldr	r3, [pc, #556]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d112      	bne.n	80052f0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ca:	4b88      	ldr	r3, [pc, #544]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052d6:	d10b      	bne.n	80052f0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d8:	4b84      	ldr	r3, [pc, #528]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d05b      	beq.n	800539c <HAL_RCC_OscConfig+0x124>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d157      	bne.n	800539c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e25a      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f8:	d106      	bne.n	8005308 <HAL_RCC_OscConfig+0x90>
 80052fa:	4b7c      	ldr	r3, [pc, #496]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a7b      	ldr	r2, [pc, #492]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e01d      	b.n	8005344 <HAL_RCC_OscConfig+0xcc>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005310:	d10c      	bne.n	800532c <HAL_RCC_OscConfig+0xb4>
 8005312:	4b76      	ldr	r3, [pc, #472]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a75      	ldr	r2, [pc, #468]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4b73      	ldr	r3, [pc, #460]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a72      	ldr	r2, [pc, #456]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e00b      	b.n	8005344 <HAL_RCC_OscConfig+0xcc>
 800532c:	4b6f      	ldr	r3, [pc, #444]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a6e      	ldr	r2, [pc, #440]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	4b6c      	ldr	r3, [pc, #432]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6b      	ldr	r2, [pc, #428]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 800533e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d013      	beq.n	8005374 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fe fb02 	bl	8003954 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005354:	f7fe fafe 	bl	8003954 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	@ 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e21f      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005366:	4b61      	ldr	r3, [pc, #388]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0xdc>
 8005372:	e014      	b.n	800539e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fe faee 	bl	8003954 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800537c:	f7fe faea 	bl	8003954 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	@ 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e20b      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800538e:	4b57      	ldr	r3, [pc, #348]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x104>
 800539a:	e000      	b.n	800539e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d06f      	beq.n	800548a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053aa:	4b50      	ldr	r3, [pc, #320]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d017      	beq.n	80053e6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053b6:	4b4d      	ldr	r3, [pc, #308]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
        || \
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d105      	bne.n	80053ce <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053c2:	4b4a      	ldr	r3, [pc, #296]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ce:	4b47      	ldr	r3, [pc, #284]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053d6:	2b0c      	cmp	r3, #12
 80053d8:	d11c      	bne.n	8005414 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053da:	4b44      	ldr	r3, [pc, #272]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d116      	bne.n	8005414 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e6:	4b41      	ldr	r3, [pc, #260]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_RCC_OscConfig+0x186>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e1d3      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fe:	4b3b      	ldr	r3, [pc, #236]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4937      	ldr	r1, [pc, #220]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 800540e:	4313      	orrs	r3, r2
 8005410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005412:	e03a      	b.n	800548a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d020      	beq.n	800545e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800541c:	4b34      	ldr	r3, [pc, #208]	@ (80054f0 <HAL_RCC_OscConfig+0x278>)
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005422:	f7fe fa97 	bl	8003954 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800542a:	f7fe fa93 	bl	8003954 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e1b4      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543c:	4b2b      	ldr	r3, [pc, #172]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005448:	4b28      	ldr	r3, [pc, #160]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4925      	ldr	r1, [pc, #148]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]
 800545c:	e015      	b.n	800548a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800545e:	4b24      	ldr	r3, [pc, #144]	@ (80054f0 <HAL_RCC_OscConfig+0x278>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fe fa76 	bl	8003954 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546c:	f7fe fa72 	bl	8003954 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e193      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547e:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d036      	beq.n	8005504 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d016      	beq.n	80054cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800549e:	4b15      	ldr	r3, [pc, #84]	@ (80054f4 <HAL_RCC_OscConfig+0x27c>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a4:	f7fe fa56 	bl	8003954 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ac:	f7fe fa52 	bl	8003954 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e173      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054be:	4b0b      	ldr	r3, [pc, #44]	@ (80054ec <HAL_RCC_OscConfig+0x274>)
 80054c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0x234>
 80054ca:	e01b      	b.n	8005504 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054cc:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <HAL_RCC_OscConfig+0x27c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d2:	f7fe fa3f 	bl	8003954 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d8:	e00e      	b.n	80054f8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054da:	f7fe fa3b 	bl	8003954 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d907      	bls.n	80054f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e15c      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
 80054ec:	40023800 	.word	0x40023800
 80054f0:	42470000 	.word	0x42470000
 80054f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80054fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ea      	bne.n	80054da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8097 	beq.w	8005640 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005512:	2300      	movs	r3, #0
 8005514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005516:	4b83      	ldr	r3, [pc, #524]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	4b7f      	ldr	r3, [pc, #508]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	4a7e      	ldr	r2, [pc, #504]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 800552c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005530:	6413      	str	r3, [r2, #64]	@ 0x40
 8005532:	4b7c      	ldr	r3, [pc, #496]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553a:	60bb      	str	r3, [r7, #8]
 800553c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800553e:	2301      	movs	r3, #1
 8005540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005542:	4b79      	ldr	r3, [pc, #484]	@ (8005728 <HAL_RCC_OscConfig+0x4b0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554a:	2b00      	cmp	r3, #0
 800554c:	d118      	bne.n	8005580 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800554e:	4b76      	ldr	r3, [pc, #472]	@ (8005728 <HAL_RCC_OscConfig+0x4b0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a75      	ldr	r2, [pc, #468]	@ (8005728 <HAL_RCC_OscConfig+0x4b0>)
 8005554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800555a:	f7fe f9fb 	bl	8003954 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005562:	f7fe f9f7 	bl	8003954 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e118      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005574:	4b6c      	ldr	r3, [pc, #432]	@ (8005728 <HAL_RCC_OscConfig+0x4b0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d106      	bne.n	8005596 <HAL_RCC_OscConfig+0x31e>
 8005588:	4b66      	ldr	r3, [pc, #408]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558c:	4a65      	ldr	r2, [pc, #404]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6713      	str	r3, [r2, #112]	@ 0x70
 8005594:	e01c      	b.n	80055d0 <HAL_RCC_OscConfig+0x358>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b05      	cmp	r3, #5
 800559c:	d10c      	bne.n	80055b8 <HAL_RCC_OscConfig+0x340>
 800559e:	4b61      	ldr	r3, [pc, #388]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a2:	4a60      	ldr	r2, [pc, #384]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055a4:	f043 0304 	orr.w	r3, r3, #4
 80055a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055aa:	4b5e      	ldr	r3, [pc, #376]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ae:	4a5d      	ldr	r2, [pc, #372]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b6:	e00b      	b.n	80055d0 <HAL_RCC_OscConfig+0x358>
 80055b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055bc:	4a59      	ldr	r2, [pc, #356]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c4:	4b57      	ldr	r3, [pc, #348]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c8:	4a56      	ldr	r2, [pc, #344]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055ca:	f023 0304 	bic.w	r3, r3, #4
 80055ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d015      	beq.n	8005604 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fe f9bc 	bl	8003954 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055de:	e00a      	b.n	80055f6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e0:	f7fe f9b8 	bl	8003954 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e0d7      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0ee      	beq.n	80055e0 <HAL_RCC_OscConfig+0x368>
 8005602:	e014      	b.n	800562e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005604:	f7fe f9a6 	bl	8003954 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560a:	e00a      	b.n	8005622 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560c:	f7fe f9a2 	bl	8003954 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e0c1      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005622:	4b40      	ldr	r3, [pc, #256]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ee      	bne.n	800560c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800562e:	7dfb      	ldrb	r3, [r7, #23]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005634:	4b3b      	ldr	r3, [pc, #236]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 8005636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005638:	4a3a      	ldr	r2, [pc, #232]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 800563a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800563e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80ad 	beq.w	80057a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800564a:	4b36      	ldr	r3, [pc, #216]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	2b08      	cmp	r3, #8
 8005654:	d060      	beq.n	8005718 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d145      	bne.n	80056ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565e:	4b33      	ldr	r3, [pc, #204]	@ (800572c <HAL_RCC_OscConfig+0x4b4>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fe f976 	bl	8003954 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566c:	f7fe f972 	bl	8003954 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e093      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567e:	4b29      	ldr	r3, [pc, #164]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	019b      	lsls	r3, r3, #6
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	3b01      	subs	r3, #1
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	061b      	lsls	r3, r3, #24
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	071b      	lsls	r3, r3, #28
 80056b6:	491b      	ldr	r1, [pc, #108]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056bc:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <HAL_RCC_OscConfig+0x4b4>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c2:	f7fe f947 	bl	8003954 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ca:	f7fe f943 	bl	8003954 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e064      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056dc:	4b11      	ldr	r3, [pc, #68]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x452>
 80056e8:	e05c      	b.n	80057a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ea:	4b10      	ldr	r3, [pc, #64]	@ (800572c <HAL_RCC_OscConfig+0x4b4>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fe f930 	bl	8003954 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fe f92c 	bl	8003954 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e04d      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <HAL_RCC_OscConfig+0x4ac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x480>
 8005716:	e045      	b.n	80057a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e040      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
 8005724:	40023800 	.word	0x40023800
 8005728:	40007000 	.word	0x40007000
 800572c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005730:	4b1f      	ldr	r3, [pc, #124]	@ (80057b0 <HAL_RCC_OscConfig+0x538>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d030      	beq.n	80057a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d129      	bne.n	80057a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d122      	bne.n	80057a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005760:	4013      	ands	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005768:	4293      	cmp	r3, r2
 800576a:	d119      	bne.n	80057a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	3b01      	subs	r3, #1
 800577a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d10f      	bne.n	80057a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d107      	bne.n	80057a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800

080057b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e041      	b.n	800584a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fd fe5e 	bl	800349c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f000 fcc4 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d001      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e04e      	b.n	800590a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a23      	ldr	r2, [pc, #140]	@ (8005918 <HAL_TIM_Base_Start_IT+0xc4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d022      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005896:	d01d      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1f      	ldr	r2, [pc, #124]	@ (800591c <HAL_TIM_Base_Start_IT+0xc8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d018      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005920 <HAL_TIM_Base_Start_IT+0xcc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005924 <HAL_TIM_Base_Start_IT+0xd0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00e      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <HAL_TIM_Base_Start_IT+0xd4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d009      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a19      	ldr	r2, [pc, #100]	@ (800592c <HAL_TIM_Base_Start_IT+0xd8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <HAL_TIM_Base_Start_IT+0xdc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d111      	bne.n	80058f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d010      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	e007      	b.n	8005908 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	40000c00 	.word	0x40000c00
 8005928:	40010400 	.word	0x40010400
 800592c:	40014000 	.word	0x40014000
 8005930:	40001800 	.word	0x40001800

08005934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e041      	b.n	80059ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fd fc52 	bl	8003204 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f000 fc04 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_TIM_PWM_Start+0x24>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e022      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d109      	bne.n	8005a12 <HAL_TIM_PWM_Start+0x3e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	bf14      	ite	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	2300      	moveq	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	e015      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d109      	bne.n	8005a2c <HAL_TIM_PWM_Start+0x58>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e008      	b.n	8005a3e <HAL_TIM_PWM_Start+0x6a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	bf14      	ite	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	2300      	moveq	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e07c      	b.n	8005b40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_PWM_Start+0x82>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a54:	e013      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_PWM_Start+0x92>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a64:	e00b      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a74:	e003      	b.n	8005a7e <HAL_TIM_PWM_Start+0xaa>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2201      	movs	r2, #1
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fdd6 	bl	8006638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <HAL_TIM_PWM_Start+0x174>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_TIM_PWM_Start+0xcc>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b4c <HAL_TIM_PWM_Start+0x178>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIM_PWM_Start+0xd0>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <HAL_TIM_PWM_Start+0xd2>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a22      	ldr	r2, [pc, #136]	@ (8005b48 <HAL_TIM_PWM_Start+0x174>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d022      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005acc:	d01d      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b50 <HAL_TIM_PWM_Start+0x17c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d018      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b54 <HAL_TIM_PWM_Start+0x180>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b58 <HAL_TIM_PWM_Start+0x184>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <HAL_TIM_PWM_Start+0x178>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <HAL_TIM_PWM_Start+0x188>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIM_PWM_Start+0x136>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <HAL_TIM_PWM_Start+0x18c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d111      	bne.n	8005b2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b06      	cmp	r3, #6
 8005b1a:	d010      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2c:	e007      	b.n	8005b3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40010400 	.word	0x40010400
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40001800 	.word	0x40001800

08005b64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e097      	b.n	8005ca8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fd fb61 	bl	8003254 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ba8:	f023 0307 	bic.w	r3, r3, #7
 8005bac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f000 fae1 	bl	8006180 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c04:	f023 030c 	bic.w	r3, r3, #12
 8005c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	4313      	orrs	r3, r2
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	011a      	lsls	r2, r3, #4
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	031b      	lsls	r3, r3, #12
 8005c34:	4313      	orrs	r3, r2
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	4313      	orrs	r3, r2
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005cd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d110      	bne.n	8005d02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d102      	bne.n	8005cec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ce6:	7b7b      	ldrb	r3, [r7, #13]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d001      	beq.n	8005cf0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e069      	b.n	8005dc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d00:	e031      	b.n	8005d66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d110      	bne.n	8005d2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d102      	bne.n	8005d14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d0e:	7b3b      	ldrb	r3, [r7, #12]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d001      	beq.n	8005d18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e055      	b.n	8005dc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d28:	e01d      	b.n	8005d66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d108      	bne.n	8005d42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d105      	bne.n	8005d42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d36:	7b7b      	ldrb	r3, [r7, #13]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d102      	bne.n	8005d42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d3c:	7b3b      	ldrb	r3, [r7, #12]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d001      	beq.n	8005d46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e03e      	b.n	8005dc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2202      	movs	r2, #2
 8005d62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_TIM_Encoder_Start+0xc4>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d008      	beq.n	8005d84 <HAL_TIM_Encoder_Start+0xd4>
 8005d72:	e00f      	b.n	8005d94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fc5b 	bl	8006638 <TIM_CCxChannelCmd>
      break;
 8005d82:	e016      	b.n	8005db2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	2104      	movs	r1, #4
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fc53 	bl	8006638 <TIM_CCxChannelCmd>
      break;
 8005d92:	e00e      	b.n	8005db2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fc4b 	bl	8006638 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2201      	movs	r2, #1
 8005da8:	2104      	movs	r1, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fc44 	bl	8006638 <TIM_CCxChannelCmd>
      break;
 8005db0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d020      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01b      	beq.n	8005e30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0202 	mvn.w	r2, #2
 8005e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f994 	bl	8006144 <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f986 	bl	8006130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f997 	bl	8006158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d020      	beq.n	8005e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01b      	beq.n	8005e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0204 	mvn.w	r2, #4
 8005e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f96e 	bl	8006144 <HAL_TIM_IC_CaptureCallback>
 8005e68:	e005      	b.n	8005e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f960 	bl	8006130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f971 	bl	8006158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d020      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01b      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0208 	mvn.w	r2, #8
 8005e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f948 	bl	8006144 <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f93a 	bl	8006130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f94b 	bl	8006158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d020      	beq.n	8005f14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0210 	mvn.w	r2, #16
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f922 	bl	8006144 <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f914 	bl	8006130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f925 	bl	8006158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00c      	beq.n	8005f38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0201 	mvn.w	r2, #1
 8005f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fc f98e 	bl	8002254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00c      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fc6c 	bl	8006834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f8f6 	bl	800616c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0220 	mvn.w	r2, #32
 8005f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fc3e 	bl	8006820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e0ae      	b.n	8006128 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b0c      	cmp	r3, #12
 8005fd6:	f200 809f 	bhi.w	8006118 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005fda:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006015 	.word	0x08006015
 8005fe4:	08006119 	.word	0x08006119
 8005fe8:	08006119 	.word	0x08006119
 8005fec:	08006119 	.word	0x08006119
 8005ff0:	08006055 	.word	0x08006055
 8005ff4:	08006119 	.word	0x08006119
 8005ff8:	08006119 	.word	0x08006119
 8005ffc:	08006119 	.word	0x08006119
 8006000:	08006097 	.word	0x08006097
 8006004:	08006119 	.word	0x08006119
 8006008:	08006119 	.word	0x08006119
 800600c:	08006119 	.word	0x08006119
 8006010:	080060d7 	.word	0x080060d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 f95c 	bl	80062d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0208 	orr.w	r2, r2, #8
 800602e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0204 	bic.w	r2, r2, #4
 800603e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6999      	ldr	r1, [r3, #24]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	619a      	str	r2, [r3, #24]
      break;
 8006052:	e064      	b.n	800611e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f9ac 	bl	80063b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800606e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800607e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6999      	ldr	r1, [r3, #24]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	021a      	lsls	r2, r3, #8
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	619a      	str	r2, [r3, #24]
      break;
 8006094:	e043      	b.n	800611e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fa01 	bl	80064a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0208 	orr.w	r2, r2, #8
 80060b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0204 	bic.w	r2, r2, #4
 80060c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69d9      	ldr	r1, [r3, #28]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	61da      	str	r2, [r3, #28]
      break;
 80060d4:	e023      	b.n	800611e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fa55 	bl	800658c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69d9      	ldr	r1, [r3, #28]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	021a      	lsls	r2, r3, #8
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	61da      	str	r2, [r3, #28]
      break;
 8006116:	e002      	b.n	800611e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	75fb      	strb	r3, [r7, #23]
      break;
 800611c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a46      	ldr	r2, [pc, #280]	@ (80062ac <TIM_Base_SetConfig+0x12c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d013      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619e:	d00f      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a43      	ldr	r2, [pc, #268]	@ (80062b0 <TIM_Base_SetConfig+0x130>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a42      	ldr	r2, [pc, #264]	@ (80062b4 <TIM_Base_SetConfig+0x134>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d007      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a41      	ldr	r2, [pc, #260]	@ (80062b8 <TIM_Base_SetConfig+0x138>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a40      	ldr	r2, [pc, #256]	@ (80062bc <TIM_Base_SetConfig+0x13c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d108      	bne.n	80061d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a35      	ldr	r2, [pc, #212]	@ (80062ac <TIM_Base_SetConfig+0x12c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02b      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e0:	d027      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a32      	ldr	r2, [pc, #200]	@ (80062b0 <TIM_Base_SetConfig+0x130>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d023      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a31      	ldr	r2, [pc, #196]	@ (80062b4 <TIM_Base_SetConfig+0x134>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01f      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a30      	ldr	r2, [pc, #192]	@ (80062b8 <TIM_Base_SetConfig+0x138>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d01b      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2f      	ldr	r2, [pc, #188]	@ (80062bc <TIM_Base_SetConfig+0x13c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d017      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2e      	ldr	r2, [pc, #184]	@ (80062c0 <TIM_Base_SetConfig+0x140>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2d      	ldr	r2, [pc, #180]	@ (80062c4 <TIM_Base_SetConfig+0x144>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00f      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2c      	ldr	r2, [pc, #176]	@ (80062c8 <TIM_Base_SetConfig+0x148>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00b      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2b      	ldr	r2, [pc, #172]	@ (80062cc <TIM_Base_SetConfig+0x14c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2a      	ldr	r2, [pc, #168]	@ (80062d0 <TIM_Base_SetConfig+0x150>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a29      	ldr	r2, [pc, #164]	@ (80062d4 <TIM_Base_SetConfig+0x154>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d108      	bne.n	8006244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a10      	ldr	r2, [pc, #64]	@ (80062ac <TIM_Base_SetConfig+0x12c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d003      	beq.n	8006278 <TIM_Base_SetConfig+0xf8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a12      	ldr	r2, [pc, #72]	@ (80062bc <TIM_Base_SetConfig+0x13c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d103      	bne.n	8006280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d105      	bne.n	800629e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f023 0201 	bic.w	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	611a      	str	r2, [r3, #16]
  }
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40014400 	.word	0x40014400
 80062c8:	40014800 	.word	0x40014800
 80062cc:	40001800 	.word	0x40001800
 80062d0:	40001c00 	.word	0x40001c00
 80062d4:	40002000 	.word	0x40002000

080062d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f023 0201 	bic.w	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 0302 	bic.w	r3, r3, #2
 8006320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a20      	ldr	r2, [pc, #128]	@ (80063b0 <TIM_OC1_SetConfig+0xd8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_OC1_SetConfig+0x64>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a1f      	ldr	r2, [pc, #124]	@ (80063b4 <TIM_OC1_SetConfig+0xdc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d10c      	bne.n	8006356 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0308 	bic.w	r3, r3, #8
 8006342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f023 0304 	bic.w	r3, r3, #4
 8006354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a15      	ldr	r2, [pc, #84]	@ (80063b0 <TIM_OC1_SetConfig+0xd8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC1_SetConfig+0x8e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a14      	ldr	r2, [pc, #80]	@ (80063b4 <TIM_OC1_SetConfig+0xdc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d111      	bne.n	800638a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800636c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	621a      	str	r2, [r3, #32]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40010000 	.word	0x40010000
 80063b4:	40010400 	.word	0x40010400

080063b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f023 0210 	bic.w	r2, r3, #16
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f023 0320 	bic.w	r3, r3, #32
 8006402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a22      	ldr	r2, [pc, #136]	@ (800649c <TIM_OC2_SetConfig+0xe4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC2_SetConfig+0x68>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a21      	ldr	r2, [pc, #132]	@ (80064a0 <TIM_OC2_SetConfig+0xe8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10d      	bne.n	800643c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800643a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a17      	ldr	r2, [pc, #92]	@ (800649c <TIM_OC2_SetConfig+0xe4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_OC2_SetConfig+0x94>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a16      	ldr	r2, [pc, #88]	@ (80064a0 <TIM_OC2_SetConfig+0xe8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d113      	bne.n	8006474 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800645a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40010400 	.word	0x40010400

080064a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a21      	ldr	r2, [pc, #132]	@ (8006584 <TIM_OC3_SetConfig+0xe0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_OC3_SetConfig+0x66>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a20      	ldr	r2, [pc, #128]	@ (8006588 <TIM_OC3_SetConfig+0xe4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d10d      	bne.n	8006526 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	021b      	lsls	r3, r3, #8
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a16      	ldr	r2, [pc, #88]	@ (8006584 <TIM_OC3_SetConfig+0xe0>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_OC3_SetConfig+0x92>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a15      	ldr	r2, [pc, #84]	@ (8006588 <TIM_OC3_SetConfig+0xe4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d113      	bne.n	800655e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800653c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	621a      	str	r2, [r3, #32]
}
 8006578:	bf00      	nop
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	40010000 	.word	0x40010000
 8006588:	40010400 	.word	0x40010400

0800658c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	031b      	lsls	r3, r3, #12
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a12      	ldr	r2, [pc, #72]	@ (8006630 <TIM_OC4_SetConfig+0xa4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_OC4_SetConfig+0x68>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a11      	ldr	r2, [pc, #68]	@ (8006634 <TIM_OC4_SetConfig+0xa8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d109      	bne.n	8006608 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	019b      	lsls	r3, r3, #6
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40010000 	.word	0x40010000
 8006634:	40010400 	.word	0x40010400

08006638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	2201      	movs	r2, #1
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1a      	ldr	r2, [r3, #32]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	43db      	mvns	r3, r3
 800665a:	401a      	ands	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a1a      	ldr	r2, [r3, #32]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	fa01 f303 	lsl.w	r3, r1, r3
 8006670:	431a      	orrs	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006698:	2302      	movs	r3, #2
 800669a:	e05a      	b.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a21      	ldr	r2, [pc, #132]	@ (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d022      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e8:	d01d      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d018      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1a      	ldr	r2, [pc, #104]	@ (800676c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00e      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a18      	ldr	r2, [pc, #96]	@ (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d009      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a17      	ldr	r2, [pc, #92]	@ (8006774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d004      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a15      	ldr	r2, [pc, #84]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10c      	bne.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800672c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	4313      	orrs	r3, r2
 8006736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40010000 	.word	0x40010000
 8006764:	40000400 	.word	0x40000400
 8006768:	40000800 	.word	0x40000800
 800676c:	40000c00 	.word	0x40000c00
 8006770:	40010400 	.word	0x40010400
 8006774:	40014000 	.word	0x40014000
 8006778:	40001800 	.word	0x40001800

0800677c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006794:	2302      	movs	r3, #2
 8006796:	e03d      	b.n	8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e042      	b.n	80068e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fc fe94 	bl	800359c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2224      	movs	r2, #36	@ 0x24
 8006878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800688a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fdbd 	bl	800740c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	@ 0x28
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	4613      	mov	r3, r2
 80068f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b20      	cmp	r3, #32
 8006906:	d175      	bne.n	80069f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_UART_Transmit+0x2c>
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e06e      	b.n	80069f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2221      	movs	r2, #33	@ 0x21
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006926:	f7fd f815 	bl	8003954 <HAL_GetTick>
 800692a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	88fa      	ldrh	r2, [r7, #6]
 8006930:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	88fa      	ldrh	r2, [r7, #6]
 8006936:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006940:	d108      	bne.n	8006954 <HAL_UART_Transmit+0x6c>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e003      	b.n	800695c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006958:	2300      	movs	r3, #0
 800695a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800695c:	e02e      	b.n	80069bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	2180      	movs	r1, #128	@ 0x80
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fb1f 	bl	8006fac <UART_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e03a      	b.n	80069f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	3302      	adds	r3, #2
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e007      	b.n	80069ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1cb      	bne.n	800695e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2200      	movs	r2, #0
 80069ce:	2140      	movs	r1, #64	@ 0x40
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 faeb 	bl	8006fac <UART_WaitOnFlagUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e006      	b.n	80069f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	e000      	b.n	80069f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069f4:	2302      	movs	r3, #2
  }
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d112      	bne.n	8006a3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_UART_Receive_IT+0x26>
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e00b      	b.n	8006a40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	461a      	mov	r2, r3
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 fb12 	bl	800705e <UART_Start_Receive_IT>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	e000      	b.n	8006a40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a3e:	2302      	movs	r3, #2
  }
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b0ba      	sub	sp, #232	@ 0xe8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10f      	bne.n	8006aae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <HAL_UART_IRQHandler+0x66>
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fbf2 	bl	8007290 <UART_Receive_IT>
      return;
 8006aac:	e25b      	b.n	8006f66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80de 	beq.w	8006c74 <HAL_UART_IRQHandler+0x22c>
 8006ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d106      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ac8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80d1 	beq.w	8006c74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <HAL_UART_IRQHandler+0xae>
 8006ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aee:	f043 0201 	orr.w	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <HAL_UART_IRQHandler+0xd2>
 8006b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b12:	f043 0202 	orr.w	r2, r3, #2
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <HAL_UART_IRQHandler+0xf6>
 8006b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f043 0204 	orr.w	r2, r3, #4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d011      	beq.n	8006b6e <HAL_UART_IRQHandler+0x126>
 8006b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d105      	bne.n	8006b62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b66:	f043 0208 	orr.w	r2, r3, #8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 81f2 	beq.w	8006f5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_UART_IRQHandler+0x14e>
 8006b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fb7d 	bl	8007290 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba0:	2b40      	cmp	r3, #64	@ 0x40
 8006ba2:	bf0c      	ite	eq
 8006ba4:	2301      	moveq	r3, #1
 8006ba6:	2300      	movne	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x17a>
 8006bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d04f      	beq.n	8006c62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa85 	bl	80070d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd2:	2b40      	cmp	r3, #64	@ 0x40
 8006bd4:	d141      	bne.n	8006c5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3314      	adds	r3, #20
 8006bdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1d9      	bne.n	8006bd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d013      	beq.n	8006c52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e28 <HAL_UART_IRQHandler+0x3e0>)
 8006c30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd fb5e 	bl	80042f8 <HAL_DMA_Abort_IT>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c50:	e00e      	b.n	8006c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f994 	bl	8006f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c58:	e00a      	b.n	8006c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f990 	bl	8006f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c60:	e006      	b.n	8006c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f98c 	bl	8006f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c6e:	e175      	b.n	8006f5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c70:	bf00      	nop
    return;
 8006c72:	e173      	b.n	8006f5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	f040 814f 	bne.w	8006f1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 8148 	beq.w	8006f1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8141 	beq.w	8006f1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cba:	2b40      	cmp	r3, #64	@ 0x40
 8006cbc:	f040 80b6 	bne.w	8006e2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8145 	beq.w	8006f60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	f080 813e 	bcs.w	8006f60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf6:	f000 8088 	beq.w	8006e0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1d9      	bne.n	8006cfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3314      	adds	r3, #20
 8006d4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d58:	f023 0301 	bic.w	r3, r3, #1
 8006d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3314      	adds	r3, #20
 8006d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e1      	bne.n	8006d46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3314      	adds	r3, #20
 8006da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006da6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006da8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e3      	bne.n	8006d82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dda:	f023 0310 	bic.w	r3, r3, #16
 8006dde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006dec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e3      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fd fa07 	bl	8004218 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8b7 	bl	8006f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e26:	e09b      	b.n	8006f60 <HAL_UART_IRQHandler+0x518>
 8006e28:	08007199 	.word	0x08007199
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 808e 	beq.w	8006f64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8089 	beq.w	8006f64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	330c      	adds	r3, #12
 8006e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e76:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e3      	bne.n	8006e52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3314      	adds	r3, #20
 8006e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	623b      	str	r3, [r7, #32]
   return(result);
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3314      	adds	r3, #20
 8006eaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006eae:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e3      	bne.n	8006e8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0310 	bic.w	r3, r3, #16
 8006ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ef4:	61fa      	str	r2, [r7, #28]
 8006ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	69b9      	ldr	r1, [r7, #24]
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	617b      	str	r3, [r7, #20]
   return(result);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e3      	bne.n	8006ed0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f83d 	bl	8006f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f1a:	e023      	b.n	8006f64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <HAL_UART_IRQHandler+0x4f4>
 8006f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f943 	bl	80071c0 <UART_Transmit_IT>
    return;
 8006f3a:	e014      	b.n	8006f66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00e      	beq.n	8006f66 <HAL_UART_IRQHandler+0x51e>
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d008      	beq.n	8006f66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f983 	bl	8007260 <UART_EndTransmit_IT>
    return;
 8006f5a:	e004      	b.n	8006f66 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f5c:	bf00      	nop
 8006f5e:	e002      	b.n	8006f66 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f60:	bf00      	nop
 8006f62:	e000      	b.n	8006f66 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f64:	bf00      	nop
  }
}
 8006f66:	37e8      	adds	r7, #232	@ 0xe8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fbc:	e03b      	b.n	8007036 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d037      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fc fcc5 	bl	8003954 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	6a3a      	ldr	r2, [r7, #32]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e03a      	b.n	8007056 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d023      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b80      	cmp	r3, #128	@ 0x80
 8006ff2:	d020      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b40      	cmp	r3, #64	@ 0x40
 8006ff8:	d01d      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b08      	cmp	r3, #8
 8007006:	d116      	bne.n	8007036 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 f857 	bl	80070d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2208      	movs	r2, #8
 8007028:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e00f      	b.n	8007056 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4013      	ands	r3, r2
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	429a      	cmp	r2, r3
 8007044:	bf0c      	ite	eq
 8007046:	2301      	moveq	r3, #1
 8007048:	2300      	movne	r3, #0
 800704a:	b2db      	uxtb	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	79fb      	ldrb	r3, [r7, #7]
 8007050:	429a      	cmp	r2, r3
 8007052:	d0b4      	beq.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	4613      	mov	r3, r2
 800706a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	88fa      	ldrh	r2, [r7, #6]
 8007076:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2222      	movs	r2, #34	@ 0x22
 8007088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0220 	orr.w	r2, r2, #32
 80070c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b095      	sub	sp, #84	@ 0x54
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80070fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3314      	adds	r3, #20
 8007114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	61fb      	str	r3, [r7, #28]
   return(result);
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3314      	adds	r3, #20
 800712c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800712e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e5      	bne.n	800710e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007146:	2b01      	cmp	r3, #1
 8007148:	d119      	bne.n	800717e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	60bb      	str	r3, [r7, #8]
   return(result);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f023 0310 	bic.w	r3, r3, #16
 8007160:	647b      	str	r3, [r7, #68]	@ 0x44
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800716a:	61ba      	str	r2, [r7, #24]
 800716c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6979      	ldr	r1, [r7, #20]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	613b      	str	r3, [r7, #16]
   return(result);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e5      	bne.n	800714a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800718c:	bf00      	nop
 800718e:	3754      	adds	r7, #84	@ 0x54
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fee4 	bl	8006f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b8:	bf00      	nop
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b21      	cmp	r3, #33	@ 0x21
 80071d2:	d13e      	bne.n	8007252 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071dc:	d114      	bne.n	8007208 <UART_Transmit_IT+0x48>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d110      	bne.n	8007208 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	1c9a      	adds	r2, r3, #2
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	621a      	str	r2, [r3, #32]
 8007206:	e008      	b.n	800721a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	1c59      	adds	r1, r3, #1
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6211      	str	r1, [r2, #32]
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29b      	uxth	r3, r3
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	4619      	mov	r1, r3
 8007228:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10f      	bne.n	800724e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800723c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800724c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	e000      	b.n	8007254 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007252:	2302      	movs	r3, #2
  }
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007276:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fe73 	bl	8006f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08c      	sub	sp, #48	@ 0x30
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b22      	cmp	r3, #34	@ 0x22
 80072a2:	f040 80ae 	bne.w	8007402 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ae:	d117      	bne.n	80072e0 <UART_Receive_IT+0x50>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d113      	bne.n	80072e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	1c9a      	adds	r2, r3, #2
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80072de:	e026      	b.n	800732e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f2:	d007      	beq.n	8007304 <UART_Receive_IT+0x74>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <UART_Receive_IT+0x82>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	b2da      	uxtb	r2, r3
 800730c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	e008      	b.n	8007324 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731e:	b2da      	uxtb	r2, r3
 8007320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007322:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29b      	uxth	r3, r3
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	4619      	mov	r1, r3
 800733c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800733e:	2b00      	cmp	r3, #0
 8007340:	d15d      	bne.n	80073fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0220 	bic.w	r2, r2, #32
 8007350:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695a      	ldr	r2, [r3, #20]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007384:	2b01      	cmp	r3, #1
 8007386:	d135      	bne.n	80073f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	330c      	adds	r3, #12
 8007394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	613b      	str	r3, [r7, #16]
   return(result);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f023 0310 	bic.w	r3, r3, #16
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	330c      	adds	r3, #12
 80073ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ae:	623a      	str	r2, [r7, #32]
 80073b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	69f9      	ldr	r1, [r7, #28]
 80073b4:	6a3a      	ldr	r2, [r7, #32]
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e5      	bne.n	800738e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d10a      	bne.n	80073e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fdd1 	bl	8006f94 <HAL_UARTEx_RxEventCallback>
 80073f2:	e002      	b.n	80073fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fa ff6d 	bl	80022d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e002      	b.n	8007404 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	e000      	b.n	8007404 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007402:	2302      	movs	r3, #2
  }
}
 8007404:	4618      	mov	r0, r3
 8007406:	3730      	adds	r7, #48	@ 0x30
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800740c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007410:	b0c0      	sub	sp, #256	@ 0x100
 8007412:	af00      	add	r7, sp, #0
 8007414:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007428:	68d9      	ldr	r1, [r3, #12]
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	ea40 0301 	orr.w	r3, r0, r1
 8007434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	431a      	orrs	r2, r3
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	431a      	orrs	r2, r3
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007464:	f021 010c 	bic.w	r1, r1, #12
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007472:	430b      	orrs	r3, r1
 8007474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007486:	6999      	ldr	r1, [r3, #24]
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	ea40 0301 	orr.w	r3, r0, r1
 8007492:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4b8f      	ldr	r3, [pc, #572]	@ (80076d8 <UART_SetConfig+0x2cc>)
 800749c:	429a      	cmp	r2, r3
 800749e:	d005      	beq.n	80074ac <UART_SetConfig+0xa0>
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	4b8d      	ldr	r3, [pc, #564]	@ (80076dc <UART_SetConfig+0x2d0>)
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d104      	bne.n	80074b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074ac:	f7fd fca0 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 80074b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80074b4:	e003      	b.n	80074be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074b6:	f7fd fc87 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 80074ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074c8:	f040 810c 	bne.w	80076e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d0:	2200      	movs	r2, #0
 80074d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80074da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80074de:	4622      	mov	r2, r4
 80074e0:	462b      	mov	r3, r5
 80074e2:	1891      	adds	r1, r2, r2
 80074e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074e6:	415b      	adcs	r3, r3
 80074e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80074ee:	4621      	mov	r1, r4
 80074f0:	eb12 0801 	adds.w	r8, r2, r1
 80074f4:	4629      	mov	r1, r5
 80074f6:	eb43 0901 	adc.w	r9, r3, r1
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800750a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800750e:	4690      	mov	r8, r2
 8007510:	4699      	mov	r9, r3
 8007512:	4623      	mov	r3, r4
 8007514:	eb18 0303 	adds.w	r3, r8, r3
 8007518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800751c:	462b      	mov	r3, r5
 800751e:	eb49 0303 	adc.w	r3, r9, r3
 8007522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007532:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800753a:	460b      	mov	r3, r1
 800753c:	18db      	adds	r3, r3, r3
 800753e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007540:	4613      	mov	r3, r2
 8007542:	eb42 0303 	adc.w	r3, r2, r3
 8007546:	657b      	str	r3, [r7, #84]	@ 0x54
 8007548:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800754c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007550:	f7f9 fb08 	bl	8000b64 <__aeabi_uldivmod>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4b61      	ldr	r3, [pc, #388]	@ (80076e0 <UART_SetConfig+0x2d4>)
 800755a:	fba3 2302 	umull	r2, r3, r3, r2
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	011c      	lsls	r4, r3, #4
 8007562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007566:	2200      	movs	r2, #0
 8007568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800756c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007570:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007574:	4642      	mov	r2, r8
 8007576:	464b      	mov	r3, r9
 8007578:	1891      	adds	r1, r2, r2
 800757a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800757c:	415b      	adcs	r3, r3
 800757e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007584:	4641      	mov	r1, r8
 8007586:	eb12 0a01 	adds.w	sl, r2, r1
 800758a:	4649      	mov	r1, r9
 800758c:	eb43 0b01 	adc.w	fp, r3, r1
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800759c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075a4:	4692      	mov	sl, r2
 80075a6:	469b      	mov	fp, r3
 80075a8:	4643      	mov	r3, r8
 80075aa:	eb1a 0303 	adds.w	r3, sl, r3
 80075ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075b2:	464b      	mov	r3, r9
 80075b4:	eb4b 0303 	adc.w	r3, fp, r3
 80075b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80075cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075d0:	460b      	mov	r3, r1
 80075d2:	18db      	adds	r3, r3, r3
 80075d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80075d6:	4613      	mov	r3, r2
 80075d8:	eb42 0303 	adc.w	r3, r2, r3
 80075dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80075de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075e6:	f7f9 fabd 	bl	8000b64 <__aeabi_uldivmod>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4611      	mov	r1, r2
 80075f0:	4b3b      	ldr	r3, [pc, #236]	@ (80076e0 <UART_SetConfig+0x2d4>)
 80075f2:	fba3 2301 	umull	r2, r3, r3, r1
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	2264      	movs	r2, #100	@ 0x64
 80075fa:	fb02 f303 	mul.w	r3, r2, r3
 80075fe:	1acb      	subs	r3, r1, r3
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007606:	4b36      	ldr	r3, [pc, #216]	@ (80076e0 <UART_SetConfig+0x2d4>)
 8007608:	fba3 2302 	umull	r2, r3, r3, r2
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007614:	441c      	add	r4, r3
 8007616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800761a:	2200      	movs	r2, #0
 800761c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007620:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007624:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	1891      	adds	r1, r2, r2
 800762e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007630:	415b      	adcs	r3, r3
 8007632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007638:	4641      	mov	r1, r8
 800763a:	1851      	adds	r1, r2, r1
 800763c:	6339      	str	r1, [r7, #48]	@ 0x30
 800763e:	4649      	mov	r1, r9
 8007640:	414b      	adcs	r3, r1
 8007642:	637b      	str	r3, [r7, #52]	@ 0x34
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007650:	4659      	mov	r1, fp
 8007652:	00cb      	lsls	r3, r1, #3
 8007654:	4651      	mov	r1, sl
 8007656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765a:	4651      	mov	r1, sl
 800765c:	00ca      	lsls	r2, r1, #3
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	4603      	mov	r3, r0
 8007664:	4642      	mov	r2, r8
 8007666:	189b      	adds	r3, r3, r2
 8007668:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800766c:	464b      	mov	r3, r9
 800766e:	460a      	mov	r2, r1
 8007670:	eb42 0303 	adc.w	r3, r2, r3
 8007674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007684:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800768c:	460b      	mov	r3, r1
 800768e:	18db      	adds	r3, r3, r3
 8007690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007692:	4613      	mov	r3, r2
 8007694:	eb42 0303 	adc.w	r3, r2, r3
 8007698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800769a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800769e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80076a2:	f7f9 fa5f 	bl	8000b64 <__aeabi_uldivmod>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <UART_SetConfig+0x2d4>)
 80076ac:	fba3 1302 	umull	r1, r3, r3, r2
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	2164      	movs	r1, #100	@ 0x64
 80076b4:	fb01 f303 	mul.w	r3, r1, r3
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	3332      	adds	r3, #50	@ 0x32
 80076be:	4a08      	ldr	r2, [pc, #32]	@ (80076e0 <UART_SetConfig+0x2d4>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	f003 0207 	and.w	r2, r3, #7
 80076ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4422      	add	r2, r4
 80076d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076d4:	e106      	b.n	80078e4 <UART_SetConfig+0x4d8>
 80076d6:	bf00      	nop
 80076d8:	40011000 	.word	0x40011000
 80076dc:	40011400 	.word	0x40011400
 80076e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076f6:	4642      	mov	r2, r8
 80076f8:	464b      	mov	r3, r9
 80076fa:	1891      	adds	r1, r2, r2
 80076fc:	6239      	str	r1, [r7, #32]
 80076fe:	415b      	adcs	r3, r3
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
 8007702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007706:	4641      	mov	r1, r8
 8007708:	1854      	adds	r4, r2, r1
 800770a:	4649      	mov	r1, r9
 800770c:	eb43 0501 	adc.w	r5, r3, r1
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	00eb      	lsls	r3, r5, #3
 800771a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800771e:	00e2      	lsls	r2, r4, #3
 8007720:	4614      	mov	r4, r2
 8007722:	461d      	mov	r5, r3
 8007724:	4643      	mov	r3, r8
 8007726:	18e3      	adds	r3, r4, r3
 8007728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800772c:	464b      	mov	r3, r9
 800772e:	eb45 0303 	adc.w	r3, r5, r3
 8007732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007742:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007746:	f04f 0200 	mov.w	r2, #0
 800774a:	f04f 0300 	mov.w	r3, #0
 800774e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007752:	4629      	mov	r1, r5
 8007754:	008b      	lsls	r3, r1, #2
 8007756:	4621      	mov	r1, r4
 8007758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800775c:	4621      	mov	r1, r4
 800775e:	008a      	lsls	r2, r1, #2
 8007760:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007764:	f7f9 f9fe 	bl	8000b64 <__aeabi_uldivmod>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	4b60      	ldr	r3, [pc, #384]	@ (80078f0 <UART_SetConfig+0x4e4>)
 800776e:	fba3 2302 	umull	r2, r3, r3, r2
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	011c      	lsls	r4, r3, #4
 8007776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800777a:	2200      	movs	r2, #0
 800777c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007780:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007784:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007788:	4642      	mov	r2, r8
 800778a:	464b      	mov	r3, r9
 800778c:	1891      	adds	r1, r2, r2
 800778e:	61b9      	str	r1, [r7, #24]
 8007790:	415b      	adcs	r3, r3
 8007792:	61fb      	str	r3, [r7, #28]
 8007794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007798:	4641      	mov	r1, r8
 800779a:	1851      	adds	r1, r2, r1
 800779c:	6139      	str	r1, [r7, #16]
 800779e:	4649      	mov	r1, r9
 80077a0:	414b      	adcs	r3, r1
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077b0:	4659      	mov	r1, fp
 80077b2:	00cb      	lsls	r3, r1, #3
 80077b4:	4651      	mov	r1, sl
 80077b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ba:	4651      	mov	r1, sl
 80077bc:	00ca      	lsls	r2, r1, #3
 80077be:	4610      	mov	r0, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	4603      	mov	r3, r0
 80077c4:	4642      	mov	r2, r8
 80077c6:	189b      	adds	r3, r3, r2
 80077c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077cc:	464b      	mov	r3, r9
 80077ce:	460a      	mov	r2, r1
 80077d0:	eb42 0303 	adc.w	r3, r2, r3
 80077d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077f0:	4649      	mov	r1, r9
 80077f2:	008b      	lsls	r3, r1, #2
 80077f4:	4641      	mov	r1, r8
 80077f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077fa:	4641      	mov	r1, r8
 80077fc:	008a      	lsls	r2, r1, #2
 80077fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007802:	f7f9 f9af 	bl	8000b64 <__aeabi_uldivmod>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4611      	mov	r1, r2
 800780c:	4b38      	ldr	r3, [pc, #224]	@ (80078f0 <UART_SetConfig+0x4e4>)
 800780e:	fba3 2301 	umull	r2, r3, r3, r1
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	2264      	movs	r2, #100	@ 0x64
 8007816:	fb02 f303 	mul.w	r3, r2, r3
 800781a:	1acb      	subs	r3, r1, r3
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	3332      	adds	r3, #50	@ 0x32
 8007820:	4a33      	ldr	r2, [pc, #204]	@ (80078f0 <UART_SetConfig+0x4e4>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800782c:	441c      	add	r4, r3
 800782e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007832:	2200      	movs	r2, #0
 8007834:	673b      	str	r3, [r7, #112]	@ 0x70
 8007836:	677a      	str	r2, [r7, #116]	@ 0x74
 8007838:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800783c:	4642      	mov	r2, r8
 800783e:	464b      	mov	r3, r9
 8007840:	1891      	adds	r1, r2, r2
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	415b      	adcs	r3, r3
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800784c:	4641      	mov	r1, r8
 800784e:	1851      	adds	r1, r2, r1
 8007850:	6039      	str	r1, [r7, #0]
 8007852:	4649      	mov	r1, r9
 8007854:	414b      	adcs	r3, r1
 8007856:	607b      	str	r3, [r7, #4]
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	f04f 0300 	mov.w	r3, #0
 8007860:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007864:	4659      	mov	r1, fp
 8007866:	00cb      	lsls	r3, r1, #3
 8007868:	4651      	mov	r1, sl
 800786a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800786e:	4651      	mov	r1, sl
 8007870:	00ca      	lsls	r2, r1, #3
 8007872:	4610      	mov	r0, r2
 8007874:	4619      	mov	r1, r3
 8007876:	4603      	mov	r3, r0
 8007878:	4642      	mov	r2, r8
 800787a:	189b      	adds	r3, r3, r2
 800787c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800787e:	464b      	mov	r3, r9
 8007880:	460a      	mov	r2, r1
 8007882:	eb42 0303 	adc.w	r3, r2, r3
 8007886:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	663b      	str	r3, [r7, #96]	@ 0x60
 8007892:	667a      	str	r2, [r7, #100]	@ 0x64
 8007894:	f04f 0200 	mov.w	r2, #0
 8007898:	f04f 0300 	mov.w	r3, #0
 800789c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80078a0:	4649      	mov	r1, r9
 80078a2:	008b      	lsls	r3, r1, #2
 80078a4:	4641      	mov	r1, r8
 80078a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078aa:	4641      	mov	r1, r8
 80078ac:	008a      	lsls	r2, r1, #2
 80078ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80078b2:	f7f9 f957 	bl	8000b64 <__aeabi_uldivmod>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4b0d      	ldr	r3, [pc, #52]	@ (80078f0 <UART_SetConfig+0x4e4>)
 80078bc:	fba3 1302 	umull	r1, r3, r3, r2
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	2164      	movs	r1, #100	@ 0x64
 80078c4:	fb01 f303 	mul.w	r3, r1, r3
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	3332      	adds	r3, #50	@ 0x32
 80078ce:	4a08      	ldr	r2, [pc, #32]	@ (80078f0 <UART_SetConfig+0x4e4>)
 80078d0:	fba2 2303 	umull	r2, r3, r2, r3
 80078d4:	095b      	lsrs	r3, r3, #5
 80078d6:	f003 020f 	and.w	r2, r3, #15
 80078da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4422      	add	r2, r4
 80078e2:	609a      	str	r2, [r3, #8]
}
 80078e4:	bf00      	nop
 80078e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80078ea:	46bd      	mov	sp, r7
 80078ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078f0:	51eb851f 	.word	0x51eb851f

080078f4 <memset>:
 80078f4:	4402      	add	r2, r0
 80078f6:	4603      	mov	r3, r0
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d100      	bne.n	80078fe <memset+0xa>
 80078fc:	4770      	bx	lr
 80078fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007902:	e7f9      	b.n	80078f8 <memset+0x4>

08007904 <strcat>:
 8007904:	b510      	push	{r4, lr}
 8007906:	4602      	mov	r2, r0
 8007908:	7814      	ldrb	r4, [r2, #0]
 800790a:	4613      	mov	r3, r2
 800790c:	3201      	adds	r2, #1
 800790e:	2c00      	cmp	r4, #0
 8007910:	d1fa      	bne.n	8007908 <strcat+0x4>
 8007912:	3b01      	subs	r3, #1
 8007914:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007918:	f803 2f01 	strb.w	r2, [r3, #1]!
 800791c:	2a00      	cmp	r2, #0
 800791e:	d1f9      	bne.n	8007914 <strcat+0x10>
 8007920:	bd10      	pop	{r4, pc}
	...

08007924 <__libc_init_array>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	4d0d      	ldr	r5, [pc, #52]	@ (800795c <__libc_init_array+0x38>)
 8007928:	4c0d      	ldr	r4, [pc, #52]	@ (8007960 <__libc_init_array+0x3c>)
 800792a:	1b64      	subs	r4, r4, r5
 800792c:	10a4      	asrs	r4, r4, #2
 800792e:	2600      	movs	r6, #0
 8007930:	42a6      	cmp	r6, r4
 8007932:	d109      	bne.n	8007948 <__libc_init_array+0x24>
 8007934:	4d0b      	ldr	r5, [pc, #44]	@ (8007964 <__libc_init_array+0x40>)
 8007936:	4c0c      	ldr	r4, [pc, #48]	@ (8007968 <__libc_init_array+0x44>)
 8007938:	f000 f820 	bl	800797c <_init>
 800793c:	1b64      	subs	r4, r4, r5
 800793e:	10a4      	asrs	r4, r4, #2
 8007940:	2600      	movs	r6, #0
 8007942:	42a6      	cmp	r6, r4
 8007944:	d105      	bne.n	8007952 <__libc_init_array+0x2e>
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	f855 3b04 	ldr.w	r3, [r5], #4
 800794c:	4798      	blx	r3
 800794e:	3601      	adds	r6, #1
 8007950:	e7ee      	b.n	8007930 <__libc_init_array+0xc>
 8007952:	f855 3b04 	ldr.w	r3, [r5], #4
 8007956:	4798      	blx	r3
 8007958:	3601      	adds	r6, #1
 800795a:	e7f2      	b.n	8007942 <__libc_init_array+0x1e>
 800795c:	08007a40 	.word	0x08007a40
 8007960:	08007a40 	.word	0x08007a40
 8007964:	08007a40 	.word	0x08007a40
 8007968:	08007a44 	.word	0x08007a44

0800796c <strcpy>:
 800796c:	4603      	mov	r3, r0
 800796e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007972:	f803 2b01 	strb.w	r2, [r3], #1
 8007976:	2a00      	cmp	r2, #0
 8007978:	d1f9      	bne.n	800796e <strcpy+0x2>
 800797a:	4770      	bx	lr

0800797c <_init>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr

08007988 <_fini>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr
