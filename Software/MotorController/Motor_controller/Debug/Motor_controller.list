
Motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004768  08004768  00005768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004780  08004780  00005780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004788  08004788  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004790  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  0800479c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800479c  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eea4  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002107  00000000  00000000  00014ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00016fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b10  00000000  00000000  00017e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002224  00000000  00000000  00018918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001136b  00000000  00000000  0001ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da284  00000000  00000000  0002bea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010612b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003afc  00000000  00000000  00106170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00109c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004750 	.word	0x08004750

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004750 	.word	0x08004750

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f001 f8f2 	bl	800171c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f862 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 fb8c 	bl	8000c58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 fb36 	bl	8000bb0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000544:	f000 f8ce 	bl	80006e4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000548:	f000 f91e 	bl	8000788 <MX_TIM1_Init>
  MX_TIM2_Init();
 800054c:	f000 f9e0 	bl	8000910 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000550:	f000 fa32 	bl	80009b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000554:	f000 fa84 	bl	8000a60 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000558:	f000 fad6 	bl	8000b08 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800055c:	f000 fb52 	bl	8000c04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000560:	2100      	movs	r1, #0
 8000562:	4820      	ldr	r0, [pc, #128]	@ (80005e4 <main+0xb4>)
 8000564:	f002 fd5e 	bl	8003024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000568:	2104      	movs	r1, #4
 800056a:	481e      	ldr	r0, [pc, #120]	@ (80005e4 <main+0xb4>)
 800056c:	f002 fd5a 	bl	8003024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000570:	2108      	movs	r1, #8
 8000572:	481c      	ldr	r0, [pc, #112]	@ (80005e4 <main+0xb4>)
 8000574:	f002 fd56 	bl	8003024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000578:	210c      	movs	r1, #12
 800057a:	481a      	ldr	r0, [pc, #104]	@ (80005e4 <main+0xb4>)
 800057c:	f002 fd52 	bl	8003024 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000580:	213c      	movs	r1, #60	@ 0x3c
 8000582:	4819      	ldr	r0, [pc, #100]	@ (80005e8 <main+0xb8>)
 8000584:	f002 febc 	bl	8003300 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000588:	213c      	movs	r1, #60	@ 0x3c
 800058a:	4818      	ldr	r0, [pc, #96]	@ (80005ec <main+0xbc>)
 800058c:	f002 feb8 	bl	8003300 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000590:	213c      	movs	r1, #60	@ 0x3c
 8000592:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <main+0xc0>)
 8000594:	f002 feb4 	bl	8003300 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000598:	213c      	movs	r1, #60	@ 0x3c
 800059a:	4816      	ldr	r0, [pc, #88]	@ (80005f4 <main+0xc4>)
 800059c:	f002 feb0 	bl	8003300 <HAL_TIM_Encoder_Start>


  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a6:	4814      	ldr	r0, [pc, #80]	@ (80005f8 <main+0xc8>)
 80005a8:	f001 fe42 	bl	8002230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2102      	movs	r1, #2
 80005b0:	4812      	ldr	r0, [pc, #72]	@ (80005fc <main+0xcc>)
 80005b2:	f001 fe3d 	bl	8002230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2104      	movs	r1, #4
 80005ba:	4810      	ldr	r0, [pc, #64]	@ (80005fc <main+0xcc>)
 80005bc:	f001 fe38 	bl	8002230 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_PIN, 1);
	  setForwardLeftMotorPWM(-1);
 80005c0:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80005c4:	f000 fc12 	bl	8000dec <setForwardLeftMotorPWM>
	  setForwardRightMotorPWM(-1); // - not working
 80005c8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80005cc:	f000 fc68 	bl	8000ea0 <setForwardRightMotorPWM>

	  setRearLeftMotorPWM(-1);
 80005d0:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80005d4:	f000 fcbe 	bl	8000f54 <setRearLeftMotorPWM>
	  setRearRightMotorPWM(-1);
 80005d8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80005dc:	f000 fd10 	bl	8001000 <setRearRightMotorPWM>
	  setForwardLeftMotorPWM(-1);
 80005e0:	bf00      	nop
 80005e2:	e7ed      	b.n	80005c0 <main+0x90>
 80005e4:	20000070 	.word	0x20000070
 80005e8:	200000b8 	.word	0x200000b8
 80005ec:	20000100 	.word	0x20000100
 80005f0:	20000148 	.word	0x20000148
 80005f4:	20000190 	.word	0x20000190
 80005f8:	40020000 	.word	0x40020000
 80005fc:	40020400 	.word	0x40020400

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	@ 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f872 	bl	80046f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b2c      	ldr	r3, [pc, #176]	@ (80006dc <SystemClock_Config+0xdc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a2b      	ldr	r2, [pc, #172]	@ (80006dc <SystemClock_Config+0xdc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <SystemClock_Config+0xdc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <SystemClock_Config+0xe0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a25      	ldr	r2, [pc, #148]	@ (80006e0 <SystemClock_Config+0xe0>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000674:	23b4      	movs	r3, #180	@ 0xb4
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f002 f985 	bl	8002998 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000694:	f000 fb7c 	bl	8000d90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000698:	f001 fde4 	bl	8002264 <HAL_PWREx_EnableOverDrive>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a2:	f000 fb75 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2105      	movs	r1, #5
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fe1d 	bl	8002304 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006d0:	f000 fb5e 	bl	8000d90 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	@ 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <MX_ADC1_Init+0x98>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	@ (8000780 <MX_ADC1_Init+0x9c>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_ADC1_Init+0x98>)
 80006fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_ADC1_Init+0x98>)
 8000726:	4a17      	ldr	r2, [pc, #92]	@ (8000784 <MX_ADC1_Init+0xa0>)
 8000728:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_ADC1_Init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_ADC1_Init+0x98>)
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <MX_ADC1_Init+0x98>)
 8000746:	f001 f85b 	bl	8001800 <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000750:	f000 fb1e 	bl	8000d90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000754:	2304      	movs	r3, #4
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_ADC1_Init+0x98>)
 8000766:	f001 f88f 	bl	8001888 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000770:	f000 fb0e 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000028 	.word	0x20000028
 8000780:	40012000 	.word	0x40012000
 8000784:	0f000001 	.word	0x0f000001

08000788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b096      	sub	sp, #88	@ 0x58
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 ff99 	bl	80046f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c6:	4b50      	ldr	r3, [pc, #320]	@ (8000908 <MX_TIM1_Init+0x180>)
 80007c8:	4a50      	ldr	r2, [pc, #320]	@ (800090c <MX_TIM1_Init+0x184>)
 80007ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007cc:	4b4e      	ldr	r3, [pc, #312]	@ (8000908 <MX_TIM1_Init+0x180>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000908 <MX_TIM1_Init+0x180>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80007d8:	4b4b      	ldr	r3, [pc, #300]	@ (8000908 <MX_TIM1_Init+0x180>)
 80007da:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80007de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b49      	ldr	r3, [pc, #292]	@ (8000908 <MX_TIM1_Init+0x180>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e6:	4b48      	ldr	r3, [pc, #288]	@ (8000908 <MX_TIM1_Init+0x180>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b46      	ldr	r3, [pc, #280]	@ (8000908 <MX_TIM1_Init+0x180>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f2:	4845      	ldr	r0, [pc, #276]	@ (8000908 <MX_TIM1_Init+0x180>)
 80007f4:	f002 fb6e 	bl	8002ed4 <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007fe:	f000 fac7 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000802:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000808:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800080c:	4619      	mov	r1, r3
 800080e:	483e      	ldr	r0, [pc, #248]	@ (8000908 <MX_TIM1_Init+0x180>)
 8000810:	f002 ffb6 	bl	8003780 <HAL_TIM_ConfigClockSource>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800081a:	f000 fab9 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800081e:	483a      	ldr	r0, [pc, #232]	@ (8000908 <MX_TIM1_Init+0x180>)
 8000820:	f002 fba7 	bl	8002f72 <HAL_TIM_PWM_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800082a:	f000 fab1 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000836:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800083a:	4619      	mov	r1, r3
 800083c:	4832      	ldr	r0, [pc, #200]	@ (8000908 <MX_TIM1_Init+0x180>)
 800083e:	f003 fbb5 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000848:	f000 faa2 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084c:	2360      	movs	r3, #96	@ 0x60
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4825      	ldr	r0, [pc, #148]	@ (8000908 <MX_TIM1_Init+0x180>)
 8000872:	f002 fec3 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800087c:	f000 fa88 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000884:	2204      	movs	r2, #4
 8000886:	4619      	mov	r1, r3
 8000888:	481f      	ldr	r0, [pc, #124]	@ (8000908 <MX_TIM1_Init+0x180>)
 800088a:	f002 feb7 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000894:	f000 fa7c 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089c:	2208      	movs	r2, #8
 800089e:	4619      	mov	r1, r3
 80008a0:	4819      	ldr	r0, [pc, #100]	@ (8000908 <MX_TIM1_Init+0x180>)
 80008a2:	f002 feab 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80008ac:	f000 fa70 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b4:	220c      	movs	r2, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	4813      	ldr	r0, [pc, #76]	@ (8000908 <MX_TIM1_Init+0x180>)
 80008ba:	f002 fe9f 	bl	80035fc <HAL_TIM_PWM_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80008c4:	f000 fa64 	bl	8000d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4807      	ldr	r0, [pc, #28]	@ (8000908 <MX_TIM1_Init+0x180>)
 80008ec:	f003 fbda 	bl	80040a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80008f6:	f000 fa4b 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008fa:	4803      	ldr	r0, [pc, #12]	@ (8000908 <MX_TIM1_Init+0x180>)
 80008fc:	f000 fd8e 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000900:	bf00      	nop
 8000902:	3758      	adds	r7, #88	@ 0x58
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000070 	.word	0x20000070
 800090c:	40010000 	.word	0x40010000

08000910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	@ 0x30
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	2224      	movs	r2, #36	@ 0x24
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 feea 	bl	80046f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800092c:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <MX_TIM2_Init+0xa4>)
 800092e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000932:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_TIM2_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <MX_TIM2_Init+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000940:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_TIM2_Init+0xa4>)
 8000942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000946:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_TIM2_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_TIM2_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000954:	2303      	movs	r3, #3
 8000956:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800095c:	2301      	movs	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800096c:	2301      	movs	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <MX_TIM2_Init+0xa4>)
 8000980:	f002 fc18 	bl	80031b4 <HAL_TIM_Encoder_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800098a:	f000 fa01 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <MX_TIM2_Init+0xa4>)
 800099c:	f003 fb06 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009a6:	f000 f9f3 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	@ 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000b8 	.word	0x200000b8

080009b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	@ 0x30
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2224      	movs	r2, #36	@ 0x24
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fe96 	bl	80046f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009d6:	4a21      	ldr	r2, [pc, #132]	@ (8000a5c <MX_TIM3_Init+0xa4>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009fa:	2303      	movs	r3, #3
 80009fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a02:	2301      	movs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a12:	2301      	movs	r3, #1
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 8000a26:	f002 fbc5 	bl	80031b4 <HAL_TIM_Encoder_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f9ae 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_TIM3_Init+0xa0>)
 8000a42:	f003 fab3 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a4c:	f000 f9a0 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	3730      	adds	r7, #48	@ 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000100 	.word	0x20000100
 8000a5c:	40000400 	.word	0x40000400

08000a60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	@ 0x30
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2224      	movs	r2, #36	@ 0x24
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 fe42 	bl	80046f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a7c:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <MX_TIM4_Init+0xa0>)
 8000a7e:	4a21      	ldr	r2, [pc, #132]	@ (8000b04 <MX_TIM4_Init+0xa4>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <MX_TIM4_Init+0xa0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <MX_TIM4_Init+0xa0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <MX_TIM4_Init+0xa0>)
 8000a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_TIM4_Init+0xa0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <MX_TIM4_Init+0xa0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aba:	2301      	movs	r3, #1
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <MX_TIM4_Init+0xa0>)
 8000ace:	f002 fb71 	bl	80031b4 <HAL_TIM_Encoder_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 f95a 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_TIM4_Init+0xa0>)
 8000aea:	f003 fa5f 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000af4:	f000 f94c 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3730      	adds	r7, #48	@ 0x30
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000148 	.word	0x20000148
 8000b04:	40000800 	.word	0x40000800

08000b08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	@ 0x30
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2224      	movs	r2, #36	@ 0x24
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fdee 	bl	80046f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b24:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b26:	4a21      	ldr	r2, [pc, #132]	@ (8000bac <MX_TIM5_Init+0xa4>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b76:	f002 fb1d 	bl	80031b4 <HAL_TIM_Encoder_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f000 f906 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_TIM5_Init+0xa0>)
 8000b92:	f003 fa0b 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b9c:	f000 f8f8 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	@ 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000190 	.word	0x20000190
 8000bac:	40000c00 	.word	0x40000c00

08000bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <MX_USART2_UART_Init+0x50>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_USART2_UART_Init+0x4c>)
 8000be8:	f003 fac2 	bl	8004170 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bf2:	f000 f8cd 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001d8 	.word	0x200001d8
 8000c00:	40004400 	.word	0x40004400

08000c04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <MX_USART3_UART_Init+0x50>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART3_UART_Init+0x4c>)
 8000c3c:	f003 fa98 	bl	8004170 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c46:	f000 f8a3 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000220 	.word	0x20000220
 8000c54:	40004800 	.word	0x40004800

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b43      	ldr	r3, [pc, #268]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a42      	ldr	r2, [pc, #264]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b40      	ldr	r3, [pc, #256]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a3b      	ldr	r2, [pc, #236]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b39      	ldr	r3, [pc, #228]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	4b35      	ldr	r3, [pc, #212]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a34      	ldr	r2, [pc, #208]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b32      	ldr	r3, [pc, #200]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a2d      	ldr	r2, [pc, #180]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d80 <MX_GPIO_Init+0x128>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f640 711c 	movw	r1, #3868	@ 0xf1c
 8000ce4:	4827      	ldr	r0, [pc, #156]	@ (8000d84 <MX_GPIO_Init+0x12c>)
 8000ce6:	f001 faa3 	bl	8002230 <HAL_GPIO_WritePin>
                          |M2_INB_Pin|M1_INA_Pin|M1_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2136      	movs	r1, #54	@ 0x36
 8000cee:	4826      	ldr	r0, [pc, #152]	@ (8000d88 <MX_GPIO_Init+0x130>)
 8000cf0:	f001 fa9e 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cfa:	4824      	ldr	r0, [pc, #144]	@ (8000d8c <MX_GPIO_Init+0x134>)
 8000cfc:	f001 fa98 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_INA_Pin M4_INB_Pin TX_EN_Pin M2_INA_Pin
                           M1_INA_Pin M1_INB_Pin */
  GPIO_InitStruct.Pin = M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 8000d00:	f640 531c 	movw	r3, #3356	@ 0xd1c
 8000d04:	617b      	str	r3, [r7, #20]
                          |M1_INA_Pin|M1_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	481a      	ldr	r0, [pc, #104]	@ (8000d84 <MX_GPIO_Init+0x12c>)
 8000d1a:	f001 f8f5 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RX_Pin LED_TX_Pin M3_INA_Pin M3_INB_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin;
 8000d1e:	2336      	movs	r3, #54	@ 0x36
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4814      	ldr	r0, [pc, #80]	@ (8000d88 <MX_GPIO_Init+0x130>)
 8000d36:	f001 f8e7 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_INB_Pin */
  GPIO_InitStruct.Pin = M2_INB_Pin;
 8000d3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_INB_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <MX_GPIO_Init+0x12c>)
 8000d54:	f001 f8d8 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8000d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <MX_GPIO_Init+0x134>)
 8000d72:	f001 f8c9 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020000 	.word	0x40020000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <Error_Handler+0x8>

08000d9c <limitPWM>:
 *      Author: PANKAJA
 */

#include "motors.h"

float limitPWM(float pwm) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 8000da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db6:	dd02      	ble.n	8000dbe <limitPWM+0x22>
		return PWM_MAX;
 8000db8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000dbc:	e00b      	b.n	8000dd6 <limitPWM+0x3a>
	else if (pwm < -PWM_MAX)
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dce:	d501      	bpl.n	8000dd4 <limitPWM+0x38>
		return -PWM_MAX;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <limitPWM+0x4c>)
 8000dd2:	e000      	b.n	8000dd6 <limitPWM+0x3a>
	return pwm;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb0 0a67 	vmov.f32	s0, s15
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	bf800000 	.word	0xbf800000

08000dec <setForwardLeftMotorPWM>:


void setForwardLeftMotorPWM(float pwm) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8000df6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	db1c      	blt.n	8000e3e <setForwardLeftMotorPWM+0x52>
		//GPIOB_BSRR = (1U << INA_PIN) | (1U << (INB_PIN + 16));
		HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e0a:	4822      	ldr	r0, [pc, #136]	@ (8000e94 <setForwardLeftMotorPWM+0xa8>)
 8000e0c:	f001 fa10 	bl	8002230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e16:	481f      	ldr	r0, [pc, #124]	@ (8000e94 <setForwardLeftMotorPWM+0xa8>)
 8000e18:	f001 fa0a 	bl	8002230 <HAL_GPIO_WritePin>

		TIM1->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000e1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e20:	f7ff ffbc 	bl	8000d9c <limitPWM>
 8000e24:	eef0 7a40 	vmov.f32	s15, s0
 8000e28:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000e98 <setForwardLeftMotorPWM+0xac>
 8000e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <setForwardLeftMotorPWM+0xb0>)
 8000e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e36:	ee17 2a90 	vmov	r2, s15
 8000e3a:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, 0);
		HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 1);

		TIM1->CCR1 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8000e3c:	e025      	b.n	8000e8a <setForwardLeftMotorPWM+0x9e>
	else if (pwm < 0) {
 8000e3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	d400      	bmi.n	8000e4e <setForwardLeftMotorPWM+0x62>
}
 8000e4c:	e01d      	b.n	8000e8a <setForwardLeftMotorPWM+0x9e>
		HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e54:	480f      	ldr	r0, [pc, #60]	@ (8000e94 <setForwardLeftMotorPWM+0xa8>)
 8000e56:	f001 f9eb 	bl	8002230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <setForwardLeftMotorPWM+0xa8>)
 8000e62:	f001 f9e5 	bl	8002230 <HAL_GPIO_WritePin>
		TIM1->CCR1 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000e66:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e6a:	f7ff ff97 	bl	8000d9c <limitPWM>
 8000e6e:	eef0 7a40 	vmov.f32	s15, s0
 8000e72:	eef1 7a67 	vneg.f32	s15, s15
 8000e76:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000e98 <setForwardLeftMotorPWM+0xac>
 8000e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <setForwardLeftMotorPWM+0xb0>)
 8000e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e84:	ee17 2a90 	vmov	r2, s15
 8000e88:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020800 	.word	0x40020800
 8000e98:	45e0f800 	.word	0x45e0f800
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <setForwardRightMotorPWM>:

void setForwardRightMotorPWM(float pwm) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8000eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb6:	db1c      	blt.n	8000ef2 <setForwardRightMotorPWM+0x52>
		//GPIOB_BSRR = (1U << INA_PIN) | (1U << (INB_PIN + 16));
		HAL_GPIO_WritePin(M2_INA_GPIO_Port, M2_INA_Pin, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ebe:	4822      	ldr	r0, [pc, #136]	@ (8000f48 <setForwardRightMotorPWM+0xa8>)
 8000ec0:	f001 f9b6 	bl	8002230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_INB_GPIO_Port, M2_INB_Pin, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eca:	481f      	ldr	r0, [pc, #124]	@ (8000f48 <setForwardRightMotorPWM+0xa8>)
 8000ecc:	f001 f9b0 	bl	8002230 <HAL_GPIO_WritePin>

		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000ed0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ed4:	f7ff ff62 	bl	8000d9c <limitPWM>
 8000ed8:	eef0 7a40 	vmov.f32	s15, s0
 8000edc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000f4c <setForwardRightMotorPWM+0xac>
 8000ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <setForwardRightMotorPWM+0xb0>)
 8000ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eea:	ee17 2a90 	vmov	r2, s15
 8000eee:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(M2_INA_GPIO_Port, M2_INA_Pin, 0);
		HAL_GPIO_WritePin(M2_INB_GPIO_Port, M2_INB_Pin, 1);

		TIM1->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8000ef0:	e025      	b.n	8000f3e <setForwardRightMotorPWM+0x9e>
	else if (pwm < 0) {
 8000ef2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efe:	d400      	bmi.n	8000f02 <setForwardRightMotorPWM+0x62>
}
 8000f00:	e01d      	b.n	8000f3e <setForwardRightMotorPWM+0x9e>
		HAL_GPIO_WritePin(M2_INA_GPIO_Port, M2_INA_Pin, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f08:	480f      	ldr	r0, [pc, #60]	@ (8000f48 <setForwardRightMotorPWM+0xa8>)
 8000f0a:	f001 f991 	bl	8002230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_INB_GPIO_Port, M2_INB_Pin, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <setForwardRightMotorPWM+0xa8>)
 8000f16:	f001 f98b 	bl	8002230 <HAL_GPIO_WritePin>
		TIM1->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000f1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f1e:	f7ff ff3d 	bl	8000d9c <limitPWM>
 8000f22:	eef0 7a40 	vmov.f32	s15, s0
 8000f26:	eef1 7a67 	vneg.f32	s15, s15
 8000f2a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000f4c <setForwardRightMotorPWM+0xac>
 8000f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f32:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <setForwardRightMotorPWM+0xb0>)
 8000f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f38:	ee17 2a90 	vmov	r2, s15
 8000f3c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	45e0f800 	.word	0x45e0f800
 8000f50:	40010000 	.word	0x40010000

08000f54 <setRearLeftMotorPWM>:

void setRearLeftMotorPWM(float pwm) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8000f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6a:	db1a      	blt.n	8000fa2 <setRearLeftMotorPWM+0x4e>
		//GPIOB_BSRR = (1U << INA_PIN) | (1U << (INB_PIN + 16));
		HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4820      	ldr	r0, [pc, #128]	@ (8000ff4 <setRearLeftMotorPWM+0xa0>)
 8000f72:	f001 f95d 	bl	8002230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2120      	movs	r1, #32
 8000f7a:	481e      	ldr	r0, [pc, #120]	@ (8000ff4 <setRearLeftMotorPWM+0xa0>)
 8000f7c:	f001 f958 	bl	8002230 <HAL_GPIO_WritePin>

		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000f80:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f84:	f7ff ff0a 	bl	8000d9c <limitPWM>
 8000f88:	eef0 7a40 	vmov.f32	s15, s0
 8000f8c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000ff8 <setRearLeftMotorPWM+0xa4>
 8000f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <setRearLeftMotorPWM+0xa8>)
 8000f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9a:	ee17 2a90 	vmov	r2, s15
 8000f9e:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 0);
		HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);

		TIM1->CCR3 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8000fa0:	e023      	b.n	8000fea <setRearLeftMotorPWM+0x96>
	else if (pwm < 0) {
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d400      	bmi.n	8000fb2 <setRearLeftMotorPWM+0x5e>
}
 8000fb0:	e01b      	b.n	8000fea <setRearLeftMotorPWM+0x96>
		HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <setRearLeftMotorPWM+0xa0>)
 8000fb8:	f001 f93a 	bl	8002230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <setRearLeftMotorPWM+0xa0>)
 8000fc2:	f001 f935 	bl	8002230 <HAL_GPIO_WritePin>
		TIM1->CCR3 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8000fc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fca:	f7ff fee7 	bl	8000d9c <limitPWM>
 8000fce:	eef0 7a40 	vmov.f32	s15, s0
 8000fd2:	eef1 7a67 	vneg.f32	s15, s15
 8000fd6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000ff8 <setRearLeftMotorPWM+0xa4>
 8000fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <setRearLeftMotorPWM+0xa8>)
 8000fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe4:	ee17 2a90 	vmov	r2, s15
 8000fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	45e0f800 	.word	0x45e0f800
 8000ffc:	40010000 	.word	0x40010000

08001000 <setRearRightMotorPWM>:

void setRearRightMotorPWM(float pwm) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	db1a      	blt.n	800104e <setRearRightMotorPWM+0x4e>
		//GPIOB_BSRR = (1U << INA_PIN) | (1U << (INB_PIN + 16));
		HAL_GPIO_WritePin(M4_INA_GPIO_Port, M4_INA_Pin, 1);
 8001018:	2201      	movs	r2, #1
 800101a:	2104      	movs	r1, #4
 800101c:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <setRearRightMotorPWM+0xa0>)
 800101e:	f001 f907 	bl	8002230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M4_INB_GPIO_Port, M4_INB_Pin, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2108      	movs	r1, #8
 8001026:	481e      	ldr	r0, [pc, #120]	@ (80010a0 <setRearRightMotorPWM+0xa0>)
 8001028:	f001 f902 	bl	8002230 <HAL_GPIO_WritePin>

		TIM1->CCR4 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800102c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001030:	f7ff feb4 	bl	8000d9c <limitPWM>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80010a4 <setRearRightMotorPWM+0xa4>
 800103c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001040:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <setRearRightMotorPWM+0xa8>)
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	ee17 2a90 	vmov	r2, s15
 800104a:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(M4_INA_GPIO_Port, M4_INA_Pin, 0);
		HAL_GPIO_WritePin(M4_INB_GPIO_Port, M4_INB_Pin, 1);

		TIM1->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800104c:	e023      	b.n	8001096 <setRearRightMotorPWM+0x96>
	else if (pwm < 0) {
 800104e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105a:	d400      	bmi.n	800105e <setRearRightMotorPWM+0x5e>
}
 800105c:	e01b      	b.n	8001096 <setRearRightMotorPWM+0x96>
		HAL_GPIO_WritePin(M4_INA_GPIO_Port, M4_INA_Pin, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2104      	movs	r1, #4
 8001062:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <setRearRightMotorPWM+0xa0>)
 8001064:	f001 f8e4 	bl	8002230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M4_INB_GPIO_Port, M4_INB_Pin, 1);
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <setRearRightMotorPWM+0xa0>)
 800106e:	f001 f8df 	bl	8002230 <HAL_GPIO_WritePin>
		TIM1->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001072:	ed97 0a01 	vldr	s0, [r7, #4]
 8001076:	f7ff fe91 	bl	8000d9c <limitPWM>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	eef1 7a67 	vneg.f32	s15, s15
 8001082:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80010a4 <setRearRightMotorPWM+0xa4>
 8001086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <setRearRightMotorPWM+0xa8>)
 800108c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001090:	ee17 2a90 	vmov	r2, s15
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020800 	.word	0x40020800
 80010a4:	45e0f800 	.word	0x45e0f800
 80010a8:	40010000 	.word	0x40010000

080010ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <HAL_MspInit+0x4c>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <HAL_MspInit+0x4c>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <HAL_ADC_MspInit+0x7c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d127      	bne.n	800116e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <HAL_ADC_MspInit+0x80>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	4a15      	ldr	r2, [pc, #84]	@ (800117c <HAL_ADC_MspInit+0x80>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800112c:	6453      	str	r3, [r2, #68]	@ 0x44
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <HAL_ADC_MspInit+0x80>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <HAL_ADC_MspInit+0x80>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <HAL_ADC_MspInit+0x80>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_ADC_MspInit+0x80>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = M1_CS_Pin|M2_CS_Pin|M3_CS_Pin|M4_CS_Pin;
 8001156:	23f0      	movs	r3, #240	@ 0xf0
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115a:	2303      	movs	r3, #3
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0x84>)
 800116a:	f000 fecd 	bl	8001f08 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40012000 	.word	0x40012000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <HAL_TIM_Base_MspInit+0x48>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d115      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <HAL_TIM_Base_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a0c      	ldr	r2, [pc, #48]	@ (80011d0 <HAL_TIM_Base_MspInit+0x4c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_TIM_Base_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2019      	movs	r0, #25
 80011b8:	f000 fe6f 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011bc:	2019      	movs	r0, #25
 80011be:	f000 fe88 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40010000 	.word	0x40010000
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b090      	sub	sp, #64	@ 0x40
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011f4:	d153      	bne.n	800129e <HAL_TIM_Encoder_MspInit+0xca>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011fa:	4b81      	ldr	r3, [pc, #516]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a80      	ldr	r2, [pc, #512]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b7e      	ldr	r3, [pc, #504]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001210:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
 8001216:	4b7a      	ldr	r3, [pc, #488]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a79      	ldr	r2, [pc, #484]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b77      	ldr	r3, [pc, #476]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	4b73      	ldr	r3, [pc, #460]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a72      	ldr	r2, [pc, #456]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1_EncoderCH1_Pin;
 800124a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125c:	2301      	movs	r3, #1
 800125e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH1_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001264:	4619      	mov	r1, r3
 8001266:	4867      	ldr	r0, [pc, #412]	@ (8001404 <HAL_TIM_Encoder_MspInit+0x230>)
 8001268:	f000 fe4e 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_EncoderCH2_Pin;
 800126c:	2308      	movs	r3, #8
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800127c:	2301      	movs	r3, #1
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH2_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	4860      	ldr	r0, [pc, #384]	@ (8001408 <HAL_TIM_Encoder_MspInit+0x234>)
 8001288:	f000 fe3e 	bl	8001f08 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	201c      	movs	r0, #28
 8001292:	f000 fe02 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001296:	201c      	movs	r0, #28
 8001298:	f000 fe1b 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800129c:	e0ac      	b.n	80013f8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a5a      	ldr	r2, [pc, #360]	@ (800140c <HAL_TIM_Encoder_MspInit+0x238>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d134      	bne.n	8001312 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	4a53      	ldr	r2, [pc, #332]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b8:	4b51      	ldr	r3, [pc, #324]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2_EncoderCH1_Pin|M2_EncoderCH2_Pin;
 80012e0:	23c0      	movs	r3, #192	@ 0xc0
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012f0:	2302      	movs	r3, #2
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f8:	4619      	mov	r1, r3
 80012fa:	4845      	ldr	r0, [pc, #276]	@ (8001410 <HAL_TIM_Encoder_MspInit+0x23c>)
 80012fc:	f000 fe04 	bl	8001f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	201d      	movs	r0, #29
 8001306:	f000 fdc8 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800130a:	201d      	movs	r0, #29
 800130c:	f000 fde1 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
}
 8001310:	e072      	b.n	80013f8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a3f      	ldr	r2, [pc, #252]	@ (8001414 <HAL_TIM_Encoder_MspInit+0x240>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d134      	bne.n	8001386 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	4b37      	ldr	r3, [pc, #220]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a36      	ldr	r2, [pc, #216]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40
 800132c:	4b34      	ldr	r3, [pc, #208]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001340:	4a2f      	ldr	r2, [pc, #188]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	6313      	str	r3, [r2, #48]	@ 0x30
 8001348:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_EncoderCH1_Pin|M3_EncoderCH2_Pin;
 8001354:	23c0      	movs	r3, #192	@ 0xc0
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001364:	2302      	movs	r3, #2
 8001366:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136c:	4619      	mov	r1, r3
 800136e:	4826      	ldr	r0, [pc, #152]	@ (8001408 <HAL_TIM_Encoder_MspInit+0x234>)
 8001370:	f000 fdca 	bl	8001f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	201e      	movs	r0, #30
 800137a:	f000 fd8e 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800137e:	201e      	movs	r0, #30
 8001380:	f000 fda7 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
}
 8001384:	e038      	b.n	80013f8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a23      	ldr	r2, [pc, #140]	@ (8001418 <HAL_TIM_Encoder_MspInit+0x244>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d133      	bne.n	80013f8 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	4a19      	ldr	r2, [pc, #100]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80013bc:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_TIM_Encoder_MspInit+0x22c>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_EncoderCH1_Pin|M4_EncoderCH2_Pin;
 80013c8:	2303      	movs	r3, #3
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013d8:	2302      	movs	r3, #2
 80013da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e0:	4619      	mov	r1, r3
 80013e2:	4808      	ldr	r0, [pc, #32]	@ (8001404 <HAL_TIM_Encoder_MspInit+0x230>)
 80013e4:	f000 fd90 	bl	8001f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2032      	movs	r0, #50	@ 0x32
 80013ee:	f000 fd54 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013f2:	2032      	movs	r0, #50	@ 0x32
 80013f4:	f000 fd6d 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
}
 80013f8:	bf00      	nop
 80013fa:	3740      	adds	r7, #64	@ 0x40
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40000400 	.word	0x40000400
 8001410:	40020800 	.word	0x40020800
 8001414:	40000800 	.word	0x40000800
 8001418:	40000c00 	.word	0x40000c00

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <HAL_TIM_MspPostInit+0x68>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d11e      	bne.n	800147c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a10      	ldr	r2, [pc, #64]	@ (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <HAL_TIM_MspPostInit+0x6c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 800145a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800145e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800146c:	2301      	movs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <HAL_TIM_MspPostInit+0x70>)
 8001478:	f000 fd46 	bl	8001f08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010000 	.word	0x40010000
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000

08001490 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	@ 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a41      	ldr	r2, [pc, #260]	@ (80015b4 <HAL_UART_MspInit+0x124>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12c      	bne.n	800150c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	4a3f      	ldr	r2, [pc, #252]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c2:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a38      	ldr	r2, [pc, #224]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ea:	230c      	movs	r3, #12
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fa:	2307      	movs	r3, #7
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	482d      	ldr	r0, [pc, #180]	@ (80015bc <HAL_UART_MspInit+0x12c>)
 8001506:	f000 fcff 	bl	8001f08 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800150a:	e04f      	b.n	80015ac <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a2b      	ldr	r2, [pc, #172]	@ (80015c0 <HAL_UART_MspInit+0x130>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d14a      	bne.n	80015ac <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	4a26      	ldr	r2, [pc, #152]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001524:	6413      	str	r3, [r2, #64]	@ 0x40
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a18      	ldr	r2, [pc, #96]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_UART_MspInit+0x128>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800156a:	2320      	movs	r3, #32
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800157a:	2307      	movs	r3, #7
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	480f      	ldr	r0, [pc, #60]	@ (80015c4 <HAL_UART_MspInit+0x134>)
 8001586:	f000 fcbf 	bl	8001f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800158a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800159c:	2307      	movs	r3, #7
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <HAL_UART_MspInit+0x138>)
 80015a8:	f000 fcae 	bl	8001f08 <HAL_GPIO_Init>
}
 80015ac:	bf00      	nop
 80015ae:	3730      	adds	r7, #48	@ 0x30
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40004800 	.word	0x40004800
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020400 	.word	0x40020400

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 f8cd 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8001626:	f000 f847 	bl	80016b8 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001636:	f001 fef1 	bl	800341c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000070 	.word	0x20000070

08001644 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM2_IRQHandler+0x10>)
 800164a:	f001 fee7 	bl	800341c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200000b8 	.word	0x200000b8

08001658 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <TIM3_IRQHandler+0x10>)
 800165e:	f001 fedd 	bl	800341c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000100 	.word	0x20000100

0800166c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <TIM4_IRQHandler+0x10>)
 8001672:	f001 fed3 	bl	800341c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000148 	.word	0x20000148

08001680 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <TIM5_IRQHandler+0x10>)
 8001686:	f001 fec9 	bl	800341c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000190 	.word	0x20000190

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <SysTickFunction>:
//			TIM1->CNT = (int16_t) difference;
//		}
//}


void SysTickFunction(void) {
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
		//update_Encoder_Data();

	//--------------------------------------------------------------------


}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001700 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016cc:	f7ff ffe2 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f003 f807 	bl	8004708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fa:	f7fe ff19 	bl	8000530 <main>
  bx  lr    
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800170c:	08004790 	.word	0x08004790
  ldr r2, =_sbss
 8001710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001714:	2000026c 	.word	0x2000026c

08001718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC_IRQHandler>
	...

0800171c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <HAL_Init+0x40>)
 8001726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_Init+0x40>)
 8001732:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001736:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a07      	ldr	r2, [pc, #28]	@ (800175c <HAL_Init+0x40>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001744:	2003      	movs	r0, #3
 8001746:	f000 fb9d 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174a:	200f      	movs	r0, #15
 800174c:	f000 f808 	bl	8001760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001750:	f7ff fcac 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_InitTick+0x54>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_InitTick+0x58>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fbb5 	bl	8001eee <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00e      	b.n	80017ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d80a      	bhi.n	80017aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 fb7d 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a0:	4a06      	ldr	r2, [pc, #24]	@ (80017bc <HAL_InitTick+0x5c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008
 80017e4:	20000268 	.word	0x20000268

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000268 	.word	0x20000268

08001800 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e033      	b.n	800187e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fc6c 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	d118      	bne.n	8001870 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001846:	f023 0302 	bic.w	r3, r3, #2
 800184a:	f043 0202 	orr.w	r2, r3, #2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f94a 	bl	8001aec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40
 800186e:	e001      	b.n	8001874 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1c>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e113      	b.n	8001acc <HAL_ADC_ConfigChannel+0x244>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b09      	cmp	r3, #9
 80018b2:	d925      	bls.n	8001900 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68d9      	ldr	r1, [r3, #12]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	3b1e      	subs	r3, #30
 80018ca:	2207      	movs	r2, #7
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43da      	mvns	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	400a      	ands	r2, r1
 80018d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68d9      	ldr	r1, [r3, #12]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	4603      	mov	r3, r0
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4403      	add	r3, r0
 80018f2:	3b1e      	subs	r3, #30
 80018f4:	409a      	lsls	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	e022      	b.n	8001946 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6919      	ldr	r1, [r3, #16]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	2207      	movs	r2, #7
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	400a      	ands	r2, r1
 8001922:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	4603      	mov	r3, r0
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4403      	add	r3, r0
 800193c:	409a      	lsls	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b06      	cmp	r3, #6
 800194c:	d824      	bhi.n	8001998 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b05      	subs	r3, #5
 8001960:	221f      	movs	r2, #31
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	400a      	ands	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	3b05      	subs	r3, #5
 800198a:	fa00 f203 	lsl.w	r2, r0, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
 8001996:	e04c      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d824      	bhi.n	80019ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b23      	subs	r3, #35	@ 0x23
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43da      	mvns	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	400a      	ands	r2, r1
 80019c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b23      	subs	r3, #35	@ 0x23
 80019dc:	fa00 f203 	lsl.w	r2, r0, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019e8:	e023      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	3b41      	subs	r3, #65	@ 0x41
 80019fc:	221f      	movs	r2, #31
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b41      	subs	r3, #65	@ 0x41
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a32:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <HAL_ADC_ConfigChannel+0x250>)
 8001a34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a28      	ldr	r2, [pc, #160]	@ (8001adc <HAL_ADC_ConfigChannel+0x254>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d10f      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1d8>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b12      	cmp	r3, #18
 8001a46:	d10b      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <HAL_ADC_ConfigChannel+0x254>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12b      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x23a>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x258>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d003      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0x1f4>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b11      	cmp	r3, #17
 8001a7a:	d122      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x258>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d111      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x25c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x260>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	0c9a      	lsrs	r2, r3, #18
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ab4:	e002      	b.n	8001abc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f9      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40012300 	.word	0x40012300
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	10000012 	.word	0x10000012
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	431bde83 	.word	0x431bde83

08001aec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af4:	4b79      	ldr	r3, [pc, #484]	@ (8001cdc <ADC_Init+0x1f0>)
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	021a      	lsls	r2, r3, #8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6899      	ldr	r1, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7e:	4a58      	ldr	r2, [pc, #352]	@ (8001ce0 <ADC_Init+0x1f4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d022      	beq.n	8001bca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6899      	ldr	r1, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6899      	ldr	r1, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	e00f      	b.n	8001bea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001be8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0202 	bic.w	r2, r2, #2
 8001bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7e1b      	ldrb	r3, [r3, #24]
 8001c04:	005a      	lsls	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01b      	beq.n	8001c50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	3b01      	subs	r3, #1
 8001c44:	035a      	lsls	r2, r3, #13
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	e007      	b.n	8001c60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	051a      	lsls	r2, r3, #20
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6899      	ldr	r1, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ca2:	025a      	lsls	r2, r3, #9
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	029a      	lsls	r2, r3, #10
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40012300 	.word	0x40012300
 8001ce0:	0f000001 	.word	0x0f000001

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff29 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff3e 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff31 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	@ 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	e165      	b.n	80021f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 8154 	bne.w	80021ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d005      	beq.n	8001f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d130      	bne.n	8001fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0201 	and.w	r2, r3, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d017      	beq.n	8001ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d123      	bne.n	800204c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	69b9      	ldr	r1, [r7, #24]
 8002048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80ae 	beq.w	80021ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b5d      	ldr	r3, [pc, #372]	@ (8002208 <HAL_GPIO_Init+0x300>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	4a5c      	ldr	r2, [pc, #368]	@ (8002208 <HAL_GPIO_Init+0x300>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800209c:	6453      	str	r3, [r2, #68]	@ 0x44
 800209e:	4b5a      	ldr	r3, [pc, #360]	@ (8002208 <HAL_GPIO_Init+0x300>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020aa:	4a58      	ldr	r2, [pc, #352]	@ (800220c <HAL_GPIO_Init+0x304>)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002210 <HAL_GPIO_Init+0x308>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d025      	beq.n	8002122 <HAL_GPIO_Init+0x21a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002214 <HAL_GPIO_Init+0x30c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01f      	beq.n	800211e <HAL_GPIO_Init+0x216>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002218 <HAL_GPIO_Init+0x310>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x212>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4c      	ldr	r2, [pc, #304]	@ (800221c <HAL_GPIO_Init+0x314>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002220 <HAL_GPIO_Init+0x318>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x20a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002224 <HAL_GPIO_Init+0x31c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x206>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a49      	ldr	r2, [pc, #292]	@ (8002228 <HAL_GPIO_Init+0x320>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x202>
 8002106:	2306      	movs	r3, #6
 8002108:	e00c      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800210a:	2307      	movs	r3, #7
 800210c:	e00a      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800210e:	2305      	movs	r3, #5
 8002110:	e008      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002112:	2304      	movs	r3, #4
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002122:	2300      	movs	r3, #0
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f002 0203 	and.w	r2, r2, #3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4093      	lsls	r3, r2
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002134:	4935      	ldr	r1, [pc, #212]	@ (800220c <HAL_GPIO_Init+0x304>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002142:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002166:	4a31      	ldr	r2, [pc, #196]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800216c:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <HAL_GPIO_Init+0x324>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002190:	4a26      	ldr	r2, [pc, #152]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002196:	4b25      	ldr	r3, [pc, #148]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b0f      	cmp	r3, #15
 80021f4:	f67f ae96 	bls.w	8001f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3724      	adds	r7, #36	@ 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40013800 	.word	0x40013800
 8002210:	40020000 	.word	0x40020000
 8002214:	40020400 	.word	0x40020400
 8002218:	40020800 	.word	0x40020800
 800221c:	40020c00 	.word	0x40020c00
 8002220:	40021000 	.word	0x40021000
 8002224:	40021400 	.word	0x40021400
 8002228:	40021800 	.word	0x40021800
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	619a      	str	r2, [r3, #24]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	4a1f      	ldr	r2, [pc, #124]	@ (80022f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800227c:	6413      	str	r3, [r2, #64]	@ 0x40
 800227e:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800228a:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002290:	f7ff faaa 	bl	80017e8 <HAL_GetTick>
 8002294:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002296:	e009      	b.n	80022ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002298:	f7ff faa6 	bl	80017e8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022a6:	d901      	bls.n	80022ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e01f      	b.n	80022ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <HAL_PWREx_EnableOverDrive+0x98>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b8:	d1ee      	bne.n	8002298 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022c0:	f7ff fa92 	bl	80017e8 <HAL_GetTick>
 80022c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022c6:	e009      	b.n	80022dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022c8:	f7ff fa8e 	bl	80017e8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022d6:	d901      	bls.n	80022dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e007      	b.n	80022ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <HAL_PWREx_EnableOverDrive+0x98>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022e8:	d1ee      	bne.n	80022c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	420e0040 	.word	0x420e0040
 80022fc:	40007000 	.word	0x40007000
 8002300:	420e0044 	.word	0x420e0044

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0cc      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b68      	ldr	r3, [pc, #416]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d90c      	bls.n	8002340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b65      	ldr	r3, [pc, #404]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a58      	ldr	r2, [pc, #352]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002362:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a52      	ldr	r2, [pc, #328]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800237a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d044      	beq.n	8002424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d119      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b3f      	ldr	r3, [pc, #252]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e067      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4934      	ldr	r1, [pc, #208]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f4:	f7ff f9f8 	bl	80017e8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7ff f9f4 	bl	80017e8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e04f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d20c      	bcs.n	800244c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002476:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f855 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f958 	bl	8001760 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08004768 	.word	0x08004768
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	@ (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	08004778 	.word	0x08004778

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002514:	f7ff ffdc 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0b5b      	lsrs	r3, r3, #13
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	@ (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	08004778 	.word	0x08004778

08002538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800253c:	b0ae      	sub	sp, #184	@ 0xb8
 800253e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255e:	4bcb      	ldr	r3, [pc, #812]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b0c      	cmp	r3, #12
 8002568:	f200 8206 	bhi.w	8002978 <HAL_RCC_GetSysClockFreq+0x440>
 800256c:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <HAL_RCC_GetSysClockFreq+0x3c>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	080025a9 	.word	0x080025a9
 8002578:	08002979 	.word	0x08002979
 800257c:	08002979 	.word	0x08002979
 8002580:	08002979 	.word	0x08002979
 8002584:	080025b1 	.word	0x080025b1
 8002588:	08002979 	.word	0x08002979
 800258c:	08002979 	.word	0x08002979
 8002590:	08002979 	.word	0x08002979
 8002594:	080025b9 	.word	0x080025b9
 8002598:	08002979 	.word	0x08002979
 800259c:	08002979 	.word	0x08002979
 80025a0:	08002979 	.word	0x08002979
 80025a4:	080027a9 	.word	0x080027a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4bb9      	ldr	r3, [pc, #740]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x358>)
 80025aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025ae:	e1e7      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b0:	4bb8      	ldr	r3, [pc, #736]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025b6:	e1e3      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b8:	4bb4      	ldr	r3, [pc, #720]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c4:	4bb1      	ldr	r3, [pc, #708]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d071      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d0:	4bae      	ldr	r3, [pc, #696]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025f6:	4622      	mov	r2, r4
 80025f8:	462b      	mov	r3, r5
 80025fa:	f04f 0000 	mov.w	r0, #0
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	0159      	lsls	r1, r3, #5
 8002604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002608:	0150      	lsls	r0, r2, #5
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4621      	mov	r1, r4
 8002610:	1a51      	subs	r1, r2, r1
 8002612:	6439      	str	r1, [r7, #64]	@ 0x40
 8002614:	4629      	mov	r1, r5
 8002616:	eb63 0301 	sbc.w	r3, r3, r1
 800261a:	647b      	str	r3, [r7, #68]	@ 0x44
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002628:	4649      	mov	r1, r9
 800262a:	018b      	lsls	r3, r1, #6
 800262c:	4641      	mov	r1, r8
 800262e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002632:	4641      	mov	r1, r8
 8002634:	018a      	lsls	r2, r1, #6
 8002636:	4641      	mov	r1, r8
 8002638:	1a51      	subs	r1, r2, r1
 800263a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800263c:	4649      	mov	r1, r9
 800263e:	eb63 0301 	sbc.w	r3, r3, r1
 8002642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002650:	4649      	mov	r1, r9
 8002652:	00cb      	lsls	r3, r1, #3
 8002654:	4641      	mov	r1, r8
 8002656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800265a:	4641      	mov	r1, r8
 800265c:	00ca      	lsls	r2, r1, #3
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	4603      	mov	r3, r0
 8002664:	4622      	mov	r2, r4
 8002666:	189b      	adds	r3, r3, r2
 8002668:	633b      	str	r3, [r7, #48]	@ 0x30
 800266a:	462b      	mov	r3, r5
 800266c:	460a      	mov	r2, r1
 800266e:	eb42 0303 	adc.w	r3, r2, r3
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002680:	4629      	mov	r1, r5
 8002682:	024b      	lsls	r3, r1, #9
 8002684:	4621      	mov	r1, r4
 8002686:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800268a:	4621      	mov	r1, r4
 800268c:	024a      	lsls	r2, r1, #9
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002696:	2200      	movs	r2, #0
 8002698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800269c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80026a4:	f7fd fdae 	bl	8000204 <__aeabi_uldivmod>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4613      	mov	r3, r2
 80026ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026b2:	e067      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b4:	4b75      	ldr	r3, [pc, #468]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80026c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026ce:	2300      	movs	r3, #0
 80026d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026d6:	4622      	mov	r2, r4
 80026d8:	462b      	mov	r3, r5
 80026da:	f04f 0000 	mov.w	r0, #0
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	0159      	lsls	r1, r3, #5
 80026e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e8:	0150      	lsls	r0, r2, #5
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4621      	mov	r1, r4
 80026f0:	1a51      	subs	r1, r2, r1
 80026f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026f4:	4629      	mov	r1, r5
 80026f6:	eb63 0301 	sbc.w	r3, r3, r1
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002708:	4649      	mov	r1, r9
 800270a:	018b      	lsls	r3, r1, #6
 800270c:	4641      	mov	r1, r8
 800270e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002712:	4641      	mov	r1, r8
 8002714:	018a      	lsls	r2, r1, #6
 8002716:	4641      	mov	r1, r8
 8002718:	ebb2 0a01 	subs.w	sl, r2, r1
 800271c:	4649      	mov	r1, r9
 800271e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800272e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002736:	4692      	mov	sl, r2
 8002738:	469b      	mov	fp, r3
 800273a:	4623      	mov	r3, r4
 800273c:	eb1a 0303 	adds.w	r3, sl, r3
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	462b      	mov	r3, r5
 8002744:	eb4b 0303 	adc.w	r3, fp, r3
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002756:	4629      	mov	r1, r5
 8002758:	028b      	lsls	r3, r1, #10
 800275a:	4621      	mov	r1, r4
 800275c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002760:	4621      	mov	r1, r4
 8002762:	028a      	lsls	r2, r1, #10
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800276c:	2200      	movs	r2, #0
 800276e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002770:	677a      	str	r2, [r7, #116]	@ 0x74
 8002772:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002776:	f7fd fd45 	bl	8000204 <__aeabi_uldivmod>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4613      	mov	r3, r2
 8002780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002784:	4b41      	ldr	r3, [pc, #260]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	3301      	adds	r3, #1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800279a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027a6:	e0eb      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	4b38      	ldr	r3, [pc, #224]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b4:	4b35      	ldr	r3, [pc, #212]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d06b      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	2200      	movs	r2, #0
 80027c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027d4:	2300      	movs	r3, #0
 80027d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80027d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027dc:	4622      	mov	r2, r4
 80027de:	462b      	mov	r3, r5
 80027e0:	f04f 0000 	mov.w	r0, #0
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	0159      	lsls	r1, r3, #5
 80027ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ee:	0150      	lsls	r0, r2, #5
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4621      	mov	r1, r4
 80027f6:	1a51      	subs	r1, r2, r1
 80027f8:	61b9      	str	r1, [r7, #24]
 80027fa:	4629      	mov	r1, r5
 80027fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800280e:	4659      	mov	r1, fp
 8002810:	018b      	lsls	r3, r1, #6
 8002812:	4651      	mov	r1, sl
 8002814:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002818:	4651      	mov	r1, sl
 800281a:	018a      	lsls	r2, r1, #6
 800281c:	4651      	mov	r1, sl
 800281e:	ebb2 0801 	subs.w	r8, r2, r1
 8002822:	4659      	mov	r1, fp
 8002824:	eb63 0901 	sbc.w	r9, r3, r1
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002834:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002838:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800283c:	4690      	mov	r8, r2
 800283e:	4699      	mov	r9, r3
 8002840:	4623      	mov	r3, r4
 8002842:	eb18 0303 	adds.w	r3, r8, r3
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	462b      	mov	r3, r5
 800284a:	eb49 0303 	adc.w	r3, r9, r3
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800285c:	4629      	mov	r1, r5
 800285e:	024b      	lsls	r3, r1, #9
 8002860:	4621      	mov	r1, r4
 8002862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002866:	4621      	mov	r1, r4
 8002868:	024a      	lsls	r2, r1, #9
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002872:	2200      	movs	r2, #0
 8002874:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002876:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002878:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800287c:	f7fd fcc2 	bl	8000204 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4613      	mov	r3, r2
 8002886:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800288a:	e065      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x420>
 800288c:	40023800 	.word	0x40023800
 8002890:	00f42400 	.word	0x00f42400
 8002894:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002898:	4b3d      	ldr	r3, [pc, #244]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x458>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	2200      	movs	r2, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	4611      	mov	r1, r2
 80028a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80028aa:	2300      	movs	r3, #0
 80028ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80028ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80028b2:	4642      	mov	r2, r8
 80028b4:	464b      	mov	r3, r9
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c4:	0150      	lsls	r0, r2, #5
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4641      	mov	r1, r8
 80028cc:	1a51      	subs	r1, r2, r1
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	4649      	mov	r1, r9
 80028d2:	eb63 0301 	sbc.w	r3, r3, r1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028e4:	4659      	mov	r1, fp
 80028e6:	018b      	lsls	r3, r1, #6
 80028e8:	4651      	mov	r1, sl
 80028ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ee:	4651      	mov	r1, sl
 80028f0:	018a      	lsls	r2, r1, #6
 80028f2:	4651      	mov	r1, sl
 80028f4:	1a54      	subs	r4, r2, r1
 80028f6:	4659      	mov	r1, fp
 80028f8:	eb63 0501 	sbc.w	r5, r3, r1
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	00eb      	lsls	r3, r5, #3
 8002906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290a:	00e2      	lsls	r2, r4, #3
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	4643      	mov	r3, r8
 8002912:	18e3      	adds	r3, r4, r3
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	464b      	mov	r3, r9
 8002918:	eb45 0303 	adc.w	r3, r5, r3
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800292a:	4629      	mov	r1, r5
 800292c:	028b      	lsls	r3, r1, #10
 800292e:	4621      	mov	r1, r4
 8002930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002934:	4621      	mov	r1, r4
 8002936:	028a      	lsls	r2, r1, #10
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002940:	2200      	movs	r2, #0
 8002942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002944:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002946:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800294a:	f7fd fc5b 	bl	8000204 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4613      	mov	r3, r2
 8002954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x458>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0f1b      	lsrs	r3, r3, #28
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800296a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002976:	e003      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x45c>)
 800297a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800297e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002984:	4618      	mov	r0, r3
 8002986:	37b8      	adds	r7, #184	@ 0xb8
 8002988:	46bd      	mov	sp, r7
 800298a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	00f42400 	.word	0x00f42400

08002998 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e28d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8083 	beq.w	8002abe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029b8:	4b94      	ldr	r3, [pc, #592]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d019      	beq.n	80029f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029c4:	4b91      	ldr	r3, [pc, #580]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029d0:	4b8e      	ldr	r3, [pc, #568]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029dc:	d00c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b8b      	ldr	r3, [pc, #556]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d112      	bne.n	8002a10 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ea:	4b88      	ldr	r3, [pc, #544]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f6:	d10b      	bne.n	8002a10 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	4b84      	ldr	r3, [pc, #528]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d05b      	beq.n	8002abc <HAL_RCC_OscConfig+0x124>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d157      	bne.n	8002abc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e25a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_OscConfig+0x90>
 8002a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e01d      	b.n	8002a64 <HAL_RCC_OscConfig+0xcc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0xb4>
 8002a32:	4b76      	ldr	r3, [pc, #472]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a75      	ldr	r2, [pc, #468]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b73      	ldr	r3, [pc, #460]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a72      	ldr	r2, [pc, #456]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0xcc>
 8002a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6e      	ldr	r2, [pc, #440]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b6c      	ldr	r3, [pc, #432]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe febc 	bl	80017e8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe feb8 	bl	80017e8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e21f      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b61      	ldr	r3, [pc, #388]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0xdc>
 8002a92:	e014      	b.n	8002abe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fea8 	bl	80017e8 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fea4 	bl	80017e8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	@ 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e20b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	4b57      	ldr	r3, [pc, #348]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x104>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d06f      	beq.n	8002baa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aca:	4b50      	ldr	r3, [pc, #320]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b44      	ldr	r3, [pc, #272]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x186>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1d3      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4937      	ldr	r1, [pc, #220]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b34      	ldr	r3, [pc, #208]	@ (8002c10 <HAL_RCC_OscConfig+0x278>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe fe51 	bl	80017e8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fe4d 	bl	80017e8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1b4      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4925      	ldr	r1, [pc, #148]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <HAL_RCC_OscConfig+0x278>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fe30 	bl	80017e8 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fe2c 	bl	80017e8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e193      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d036      	beq.n	8002c24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCC_OscConfig+0x27c>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fe10 	bl	80017e8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fe0c 	bl	80017e8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e173      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x234>
 8002bea:	e01b      	b.n	8002c24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fdf9 	bl	80017e8 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	e00e      	b.n	8002c18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fdf5 	bl	80017e8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d907      	bls.n	8002c18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e15c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	42470000 	.word	0x42470000
 8002c14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	4b8a      	ldr	r3, [pc, #552]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ea      	bne.n	8002bfa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8097 	beq.w	8002d60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b83      	ldr	r3, [pc, #524]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	4b7f      	ldr	r3, [pc, #508]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b7c      	ldr	r3, [pc, #496]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b79      	ldr	r3, [pc, #484]	@ (8002e48 <HAL_RCC_OscConfig+0x4b0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b76      	ldr	r3, [pc, #472]	@ (8002e48 <HAL_RCC_OscConfig+0x4b0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a75      	ldr	r2, [pc, #468]	@ (8002e48 <HAL_RCC_OscConfig+0x4b0>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fdb5 	bl	80017e8 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7fe fdb1 	bl	80017e8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e118      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	4b6c      	ldr	r3, [pc, #432]	@ (8002e48 <HAL_RCC_OscConfig+0x4b0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x31e>
 8002ca8:	4b66      	ldr	r3, [pc, #408]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a65      	ldr	r2, [pc, #404]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x358>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x340>
 8002cbe:	4b61      	ldr	r3, [pc, #388]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	4a60      	ldr	r2, [pc, #384]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cca:	4b5e      	ldr	r3, [pc, #376]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x358>
 8002cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a59      	ldr	r2, [pc, #356]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce4:	4b57      	ldr	r3, [pc, #348]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a56      	ldr	r2, [pc, #344]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	f023 0304 	bic.w	r3, r3, #4
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fd76 	bl	80017e8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe fd72 	bl	80017e8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0d7      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	4b4b      	ldr	r3, [pc, #300]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ee      	beq.n	8002d00 <HAL_RCC_OscConfig+0x368>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fd60 	bl	80017e8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fd5c 	bl	80017e8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0c1      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d42:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b3b      	ldr	r3, [pc, #236]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	4a3a      	ldr	r2, [pc, #232]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80ad 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6a:	4b36      	ldr	r3, [pc, #216]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d060      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d145      	bne.n	8002e0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b33      	ldr	r3, [pc, #204]	@ (8002e4c <HAL_RCC_OscConfig+0x4b4>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fd30 	bl	80017e8 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fd2c 	bl	80017e8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e093      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	019b      	lsls	r3, r3, #6
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	071b      	lsls	r3, r3, #28
 8002dd6:	491b      	ldr	r1, [pc, #108]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x4b4>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7fe fd01 	bl	80017e8 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe fcfd 	bl	80017e8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e064      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x452>
 8002e08:	e05c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <HAL_RCC_OscConfig+0x4b4>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe fcea 	bl	80017e8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fce6 	bl	80017e8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e04d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x480>
 8002e36:	e045      	b.n	8002ec4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e040      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed0 <HAL_RCC_OscConfig+0x538>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d030      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d129      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d122      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d119      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800

08002ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e041      	b.n	8002f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe f942 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 fd2e 	bl	8003974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e041      	b.n	8003008 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f839 	bl	8003010 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 fcdf 	bl	8003974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_TIM_PWM_Start+0x24>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e022      	b.n	800308e <HAL_TIM_PWM_Start+0x6a>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d109      	bne.n	8003062 <HAL_TIM_PWM_Start+0x3e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e015      	b.n	800308e <HAL_TIM_PWM_Start+0x6a>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d109      	bne.n	800307c <HAL_TIM_PWM_Start+0x58>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e008      	b.n	800308e <HAL_TIM_PWM_Start+0x6a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07c      	b.n	8003190 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_PWM_Start+0x82>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a4:	e013      	b.n	80030ce <HAL_TIM_PWM_Start+0xaa>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_PWM_Start+0x92>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030b4:	e00b      	b.n	80030ce <HAL_TIM_PWM_Start+0xaa>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d104      	bne.n	80030c6 <HAL_TIM_PWM_Start+0xa2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030c4:	e003      	b.n	80030ce <HAL_TIM_PWM_Start+0xaa>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2201      	movs	r2, #1
 80030d4:	6839      	ldr	r1, [r7, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ff42 	bl	8003f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003198 <HAL_TIM_PWM_Start+0x174>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_TIM_PWM_Start+0xcc>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2c      	ldr	r2, [pc, #176]	@ (800319c <HAL_TIM_PWM_Start+0x178>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_PWM_Start+0xd0>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_TIM_PWM_Start+0xd2>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003108:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a22      	ldr	r2, [pc, #136]	@ (8003198 <HAL_TIM_PWM_Start+0x174>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_TIM_PWM_Start+0x136>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311c:	d01d      	beq.n	800315a <HAL_TIM_PWM_Start+0x136>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1f      	ldr	r2, [pc, #124]	@ (80031a0 <HAL_TIM_PWM_Start+0x17c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d018      	beq.n	800315a <HAL_TIM_PWM_Start+0x136>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <HAL_TIM_PWM_Start+0x180>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_TIM_PWM_Start+0x136>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1c      	ldr	r2, [pc, #112]	@ (80031a8 <HAL_TIM_PWM_Start+0x184>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_TIM_PWM_Start+0x136>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a16      	ldr	r2, [pc, #88]	@ (800319c <HAL_TIM_PWM_Start+0x178>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_TIM_PWM_Start+0x136>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a18      	ldr	r2, [pc, #96]	@ (80031ac <HAL_TIM_PWM_Start+0x188>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_TIM_PWM_Start+0x136>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a16      	ldr	r2, [pc, #88]	@ (80031b0 <HAL_TIM_PWM_Start+0x18c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d111      	bne.n	800317e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b06      	cmp	r3, #6
 800316a:	d010      	beq.n	800318e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317c:	e007      	b.n	800318e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40010000 	.word	0x40010000
 800319c:	40010400 	.word	0x40010400
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40014000 	.word	0x40014000
 80031b0:	40001800 	.word	0x40001800

080031b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e097      	b.n	80032f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd fff9 	bl	80011d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031f8:	f023 0307 	bic.w	r3, r3, #7
 80031fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f000 fbb3 	bl	8003974 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003236:	f023 0303 	bic.w	r3, r3, #3
 800323a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	4313      	orrs	r3, r2
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003254:	f023 030c 	bic.w	r3, r3, #12
 8003258:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003260:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4313      	orrs	r3, r2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	011a      	lsls	r2, r3, #4
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	031b      	lsls	r3, r3, #12
 8003284:	4313      	orrs	r3, r2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800329a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4313      	orrs	r3, r2
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003310:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003318:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003320:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003328:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d110      	bne.n	8003352 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003336:	7b7b      	ldrb	r3, [r7, #13]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d001      	beq.n	8003340 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e069      	b.n	8003414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003350:	e031      	b.n	80033b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d110      	bne.n	800337a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800335e:	7b3b      	ldrb	r3, [r7, #12]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d001      	beq.n	8003368 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e055      	b.n	8003414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003378:	e01d      	b.n	80033b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d108      	bne.n	8003392 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003380:	7bbb      	ldrb	r3, [r7, #14]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d105      	bne.n	8003392 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003386:	7b7b      	ldrb	r3, [r7, #13]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d102      	bne.n	8003392 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800338c:	7b3b      	ldrb	r3, [r7, #12]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e03e      	b.n	8003414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_TIM_Encoder_Start+0xc4>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d008      	beq.n	80033d4 <HAL_TIM_Encoder_Start+0xd4>
 80033c2:	e00f      	b.n	80033e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2201      	movs	r2, #1
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fdc7 	bl	8003f60 <TIM_CCxChannelCmd>
      break;
 80033d2:	e016      	b.n	8003402 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2201      	movs	r2, #1
 80033da:	2104      	movs	r1, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fdbf 	bl	8003f60 <TIM_CCxChannelCmd>
      break;
 80033e2:	e00e      	b.n	8003402 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fdb7 	bl	8003f60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2201      	movs	r2, #1
 80033f8:	2104      	movs	r1, #4
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fdb0 	bl	8003f60 <TIM_CCxChannelCmd>
      break;
 8003400:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0202 	mvn.w	r2, #2
 8003450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa65 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa57 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fa68 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0204 	mvn.w	r2, #4
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fa3f 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa31 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fa42 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d020      	beq.n	8003518 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01b      	beq.n	8003518 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0208 	mvn.w	r2, #8
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2204      	movs	r2, #4
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa19 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa0b 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fa1c 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d020      	beq.n	8003564 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01b      	beq.n	8003564 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0210 	mvn.w	r2, #16
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2208      	movs	r2, #8
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f9f3 	bl	8003936 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f9e5 	bl	8003922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f9f6 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0201 	mvn.w	r2, #1
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9c3 	bl	800390e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fdd8 	bl	800415c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9c7 	bl	800395e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00c      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0220 	mvn.w	r2, #32
 80035ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fdaa 	bl	8004148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003616:	2302      	movs	r3, #2
 8003618:	e0ae      	b.n	8003778 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	f200 809f 	bhi.w	8003768 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800362a:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003665 	.word	0x08003665
 8003634:	08003769 	.word	0x08003769
 8003638:	08003769 	.word	0x08003769
 800363c:	08003769 	.word	0x08003769
 8003640:	080036a5 	.word	0x080036a5
 8003644:	08003769 	.word	0x08003769
 8003648:	08003769 	.word	0x08003769
 800364c:	08003769 	.word	0x08003769
 8003650:	080036e7 	.word	0x080036e7
 8003654:	08003769 	.word	0x08003769
 8003658:	08003769 	.word	0x08003769
 800365c:	08003769 	.word	0x08003769
 8003660:	08003727 	.word	0x08003727
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fa2e 	bl	8003acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	619a      	str	r2, [r3, #24]
      break;
 80036a2:	e064      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fa7e 	bl	8003bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6999      	ldr	r1, [r3, #24]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]
      break;
 80036e4:	e043      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fad3 	bl	8003c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0208 	orr.w	r2, r2, #8
 8003700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0204 	bic.w	r2, r2, #4
 8003710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69d9      	ldr	r1, [r3, #28]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	61da      	str	r2, [r3, #28]
      break;
 8003724:	e023      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fb27 	bl	8003d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69d9      	ldr	r1, [r3, #28]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	021a      	lsls	r2, r3, #8
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	61da      	str	r2, [r3, #28]
      break;
 8003766:	e002      	b.n	800376e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
      break;
 800376c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIM_ConfigClockSource+0x1c>
 8003798:	2302      	movs	r3, #2
 800379a:	e0b4      	b.n	8003906 <HAL_TIM_ConfigClockSource+0x186>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d4:	d03e      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0xd4>
 80037d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037da:	f200 8087 	bhi.w	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e2:	f000 8086 	beq.w	80038f2 <HAL_TIM_ConfigClockSource+0x172>
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ea:	d87f      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b70      	cmp	r3, #112	@ 0x70
 80037ee:	d01a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0xa6>
 80037f0:	2b70      	cmp	r3, #112	@ 0x70
 80037f2:	d87b      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b60      	cmp	r3, #96	@ 0x60
 80037f6:	d050      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x11a>
 80037f8:	2b60      	cmp	r3, #96	@ 0x60
 80037fa:	d877      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b50      	cmp	r3, #80	@ 0x50
 80037fe:	d03c      	beq.n	800387a <HAL_TIM_ConfigClockSource+0xfa>
 8003800:	2b50      	cmp	r3, #80	@ 0x50
 8003802:	d873      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 8003804:	2b40      	cmp	r3, #64	@ 0x40
 8003806:	d058      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x13a>
 8003808:	2b40      	cmp	r3, #64	@ 0x40
 800380a:	d86f      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 800380c:	2b30      	cmp	r3, #48	@ 0x30
 800380e:	d064      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x15a>
 8003810:	2b30      	cmp	r3, #48	@ 0x30
 8003812:	d86b      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b20      	cmp	r3, #32
 8003816:	d060      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x15a>
 8003818:	2b20      	cmp	r3, #32
 800381a:	d867      	bhi.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d05c      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x15a>
 8003820:	2b10      	cmp	r3, #16
 8003822:	d05a      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x15a>
 8003824:	e062      	b.n	80038ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003836:	f000 fb73 	bl	8003f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	609a      	str	r2, [r3, #8]
      break;
 8003852:	e04f      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003864:	f000 fb5c 	bl	8003f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003876:	609a      	str	r2, [r3, #8]
      break;
 8003878:	e03c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003886:	461a      	mov	r2, r3
 8003888:	f000 fad0 	bl	8003e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2150      	movs	r1, #80	@ 0x50
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fb29 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 8003898:	e02c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038a6:	461a      	mov	r2, r3
 80038a8:	f000 faef 	bl	8003e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2160      	movs	r1, #96	@ 0x60
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fb19 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 80038b8:	e01c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c6:	461a      	mov	r2, r3
 80038c8:	f000 fab0 	bl	8003e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2140      	movs	r1, #64	@ 0x40
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fb09 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 80038d8:	e00c      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f000 fb00 	bl	8003eea <TIM_ITRx_SetConfig>
      break;
 80038ea:	e003      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e000      	b.n	80038f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a46      	ldr	r2, [pc, #280]	@ (8003aa0 <TIM_Base_SetConfig+0x12c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d013      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003992:	d00f      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a43      	ldr	r2, [pc, #268]	@ (8003aa4 <TIM_Base_SetConfig+0x130>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a42      	ldr	r2, [pc, #264]	@ (8003aa8 <TIM_Base_SetConfig+0x134>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a41      	ldr	r2, [pc, #260]	@ (8003aac <TIM_Base_SetConfig+0x138>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a40      	ldr	r2, [pc, #256]	@ (8003ab0 <TIM_Base_SetConfig+0x13c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a35      	ldr	r2, [pc, #212]	@ (8003aa0 <TIM_Base_SetConfig+0x12c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d4:	d027      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a32      	ldr	r2, [pc, #200]	@ (8003aa4 <TIM_Base_SetConfig+0x130>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d023      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a31      	ldr	r2, [pc, #196]	@ (8003aa8 <TIM_Base_SetConfig+0x134>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a30      	ldr	r2, [pc, #192]	@ (8003aac <TIM_Base_SetConfig+0x138>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab0 <TIM_Base_SetConfig+0x13c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d017      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab4 <TIM_Base_SetConfig+0x140>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab8 <TIM_Base_SetConfig+0x144>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2c      	ldr	r2, [pc, #176]	@ (8003abc <TIM_Base_SetConfig+0x148>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac0 <TIM_Base_SetConfig+0x14c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac4 <TIM_Base_SetConfig+0x150>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a29      	ldr	r2, [pc, #164]	@ (8003ac8 <TIM_Base_SetConfig+0x154>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d108      	bne.n	8003a38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	@ (8003aa0 <TIM_Base_SetConfig+0x12c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0xf8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a12      	ldr	r2, [pc, #72]	@ (8003ab0 <TIM_Base_SetConfig+0x13c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d103      	bne.n	8003a74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d105      	bne.n	8003a92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]
  }
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40010400 	.word	0x40010400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800
 8003ac0:	40001800 	.word	0x40001800
 8003ac4:	40001c00 	.word	0x40001c00
 8003ac8:	40002000 	.word	0x40002000

08003acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f023 0201 	bic.w	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f023 0302 	bic.w	r3, r3, #2
 8003b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a20      	ldr	r2, [pc, #128]	@ (8003ba4 <TIM_OC1_SetConfig+0xd8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC1_SetConfig+0x64>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba8 <TIM_OC1_SetConfig+0xdc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10c      	bne.n	8003b4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0308 	bic.w	r3, r3, #8
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <TIM_OC1_SetConfig+0xd8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_OC1_SetConfig+0x8e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a14      	ldr	r2, [pc, #80]	@ (8003ba8 <TIM_OC1_SetConfig+0xdc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d111      	bne.n	8003b7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40010400 	.word	0x40010400

08003bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f023 0210 	bic.w	r2, r3, #16
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0320 	bic.w	r3, r3, #32
 8003bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a22      	ldr	r2, [pc, #136]	@ (8003c90 <TIM_OC2_SetConfig+0xe4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_OC2_SetConfig+0x68>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a21      	ldr	r2, [pc, #132]	@ (8003c94 <TIM_OC2_SetConfig+0xe8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d10d      	bne.n	8003c30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a17      	ldr	r2, [pc, #92]	@ (8003c90 <TIM_OC2_SetConfig+0xe4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC2_SetConfig+0x94>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <TIM_OC2_SetConfig+0xe8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d113      	bne.n	8003c68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40010400 	.word	0x40010400

08003c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a21      	ldr	r2, [pc, #132]	@ (8003d78 <TIM_OC3_SetConfig+0xe0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_OC3_SetConfig+0x66>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a20      	ldr	r2, [pc, #128]	@ (8003d7c <TIM_OC3_SetConfig+0xe4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10d      	bne.n	8003d1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <TIM_OC3_SetConfig+0xe0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <TIM_OC3_SetConfig+0x92>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <TIM_OC3_SetConfig+0xe4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d113      	bne.n	8003d52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	621a      	str	r2, [r3, #32]
}
 8003d6c:	bf00      	nop
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40010400 	.word	0x40010400

08003d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	031b      	lsls	r3, r3, #12
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a12      	ldr	r2, [pc, #72]	@ (8003e24 <TIM_OC4_SetConfig+0xa4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC4_SetConfig+0x68>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a11      	ldr	r2, [pc, #68]	@ (8003e28 <TIM_OC4_SetConfig+0xa8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d109      	bne.n	8003dfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40010400 	.word	0x40010400

08003e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 030a 	bic.w	r3, r3, #10
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b087      	sub	sp, #28
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f023 0210 	bic.w	r2, r3, #16
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	031b      	lsls	r3, r3, #12
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f043 0307 	orr.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2201      	movs	r2, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	401a      	ands	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e05a      	b.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a21      	ldr	r2, [pc, #132]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d022      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004010:	d01d      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1d      	ldr	r2, [pc, #116]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d018      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1b      	ldr	r2, [pc, #108]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00e      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a17      	ldr	r2, [pc, #92]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a15      	ldr	r2, [pc, #84]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10c      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4313      	orrs	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40010400 	.word	0x40010400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40001800 	.word	0x40001800

080040a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040bc:	2302      	movs	r3, #2
 80040be:	e03d      	b.n	800413c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e042      	b.n	8004208 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd f97a 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	@ 0x24
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f82b 	bl	8004210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004214:	b0c0      	sub	sp, #256	@ 0x100
 8004216:	af00      	add	r7, sp, #0
 8004218:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	68d9      	ldr	r1, [r3, #12]
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	ea40 0301 	orr.w	r3, r0, r1
 8004238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	431a      	orrs	r2, r3
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	431a      	orrs	r2, r3
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004268:	f021 010c 	bic.w	r1, r1, #12
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004276:	430b      	orrs	r3, r1
 8004278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428a:	6999      	ldr	r1, [r3, #24]
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	ea40 0301 	orr.w	r3, r0, r1
 8004296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b8f      	ldr	r3, [pc, #572]	@ (80044dc <UART_SetConfig+0x2cc>)
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d005      	beq.n	80042b0 <UART_SetConfig+0xa0>
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b8d      	ldr	r3, [pc, #564]	@ (80044e0 <UART_SetConfig+0x2d0>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d104      	bne.n	80042ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7fe f92e 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 80042b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042b8:	e003      	b.n	80042c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ba:	f7fe f915 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 80042be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042cc:	f040 810c 	bne.w	80044e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042e2:	4622      	mov	r2, r4
 80042e4:	462b      	mov	r3, r5
 80042e6:	1891      	adds	r1, r2, r2
 80042e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042ea:	415b      	adcs	r3, r3
 80042ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042f2:	4621      	mov	r1, r4
 80042f4:	eb12 0801 	adds.w	r8, r2, r1
 80042f8:	4629      	mov	r1, r5
 80042fa:	eb43 0901 	adc.w	r9, r3, r1
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800430a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004312:	4690      	mov	r8, r2
 8004314:	4699      	mov	r9, r3
 8004316:	4623      	mov	r3, r4
 8004318:	eb18 0303 	adds.w	r3, r8, r3
 800431c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004320:	462b      	mov	r3, r5
 8004322:	eb49 0303 	adc.w	r3, r9, r3
 8004326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004336:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800433a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800433e:	460b      	mov	r3, r1
 8004340:	18db      	adds	r3, r3, r3
 8004342:	653b      	str	r3, [r7, #80]	@ 0x50
 8004344:	4613      	mov	r3, r2
 8004346:	eb42 0303 	adc.w	r3, r2, r3
 800434a:	657b      	str	r3, [r7, #84]	@ 0x54
 800434c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004354:	f7fb ff56 	bl	8000204 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4b61      	ldr	r3, [pc, #388]	@ (80044e4 <UART_SetConfig+0x2d4>)
 800435e:	fba3 2302 	umull	r2, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	011c      	lsls	r4, r3, #4
 8004366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004370:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	1891      	adds	r1, r2, r2
 800437e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004380:	415b      	adcs	r3, r3
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004388:	4641      	mov	r1, r8
 800438a:	eb12 0a01 	adds.w	sl, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb43 0b01 	adc.w	fp, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a8:	4692      	mov	sl, r2
 80043aa:	469b      	mov	fp, r3
 80043ac:	4643      	mov	r3, r8
 80043ae:	eb1a 0303 	adds.w	r3, sl, r3
 80043b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043b6:	464b      	mov	r3, r9
 80043b8:	eb4b 0303 	adc.w	r3, fp, r3
 80043bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043d4:	460b      	mov	r3, r1
 80043d6:	18db      	adds	r3, r3, r3
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043da:	4613      	mov	r3, r2
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043ea:	f7fb ff0b 	bl	8000204 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <UART_SetConfig+0x2d4>)
 80043f6:	fba3 2301 	umull	r2, r3, r3, r1
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2264      	movs	r2, #100	@ 0x64
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	1acb      	subs	r3, r1, r3
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800440a:	4b36      	ldr	r3, [pc, #216]	@ (80044e4 <UART_SetConfig+0x2d4>)
 800440c:	fba3 2302 	umull	r2, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004418:	441c      	add	r4, r3
 800441a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004424:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	1891      	adds	r1, r2, r2
 8004432:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004434:	415b      	adcs	r3, r3
 8004436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800443c:	4641      	mov	r1, r8
 800443e:	1851      	adds	r1, r2, r1
 8004440:	6339      	str	r1, [r7, #48]	@ 0x30
 8004442:	4649      	mov	r1, r9
 8004444:	414b      	adcs	r3, r1
 8004446:	637b      	str	r3, [r7, #52]	@ 0x34
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004454:	4659      	mov	r1, fp
 8004456:	00cb      	lsls	r3, r1, #3
 8004458:	4651      	mov	r1, sl
 800445a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445e:	4651      	mov	r1, sl
 8004460:	00ca      	lsls	r2, r1, #3
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	4603      	mov	r3, r0
 8004468:	4642      	mov	r2, r8
 800446a:	189b      	adds	r3, r3, r2
 800446c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004470:	464b      	mov	r3, r9
 8004472:	460a      	mov	r2, r1
 8004474:	eb42 0303 	adc.w	r3, r2, r3
 8004478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004488:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800448c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004490:	460b      	mov	r3, r1
 8004492:	18db      	adds	r3, r3, r3
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004496:	4613      	mov	r3, r2
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800449e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044a6:	f7fb fead 	bl	8000204 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <UART_SetConfig+0x2d4>)
 80044b0:	fba3 1302 	umull	r1, r3, r3, r2
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	2164      	movs	r1, #100	@ 0x64
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	3332      	adds	r3, #50	@ 0x32
 80044c2:	4a08      	ldr	r2, [pc, #32]	@ (80044e4 <UART_SetConfig+0x2d4>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	f003 0207 	and.w	r2, r3, #7
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4422      	add	r2, r4
 80044d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044d8:	e106      	b.n	80046e8 <UART_SetConfig+0x4d8>
 80044da:	bf00      	nop
 80044dc:	40011000 	.word	0x40011000
 80044e0:	40011400 	.word	0x40011400
 80044e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044fa:	4642      	mov	r2, r8
 80044fc:	464b      	mov	r3, r9
 80044fe:	1891      	adds	r1, r2, r2
 8004500:	6239      	str	r1, [r7, #32]
 8004502:	415b      	adcs	r3, r3
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
 8004506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800450a:	4641      	mov	r1, r8
 800450c:	1854      	adds	r4, r2, r1
 800450e:	4649      	mov	r1, r9
 8004510:	eb43 0501 	adc.w	r5, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	00eb      	lsls	r3, r5, #3
 800451e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004522:	00e2      	lsls	r2, r4, #3
 8004524:	4614      	mov	r4, r2
 8004526:	461d      	mov	r5, r3
 8004528:	4643      	mov	r3, r8
 800452a:	18e3      	adds	r3, r4, r3
 800452c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004530:	464b      	mov	r3, r9
 8004532:	eb45 0303 	adc.w	r3, r5, r3
 8004536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004546:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004556:	4629      	mov	r1, r5
 8004558:	008b      	lsls	r3, r1, #2
 800455a:	4621      	mov	r1, r4
 800455c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004560:	4621      	mov	r1, r4
 8004562:	008a      	lsls	r2, r1, #2
 8004564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004568:	f7fb fe4c 	bl	8000204 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4b60      	ldr	r3, [pc, #384]	@ (80046f4 <UART_SetConfig+0x4e4>)
 8004572:	fba3 2302 	umull	r2, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	011c      	lsls	r4, r3, #4
 800457a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800457e:	2200      	movs	r2, #0
 8004580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800458c:	4642      	mov	r2, r8
 800458e:	464b      	mov	r3, r9
 8004590:	1891      	adds	r1, r2, r2
 8004592:	61b9      	str	r1, [r7, #24]
 8004594:	415b      	adcs	r3, r3
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800459c:	4641      	mov	r1, r8
 800459e:	1851      	adds	r1, r2, r1
 80045a0:	6139      	str	r1, [r7, #16]
 80045a2:	4649      	mov	r1, r9
 80045a4:	414b      	adcs	r3, r1
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b4:	4659      	mov	r1, fp
 80045b6:	00cb      	lsls	r3, r1, #3
 80045b8:	4651      	mov	r1, sl
 80045ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045be:	4651      	mov	r1, sl
 80045c0:	00ca      	lsls	r2, r1, #3
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	4642      	mov	r2, r8
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045d0:	464b      	mov	r3, r9
 80045d2:	460a      	mov	r2, r1
 80045d4:	eb42 0303 	adc.w	r3, r2, r3
 80045d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045f4:	4649      	mov	r1, r9
 80045f6:	008b      	lsls	r3, r1, #2
 80045f8:	4641      	mov	r1, r8
 80045fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fe:	4641      	mov	r1, r8
 8004600:	008a      	lsls	r2, r1, #2
 8004602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004606:	f7fb fdfd 	bl	8000204 <__aeabi_uldivmod>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4611      	mov	r1, r2
 8004610:	4b38      	ldr	r3, [pc, #224]	@ (80046f4 <UART_SetConfig+0x4e4>)
 8004612:	fba3 2301 	umull	r2, r3, r3, r1
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2264      	movs	r2, #100	@ 0x64
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	1acb      	subs	r3, r1, r3
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	3332      	adds	r3, #50	@ 0x32
 8004624:	4a33      	ldr	r2, [pc, #204]	@ (80046f4 <UART_SetConfig+0x4e4>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004630:	441c      	add	r4, r3
 8004632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004636:	2200      	movs	r2, #0
 8004638:	673b      	str	r3, [r7, #112]	@ 0x70
 800463a:	677a      	str	r2, [r7, #116]	@ 0x74
 800463c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	1891      	adds	r1, r2, r2
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	415b      	adcs	r3, r3
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004650:	4641      	mov	r1, r8
 8004652:	1851      	adds	r1, r2, r1
 8004654:	6039      	str	r1, [r7, #0]
 8004656:	4649      	mov	r1, r9
 8004658:	414b      	adcs	r3, r1
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004668:	4659      	mov	r1, fp
 800466a:	00cb      	lsls	r3, r1, #3
 800466c:	4651      	mov	r1, sl
 800466e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004672:	4651      	mov	r1, sl
 8004674:	00ca      	lsls	r2, r1, #3
 8004676:	4610      	mov	r0, r2
 8004678:	4619      	mov	r1, r3
 800467a:	4603      	mov	r3, r0
 800467c:	4642      	mov	r2, r8
 800467e:	189b      	adds	r3, r3, r2
 8004680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004682:	464b      	mov	r3, r9
 8004684:	460a      	mov	r2, r1
 8004686:	eb42 0303 	adc.w	r3, r2, r3
 800468a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	663b      	str	r3, [r7, #96]	@ 0x60
 8004696:	667a      	str	r2, [r7, #100]	@ 0x64
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046a4:	4649      	mov	r1, r9
 80046a6:	008b      	lsls	r3, r1, #2
 80046a8:	4641      	mov	r1, r8
 80046aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ae:	4641      	mov	r1, r8
 80046b0:	008a      	lsls	r2, r1, #2
 80046b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046b6:	f7fb fda5 	bl	8000204 <__aeabi_uldivmod>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <UART_SetConfig+0x4e4>)
 80046c0:	fba3 1302 	umull	r1, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	2164      	movs	r1, #100	@ 0x64
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	3332      	adds	r3, #50	@ 0x32
 80046d2:	4a08      	ldr	r2, [pc, #32]	@ (80046f4 <UART_SetConfig+0x4e4>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4422      	add	r2, r4
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	bf00      	nop
 80046ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046ee:	46bd      	mov	sp, r7
 80046f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f4:	51eb851f 	.word	0x51eb851f

080046f8 <memset>:
 80046f8:	4402      	add	r2, r0
 80046fa:	4603      	mov	r3, r0
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d100      	bne.n	8004702 <memset+0xa>
 8004700:	4770      	bx	lr
 8004702:	f803 1b01 	strb.w	r1, [r3], #1
 8004706:	e7f9      	b.n	80046fc <memset+0x4>

08004708 <__libc_init_array>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	4d0d      	ldr	r5, [pc, #52]	@ (8004740 <__libc_init_array+0x38>)
 800470c:	4c0d      	ldr	r4, [pc, #52]	@ (8004744 <__libc_init_array+0x3c>)
 800470e:	1b64      	subs	r4, r4, r5
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	2600      	movs	r6, #0
 8004714:	42a6      	cmp	r6, r4
 8004716:	d109      	bne.n	800472c <__libc_init_array+0x24>
 8004718:	4d0b      	ldr	r5, [pc, #44]	@ (8004748 <__libc_init_array+0x40>)
 800471a:	4c0c      	ldr	r4, [pc, #48]	@ (800474c <__libc_init_array+0x44>)
 800471c:	f000 f818 	bl	8004750 <_init>
 8004720:	1b64      	subs	r4, r4, r5
 8004722:	10a4      	asrs	r4, r4, #2
 8004724:	2600      	movs	r6, #0
 8004726:	42a6      	cmp	r6, r4
 8004728:	d105      	bne.n	8004736 <__libc_init_array+0x2e>
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004730:	4798      	blx	r3
 8004732:	3601      	adds	r6, #1
 8004734:	e7ee      	b.n	8004714 <__libc_init_array+0xc>
 8004736:	f855 3b04 	ldr.w	r3, [r5], #4
 800473a:	4798      	blx	r3
 800473c:	3601      	adds	r6, #1
 800473e:	e7f2      	b.n	8004726 <__libc_init_array+0x1e>
 8004740:	08004788 	.word	0x08004788
 8004744:	08004788 	.word	0x08004788
 8004748:	08004788 	.word	0x08004788
 800474c:	0800478c 	.word	0x0800478c

08004750 <_init>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	bf00      	nop
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr

0800475c <_fini>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr
