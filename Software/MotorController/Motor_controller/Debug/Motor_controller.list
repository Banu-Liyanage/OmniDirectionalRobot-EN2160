
Motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c14  08006c14  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c14  08006c14  00007c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c1c  08006c1c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c1c  08006c1c  00007c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c20  08006c20  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006c24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  2000005c  08006c80  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08006c80  000084d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcae  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002541  00000000  00000000  00017d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0001a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023ef7  00000000  00000000  0001b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013125  00000000  00000000  0003f08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000de6ef  00000000  00000000  000521b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001308a3  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000bba  00000000  00000000  001308e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004314  00000000  00000000  001314a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  001357b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006808 	.word	0x08006808

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	08006808 	.word	0x08006808

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__gedf2>:
 8000580:	f04f 3cff 	mov.w	ip, #4294967295
 8000584:	e006      	b.n	8000594 <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__ledf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	e002      	b.n	8000594 <__cmpdf2+0x4>
 800058e:	bf00      	nop

08000590 <__cmpdf2>:
 8000590:	f04f 0c01 	mov.w	ip, #1
 8000594:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800059c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005a4:	bf18      	it	ne
 80005a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005aa:	d01b      	beq.n	80005e4 <__cmpdf2+0x54>
 80005ac:	b001      	add	sp, #4
 80005ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005b2:	bf0c      	ite	eq
 80005b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b8:	ea91 0f03 	teqne	r1, r3
 80005bc:	bf02      	ittt	eq
 80005be:	ea90 0f02 	teqeq	r0, r2
 80005c2:	2000      	moveq	r0, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	f110 0f00 	cmn.w	r0, #0
 80005ca:	ea91 0f03 	teq	r1, r3
 80005ce:	bf58      	it	pl
 80005d0:	4299      	cmppl	r1, r3
 80005d2:	bf08      	it	eq
 80005d4:	4290      	cmpeq	r0, r2
 80005d6:	bf2c      	ite	cs
 80005d8:	17d8      	asrcs	r0, r3, #31
 80005da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005de:	f040 0001 	orr.w	r0, r0, #1
 80005e2:	4770      	bx	lr
 80005e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ec:	d102      	bne.n	80005f4 <__cmpdf2+0x64>
 80005ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005f2:	d107      	bne.n	8000604 <__cmpdf2+0x74>
 80005f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d1d6      	bne.n	80005ac <__cmpdf2+0x1c>
 80005fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000602:	d0d3      	beq.n	80005ac <__cmpdf2+0x1c>
 8000604:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <__aeabi_cdrcmple>:
 800060c:	4684      	mov	ip, r0
 800060e:	4610      	mov	r0, r2
 8000610:	4662      	mov	r2, ip
 8000612:	468c      	mov	ip, r1
 8000614:	4619      	mov	r1, r3
 8000616:	4663      	mov	r3, ip
 8000618:	e000      	b.n	800061c <__aeabi_cdcmpeq>
 800061a:	bf00      	nop

0800061c <__aeabi_cdcmpeq>:
 800061c:	b501      	push	{r0, lr}
 800061e:	f7ff ffb7 	bl	8000590 <__cmpdf2>
 8000622:	2800      	cmp	r0, #0
 8000624:	bf48      	it	mi
 8000626:	f110 0f00 	cmnmi.w	r0, #0
 800062a:	bd01      	pop	{r0, pc}

0800062c <__aeabi_dcmpeq>:
 800062c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000630:	f7ff fff4 	bl	800061c <__aeabi_cdcmpeq>
 8000634:	bf0c      	ite	eq
 8000636:	2001      	moveq	r0, #1
 8000638:	2000      	movne	r0, #0
 800063a:	f85d fb08 	ldr.w	pc, [sp], #8
 800063e:	bf00      	nop

08000640 <__aeabi_dcmplt>:
 8000640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000644:	f7ff ffea 	bl	800061c <__aeabi_cdcmpeq>
 8000648:	bf34      	ite	cc
 800064a:	2001      	movcc	r0, #1
 800064c:	2000      	movcs	r0, #0
 800064e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000652:	bf00      	nop

08000654 <__aeabi_dcmple>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff ffe0 	bl	800061c <__aeabi_cdcmpeq>
 800065c:	bf94      	ite	ls
 800065e:	2001      	movls	r0, #1
 8000660:	2000      	movhi	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmpge>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffce 	bl	800060c <__aeabi_cdrcmple>
 8000670:	bf94      	ite	ls
 8000672:	2001      	movls	r0, #1
 8000674:	2000      	movhi	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmpgt>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffc4 	bl	800060c <__aeabi_cdrcmple>
 8000684:	bf34      	ite	cc
 8000686:	2001      	movcc	r0, #1
 8000688:	2000      	movcs	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_d2f>:
 8000690:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000694:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000698:	bf24      	itt	cs
 800069a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800069e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80006a2:	d90d      	bls.n	80006c0 <__aeabi_d2f+0x30>
 80006a4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80006a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80006ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80006b0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80006b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80006c4:	d121      	bne.n	800070a <__aeabi_d2f+0x7a>
 80006c6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80006ca:	bfbc      	itt	lt
 80006cc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80006d0:	4770      	bxlt	lr
 80006d2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006da:	f1c2 0218 	rsb	r2, r2, #24
 80006de:	f1c2 0c20 	rsb	ip, r2, #32
 80006e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80006e6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ea:	bf18      	it	ne
 80006ec:	f040 0001 	orrne.w	r0, r0, #1
 80006f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006fc:	ea40 000c 	orr.w	r0, r0, ip
 8000700:	fa23 f302 	lsr.w	r3, r3, r2
 8000704:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000708:	e7cc      	b.n	80006a4 <__aeabi_d2f+0x14>
 800070a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800070e:	d107      	bne.n	8000720 <__aeabi_d2f+0x90>
 8000710:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000714:	bf1e      	ittt	ne
 8000716:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800071a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800071e:	4770      	bxne	lr
 8000720:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000724:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000728:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <__aeabi_uldivmod>:
 8000730:	b953      	cbnz	r3, 8000748 <__aeabi_uldivmod+0x18>
 8000732:	b94a      	cbnz	r2, 8000748 <__aeabi_uldivmod+0x18>
 8000734:	2900      	cmp	r1, #0
 8000736:	bf08      	it	eq
 8000738:	2800      	cmpeq	r0, #0
 800073a:	bf1c      	itt	ne
 800073c:	f04f 31ff 	movne.w	r1, #4294967295
 8000740:	f04f 30ff 	movne.w	r0, #4294967295
 8000744:	f000 b988 	b.w	8000a58 <__aeabi_idiv0>
 8000748:	f1ad 0c08 	sub.w	ip, sp, #8
 800074c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000750:	f000 f806 	bl	8000760 <__udivmoddi4>
 8000754:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800075c:	b004      	add	sp, #16
 800075e:	4770      	bx	lr

08000760 <__udivmoddi4>:
 8000760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000764:	9d08      	ldr	r5, [sp, #32]
 8000766:	468e      	mov	lr, r1
 8000768:	4604      	mov	r4, r0
 800076a:	4688      	mov	r8, r1
 800076c:	2b00      	cmp	r3, #0
 800076e:	d14a      	bne.n	8000806 <__udivmoddi4+0xa6>
 8000770:	428a      	cmp	r2, r1
 8000772:	4617      	mov	r7, r2
 8000774:	d962      	bls.n	800083c <__udivmoddi4+0xdc>
 8000776:	fab2 f682 	clz	r6, r2
 800077a:	b14e      	cbz	r6, 8000790 <__udivmoddi4+0x30>
 800077c:	f1c6 0320 	rsb	r3, r6, #32
 8000780:	fa01 f806 	lsl.w	r8, r1, r6
 8000784:	fa20 f303 	lsr.w	r3, r0, r3
 8000788:	40b7      	lsls	r7, r6
 800078a:	ea43 0808 	orr.w	r8, r3, r8
 800078e:	40b4      	lsls	r4, r6
 8000790:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000794:	fa1f fc87 	uxth.w	ip, r7
 8000798:	fbb8 f1fe 	udiv	r1, r8, lr
 800079c:	0c23      	lsrs	r3, r4, #16
 800079e:	fb0e 8811 	mls	r8, lr, r1, r8
 80007a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007a6:	fb01 f20c 	mul.w	r2, r1, ip
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d909      	bls.n	80007c2 <__udivmoddi4+0x62>
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80007b4:	f080 80ea 	bcs.w	800098c <__udivmoddi4+0x22c>
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f240 80e7 	bls.w	800098c <__udivmoddi4+0x22c>
 80007be:	3902      	subs	r1, #2
 80007c0:	443b      	add	r3, r7
 80007c2:	1a9a      	subs	r2, r3, r2
 80007c4:	b2a3      	uxth	r3, r4
 80007c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80007ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80007ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80007d6:	459c      	cmp	ip, r3
 80007d8:	d909      	bls.n	80007ee <__udivmoddi4+0x8e>
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80007e0:	f080 80d6 	bcs.w	8000990 <__udivmoddi4+0x230>
 80007e4:	459c      	cmp	ip, r3
 80007e6:	f240 80d3 	bls.w	8000990 <__udivmoddi4+0x230>
 80007ea:	443b      	add	r3, r7
 80007ec:	3802      	subs	r0, #2
 80007ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007f2:	eba3 030c 	sub.w	r3, r3, ip
 80007f6:	2100      	movs	r1, #0
 80007f8:	b11d      	cbz	r5, 8000802 <__udivmoddi4+0xa2>
 80007fa:	40f3      	lsrs	r3, r6
 80007fc:	2200      	movs	r2, #0
 80007fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000806:	428b      	cmp	r3, r1
 8000808:	d905      	bls.n	8000816 <__udivmoddi4+0xb6>
 800080a:	b10d      	cbz	r5, 8000810 <__udivmoddi4+0xb0>
 800080c:	e9c5 0100 	strd	r0, r1, [r5]
 8000810:	2100      	movs	r1, #0
 8000812:	4608      	mov	r0, r1
 8000814:	e7f5      	b.n	8000802 <__udivmoddi4+0xa2>
 8000816:	fab3 f183 	clz	r1, r3
 800081a:	2900      	cmp	r1, #0
 800081c:	d146      	bne.n	80008ac <__udivmoddi4+0x14c>
 800081e:	4573      	cmp	r3, lr
 8000820:	d302      	bcc.n	8000828 <__udivmoddi4+0xc8>
 8000822:	4282      	cmp	r2, r0
 8000824:	f200 8105 	bhi.w	8000a32 <__udivmoddi4+0x2d2>
 8000828:	1a84      	subs	r4, r0, r2
 800082a:	eb6e 0203 	sbc.w	r2, lr, r3
 800082e:	2001      	movs	r0, #1
 8000830:	4690      	mov	r8, r2
 8000832:	2d00      	cmp	r5, #0
 8000834:	d0e5      	beq.n	8000802 <__udivmoddi4+0xa2>
 8000836:	e9c5 4800 	strd	r4, r8, [r5]
 800083a:	e7e2      	b.n	8000802 <__udivmoddi4+0xa2>
 800083c:	2a00      	cmp	r2, #0
 800083e:	f000 8090 	beq.w	8000962 <__udivmoddi4+0x202>
 8000842:	fab2 f682 	clz	r6, r2
 8000846:	2e00      	cmp	r6, #0
 8000848:	f040 80a4 	bne.w	8000994 <__udivmoddi4+0x234>
 800084c:	1a8a      	subs	r2, r1, r2
 800084e:	0c03      	lsrs	r3, r0, #16
 8000850:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000854:	b280      	uxth	r0, r0
 8000856:	b2bc      	uxth	r4, r7
 8000858:	2101      	movs	r1, #1
 800085a:	fbb2 fcfe 	udiv	ip, r2, lr
 800085e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000866:	fb04 f20c 	mul.w	r2, r4, ip
 800086a:	429a      	cmp	r2, r3
 800086c:	d907      	bls.n	800087e <__udivmoddi4+0x11e>
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000874:	d202      	bcs.n	800087c <__udivmoddi4+0x11c>
 8000876:	429a      	cmp	r2, r3
 8000878:	f200 80e0 	bhi.w	8000a3c <__udivmoddi4+0x2dc>
 800087c:	46c4      	mov	ip, r8
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	fbb3 f2fe 	udiv	r2, r3, lr
 8000884:	fb0e 3312 	mls	r3, lr, r2, r3
 8000888:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800088c:	fb02 f404 	mul.w	r4, r2, r4
 8000890:	429c      	cmp	r4, r3
 8000892:	d907      	bls.n	80008a4 <__udivmoddi4+0x144>
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	f102 30ff 	add.w	r0, r2, #4294967295
 800089a:	d202      	bcs.n	80008a2 <__udivmoddi4+0x142>
 800089c:	429c      	cmp	r4, r3
 800089e:	f200 80ca 	bhi.w	8000a36 <__udivmoddi4+0x2d6>
 80008a2:	4602      	mov	r2, r0
 80008a4:	1b1b      	subs	r3, r3, r4
 80008a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008aa:	e7a5      	b.n	80007f8 <__udivmoddi4+0x98>
 80008ac:	f1c1 0620 	rsb	r6, r1, #32
 80008b0:	408b      	lsls	r3, r1
 80008b2:	fa22 f706 	lsr.w	r7, r2, r6
 80008b6:	431f      	orrs	r7, r3
 80008b8:	fa0e f401 	lsl.w	r4, lr, r1
 80008bc:	fa20 f306 	lsr.w	r3, r0, r6
 80008c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80008c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008c8:	4323      	orrs	r3, r4
 80008ca:	fa00 f801 	lsl.w	r8, r0, r1
 80008ce:	fa1f fc87 	uxth.w	ip, r7
 80008d2:	fbbe f0f9 	udiv	r0, lr, r9
 80008d6:	0c1c      	lsrs	r4, r3, #16
 80008d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80008dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80008e4:	45a6      	cmp	lr, r4
 80008e6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ea:	d909      	bls.n	8000900 <__udivmoddi4+0x1a0>
 80008ec:	193c      	adds	r4, r7, r4
 80008ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80008f2:	f080 809c 	bcs.w	8000a2e <__udivmoddi4+0x2ce>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f240 8099 	bls.w	8000a2e <__udivmoddi4+0x2ce>
 80008fc:	3802      	subs	r0, #2
 80008fe:	443c      	add	r4, r7
 8000900:	eba4 040e 	sub.w	r4, r4, lr
 8000904:	fa1f fe83 	uxth.w	lr, r3
 8000908:	fbb4 f3f9 	udiv	r3, r4, r9
 800090c:	fb09 4413 	mls	r4, r9, r3, r4
 8000910:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000914:	fb03 fc0c 	mul.w	ip, r3, ip
 8000918:	45a4      	cmp	ip, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x1ce>
 800091c:	193c      	adds	r4, r7, r4
 800091e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000922:	f080 8082 	bcs.w	8000a2a <__udivmoddi4+0x2ca>
 8000926:	45a4      	cmp	ip, r4
 8000928:	d97f      	bls.n	8000a2a <__udivmoddi4+0x2ca>
 800092a:	3b02      	subs	r3, #2
 800092c:	443c      	add	r4, r7
 800092e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000932:	eba4 040c 	sub.w	r4, r4, ip
 8000936:	fba0 ec02 	umull	lr, ip, r0, r2
 800093a:	4564      	cmp	r4, ip
 800093c:	4673      	mov	r3, lr
 800093e:	46e1      	mov	r9, ip
 8000940:	d362      	bcc.n	8000a08 <__udivmoddi4+0x2a8>
 8000942:	d05f      	beq.n	8000a04 <__udivmoddi4+0x2a4>
 8000944:	b15d      	cbz	r5, 800095e <__udivmoddi4+0x1fe>
 8000946:	ebb8 0203 	subs.w	r2, r8, r3
 800094a:	eb64 0409 	sbc.w	r4, r4, r9
 800094e:	fa04 f606 	lsl.w	r6, r4, r6
 8000952:	fa22 f301 	lsr.w	r3, r2, r1
 8000956:	431e      	orrs	r6, r3
 8000958:	40cc      	lsrs	r4, r1
 800095a:	e9c5 6400 	strd	r6, r4, [r5]
 800095e:	2100      	movs	r1, #0
 8000960:	e74f      	b.n	8000802 <__udivmoddi4+0xa2>
 8000962:	fbb1 fcf2 	udiv	ip, r1, r2
 8000966:	0c01      	lsrs	r1, r0, #16
 8000968:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800096c:	b280      	uxth	r0, r0
 800096e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000972:	463b      	mov	r3, r7
 8000974:	4638      	mov	r0, r7
 8000976:	463c      	mov	r4, r7
 8000978:	46b8      	mov	r8, r7
 800097a:	46be      	mov	lr, r7
 800097c:	2620      	movs	r6, #32
 800097e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000982:	eba2 0208 	sub.w	r2, r2, r8
 8000986:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800098a:	e766      	b.n	800085a <__udivmoddi4+0xfa>
 800098c:	4601      	mov	r1, r0
 800098e:	e718      	b.n	80007c2 <__udivmoddi4+0x62>
 8000990:	4610      	mov	r0, r2
 8000992:	e72c      	b.n	80007ee <__udivmoddi4+0x8e>
 8000994:	f1c6 0220 	rsb	r2, r6, #32
 8000998:	fa2e f302 	lsr.w	r3, lr, r2
 800099c:	40b7      	lsls	r7, r6
 800099e:	40b1      	lsls	r1, r6
 80009a0:	fa20 f202 	lsr.w	r2, r0, r2
 80009a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a8:	430a      	orrs	r2, r1
 80009aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80009ae:	b2bc      	uxth	r4, r7
 80009b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80009b4:	0c11      	lsrs	r1, r2, #16
 80009b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009ba:	fb08 f904 	mul.w	r9, r8, r4
 80009be:	40b0      	lsls	r0, r6
 80009c0:	4589      	cmp	r9, r1
 80009c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009c6:	b280      	uxth	r0, r0
 80009c8:	d93e      	bls.n	8000a48 <__udivmoddi4+0x2e8>
 80009ca:	1879      	adds	r1, r7, r1
 80009cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80009d0:	d201      	bcs.n	80009d6 <__udivmoddi4+0x276>
 80009d2:	4589      	cmp	r9, r1
 80009d4:	d81f      	bhi.n	8000a16 <__udivmoddi4+0x2b6>
 80009d6:	eba1 0109 	sub.w	r1, r1, r9
 80009da:	fbb1 f9fe 	udiv	r9, r1, lr
 80009de:	fb09 f804 	mul.w	r8, r9, r4
 80009e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80009e6:	b292      	uxth	r2, r2
 80009e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009ec:	4542      	cmp	r2, r8
 80009ee:	d229      	bcs.n	8000a44 <__udivmoddi4+0x2e4>
 80009f0:	18ba      	adds	r2, r7, r2
 80009f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80009f6:	d2c4      	bcs.n	8000982 <__udivmoddi4+0x222>
 80009f8:	4542      	cmp	r2, r8
 80009fa:	d2c2      	bcs.n	8000982 <__udivmoddi4+0x222>
 80009fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000a00:	443a      	add	r2, r7
 8000a02:	e7be      	b.n	8000982 <__udivmoddi4+0x222>
 8000a04:	45f0      	cmp	r8, lr
 8000a06:	d29d      	bcs.n	8000944 <__udivmoddi4+0x1e4>
 8000a08:	ebbe 0302 	subs.w	r3, lr, r2
 8000a0c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a10:	3801      	subs	r0, #1
 8000a12:	46e1      	mov	r9, ip
 8000a14:	e796      	b.n	8000944 <__udivmoddi4+0x1e4>
 8000a16:	eba7 0909 	sub.w	r9, r7, r9
 8000a1a:	4449      	add	r1, r9
 8000a1c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a20:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a24:	fb09 f804 	mul.w	r8, r9, r4
 8000a28:	e7db      	b.n	80009e2 <__udivmoddi4+0x282>
 8000a2a:	4673      	mov	r3, lr
 8000a2c:	e77f      	b.n	800092e <__udivmoddi4+0x1ce>
 8000a2e:	4650      	mov	r0, sl
 8000a30:	e766      	b.n	8000900 <__udivmoddi4+0x1a0>
 8000a32:	4608      	mov	r0, r1
 8000a34:	e6fd      	b.n	8000832 <__udivmoddi4+0xd2>
 8000a36:	443b      	add	r3, r7
 8000a38:	3a02      	subs	r2, #2
 8000a3a:	e733      	b.n	80008a4 <__udivmoddi4+0x144>
 8000a3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a40:	443b      	add	r3, r7
 8000a42:	e71c      	b.n	800087e <__udivmoddi4+0x11e>
 8000a44:	4649      	mov	r1, r9
 8000a46:	e79c      	b.n	8000982 <__udivmoddi4+0x222>
 8000a48:	eba1 0109 	sub.w	r1, r1, r9
 8000a4c:	46c4      	mov	ip, r8
 8000a4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a52:	fb09 f804 	mul.w	r8, r9, r4
 8000a56:	e7c4      	b.n	80009e2 <__udivmoddi4+0x282>

08000a58 <__aeabi_idiv0>:
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <getForwardLeftEncoderCounts>:
volatile float ForwardRight_W = 0;
volatile float RearLeft_W = 0;
volatile float RearRight_W = 0;


int16_t getForwardLeftEncoderCounts() {
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8000a60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a66:	b21b      	sxth	r3, r3
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <getForwardRightEncoderCounts>:

int16_t getForwardRightEncoderCounts() {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	return (int16_t) TIM3->CNT;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <getForwardRightEncoderCounts+0x14>)
 8000a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a7c:	b21b      	sxth	r3, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40000400 	.word	0x40000400

08000a8c <getRearLeftEncoderCounts>:

int16_t getRearLeftEncoderCounts() {
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	return (int16_t) TIM4->CNT;
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <getRearLeftEncoderCounts+0x14>)
 8000a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a94:	b21b      	sxth	r3, r3
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40000800 	.word	0x40000800

08000aa4 <getRearRightEncoderCounts>:

int16_t getRearRightEncoderCounts() {
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	return (int16_t) TIM5->CNT;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <getRearRightEncoderCounts+0x14>)
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aac:	b21b      	sxth	r3, r3
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40000c00 	.word	0x40000c00

08000abc <resetEncoders>:

void resetEncoders() {
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 8000ac0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = (int16_t) 0;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <resetEncoders+0x68>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CNT = (int16_t) 0;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <resetEncoders+0x6c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->CNT = (int16_t) 0;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <resetEncoders+0x70>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24

	m_robot_distance = 0;
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <resetEncoders+0x74>)
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <resetEncoders+0x78>)
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]

	ForwardLeft_delta = 0;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <resetEncoders+0x7c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	801a      	strh	r2, [r3, #0]
	ForwardRight_delta = 0;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <resetEncoders+0x80>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	801a      	strh	r2, [r3, #0]
	RearLeft_delta = 0;
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <resetEncoders+0x84>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	801a      	strh	r2, [r3, #0]
	RearRight_delta = 0;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <resetEncoders+0x88>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	801a      	strh	r2, [r3, #0]

	previous_ForwardLeft_count = 0;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <resetEncoders+0x8c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = 0;
 8000b08:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <resetEncoders+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = 0;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <resetEncoders+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = 0;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <resetEncoders+0x98>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	801a      	strh	r2, [r3, #0]

}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40000400 	.word	0x40000400
 8000b28:	40000800 	.word	0x40000800
 8000b2c:	40000c00 	.word	0x40000c00
 8000b30:	20000078 	.word	0x20000078
 8000b34:	2000007c 	.word	0x2000007c
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	20000082 	.word	0x20000082
 8000b40:	20000084 	.word	0x20000084
 8000b44:	20000086 	.word	0x20000086
 8000b48:	20000088 	.word	0x20000088
 8000b4c:	2000008a 	.word	0x2000008a
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	2000008e 	.word	0x2000008e

08000b58 <resetEncodersinSystick>:

void resetEncodersinSystick() {
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 8000b5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = (int16_t) 0;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <resetEncodersinSystick+0x28>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CNT = (int16_t) 0;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <resetEncodersinSystick+0x2c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->CNT = (int16_t) 0;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <resetEncodersinSystick+0x30>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40000400 	.word	0x40000400
 8000b84:	40000800 	.word	0x40000800
 8000b88:	40000c00 	.word	0x40000c00

08000b8c <update_Encoder_Data>:


void update_Encoder_Data(){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
	int16_t ForwardLeft_count= getForwardLeftEncoderCounts();
 8000b92:	f7ff ff63 	bl	8000a5c <getForwardLeftEncoderCounts>
 8000b96:	4603      	mov	r3, r0
 8000b98:	82fb      	strh	r3, [r7, #22]
	int16_t ForwardRight_count = getForwardRightEncoderCounts();
 8000b9a:	f7ff ff6b 	bl	8000a74 <getForwardRightEncoderCounts>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	82bb      	strh	r3, [r7, #20]
	int16_t RearLeft_count = getRearLeftEncoderCounts();
 8000ba2:	f7ff ff73 	bl	8000a8c <getRearLeftEncoderCounts>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	827b      	strh	r3, [r7, #18]
	int16_t RearRight_count = getRearRightEncoderCounts();
 8000baa:	f7ff ff7b 	bl	8000aa4 <getRearRightEncoderCounts>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	823b      	strh	r3, [r7, #16]


	ForwardLeft_delta = ForwardLeft_count - previous_ForwardLeft_count;
 8000bb2:	8afa      	ldrh	r2, [r7, #22]
 8000bb4:	4b49      	ldr	r3, [pc, #292]	@ (8000cdc <update_Encoder_Data+0x150>)
 8000bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	4b47      	ldr	r3, [pc, #284]	@ (8000ce0 <update_Encoder_Data+0x154>)
 8000bc4:	801a      	strh	r2, [r3, #0]
	previous_ForwardLeft_count = ForwardLeft_count;
 8000bc6:	4a45      	ldr	r2, [pc, #276]	@ (8000cdc <update_Encoder_Data+0x150>)
 8000bc8:	8afb      	ldrh	r3, [r7, #22]
 8000bca:	8013      	strh	r3, [r2, #0]

	ForwardRight_delta = ForwardRight_count - previous_ForwardRight_count;
 8000bcc:	8aba      	ldrh	r2, [r7, #20]
 8000bce:	4b45      	ldr	r3, [pc, #276]	@ (8000ce4 <update_Encoder_Data+0x158>)
 8000bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	4b42      	ldr	r3, [pc, #264]	@ (8000ce8 <update_Encoder_Data+0x15c>)
 8000bde:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = ForwardRight_count;
 8000be0:	4a40      	ldr	r2, [pc, #256]	@ (8000ce4 <update_Encoder_Data+0x158>)
 8000be2:	8abb      	ldrh	r3, [r7, #20]
 8000be4:	8013      	strh	r3, [r2, #0]

	RearLeft_delta = RearLeft_count - previous_RearLeft_count;
 8000be6:	8a7a      	ldrh	r2, [r7, #18]
 8000be8:	4b40      	ldr	r3, [pc, #256]	@ (8000cec <update_Encoder_Data+0x160>)
 8000bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <update_Encoder_Data+0x164>)
 8000bf8:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = RearLeft_count;
 8000bfa:	4a3c      	ldr	r2, [pc, #240]	@ (8000cec <update_Encoder_Data+0x160>)
 8000bfc:	8a7b      	ldrh	r3, [r7, #18]
 8000bfe:	8013      	strh	r3, [r2, #0]


	RearRight_delta = RearRight_count - previous_RearRight_count;
 8000c00:	8a3a      	ldrh	r2, [r7, #16]
 8000c02:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf4 <update_Encoder_Data+0x168>)
 8000c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	4b39      	ldr	r3, [pc, #228]	@ (8000cf8 <update_Encoder_Data+0x16c>)
 8000c12:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = RearRight_count;
 8000c14:	4a37      	ldr	r2, [pc, #220]	@ (8000cf4 <update_Encoder_Data+0x168>)
 8000c16:	8a3b      	ldrh	r3, [r7, #16]
 8000c18:	8013      	strh	r3, [r2, #0]

	float ForwardLeft = ForwardLeft_delta * RAD_PER_COUNT_FORWARD_LEFT;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <update_Encoder_Data+0x154>)
 8000c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c20:	ee07 3a90 	vmov	s15, r3
 8000c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c28:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000cfc <update_Encoder_Data+0x170>
 8000c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c30:	edc7 7a03 	vstr	s15, [r7, #12]
	float ForwardRight = ForwardRight_delta * RAD_PER_COUNT_FORWARD_RIGHT;
 8000c34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <update_Encoder_Data+0x15c>)
 8000c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c42:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000cfc <update_Encoder_Data+0x170>
 8000c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c4a:	edc7 7a02 	vstr	s15, [r7, #8]
	float RearLeft = RearLeft_delta * RAD_PER_COUNT_REAR_LEFT;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <update_Encoder_Data+0x164>)
 8000c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000cfc <update_Encoder_Data+0x170>
 8000c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c64:	edc7 7a01 	vstr	s15, [r7, #4]
	float RearRight = RearRight_delta * RAD_PER_COUNT_REAR_RIGHT;
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <update_Encoder_Data+0x16c>)
 8000c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6e:	ee07 3a90 	vmov	s15, r3
 8000c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c76:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000cfc <update_Encoder_Data+0x170>
 8000c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7e:	edc7 7a00 	vstr	s15, [r7]


	ForwardLeft_W = ForwardLeft * LOOP_FREQUENCY;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <update_Encoder_Data+0x174>)
 8000c84:	ed93 7a00 	vldr	s14, [r3]
 8000c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <update_Encoder_Data+0x178>)
 8000c92:	edc3 7a00 	vstr	s15, [r3]
	ForwardRight_W = ForwardRight * LOOP_FREQUENCY;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <update_Encoder_Data+0x174>)
 8000c98:	ed93 7a00 	vldr	s14, [r3]
 8000c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <update_Encoder_Data+0x17c>)
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
	RearLeft_W = RearLeft * LOOP_FREQUENCY;
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <update_Encoder_Data+0x174>)
 8000cac:	ed93 7a00 	vldr	s14, [r3]
 8000cb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <update_Encoder_Data+0x180>)
 8000cba:	edc3 7a00 	vstr	s15, [r3]
	RearRight_W = RearRight * LOOP_FREQUENCY;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <update_Encoder_Data+0x174>)
 8000cc0:	ed93 7a00 	vldr	s14, [r3]
 8000cc4:	edd7 7a00 	vldr	s15, [r7]
 8000cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <update_Encoder_Data+0x184>)
 8000cce:	edc3 7a00 	vstr	s15, [r3]

}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	20000080 	.word	0x20000080
 8000ce4:	2000008a 	.word	0x2000008a
 8000ce8:	20000082 	.word	0x20000082
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	20000084 	.word	0x20000084
 8000cf4:	2000008e 	.word	0x2000008e
 8000cf8:	20000086 	.word	0x20000086
 8000cfc:	3bab92a6 	.word	0x3bab92a6
 8000d00:	08006824 	.word	0x08006824
 8000d04:	20000090 	.word	0x20000090
 8000d08:	20000094 	.word	0x20000094
 8000d0c:	20000098 	.word	0x20000098
 8000d10:	2000009c 	.word	0x2000009c

08000d14 <init_kinematics>:
// Demo sequence variables
static uint8_t demo_step = 0;
static uint32_t demo_timer = 0;
static uint8_t demo_active = 0;

void init_kinematics(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    // Initialize PID controllers for velocity control
    init_pid_controller(&pid_vx, 2.0f, 0.1f, 0.05f, -500.0f, 500.0f);
 8000d18:	ed9f 2a2c 	vldr	s4, [pc, #176]	@ 8000dcc <init_kinematics+0xb8>
 8000d1c:	eddf 1a2c 	vldr	s3, [pc, #176]	@ 8000dd0 <init_kinematics+0xbc>
 8000d20:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8000dd4 <init_kinematics+0xc0>
 8000d24:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8000dd8 <init_kinematics+0xc4>
 8000d28:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000d2c:	482b      	ldr	r0, [pc, #172]	@ (8000ddc <init_kinematics+0xc8>)
 8000d2e:	f000 fd7b 	bl	8001828 <init_pid_controller>
    init_pid_controller(&pid_vy, 2.0f, 0.1f, 0.05f, -500.0f, 500.0f);
 8000d32:	ed9f 2a26 	vldr	s4, [pc, #152]	@ 8000dcc <init_kinematics+0xb8>
 8000d36:	eddf 1a26 	vldr	s3, [pc, #152]	@ 8000dd0 <init_kinematics+0xbc>
 8000d3a:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8000dd4 <init_kinematics+0xc0>
 8000d3e:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8000dd8 <init_kinematics+0xc4>
 8000d42:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000d46:	4826      	ldr	r0, [pc, #152]	@ (8000de0 <init_kinematics+0xcc>)
 8000d48:	f000 fd6e 	bl	8001828 <init_pid_controller>
    init_pid_controller(&pid_wz, 1.5f, 0.08f, 0.03f, -300.0f, 300.0f);
 8000d4c:	ed9f 2a25 	vldr	s4, [pc, #148]	@ 8000de4 <init_kinematics+0xd0>
 8000d50:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8000de8 <init_kinematics+0xd4>
 8000d54:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 8000dec <init_kinematics+0xd8>
 8000d58:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8000df0 <init_kinematics+0xdc>
 8000d5c:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000d60:	4824      	ldr	r0, [pc, #144]	@ (8000df4 <init_kinematics+0xe0>)
 8000d62:	f000 fd61 	bl	8001828 <init_pid_controller>

    // Reset all variables
    current_robot_velocity.vx = 0;
 8000d66:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <init_kinematics+0xe4>)
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
    current_robot_velocity.vy = 0;
 8000d6e:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <init_kinematics+0xe4>)
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
    current_robot_velocity.wz = 0;
 8000d76:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <init_kinematics+0xe4>)
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]

    target_robot_velocity.vx = 0;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <init_kinematics+0xe8>)
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
    target_robot_velocity.vy = 0;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <init_kinematics+0xe8>)
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
    target_robot_velocity.wz = 0;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <init_kinematics+0xe8>)
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]

    current_robot_position.x = 0;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <init_kinematics+0xec>)
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
    current_robot_position.y = 0;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <init_kinematics+0xec>)
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
    current_robot_position.theta = 0;
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <init_kinematics+0xec>)
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]

    motion_command.motion_active = 0;
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <init_kinematics+0xf0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	741a      	strb	r2, [r3, #16]
    motion_command.motion_complete = 1;
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <init_kinematics+0xf0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	745a      	strb	r2, [r3, #17]

    current_time = 0;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <init_kinematics+0xf4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
    demo_active = 1; // Start demo sequence
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <init_kinematics+0xf8>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	43fa0000 	.word	0x43fa0000
 8000dd0:	c3fa0000 	.word	0xc3fa0000
 8000dd4:	3d4ccccd 	.word	0x3d4ccccd
 8000dd8:	3dcccccd 	.word	0x3dcccccd
 8000ddc:	200000d8 	.word	0x200000d8
 8000de0:	200000f4 	.word	0x200000f4
 8000de4:	43960000 	.word	0x43960000
 8000de8:	c3960000 	.word	0xc3960000
 8000dec:	3cf5c28f 	.word	0x3cf5c28f
 8000df0:	3da3d70a 	.word	0x3da3d70a
 8000df4:	20000110 	.word	0x20000110
 8000df8:	200000a0 	.word	0x200000a0
 8000dfc:	200000ac 	.word	0x200000ac
 8000e00:	200000b8 	.word	0x200000b8
 8000e04:	200000c4 	.word	0x200000c4
 8000e08:	2000013c 	.word	0x2000013c
 8000e0c:	20000148 	.word	0x20000148

08000e10 <calculate_wheel_velocities>:

void calculate_wheel_velocities(RobotVelocity robot_vel, float *wheel_velocities) {
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	eef0 6a40 	vmov.f32	s13, s0
 8000e1a:	eeb0 7a60 	vmov.f32	s14, s1
 8000e1e:	eef0 7a41 	vmov.f32	s15, s2
 8000e22:	6038      	str	r0, [r7, #0]
 8000e24:	edc7 6a01 	vstr	s13, [r7, #4]
 8000e28:	ed87 7a02 	vstr	s14, [r7, #8]
 8000e2c:	edc7 7a03 	vstr	s15, [r7, #12]
     * vFR = vx + vy + wz * L_PLUS_W
     * vRL = vx + vy - wz * L_PLUS_W
     * vRR = vx - vy + wz * L_PLUS_W
     */

    float vx_mm_s = robot_vel.vx;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	61fb      	str	r3, [r7, #28]
    float vy_mm_s = robot_vel.vy;
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
    float wz_rad_s = robot_vel.wz;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	617b      	str	r3, [r7, #20]

    // Convert to wheel angular velocities (rad/s)
    wheel_velocities[0] = (vx_mm_s - vy_mm_s - wz_rad_s * L_PLUS_W) * MM_PER_S_TO_RAD_PER_S; // FL
 8000e3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e40:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000ef8 <calculate_wheel_velocities+0xe8>
 8000e50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e58:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000efc <calculate_wheel_velocities+0xec>
 8000e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	edc3 7a00 	vstr	s15, [r3]
    wheel_velocities[1] = (vx_mm_s + vy_mm_s + wz_rad_s * L_PLUS_W) * MM_PER_S_TO_RAD_PER_S; // FR
 8000e66:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e76:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000ef8 <calculate_wheel_velocities+0xe8>
 8000e7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	3304      	adds	r3, #4
 8000e86:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000efc <calculate_wheel_velocities+0xec>
 8000e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8e:	edc3 7a00 	vstr	s15, [r3]
    wheel_velocities[2] = (vx_mm_s + vy_mm_s - wz_rad_s * L_PLUS_W) * MM_PER_S_TO_RAD_PER_S; // RL
 8000e92:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e96:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ea2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000ef8 <calculate_wheel_velocities+0xe8>
 8000ea6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000efc <calculate_wheel_velocities+0xec>
 8000eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eba:	edc3 7a00 	vstr	s15, [r3]
    wheel_velocities[3] = (vx_mm_s - vy_mm_s + wz_rad_s * L_PLUS_W) * MM_PER_S_TO_RAD_PER_S; // RR
 8000ebe:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ec2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eca:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ece:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000ef8 <calculate_wheel_velocities+0xe8>
 8000ed2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	330c      	adds	r3, #12
 8000ede:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000efc <calculate_wheel_velocities+0xec>
 8000ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee6:	edc3 7a00 	vstr	s15, [r3]
}
 8000eea:	bf00      	nop
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	434a8000 	.word	0x434a8000
 8000efc:	3cd20d21 	.word	0x3cd20d21

08000f00 <calculate_robot_velocities>:

void calculate_robot_velocities(float *wheel_velocities, RobotVelocity *robot_vel) {
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
     * vx = (vFL + vFR + vRL + vRR) / 4
     * vy = (-vFL + vFR + vRL - vRR) / 4
     * wz = (-vFL + vFR - vRL + vRR) / (4 * L_PLUS_W)
     */

    float vFL = wheel_velocities[0] * RAD_PER_S_TO_MM_PER_S;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000fe4 <calculate_robot_velocities+0xe4>
 8000f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f18:	edc7 7a05 	vstr	s15, [r7, #20]
    float vFR = wheel_velocities[1] * RAD_PER_S_TO_MM_PER_S;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	edd3 7a00 	vldr	s15, [r3]
 8000f24:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000fe4 <calculate_robot_velocities+0xe4>
 8000f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2c:	edc7 7a04 	vstr	s15, [r7, #16]
    float vRL = wheel_velocities[2] * RAD_PER_S_TO_MM_PER_S;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3308      	adds	r3, #8
 8000f34:	edd3 7a00 	vldr	s15, [r3]
 8000f38:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000fe4 <calculate_robot_velocities+0xe4>
 8000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f40:	edc7 7a03 	vstr	s15, [r7, #12]
    float vRR = wheel_velocities[3] * RAD_PER_S_TO_MM_PER_S;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	330c      	adds	r3, #12
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000fe4 <calculate_robot_velocities+0xe4>
 8000f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f54:	edc7 7a02 	vstr	s15, [r7, #8]

    robot_vel->vx = (vFL + vFR + vRL + vRR) * 0.25f;
 8000f58:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f74:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
    robot_vel->vy = (-vFL + vFR + vRL - vRR) * 0.25f;
 8000f82:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f86:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	edc3 7a01 	vstr	s15, [r3, #4]
    robot_vel->wz = (-vFL + vFR - vRL + vRR) / (4.0f * L_PLUS_W);
 8000fac:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc8:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000fe8 <calculate_robot_velocities+0xe8>
 8000fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000fd6:	bf00      	nop
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	421c0000 	.word	0x421c0000
 8000fe8:	444a8000 	.word	0x444a8000
 8000fec:	00000000 	.word	0x00000000

08000ff0 <update_robot_position>:

void update_robot_position(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	@ 0x30
 8000ff4:	af00      	add	r7, sp, #0
    /*
     * Update robot position using odometry
     * Integration of velocities over time
     */

    float dt = LOOP_INTERVAL; // 1ms = 0.001s
 8000ff6:	4b80      	ldr	r3, [pc, #512]	@ (80011f8 <update_robot_position+0x208>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Calculate current wheel velocities from encoder data
    float current_wheel_velocities[4];
    current_wheel_velocities[0] = ForwardLeft_W;   // FL
 8000ffc:	4b7f      	ldr	r3, [pc, #508]	@ (80011fc <update_robot_position+0x20c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
    current_wheel_velocities[1] = ForwardRight_W;  // FR
 8001002:	4b7f      	ldr	r3, [pc, #508]	@ (8001200 <update_robot_position+0x210>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
    current_wheel_velocities[2] = RearLeft_W;      // RL
 8001008:	4b7e      	ldr	r3, [pc, #504]	@ (8001204 <update_robot_position+0x214>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	617b      	str	r3, [r7, #20]
    current_wheel_velocities[3] = RearRight_W;     // RR
 800100e:	4b7e      	ldr	r3, [pc, #504]	@ (8001208 <update_robot_position+0x218>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	61bb      	str	r3, [r7, #24]

    // Calculate current robot velocities
    RobotVelocity measured_velocity;
    calculate_robot_velocities(current_wheel_velocities, &measured_velocity);
 8001014:	463a      	mov	r2, r7
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff6f 	bl	8000f00 <calculate_robot_velocities>

    // Update current velocity (filtered)
    current_robot_velocity.vx = 0.8f * current_robot_velocity.vx + 0.2f * measured_velocity.vx;
 8001022:	4b7a      	ldr	r3, [pc, #488]	@ (800120c <update_robot_position+0x21c>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001210 <update_robot_position+0x220>
 800102c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001030:	edd7 7a00 	vldr	s15, [r7]
 8001034:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8001214 <update_robot_position+0x224>
 8001038:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800103c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001040:	4b72      	ldr	r3, [pc, #456]	@ (800120c <update_robot_position+0x21c>)
 8001042:	edc3 7a00 	vstr	s15, [r3]
    current_robot_velocity.vy = 0.8f * current_robot_velocity.vy + 0.2f * measured_velocity.vy;
 8001046:	4b71      	ldr	r3, [pc, #452]	@ (800120c <update_robot_position+0x21c>)
 8001048:	edd3 7a01 	vldr	s15, [r3, #4]
 800104c:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001210 <update_robot_position+0x220>
 8001050:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001054:	edd7 7a01 	vldr	s15, [r7, #4]
 8001058:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8001214 <update_robot_position+0x224>
 800105c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	4b69      	ldr	r3, [pc, #420]	@ (800120c <update_robot_position+0x21c>)
 8001066:	edc3 7a01 	vstr	s15, [r3, #4]
    current_robot_velocity.wz = 0.8f * current_robot_velocity.wz + 0.2f * measured_velocity.wz;
 800106a:	4b68      	ldr	r3, [pc, #416]	@ (800120c <update_robot_position+0x21c>)
 800106c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001070:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001210 <update_robot_position+0x220>
 8001074:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001078:	edd7 7a02 	vldr	s15, [r7, #8]
 800107c:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001214 <update_robot_position+0x224>
 8001080:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001088:	4b60      	ldr	r3, [pc, #384]	@ (800120c <update_robot_position+0x21c>)
 800108a:	edc3 7a02 	vstr	s15, [r3, #8]

    // Update position using current orientation
    float cos_theta = cosf(current_robot_position.theta);
 800108e:	4b62      	ldr	r3, [pc, #392]	@ (8001218 <update_robot_position+0x228>)
 8001090:	edd3 7a02 	vldr	s15, [r3, #8]
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	f004 fe3e 	bl	8005d18 <cosf>
 800109c:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float sin_theta = sinf(current_robot_position.theta);
 80010a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <update_robot_position+0x228>)
 80010a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	f004 fe79 	bl	8005da0 <sinf>
 80010ae:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Transform velocities from robot frame to world frame
    float vx_world = current_robot_velocity.vx * cos_theta - current_robot_velocity.vy * sin_theta;
 80010b2:	4b56      	ldr	r3, [pc, #344]	@ (800120c <update_robot_position+0x21c>)
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c0:	4b52      	ldr	r3, [pc, #328]	@ (800120c <update_robot_position+0x21c>)
 80010c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010c6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d2:	edc7 7a08 	vstr	s15, [r7, #32]
    float vy_world = current_robot_velocity.vx * sin_theta + current_robot_velocity.vy * cos_theta;
 80010d6:	4b4d      	ldr	r3, [pc, #308]	@ (800120c <update_robot_position+0x21c>)
 80010d8:	ed93 7a00 	vldr	s14, [r3]
 80010dc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e4:	4b49      	ldr	r3, [pc, #292]	@ (800120c <update_robot_position+0x21c>)
 80010e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80010ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f6:	edc7 7a07 	vstr	s15, [r7, #28]

    // Integrate position
    current_robot_position.x += vx_world * dt;
 80010fa:	4b47      	ldr	r3, [pc, #284]	@ (8001218 <update_robot_position+0x228>)
 80010fc:	ed93 7a00 	vldr	s14, [r3]
 8001100:	edd7 6a08 	vldr	s13, [r7, #32]
 8001104:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	4b41      	ldr	r3, [pc, #260]	@ (8001218 <update_robot_position+0x228>)
 8001112:	edc3 7a00 	vstr	s15, [r3]
    current_robot_position.y += vy_world * dt;
 8001116:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <update_robot_position+0x228>)
 8001118:	ed93 7a01 	vldr	s14, [r3, #4]
 800111c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001120:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <update_robot_position+0x228>)
 800112e:	edc3 7a01 	vstr	s15, [r3, #4]
    current_robot_position.theta += current_robot_velocity.wz * dt;
 8001132:	4b36      	ldr	r3, [pc, #216]	@ (800120c <update_robot_position+0x21c>)
 8001134:	ed93 7a02 	vldr	s14, [r3, #8]
 8001138:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800113c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001140:	4b35      	ldr	r3, [pc, #212]	@ (8001218 <update_robot_position+0x228>)
 8001142:	edd3 7a02 	vldr	s15, [r3, #8]
 8001146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114a:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <update_robot_position+0x228>)
 800114c:	edc3 7a02 	vstr	s15, [r3, #8]

    // Normalize angle to [-π, π]
    while (current_robot_position.theta > M_PI) {
 8001150:	e012      	b.n	8001178 <update_robot_position+0x188>
        current_robot_position.theta -= 2.0f * M_PI;
 8001152:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <update_robot_position+0x228>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9ba 	bl	80004d0 <__aeabi_f2d>
 800115c:	a320      	add	r3, pc, #128	@ (adr r3, 80011e0 <update_robot_position+0x1f0>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff f855 	bl	8000210 <__aeabi_dsub>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fa8f 	bl	8000690 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	4a28      	ldr	r2, [pc, #160]	@ (8001218 <update_robot_position+0x228>)
 8001176:	6093      	str	r3, [r2, #8]
    while (current_robot_position.theta > M_PI) {
 8001178:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <update_robot_position+0x228>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9a7 	bl	80004d0 <__aeabi_f2d>
 8001182:	a319      	add	r3, pc, #100	@ (adr r3, 80011e8 <update_robot_position+0x1f8>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa78 	bl	800067c <__aeabi_dcmpgt>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1df      	bne.n	8001152 <update_robot_position+0x162>
    }
    while (current_robot_position.theta < -M_PI) {
 8001192:	e012      	b.n	80011ba <update_robot_position+0x1ca>
        current_robot_position.theta += 2.0f * M_PI;
 8001194:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <update_robot_position+0x228>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f999 	bl	80004d0 <__aeabi_f2d>
 800119e:	a310      	add	r3, pc, #64	@ (adr r3, 80011e0 <update_robot_position+0x1f0>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff f836 	bl	8000214 <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fa6e 	bl	8000690 <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <update_robot_position+0x228>)
 80011b8:	6093      	str	r3, [r2, #8]
    while (current_robot_position.theta < -M_PI) {
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <update_robot_position+0x228>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f986 	bl	80004d0 <__aeabi_f2d>
 80011c4:	a30a      	add	r3, pc, #40	@ (adr r3, 80011f0 <update_robot_position+0x200>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fa39 	bl	8000640 <__aeabi_dcmplt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1df      	bne.n	8001194 <update_robot_position+0x1a4>
    }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	@ 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	54442d18 	.word	0x54442d18
 80011e4:	401921fb 	.word	0x401921fb
 80011e8:	54442d18 	.word	0x54442d18
 80011ec:	400921fb 	.word	0x400921fb
 80011f0:	54442d18 	.word	0x54442d18
 80011f4:	c00921fb 	.word	0xc00921fb
 80011f8:	08006828 	.word	0x08006828
 80011fc:	20000090 	.word	0x20000090
 8001200:	20000094 	.word	0x20000094
 8001204:	20000098 	.word	0x20000098
 8001208:	2000009c 	.word	0x2000009c
 800120c:	200000a0 	.word	0x200000a0
 8001210:	3f4ccccd 	.word	0x3f4ccccd
 8001214:	3e4ccccd 	.word	0x3e4ccccd
 8001218:	200000b8 	.word	0x200000b8

0800121c <update_kinematics_control>:

void update_kinematics_control(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b092      	sub	sp, #72	@ 0x48
 8001220:	af00      	add	r7, sp, #0
    /*
     * Main kinematics control function called every millisecond
     */

    current_time++;
 8001222:	4b87      	ldr	r3, [pc, #540]	@ (8001440 <update_kinematics_control+0x224>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a85      	ldr	r2, [pc, #532]	@ (8001440 <update_kinematics_control+0x224>)
 800122a:	6013      	str	r3, [r2, #0]

    // Update encoder data
    update_Encoder_Data();
 800122c:	f7ff fcae 	bl	8000b8c <update_Encoder_Data>

    // Update robot position from odometry
    update_robot_position();
 8001230:	f7ff fede 	bl	8000ff0 <update_robot_position>

    // Check if motion is complete
    if (motion_command.motion_active) {
 8001234:	4b83      	ldr	r3, [pc, #524]	@ (8001444 <update_kinematics_control+0x228>)
 8001236:	7c1b      	ldrb	r3, [r3, #16]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d06f      	beq.n	800131e <update_kinematics_control+0x102>
        float distance_traveled = sqrtf(
            (current_robot_position.x - start_position_x) * (current_robot_position.x - start_position_x) +
 800123e:	4b82      	ldr	r3, [pc, #520]	@ (8001448 <update_kinematics_control+0x22c>)
 8001240:	ed93 7a00 	vldr	s14, [r3]
 8001244:	4b81      	ldr	r3, [pc, #516]	@ (800144c <update_kinematics_control+0x230>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800124e:	4b7e      	ldr	r3, [pc, #504]	@ (8001448 <update_kinematics_control+0x22c>)
 8001250:	edd3 6a00 	vldr	s13, [r3]
 8001254:	4b7d      	ldr	r3, [pc, #500]	@ (800144c <update_kinematics_control+0x230>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800125e:	ee27 7a27 	vmul.f32	s14, s14, s15
            (current_robot_position.y - start_position_y) * (current_robot_position.y - start_position_y)
 8001262:	4b79      	ldr	r3, [pc, #484]	@ (8001448 <update_kinematics_control+0x22c>)
 8001264:	edd3 6a01 	vldr	s13, [r3, #4]
 8001268:	4b79      	ldr	r3, [pc, #484]	@ (8001450 <update_kinematics_control+0x234>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001272:	4b75      	ldr	r3, [pc, #468]	@ (8001448 <update_kinematics_control+0x22c>)
 8001274:	ed93 6a01 	vldr	s12, [r3, #4]
 8001278:	4b75      	ldr	r3, [pc, #468]	@ (8001450 <update_kinematics_control+0x234>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001282:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float distance_traveled = sqrtf(
 8001286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	f004 fd25 	bl	8005cdc <sqrtf>
 8001292:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
        );

        float angle_traveled = fabsf(current_robot_position.theta - start_theta);
 8001296:	4b6c      	ldr	r3, [pc, #432]	@ (8001448 <update_kinematics_control+0x22c>)
 8001298:	ed93 7a02 	vldr	s14, [r3, #8]
 800129c:	4b6d      	ldr	r3, [pc, #436]	@ (8001454 <update_kinematics_control+0x238>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a6:	eef0 7ae7 	vabs.f32	s15, s15
 80012aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

        // Check if target distance/angle is reached
        if ((motion_command.target_distance > 0 && distance_traveled >= motion_command.target_distance) ||
 80012ae:	4b65      	ldr	r3, [pc, #404]	@ (8001444 <update_kinematics_control+0x228>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd09      	ble.n	80012d2 <update_kinematics_control+0xb6>
 80012be:	4b61      	ldr	r3, [pc, #388]	@ (8001444 <update_kinematics_control+0x228>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80012c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d0:	da13      	bge.n	80012fa <update_kinematics_control+0xde>
            (motion_command.target_rotation != 0 && angle_traveled >= fabsf(motion_command.target_rotation))) {
 80012d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001444 <update_kinematics_control+0x228>)
 80012d4:	edd3 7a03 	vldr	s15, [r3, #12]
        if ((motion_command.target_distance > 0 && distance_traveled >= motion_command.target_distance) ||
 80012d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	d01d      	beq.n	800131e <update_kinematics_control+0x102>
            (motion_command.target_rotation != 0 && angle_traveled >= fabsf(motion_command.target_rotation))) {
 80012e2:	4b58      	ldr	r3, [pc, #352]	@ (8001444 <update_kinematics_control+0x228>)
 80012e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80012e8:	eef0 7ae7 	vabs.f32	s15, s15
 80012ec:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80012f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	db11      	blt.n	800131e <update_kinematics_control+0x102>

            motion_command.motion_active = 0;
 80012fa:	4b52      	ldr	r3, [pc, #328]	@ (8001444 <update_kinematics_control+0x228>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	741a      	strb	r2, [r3, #16]
            motion_command.motion_complete = 1;
 8001300:	4b50      	ldr	r3, [pc, #320]	@ (8001444 <update_kinematics_control+0x228>)
 8001302:	2201      	movs	r2, #1
 8001304:	745a      	strb	r2, [r3, #17]
            target_robot_velocity.vx = 0;
 8001306:	4b54      	ldr	r3, [pc, #336]	@ (8001458 <update_kinematics_control+0x23c>)
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
            target_robot_velocity.vy = 0;
 800130e:	4b52      	ldr	r3, [pc, #328]	@ (8001458 <update_kinematics_control+0x23c>)
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
            target_robot_velocity.wz = 0;
 8001316:	4b50      	ldr	r3, [pc, #320]	@ (8001458 <update_kinematics_control+0x23c>)
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
        }
    }

    // PID control for velocity
    float dt = LOOP_INTERVAL;
 800131e:	4b4f      	ldr	r3, [pc, #316]	@ (800145c <update_kinematics_control+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c

    float control_vx = calculate_pid(&pid_vx, target_robot_velocity.vx, current_robot_velocity.vx, dt);
 8001324:	4b4c      	ldr	r3, [pc, #304]	@ (8001458 <update_kinematics_control+0x23c>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	4b4d      	ldr	r3, [pc, #308]	@ (8001460 <update_kinematics_control+0x244>)
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	ed97 1a0f 	vldr	s2, [r7, #60]	@ 0x3c
 8001334:	eef0 0a47 	vmov.f32	s1, s14
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	4849      	ldr	r0, [pc, #292]	@ (8001464 <update_kinematics_control+0x248>)
 800133e:	f000 fa9e 	bl	800187e <calculate_pid>
 8001342:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
    float control_vy = calculate_pid(&pid_vy, target_robot_velocity.vy, current_robot_velocity.vy, dt);
 8001346:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <update_kinematics_control+0x23c>)
 8001348:	edd3 7a01 	vldr	s15, [r3, #4]
 800134c:	4b44      	ldr	r3, [pc, #272]	@ (8001460 <update_kinematics_control+0x244>)
 800134e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001352:	ed97 1a0f 	vldr	s2, [r7, #60]	@ 0x3c
 8001356:	eef0 0a47 	vmov.f32	s1, s14
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	4842      	ldr	r0, [pc, #264]	@ (8001468 <update_kinematics_control+0x24c>)
 8001360:	f000 fa8d 	bl	800187e <calculate_pid>
 8001364:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    float control_wz = calculate_pid(&pid_wz, target_robot_velocity.wz, current_robot_velocity.wz, dt);
 8001368:	4b3b      	ldr	r3, [pc, #236]	@ (8001458 <update_kinematics_control+0x23c>)
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	4b3c      	ldr	r3, [pc, #240]	@ (8001460 <update_kinematics_control+0x244>)
 8001370:	ed93 7a02 	vldr	s14, [r3, #8]
 8001374:	ed97 1a0f 	vldr	s2, [r7, #60]	@ 0x3c
 8001378:	eef0 0a47 	vmov.f32	s1, s14
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	483a      	ldr	r0, [pc, #232]	@ (800146c <update_kinematics_control+0x250>)
 8001382:	f000 fa7c 	bl	800187e <calculate_pid>
 8001386:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

    // Calculate target wheel velocities
    RobotVelocity control_velocity = {control_vx, control_vy, control_wz};
 800138a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001394:	61fb      	str	r3, [r7, #28]
    float target_wheel_velocities[4];
    calculate_wheel_velocities(control_velocity, target_wheel_velocities);
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	edd7 6a05 	vldr	s13, [r7, #20]
 800139c:	ed97 7a06 	vldr	s14, [r7, #24]
 80013a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a4:	4618      	mov	r0, r3
 80013a6:	eeb0 0a66 	vmov.f32	s0, s13
 80013aa:	eef0 0a47 	vmov.f32	s1, s14
 80013ae:	eeb0 1a67 	vmov.f32	s2, s15
 80013b2:	f7ff fd2d 	bl	8000e10 <calculate_wheel_velocities>

    // Convert to PWM and apply to motors
    float pwm_fl = target_wheel_velocities[0] * PWM_PER_RAD_PER_S / 1000.0f; // Scale down
 80013b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ba:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001470 <update_kinematics_control+0x254>
 80013be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013c2:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001474 <update_kinematics_control+0x258>
 80013c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float pwm_fr = target_wheel_velocities[1] * PWM_PER_RAD_PER_S / 1000.0f;
 80013ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001470 <update_kinematics_control+0x254>
 80013d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001474 <update_kinematics_control+0x258>
 80013de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float pwm_rl = target_wheel_velocities[2] * PWM_PER_RAD_PER_S / 1000.0f;
 80013e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ea:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001470 <update_kinematics_control+0x254>
 80013ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001474 <update_kinematics_control+0x258>
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float pwm_rr = target_wheel_velocities[3] * PWM_PER_RAD_PER_S / 1000.0f;
 80013fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001402:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001470 <update_kinematics_control+0x254>
 8001406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8001474 <update_kinematics_control+0x258>
 800140e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001412:	edc7 7a08 	vstr	s15, [r7, #32]

    // Apply PWM to motors
    setForwardLeftMotorPWM(pwm_fl);
 8001416:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800141a:	f000 ffa3 	bl	8002364 <setForwardLeftMotorPWM>
    setForwardRightMotorPWM(pwm_fr);
 800141e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001422:	f000 ffe1 	bl	80023e8 <setForwardRightMotorPWM>
    setRearLeftMotorPWM(pwm_rl);
 8001426:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800142a:	f001 f81f 	bl	800246c <setRearLeftMotorPWM>
    setRearRightMotorPWM(pwm_rr);
 800142e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001432:	f001 f85d 	bl	80024f0 <setRearRightMotorPWM>
}
 8001436:	bf00      	nop
 8001438:	3748      	adds	r7, #72	@ 0x48
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000013c 	.word	0x2000013c
 8001444:	200000c4 	.word	0x200000c4
 8001448:	200000b8 	.word	0x200000b8
 800144c:	2000012c 	.word	0x2000012c
 8001450:	20000130 	.word	0x20000130
 8001454:	20000134 	.word	0x20000134
 8001458:	200000ac 	.word	0x200000ac
 800145c:	08006828 	.word	0x08006828
 8001460:	200000a0 	.word	0x200000a0
 8001464:	200000d8 	.word	0x200000d8
 8001468:	200000f4 	.word	0x200000f4
 800146c:	20000110 	.word	0x20000110
 8001470:	42c80000 	.word	0x42c80000
 8001474:	447a0000 	.word	0x447a0000

08001478 <move_robot_distance_direction>:
    target_robot_velocity.vy = vy;
    target_robot_velocity.wz = wz;
    motion_command.motion_active = 0;
}

void move_robot_distance_direction(float distance, float angle_deg, float speed) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001482:	edc7 0a02 	vstr	s1, [r7, #8]
 8001486:	ed87 1a01 	vstr	s2, [r7, #4]
    // Convert angle to radians
    float angle_rad = angle_deg * RADIANS_PER_DEGREE;
 800148a:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <move_robot_distance_direction+0xb8>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ed97 7a02 	vldr	s14, [r7, #8]
 8001494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001498:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate velocity components
    float vx = speed * cosf(angle_rad);
 800149c:	ed97 0a07 	vldr	s0, [r7, #28]
 80014a0:	f004 fc3a 	bl	8005d18 <cosf>
 80014a4:	eeb0 7a40 	vmov.f32	s14, s0
 80014a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b0:	edc7 7a06 	vstr	s15, [r7, #24]
    float vy = speed * sinf(angle_rad);
 80014b4:	ed97 0a07 	vldr	s0, [r7, #28]
 80014b8:	f004 fc72 	bl	8005da0 <sinf>
 80014bc:	eeb0 7a40 	vmov.f32	s14, s0
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c8:	edc7 7a05 	vstr	s15, [r7, #20]

    // Set target velocity
    target_robot_velocity.vx = vx;
 80014cc:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <move_robot_distance_direction+0xbc>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6013      	str	r3, [r2, #0]
    target_robot_velocity.vy = vy;
 80014d2:	4a18      	ldr	r2, [pc, #96]	@ (8001534 <move_robot_distance_direction+0xbc>)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	6053      	str	r3, [r2, #4]
    target_robot_velocity.wz = 0;
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <move_robot_distance_direction+0xbc>)
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	609a      	str	r2, [r3, #8]

    // Set motion command
    motion_command.target_distance = distance;
 80014e0:	4a15      	ldr	r2, [pc, #84]	@ (8001538 <move_robot_distance_direction+0xc0>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6013      	str	r3, [r2, #0]
    motion_command.target_angle = angle_rad;
 80014e6:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <move_robot_distance_direction+0xc0>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	6053      	str	r3, [r2, #4]
    motion_command.target_speed = speed;
 80014ec:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <move_robot_distance_direction+0xc0>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6093      	str	r3, [r2, #8]
    motion_command.target_rotation = 0;
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <move_robot_distance_direction+0xc0>)
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
    motion_command.motion_active = 1;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <move_robot_distance_direction+0xc0>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	741a      	strb	r2, [r3, #16]
    motion_command.motion_complete = 0;
 8001500:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <move_robot_distance_direction+0xc0>)
 8001502:	2200      	movs	r2, #0
 8001504:	745a      	strb	r2, [r3, #17]

    // Store starting position
    start_position_x = current_robot_position.x;
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <move_robot_distance_direction+0xc4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a0d      	ldr	r2, [pc, #52]	@ (8001540 <move_robot_distance_direction+0xc8>)
 800150c:	6013      	str	r3, [r2, #0]
    start_position_y = current_robot_position.y;
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <move_robot_distance_direction+0xc4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4a0c      	ldr	r2, [pc, #48]	@ (8001544 <move_robot_distance_direction+0xcc>)
 8001514:	6013      	str	r3, [r2, #0]
    start_theta = current_robot_position.theta;
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <move_robot_distance_direction+0xc4>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <move_robot_distance_direction+0xd0>)
 800151c:	6013      	str	r3, [r2, #0]
    motion_start_time = current_time;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <move_robot_distance_direction+0xd4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <move_robot_distance_direction+0xd8>)
 8001524:	6013      	str	r3, [r2, #0]
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	08006820 	.word	0x08006820
 8001534:	200000ac 	.word	0x200000ac
 8001538:	200000c4 	.word	0x200000c4
 800153c:	200000b8 	.word	0x200000b8
 8001540:	2000012c 	.word	0x2000012c
 8001544:	20000130 	.word	0x20000130
 8001548:	20000134 	.word	0x20000134
 800154c:	2000013c 	.word	0x2000013c
 8001550:	20000138 	.word	0x20000138

08001554 <rotate_robot>:

void rotate_robot(float angle_deg, float angular_speed) {
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	ed87 0a01 	vstr	s0, [r7, #4]
 800155e:	edc7 0a00 	vstr	s1, [r7]
    // Convert to radians
    float angle_rad = angle_deg * RADIANS_PER_DEGREE;
 8001562:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <rotate_robot+0xbc>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	ed97 7a01 	vldr	s14, [r7, #4]
 800156c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001570:	edc7 7a03 	vstr	s15, [r7, #12]
    float angular_speed_rad = angular_speed * RADIANS_PER_DEGREE;
 8001574:	4b26      	ldr	r3, [pc, #152]	@ (8001610 <rotate_robot+0xbc>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ed97 7a00 	vldr	s14, [r7]
 800157e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001582:	edc7 7a02 	vstr	s15, [r7, #8]

    // Set target velocity
    target_robot_velocity.vx = 0;
 8001586:	4b23      	ldr	r3, [pc, #140]	@ (8001614 <rotate_robot+0xc0>)
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    target_robot_velocity.vy = 0;
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <rotate_robot+0xc0>)
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
    target_robot_velocity.wz = (angle_rad > 0) ? angular_speed_rad : -angular_speed_rad;
 8001596:	edd7 7a03 	vldr	s15, [r7, #12]
 800159a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	dd02      	ble.n	80015aa <rotate_robot+0x56>
 80015a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a8:	e003      	b.n	80015b2 <rotate_robot+0x5e>
 80015aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ae:	eef1 7a67 	vneg.f32	s15, s15
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <rotate_robot+0xc0>)
 80015b4:	edc3 7a02 	vstr	s15, [r3, #8]

    // Set motion command
    motion_command.target_distance = 0;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <rotate_robot+0xc4>)
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
    motion_command.target_angle = 0;
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <rotate_robot+0xc4>)
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
    motion_command.target_speed = 0;
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <rotate_robot+0xc4>)
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
    motion_command.target_rotation = angle_rad;
 80015d0:	4a11      	ldr	r2, [pc, #68]	@ (8001618 <rotate_robot+0xc4>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	60d3      	str	r3, [r2, #12]
    motion_command.motion_active = 1;
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <rotate_robot+0xc4>)
 80015d8:	2201      	movs	r2, #1
 80015da:	741a      	strb	r2, [r3, #16]
    motion_command.motion_complete = 0;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <rotate_robot+0xc4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	745a      	strb	r2, [r3, #17]

    // Store starting position
    start_position_x = current_robot_position.x;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <rotate_robot+0xc8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <rotate_robot+0xcc>)
 80015e8:	6013      	str	r3, [r2, #0]
    start_position_y = current_robot_position.y;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <rotate_robot+0xc8>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <rotate_robot+0xd0>)
 80015f0:	6013      	str	r3, [r2, #0]
    start_theta = current_robot_position.theta;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <rotate_robot+0xc8>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001628 <rotate_robot+0xd4>)
 80015f8:	6013      	str	r3, [r2, #0]
    motion_start_time = current_time;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <rotate_robot+0xd8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <rotate_robot+0xdc>)
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	08006820 	.word	0x08006820
 8001614:	200000ac 	.word	0x200000ac
 8001618:	200000c4 	.word	0x200000c4
 800161c:	200000b8 	.word	0x200000b8
 8001620:	2000012c 	.word	0x2000012c
 8001624:	20000130 	.word	0x20000130
 8001628:	20000134 	.word	0x20000134
 800162c:	2000013c 	.word	0x2000013c
 8001630:	20000138 	.word	0x20000138

08001634 <stop_robot>:

void stop_robot(void) {
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
    target_robot_velocity.vx = 0;
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <stop_robot+0x34>)
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
    target_robot_velocity.vy = 0;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <stop_robot+0x34>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
    target_robot_velocity.wz = 0;
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <stop_robot+0x34>)
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    motion_command.motion_active = 0;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <stop_robot+0x38>)
 8001652:	2200      	movs	r2, #0
 8001654:	741a      	strb	r2, [r3, #16]
    motion_command.motion_complete = 1;
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <stop_robot+0x38>)
 8001658:	2201      	movs	r2, #1
 800165a:	745a      	strb	r2, [r3, #17]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200000ac 	.word	0x200000ac
 800166c:	200000c4 	.word	0x200000c4

08001670 <is_motion_complete>:

uint8_t is_motion_complete(void) {
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
    return motion_command.motion_complete;
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <is_motion_complete+0x14>)
 8001676:	7c5b      	ldrb	r3, [r3, #17]
 8001678:	b2db      	uxtb	r3, r3
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	200000c4 	.word	0x200000c4

08001688 <update_demo_sequence>:

void update_demo_sequence(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
    if (!demo_active) return;
 800168c:	4b5b      	ldr	r3, [pc, #364]	@ (80017fc <update_demo_sequence+0x174>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a3 	beq.w	80017dc <update_demo_sequence+0x154>

    demo_timer++;
 8001696:	4b5a      	ldr	r3, [pc, #360]	@ (8001800 <update_demo_sequence+0x178>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	4a58      	ldr	r2, [pc, #352]	@ (8001800 <update_demo_sequence+0x178>)
 800169e:	6013      	str	r3, [r2, #0]

    // Demo sequence: Move in different directions to test Mecanum wheels
    switch (demo_step) {
 80016a0:	4b58      	ldr	r3, [pc, #352]	@ (8001804 <update_demo_sequence+0x17c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	f200 80a8 	bhi.w	80017fa <update_demo_sequence+0x172>
 80016aa:	a201      	add	r2, pc, #4	@ (adr r2, 80016b0 <update_demo_sequence+0x28>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	080016cd 	.word	0x080016cd
 80016b4:	080016fd 	.word	0x080016fd
 80016b8:	08001725 	.word	0x08001725
 80016bc:	0800174d 	.word	0x0800174d
 80016c0:	08001775 	.word	0x08001775
 80016c4:	08001799 	.word	0x08001799
 80016c8:	080017c1 	.word	0x080017c1
        case 0:
            if (demo_timer > 2000) { // Wait 2 seconds
 80016cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001800 <update_demo_sequence+0x178>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80016d4:	f240 8084 	bls.w	80017e0 <update_demo_sequence+0x158>
                move_robot_distance_direction(500, 0, 200); // Forward 500mm at 200mm/s
 80016d8:	ed9f 1a4b 	vldr	s2, [pc, #300]	@ 8001808 <update_demo_sequence+0x180>
 80016dc:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 800180c <update_demo_sequence+0x184>
 80016e0:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8001810 <update_demo_sequence+0x188>
 80016e4:	f7ff fec8 	bl	8001478 <move_robot_distance_direction>
                demo_step++;
 80016e8:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <update_demo_sequence+0x17c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b44      	ldr	r3, [pc, #272]	@ (8001804 <update_demo_sequence+0x17c>)
 80016f2:	701a      	strb	r2, [r3, #0]
                demo_timer = 0;
 80016f4:	4b42      	ldr	r3, [pc, #264]	@ (8001800 <update_demo_sequence+0x178>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
            }
            break;
 80016fa:	e071      	b.n	80017e0 <update_demo_sequence+0x158>

        case 1:
            if (is_motion_complete()) {
 80016fc:	f7ff ffb8 	bl	8001670 <is_motion_complete>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d06e      	beq.n	80017e4 <update_demo_sequence+0x15c>
                move_robot_distance_direction(500, 90, 200); // Left 500mm
 8001706:	ed9f 1a40 	vldr	s2, [pc, #256]	@ 8001808 <update_demo_sequence+0x180>
 800170a:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001814 <update_demo_sequence+0x18c>
 800170e:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001810 <update_demo_sequence+0x188>
 8001712:	f7ff feb1 	bl	8001478 <move_robot_distance_direction>
                demo_step++;
 8001716:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <update_demo_sequence+0x17c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <update_demo_sequence+0x17c>)
 8001720:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001722:	e05f      	b.n	80017e4 <update_demo_sequence+0x15c>

        case 2:
            if (is_motion_complete()) {
 8001724:	f7ff ffa4 	bl	8001670 <is_motion_complete>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d05c      	beq.n	80017e8 <update_demo_sequence+0x160>
                move_robot_distance_direction(500, 180, 200); // Backward 500mm
 800172e:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8001808 <update_demo_sequence+0x180>
 8001732:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001818 <update_demo_sequence+0x190>
 8001736:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8001810 <update_demo_sequence+0x188>
 800173a:	f7ff fe9d 	bl	8001478 <move_robot_distance_direction>
                demo_step++;
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <update_demo_sequence+0x17c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <update_demo_sequence+0x17c>)
 8001748:	701a      	strb	r2, [r3, #0]
            }
            break;
 800174a:	e04d      	b.n	80017e8 <update_demo_sequence+0x160>

        case 3:
            if (is_motion_complete()) {
 800174c:	f7ff ff90 	bl	8001670 <is_motion_complete>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04a      	beq.n	80017ec <update_demo_sequence+0x164>
                move_robot_distance_direction(500, 270, 200); // Right 500mm
 8001756:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8001808 <update_demo_sequence+0x180>
 800175a:	eddf 0a30 	vldr	s1, [pc, #192]	@ 800181c <update_demo_sequence+0x194>
 800175e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001810 <update_demo_sequence+0x188>
 8001762:	f7ff fe89 	bl	8001478 <move_robot_distance_direction>
                demo_step++;
 8001766:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <update_demo_sequence+0x17c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b25      	ldr	r3, [pc, #148]	@ (8001804 <update_demo_sequence+0x17c>)
 8001770:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001772:	e03b      	b.n	80017ec <update_demo_sequence+0x164>

        case 4:
            if (is_motion_complete()) {
 8001774:	f7ff ff7c 	bl	8001670 <is_motion_complete>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d038      	beq.n	80017f0 <update_demo_sequence+0x168>
                rotate_robot(90, 45); // Rotate 90 degrees at 45 deg/s
 800177e:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001820 <update_demo_sequence+0x198>
 8001782:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001814 <update_demo_sequence+0x18c>
 8001786:	f7ff fee5 	bl	8001554 <rotate_robot>
                demo_step++;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <update_demo_sequence+0x17c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <update_demo_sequence+0x17c>)
 8001794:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001796:	e02b      	b.n	80017f0 <update_demo_sequence+0x168>

        case 5:
            if (is_motion_complete()) {
 8001798:	f7ff ff6a 	bl	8001670 <is_motion_complete>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d028      	beq.n	80017f4 <update_demo_sequence+0x16c>
                move_robot_distance_direction(707, 45, 200); // Diagonal movement
 80017a2:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8001808 <update_demo_sequence+0x180>
 80017a6:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8001820 <update_demo_sequence+0x198>
 80017aa:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001824 <update_demo_sequence+0x19c>
 80017ae:	f7ff fe63 	bl	8001478 <move_robot_distance_direction>
                demo_step++;
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <update_demo_sequence+0x17c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <update_demo_sequence+0x17c>)
 80017bc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017be:	e019      	b.n	80017f4 <update_demo_sequence+0x16c>

        case 6:
            if (is_motion_complete()) {
 80017c0:	f7ff ff56 	bl	8001670 <is_motion_complete>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d016      	beq.n	80017f8 <update_demo_sequence+0x170>
                stop_robot();
 80017ca:	f7ff ff33 	bl	8001634 <stop_robot>
                demo_step = 0; // Restart demo
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <update_demo_sequence+0x17c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
                demo_timer = 0;
 80017d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <update_demo_sequence+0x178>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
            }
            break;
 80017da:	e00d      	b.n	80017f8 <update_demo_sequence+0x170>
    if (!demo_active) return;
 80017dc:	bf00      	nop
 80017de:	e00c      	b.n	80017fa <update_demo_sequence+0x172>
            break;
 80017e0:	bf00      	nop
 80017e2:	e00a      	b.n	80017fa <update_demo_sequence+0x172>
            break;
 80017e4:	bf00      	nop
 80017e6:	e008      	b.n	80017fa <update_demo_sequence+0x172>
            break;
 80017e8:	bf00      	nop
 80017ea:	e006      	b.n	80017fa <update_demo_sequence+0x172>
            break;
 80017ec:	bf00      	nop
 80017ee:	e004      	b.n	80017fa <update_demo_sequence+0x172>
            break;
 80017f0:	bf00      	nop
 80017f2:	e002      	b.n	80017fa <update_demo_sequence+0x172>
            break;
 80017f4:	bf00      	nop
 80017f6:	e000      	b.n	80017fa <update_demo_sequence+0x172>
            break;
 80017f8:	bf00      	nop
    }
}
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000148 	.word	0x20000148
 8001800:	20000144 	.word	0x20000144
 8001804:	20000140 	.word	0x20000140
 8001808:	43480000 	.word	0x43480000
 800180c:	00000000 	.word	0x00000000
 8001810:	43fa0000 	.word	0x43fa0000
 8001814:	42b40000 	.word	0x42b40000
 8001818:	43340000 	.word	0x43340000
 800181c:	43870000 	.word	0x43870000
 8001820:	42340000 	.word	0x42340000
 8001824:	4430c000 	.word	0x4430c000

08001828 <init_pid_controller>:

// PID Controller Implementation
void init_pid_controller(PIDController *pid, float kp, float ki, float kd, float min_out, float max_out) {
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6178      	str	r0, [r7, #20]
 8001830:	ed87 0a04 	vstr	s0, [r7, #16]
 8001834:	edc7 0a03 	vstr	s1, [r7, #12]
 8001838:	ed87 1a02 	vstr	s2, [r7, #8]
 800183c:	edc7 1a01 	vstr	s3, [r7, #4]
 8001840:	ed87 2a00 	vstr	s4, [r7]
    pid->kp = kp;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	609a      	str	r2, [r3, #8]
    pid->integral = 0;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
    pid->output_min = min_out;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	615a      	str	r2, [r3, #20]
    pid->output_max = max_out;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	619a      	str	r2, [r3, #24]
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <calculate_pid>:

float calculate_pid(PIDController *pid, float setpoint, float measured_value, float dt) {
 800187e:	b480      	push	{r7}
 8001880:	b08b      	sub	sp, #44	@ 0x2c
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	ed87 0a02 	vstr	s0, [r7, #8]
 800188a:	edc7 0a01 	vstr	s1, [r7, #4]
 800188e:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - measured_value;
 8001892:	ed97 7a02 	vldr	s14, [r7, #8]
 8001896:	edd7 7a01 	vldr	s15, [r7, #4]
 800189a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189e:	edc7 7a08 	vstr	s15, [r7, #32]

    // Proportional term
    float proportional = pid->kp * error;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80018ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b0:	edc7 7a07 	vstr	s15, [r7, #28]

    // Integral term
    pid->integral += error * dt;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ba:	edd7 6a08 	vldr	s13, [r7, #32]
 80018be:	edd7 7a00 	vldr	s15, [r7]
 80018c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	edc3 7a03 	vstr	s15, [r3, #12]
    float integral = pid->ki * pid->integral;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80018dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e0:	edc7 7a06 	vstr	s15, [r7, #24]

    // Derivative term
    float derivative = pid->kd * (error - pid->prev_error) / dt;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80018f0:	edd7 6a08 	vldr	s13, [r7, #32]
 80018f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018fc:	ed97 7a00 	vldr	s14, [r7]
 8001900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001904:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->prev_error = error;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a3a      	ldr	r2, [r7, #32]
 800190c:	611a      	str	r2, [r3, #16]

    // Calculate output
    float output = proportional + integral + derivative;
 800190e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001912:	edd7 7a06 	vldr	s15, [r7, #24]
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	ed97 7a05 	vldr	s14, [r7, #20]
 800191e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001922:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Apply output limits
    if (output > pid->output_max) {
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	edd3 7a06 	vldr	s15, [r3, #24]
 800192c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	dd11      	ble.n	800195e <calculate_pid+0xe0>
        output = pid->output_max;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
        pid->integral -= error * dt; // Anti-windup
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	ed93 7a03 	vldr	s14, [r3, #12]
 8001946:	edd7 6a08 	vldr	s13, [r7, #32]
 800194a:	edd7 7a00 	vldr	s15, [r7]
 800194e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	edc3 7a03 	vstr	s15, [r3, #12]
 800195c:	e01a      	b.n	8001994 <calculate_pid+0x116>
    } else if (output < pid->output_min) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	edd3 7a05 	vldr	s15, [r3, #20]
 8001964:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d510      	bpl.n	8001994 <calculate_pid+0x116>
        output = pid->output_min;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
        pid->integral -= error * dt; // Anti-windup
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	ed93 7a03 	vldr	s14, [r3, #12]
 800197e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001982:	edd7 7a00 	vldr	s15, [r7]
 8001986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    return output;
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	ee07 3a90 	vmov	s15, r3
}
 800199a:	eeb0 0a67 	vmov.f32	s0, s15
 800199e:	372c      	adds	r7, #44	@ 0x2c
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ae:	f001 f975 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f8e1 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f000 fc0b 	bl	80021d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019ba:	f000 fbb5 	bl	8002128 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80019be:	f000 f94d 	bl	8001c5c <MX_ADC1_Init>
  MX_TIM1_Init();
 80019c2:	f000 f99d 	bl	8001d00 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019c6:	f000 fa5f 	bl	8001e88 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019ca:	f000 fab1 	bl	8001f30 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019ce:	f000 fb03 	bl	8001fd8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80019d2:	f000 fb55 	bl	8002080 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80019d6:	f000 fbd1 	bl	800217c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019da:	2100      	movs	r1, #0
 80019dc:	4854      	ldr	r0, [pc, #336]	@ (8001b30 <main+0x188>)
 80019de:	f002 fde1 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019e2:	2104      	movs	r1, #4
 80019e4:	4852      	ldr	r0, [pc, #328]	@ (8001b30 <main+0x188>)
 80019e6:	f002 fddd 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80019ea:	2108      	movs	r1, #8
 80019ec:	4850      	ldr	r0, [pc, #320]	@ (8001b30 <main+0x188>)
 80019ee:	f002 fdd9 	bl	80045a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019f2:	210c      	movs	r1, #12
 80019f4:	484e      	ldr	r0, [pc, #312]	@ (8001b30 <main+0x188>)
 80019f6:	f002 fdd5 	bl	80045a4 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80019fa:	213c      	movs	r1, #60	@ 0x3c
 80019fc:	484d      	ldr	r0, [pc, #308]	@ (8001b34 <main+0x18c>)
 80019fe:	f002 ff3f 	bl	8004880 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a02:	213c      	movs	r1, #60	@ 0x3c
 8001a04:	484c      	ldr	r0, [pc, #304]	@ (8001b38 <main+0x190>)
 8001a06:	f002 ff3b 	bl	8004880 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001a0a:	213c      	movs	r1, #60	@ 0x3c
 8001a0c:	484b      	ldr	r0, [pc, #300]	@ (8001b3c <main+0x194>)
 8001a0e:	f002 ff37 	bl	8004880 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001a12:	213c      	movs	r1, #60	@ 0x3c
 8001a14:	484a      	ldr	r0, [pc, #296]	@ (8001b40 <main+0x198>)
 8001a16:	f002 ff33 	bl	8004880 <HAL_TIM_Encoder_Start>

  // Initialize kinematics system
  init_kinematics();
 8001a1a:	f7ff f97b 	bl	8000d14 <init_kinematics>

  // Reset encoders
  resetEncoders();
 8001a1e:	f7ff f84d 	bl	8000abc <resetEncoders>
    /* USER CODE BEGIN 3 */
	 // Wait for demo sequence to complete, then execute custom movements
	 static uint32_t custom_demo_timer = 0;
	 static uint8_t custom_step = 0;

	 custom_demo_timer++;
 8001a22:	4b48      	ldr	r3, [pc, #288]	@ (8001b44 <main+0x19c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a46      	ldr	r2, [pc, #280]	@ (8001b44 <main+0x19c>)
 8001a2a:	6013      	str	r3, [r2, #0]

	 // After 30 seconds of demo, start custom movements
	 if (custom_demo_timer > 30000) {
 8001a2c:	4b45      	ldr	r3, [pc, #276]	@ (8001b44 <main+0x19c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d96f      	bls.n	8001b18 <main+0x170>
		 switch (custom_step) {
 8001a38:	4b43      	ldr	r3, [pc, #268]	@ (8001b48 <main+0x1a0>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d86b      	bhi.n	8001b18 <main+0x170>
 8001a40:	a201      	add	r2, pc, #4	@ (adr r2, 8001a48 <main+0xa0>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a5d 	.word	0x08001a5d
 8001a4c:	08001a7b 	.word	0x08001a7b
 8001a50:	08001aa3 	.word	0x08001aa3
 8001a54:	08001ac7 	.word	0x08001ac7
 8001a58:	08001aef 	.word	0x08001aef
			 case 0:
				 // Move forward 1 meter at 300mm/s
				 move_robot_distance_direction(1000, 0, 300);
 8001a5c:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 8001b4c <main+0x1a4>
 8001a60:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8001b50 <main+0x1a8>
 8001a64:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001b54 <main+0x1ac>
 8001a68:	f7ff fd06 	bl	8001478 <move_robot_distance_direction>
				 custom_step++;
 8001a6c:	4b36      	ldr	r3, [pc, #216]	@ (8001b48 <main+0x1a0>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <main+0x1a0>)
 8001a76:	701a      	strb	r2, [r3, #0]
				 break;
 8001a78:	e04e      	b.n	8001b18 <main+0x170>

			 case 1:
				 if (is_motion_complete()) {
 8001a7a:	f7ff fdf9 	bl	8001670 <is_motion_complete>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d042      	beq.n	8001b0a <main+0x162>
					 // Strafe right 500mm at 200mm/s
					 move_robot_distance_direction(500, 270, 200); // 270° = right
 8001a84:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8001b58 <main+0x1b0>
 8001a88:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001b5c <main+0x1b4>
 8001a8c:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001b60 <main+0x1b8>
 8001a90:	f7ff fcf2 	bl	8001478 <move_robot_distance_direction>
					 custom_step++;
 8001a94:	4b2c      	ldr	r3, [pc, #176]	@ (8001b48 <main+0x1a0>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <main+0x1a0>)
 8001a9e:	701a      	strb	r2, [r3, #0]
				 }
				 break;
 8001aa0:	e033      	b.n	8001b0a <main+0x162>

			 case 2:
				 if (is_motion_complete()) {
 8001aa2:	f7ff fde5 	bl	8001670 <is_motion_complete>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d030      	beq.n	8001b0e <main+0x166>
					 // Rotate 180 degrees at 60 deg/s
					 rotate_robot(180, 60);
 8001aac:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001b64 <main+0x1bc>
 8001ab0:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001b68 <main+0x1c0>
 8001ab4:	f7ff fd4e 	bl	8001554 <rotate_robot>
					 custom_step++;
 8001ab8:	4b23      	ldr	r3, [pc, #140]	@ (8001b48 <main+0x1a0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <main+0x1a0>)
 8001ac2:	701a      	strb	r2, [r3, #0]
				 }
				 break;
 8001ac4:	e023      	b.n	8001b0e <main+0x166>

			 case 3:
				 if (is_motion_complete()) {
 8001ac6:	f7ff fdd3 	bl	8001670 <is_motion_complete>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <main+0x16a>
					 // Move diagonally (45 degrees) 707mm at 250mm/s
					 move_robot_distance_direction(707, 45, 250);
 8001ad0:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8001b6c <main+0x1c4>
 8001ad4:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001b70 <main+0x1c8>
 8001ad8:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001b74 <main+0x1cc>
 8001adc:	f7ff fccc 	bl	8001478 <move_robot_distance_direction>
					 custom_step++;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <main+0x1a0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <main+0x1a0>)
 8001aea:	701a      	strb	r2, [r3, #0]
				 }
				 break;
 8001aec:	e011      	b.n	8001b12 <main+0x16a>

			 case 4:
				 if (is_motion_complete()) {
 8001aee:	f7ff fdbf 	bl	8001670 <is_motion_complete>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00e      	beq.n	8001b16 <main+0x16e>
					 // Stop and reset
					 stop_robot();
 8001af8:	f7ff fd9c 	bl	8001634 <stop_robot>
					 custom_step = 0;
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <main+0x1a0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
					 custom_demo_timer = 0;
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <main+0x19c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
				 }
				 break;
 8001b08:	e005      	b.n	8001b16 <main+0x16e>
				 break;
 8001b0a:	bf00      	nop
 8001b0c:	e004      	b.n	8001b18 <main+0x170>
				 break;
 8001b0e:	bf00      	nop
 8001b10:	e002      	b.n	8001b18 <main+0x170>
				 break;
 8001b12:	bf00      	nop
 8001b14:	e000      	b.n	8001b18 <main+0x170>
				 break;
 8001b16:	bf00      	nop
		 }
	 }
	 for (volatile int i = 0; i < 10000; i++);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	e002      	b.n	8001b24 <main+0x17c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3301      	adds	r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	ddf7      	ble.n	8001b1e <main+0x176>
  {
 8001b2e:	e778      	b.n	8001a22 <main+0x7a>
 8001b30:	20000194 	.word	0x20000194
 8001b34:	200001dc 	.word	0x200001dc
 8001b38:	20000224 	.word	0x20000224
 8001b3c:	2000026c 	.word	0x2000026c
 8001b40:	200002b4 	.word	0x200002b4
 8001b44:	2000038c 	.word	0x2000038c
 8001b48:	20000390 	.word	0x20000390
 8001b4c:	43960000 	.word	0x43960000
 8001b50:	00000000 	.word	0x00000000
 8001b54:	447a0000 	.word	0x447a0000
 8001b58:	43480000 	.word	0x43480000
 8001b5c:	43870000 	.word	0x43870000
 8001b60:	43fa0000 	.word	0x43fa0000
 8001b64:	42700000 	.word	0x42700000
 8001b68:	43340000 	.word	0x43340000
 8001b6c:	437a0000 	.word	0x437a0000
 8001b70:	42340000 	.word	0x42340000
 8001b74:	4430c000 	.word	0x4430c000

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	@ 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	2234      	movs	r2, #52	@ 0x34
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f876 	bl	8005c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 0308 	add.w	r3, r7, #8
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bac:	4b29      	ldr	r3, [pc, #164]	@ (8001c54 <SystemClock_Config+0xdc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <SystemClock_Config+0xe0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a25      	ldr	r2, [pc, #148]	@ (8001c58 <SystemClock_Config+0xe0>)
 8001bc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b23      	ldr	r3, [pc, #140]	@ (8001c58 <SystemClock_Config+0xe0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bdc:	2310      	movs	r3, #16
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be0:	2302      	movs	r3, #2
 8001be2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001be8:	2308      	movs	r3, #8
 8001bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001bec:	23b4      	movs	r3, #180	@ 0xb4
 8001bee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 f989 	bl	8003f18 <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c0c:	f000 fb7c 	bl	8002308 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c10:	f001 fde8 	bl	80037e4 <HAL_PWREx_EnableOverDrive>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c1a:	f000 fb75 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1e:	230f      	movs	r3, #15
 8001c20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c22:	2302      	movs	r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c2a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c34:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	2105      	movs	r1, #5
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 fe21 	bl	8003884 <HAL_RCC_ClockConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c48:	f000 fb5e 	bl	8002308 <Error_Handler>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	3750      	adds	r7, #80	@ 0x50
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000

08001c5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c62:	463b      	mov	r3, r7
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001c70:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <MX_ADC1_Init+0x9c>)
 8001c72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c74:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001c76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c82:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c8e:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001c9e:	4a17      	ldr	r2, [pc, #92]	@ (8001cfc <MX_ADC1_Init+0xa0>)
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cbc:	480d      	ldr	r0, [pc, #52]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001cbe:	f001 f85f 	bl	8002d80 <HAL_ADC_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cc8:	f000 fb1e 	bl	8002308 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <MX_ADC1_Init+0x98>)
 8001cde:	f001 f893 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ce8:	f000 fb0e 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000014c 	.word	0x2000014c
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	0f000001 	.word	0x0f000001

08001d00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b096      	sub	sp, #88	@ 0x58
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2220      	movs	r2, #32
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 ff9d 	bl	8005c78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d3e:	4b50      	ldr	r3, [pc, #320]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d40:	4a50      	ldr	r2, [pc, #320]	@ (8001e84 <MX_TIM1_Init+0x184>)
 8001d42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d44:	4b4e      	ldr	r3, [pc, #312]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001d50:	4b4b      	ldr	r3, [pc, #300]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d52:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001d56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d58:	4b49      	ldr	r3, [pc, #292]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d5e:	4b48      	ldr	r3, [pc, #288]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b46      	ldr	r3, [pc, #280]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d6a:	4845      	ldr	r0, [pc, #276]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d6c:	f002 fb72 	bl	8004454 <HAL_TIM_Base_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d76:	f000 fac7 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d84:	4619      	mov	r1, r3
 8001d86:	483e      	ldr	r0, [pc, #248]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d88:	f002 ffba 	bl	8004d00 <HAL_TIM_ConfigClockSource>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d92:	f000 fab9 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d96:	483a      	ldr	r0, [pc, #232]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001d98:	f002 fbab 	bl	80044f2 <HAL_TIM_PWM_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001da2:	f000 fab1 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001db2:	4619      	mov	r1, r3
 8001db4:	4832      	ldr	r0, [pc, #200]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001db6:	f003 fbb9 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001dc0:	f000 faa2 	bl	8002308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc4:	2360      	movs	r3, #96	@ 0x60
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de4:	2200      	movs	r2, #0
 8001de6:	4619      	mov	r1, r3
 8001de8:	4825      	ldr	r0, [pc, #148]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001dea:	f002 fec7 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001df4:	f000 fa88 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481f      	ldr	r0, [pc, #124]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001e02:	f002 febb 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001e0c:	f000 fa7c 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e14:	2208      	movs	r2, #8
 8001e16:	4619      	mov	r1, r3
 8001e18:	4819      	ldr	r0, [pc, #100]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001e1a:	f002 feaf 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001e24:	f000 fa70 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2c:	220c      	movs	r2, #12
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4813      	ldr	r0, [pc, #76]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001e32:	f002 fea3 	bl	8004b7c <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001e3c:	f000 fa64 	bl	8002308 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001e64:	f003 fbde 	bl	8005624 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001e6e:	f000 fa4b 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e72:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <MX_TIM1_Init+0x180>)
 8001e74:	f000 fd36 	bl	80028e4 <HAL_TIM_MspPostInit>

}
 8001e78:	bf00      	nop
 8001e7a:	3758      	adds	r7, #88	@ 0x58
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000194 	.word	0x20000194
 8001e84:	40010000 	.word	0x40010000

08001e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	@ 0x30
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	2224      	movs	r2, #36	@ 0x24
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 feee 	bl	8005c78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <MX_TIM2_Init+0xa4>)
 8001ea6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <MX_TIM2_Init+0xa4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <MX_TIM2_Init+0xa4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f2c <MX_TIM2_Init+0xa4>)
 8001eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <MX_TIM2_Init+0xa4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <MX_TIM2_Init+0xa4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480d      	ldr	r0, [pc, #52]	@ (8001f2c <MX_TIM2_Init+0xa4>)
 8001ef8:	f002 fc1c 	bl	8004734 <HAL_TIM_Encoder_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f02:	f000 fa01 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	@ (8001f2c <MX_TIM2_Init+0xa4>)
 8001f14:	f003 fb0a 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f1e:	f000 f9f3 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	3730      	adds	r7, #48	@ 0x30
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001dc 	.word	0x200001dc

08001f30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	@ 0x30
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	2224      	movs	r2, #36	@ 0x24
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fe9a 	bl	8005c78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f4c:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <MX_TIM3_Init+0xa0>)
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <MX_TIM3_Init+0xa4>)
 8001f50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <MX_TIM3_Init+0xa0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <MX_TIM3_Init+0xa0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <MX_TIM3_Init+0xa0>)
 8001f60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_TIM3_Init+0xa0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <MX_TIM3_Init+0xa0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f72:	2303      	movs	r3, #3
 8001f74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <MX_TIM3_Init+0xa0>)
 8001f9e:	f002 fbc9 	bl	8004734 <HAL_TIM_Encoder_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001fa8:	f000 f9ae 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_TIM3_Init+0xa0>)
 8001fba:	f003 fab7 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fc4:	f000 f9a0 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3730      	adds	r7, #48	@ 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000224 	.word	0x20000224
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	@ 0x30
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2224      	movs	r2, #36	@ 0x24
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 fe46 	bl	8005c78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ff4:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <MX_TIM4_Init+0xa0>)
 8001ff6:	4a21      	ldr	r2, [pc, #132]	@ (800207c <MX_TIM4_Init+0xa4>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <MX_TIM4_Init+0xa0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <MX_TIM4_Init+0xa0>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002006:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_TIM4_Init+0xa0>)
 8002008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800200c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_TIM4_Init+0xa0>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <MX_TIM4_Init+0xa0>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800201a:	2303      	movs	r3, #3
 800201c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002022:	2301      	movs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002032:	2301      	movs	r3, #1
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <MX_TIM4_Init+0xa0>)
 8002046:	f002 fb75 	bl	8004734 <HAL_TIM_Encoder_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002050:	f000 f95a 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_TIM4_Init+0xa0>)
 8002062:	f003 fa63 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800206c:	f000 f94c 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	@ 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000026c 	.word	0x2000026c
 800207c:	40000800 	.word	0x40000800

08002080 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	@ 0x30
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	2224      	movs	r2, #36	@ 0x24
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fdf2 	bl	8005c78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800209c:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <MX_TIM5_Init+0xa0>)
 800209e:	4a21      	ldr	r2, [pc, #132]	@ (8002124 <MX_TIM5_Init+0xa4>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80020a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <MX_TIM5_Init+0xa0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <MX_TIM5_Init+0xa0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <MX_TIM5_Init+0xa0>)
 80020b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <MX_TIM5_Init+0xa0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <MX_TIM5_Init+0xa0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020c2:	2303      	movs	r3, #3
 80020c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ca:	2301      	movs	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020da:	2301      	movs	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	4619      	mov	r1, r3
 80020ec:	480c      	ldr	r0, [pc, #48]	@ (8002120 <MX_TIM5_Init+0xa0>)
 80020ee:	f002 fb21 	bl	8004734 <HAL_TIM_Encoder_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80020f8:	f000 f906 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	@ (8002120 <MX_TIM5_Init+0xa0>)
 800210a:	f003 fa0f 	bl	800552c <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002114:	f000 f8f8 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	3730      	adds	r7, #48	@ 0x30
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200002b4 	.word	0x200002b4
 8002124:	40000c00 	.word	0x40000c00

08002128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <MX_USART2_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_USART2_UART_Init+0x4c>)
 8002160:	f003 fac6 	bl	80056f0 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 f8cd 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200002fc 	.word	0x200002fc
 8002178:	40004400 	.word	0x40004400

0800217c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002182:	4a12      	ldr	r2, [pc, #72]	@ (80021cc <MX_USART3_UART_Init+0x50>)
 8002184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800218c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a0:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021a2:	220c      	movs	r2, #12
 80021a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021b2:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021b4:	f003 fa9c 	bl	80056f0 <HAL_UART_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021be:	f000 f8a3 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000344 	.word	0x20000344
 80021cc:	40004800 	.word	0x40004800

080021d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b43      	ldr	r3, [pc, #268]	@ (80022f8 <MX_GPIO_Init+0x128>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a42      	ldr	r2, [pc, #264]	@ (80022f8 <MX_GPIO_Init+0x128>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <MX_GPIO_Init+0x128>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b3c      	ldr	r3, [pc, #240]	@ (80022f8 <MX_GPIO_Init+0x128>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a3b      	ldr	r2, [pc, #236]	@ (80022f8 <MX_GPIO_Init+0x128>)
 800220c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <MX_GPIO_Init+0x128>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	4b35      	ldr	r3, [pc, #212]	@ (80022f8 <MX_GPIO_Init+0x128>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a34      	ldr	r2, [pc, #208]	@ (80022f8 <MX_GPIO_Init+0x128>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b32      	ldr	r3, [pc, #200]	@ (80022f8 <MX_GPIO_Init+0x128>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b2e      	ldr	r3, [pc, #184]	@ (80022f8 <MX_GPIO_Init+0x128>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	4a2d      	ldr	r2, [pc, #180]	@ (80022f8 <MX_GPIO_Init+0x128>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6313      	str	r3, [r2, #48]	@ 0x30
 800224a:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <MX_GPIO_Init+0x128>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 8002256:	2200      	movs	r2, #0
 8002258:	f640 711c 	movw	r1, #3868	@ 0xf1c
 800225c:	4827      	ldr	r0, [pc, #156]	@ (80022fc <MX_GPIO_Init+0x12c>)
 800225e:	f001 faa7 	bl	80037b0 <HAL_GPIO_WritePin>
                          |M2_INB_Pin|M1_INA_Pin|M1_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2136      	movs	r1, #54	@ 0x36
 8002266:	4826      	ldr	r0, [pc, #152]	@ (8002300 <MX_GPIO_Init+0x130>)
 8002268:	f001 faa2 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002272:	4824      	ldr	r0, [pc, #144]	@ (8002304 <MX_GPIO_Init+0x134>)
 8002274:	f001 fa9c 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_INA_Pin M4_INB_Pin TX_EN_Pin M2_INA_Pin
                           M1_INA_Pin M1_INB_Pin */
  GPIO_InitStruct.Pin = M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 8002278:	f640 531c 	movw	r3, #3356	@ 0xd1c
 800227c:	617b      	str	r3, [r7, #20]
                          |M1_INA_Pin|M1_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227e:	2301      	movs	r3, #1
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	481a      	ldr	r0, [pc, #104]	@ (80022fc <MX_GPIO_Init+0x12c>)
 8002292:	f001 f8f9 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RX_Pin LED_TX_Pin M3_INA_Pin M3_INB_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin;
 8002296:	2336      	movs	r3, #54	@ 0x36
 8002298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4814      	ldr	r0, [pc, #80]	@ (8002300 <MX_GPIO_Init+0x130>)
 80022ae:	f001 f8eb 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_INB_Pin */
  GPIO_InitStruct.Pin = M2_INB_Pin;
 80022b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_INB_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	480c      	ldr	r0, [pc, #48]	@ (80022fc <MX_GPIO_Init+0x12c>)
 80022cc:	f001 f8dc 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 80022d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4806      	ldr	r0, [pc, #24]	@ (8002304 <MX_GPIO_Init+0x134>)
 80022ea:	f001 f8cd 	bl	8003488 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	@ 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020800 	.word	0x40020800
 8002300:	40020400 	.word	0x40020400
 8002304:	40020000 	.word	0x40020000

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <Error_Handler+0x8>

08002314 <limitPWM>:
 */

#include "motors.h"
#include "config.h"

float limitPWM(float pwm) {
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (pwm > PWM_MAX)
 800231e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232e:	dd02      	ble.n	8002336 <limitPWM+0x22>
        return PWM_MAX;
 8002330:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002334:	e00b      	b.n	800234e <limitPWM+0x3a>
    else if (pwm < -PWM_MAX)
 8002336:	edd7 7a01 	vldr	s15, [r7, #4]
 800233a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800233e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	d501      	bpl.n	800234c <limitPWM+0x38>
        return -PWM_MAX;
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <limitPWM+0x4c>)
 800234a:	e000      	b.n	800234e <limitPWM+0x3a>
    return pwm;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eeb0 0a67 	vmov.f32	s0, s15
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	bf800000 	.word	0xbf800000

08002364 <setForwardLeftMotorPWM>:

void setForwardLeftMotorPWM(float pwm) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 800236e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002372:	f7ff ffcf 	bl	8002314 <limitPWM>
 8002376:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 800237a:	edd7 7a01 	vldr	s15, [r7, #4]
 800237e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	db0f      	blt.n	80023a8 <setForwardLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M1_INA = PC10, M1_INB = PC11
        // Reset bit 10 and Set bit 11 simultaneously
        GPIOC->BSRR = (1U << (10 + 16)) | (1U << 11);
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <setForwardLeftMotorPWM+0x70>)
 800238a:	4a13      	ldr	r2, [pc, #76]	@ (80023d8 <setForwardLeftMotorPWM+0x74>)
 800238c:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 800238e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002392:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80023dc <setForwardLeftMotorPWM+0x78>
 8002396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <setForwardLeftMotorPWM+0x7c>)
 800239c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a0:	ee17 2a90 	vmov	r2, s15
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34
        // Reverse direction: INA=1, INB=0
        // Set bit 10 and Reset bit 11 simultaneously
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80023a6:	e010      	b.n	80023ca <setForwardLeftMotorPWM+0x66>
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
 80023a8:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <setForwardLeftMotorPWM+0x70>)
 80023aa:	4a0e      	ldr	r2, [pc, #56]	@ (80023e4 <setForwardLeftMotorPWM+0x80>)
 80023ac:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80023ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80023b2:	eef1 7a67 	vneg.f32	s15, s15
 80023b6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80023dc <setForwardLeftMotorPWM+0x78>
 80023ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <setForwardLeftMotorPWM+0x7c>)
 80023c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c4:	ee17 2a90 	vmov	r2, s15
 80023c8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40020800 	.word	0x40020800
 80023d8:	04000800 	.word	0x04000800
 80023dc:	45e0f800 	.word	0x45e0f800
 80023e0:	40010000 	.word	0x40010000
 80023e4:	08000400 	.word	0x08000400

080023e8 <setForwardRightMotorPWM>:

void setForwardRightMotorPWM(float pwm) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 80023f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80023f6:	f7ff ff8d 	bl	8002314 <limitPWM>
 80023fa:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 80023fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002402:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240a:	db0f      	blt.n	800242c <setForwardRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M2_INA = PC8, M2_INB = PC9
        // Set bit 8 and Reset bit 9 simultaneously
        GPIOC->BSRR = (1U << 8) | (1U << (9 + 16));
 800240c:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <setForwardRightMotorPWM+0x70>)
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <setForwardRightMotorPWM+0x74>)
 8002410:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002412:	edd7 7a01 	vldr	s15, [r7, #4]
 8002416:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002460 <setForwardRightMotorPWM+0x78>
 800241a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <setForwardRightMotorPWM+0x7c>)
 8002420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002424:	ee17 2a90 	vmov	r2, s15
 8002428:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reverse direction: INA=0, INB=1
        // Reset bit 8 and Set bit 9 simultaneously
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 800242a:	e010      	b.n	800244e <setForwardRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
 800242c:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <setForwardRightMotorPWM+0x70>)
 800242e:	4a0e      	ldr	r2, [pc, #56]	@ (8002468 <setForwardRightMotorPWM+0x80>)
 8002430:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8002432:	edd7 7a01 	vldr	s15, [r7, #4]
 8002436:	eef1 7a67 	vneg.f32	s15, s15
 800243a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002460 <setForwardRightMotorPWM+0x78>
 800243e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <setForwardRightMotorPWM+0x7c>)
 8002444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002448:	ee17 2a90 	vmov	r2, s15
 800244c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40020800 	.word	0x40020800
 800245c:	02000100 	.word	0x02000100
 8002460:	45e0f800 	.word	0x45e0f800
 8002464:	40010000 	.word	0x40010000
 8002468:	01000200 	.word	0x01000200

0800246c <setRearLeftMotorPWM>:

void setRearLeftMotorPWM(float pwm) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8002476:	ed97 0a01 	vldr	s0, [r7, #4]
 800247a:	f7ff ff4b 	bl	8002314 <limitPWM>
 800247e:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002482:	edd7 7a01 	vldr	s15, [r7, #4]
 8002486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	db0f      	blt.n	80024b0 <setRearLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M3_INA = PB4, M3_INB = PB5
        // Reset bit 4 and Set bit 5 simultaneously
        GPIOB->BSRR = (1U << (4 + 16)) | (1U << 5);
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <setRearLeftMotorPWM+0x70>)
 8002492:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <setRearLeftMotorPWM+0x74>)
 8002494:	619a      	str	r2, [r3, #24]
        TIM1->CCR3 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002496:	edd7 7a01 	vldr	s15, [r7, #4]
 800249a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80024e4 <setRearLeftMotorPWM+0x78>
 800249e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a2:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <setRearLeftMotorPWM+0x7c>)
 80024a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a8:	ee17 2a90 	vmov	r2, s15
 80024ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        // Reverse direction: INA=1, INB=0
        // Set bit 4 and Reset bit 5 simultaneously
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80024ae:	e010      	b.n	80024d2 <setRearLeftMotorPWM+0x66>
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
 80024b0:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <setRearLeftMotorPWM+0x70>)
 80024b2:	4a0e      	ldr	r2, [pc, #56]	@ (80024ec <setRearLeftMotorPWM+0x80>)
 80024b4:	619a      	str	r2, [r3, #24]
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80024b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ba:	eef1 7a67 	vneg.f32	s15, s15
 80024be:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80024e4 <setRearLeftMotorPWM+0x78>
 80024c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <setRearLeftMotorPWM+0x7c>)
 80024c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024cc:	ee17 2a90 	vmov	r2, s15
 80024d0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40020400 	.word	0x40020400
 80024e0:	00100020 	.word	0x00100020
 80024e4:	45e0f800 	.word	0x45e0f800
 80024e8:	40010000 	.word	0x40010000
 80024ec:	00200010 	.word	0x00200010

080024f0 <setRearRightMotorPWM>:

void setRearRightMotorPWM(float pwm) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 80024fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80024fe:	f7ff ff09 	bl	8002314 <limitPWM>
 8002502:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002506:	edd7 7a01 	vldr	s15, [r7, #4]
 800250a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	db0f      	blt.n	8002534 <setRearRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M4_INA = PC2, M4_INB = PC3
        // Set bit 2 and Reset bit 3 simultaneously
        GPIOC->BSRR = (1U << 2) | (1U << (3 + 16));
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <setRearRightMotorPWM+0x70>)
 8002516:	4a13      	ldr	r2, [pc, #76]	@ (8002564 <setRearRightMotorPWM+0x74>)
 8002518:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 800251a:	edd7 7a01 	vldr	s15, [r7, #4]
 800251e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002568 <setRearRightMotorPWM+0x78>
 8002522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002526:	4b11      	ldr	r3, [pc, #68]	@ (800256c <setRearRightMotorPWM+0x7c>)
 8002528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252c:	ee17 2a90 	vmov	r2, s15
 8002530:	641a      	str	r2, [r3, #64]	@ 0x40
        // Reverse direction: INA=0, INB=1
        // Reset bit 2 and Set bit 3 simultaneously
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 8002532:	e010      	b.n	8002556 <setRearRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
 8002534:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <setRearRightMotorPWM+0x70>)
 8002536:	4a0e      	ldr	r2, [pc, #56]	@ (8002570 <setRearRightMotorPWM+0x80>)
 8002538:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 800253a:	edd7 7a01 	vldr	s15, [r7, #4]
 800253e:	eef1 7a67 	vneg.f32	s15, s15
 8002542:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002568 <setRearRightMotorPWM+0x78>
 8002546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254a:	4b08      	ldr	r3, [pc, #32]	@ (800256c <setRearRightMotorPWM+0x7c>)
 800254c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002550:	ee17 2a90 	vmov	r2, s15
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020800 	.word	0x40020800
 8002564:	00080004 	.word	0x00080004
 8002568:	45e0f800 	.word	0x45e0f800
 800256c:	40010000 	.word	0x40010000
 8002570:	00040008 	.word	0x00040008

08002574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <HAL_MspInit+0x4c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	4a0f      	ldr	r2, [pc, #60]	@ (80025c0 <HAL_MspInit+0x4c>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002588:	6453      	str	r3, [r2, #68]	@ 0x44
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <HAL_MspInit+0x4c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_MspInit+0x4c>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <HAL_MspInit+0x4c>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_MspInit+0x4c>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800

080025c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	@ 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <HAL_ADC_MspInit+0x7c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d127      	bne.n	8002636 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <HAL_ADC_MspInit+0x80>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	4a15      	ldr	r2, [pc, #84]	@ (8002644 <HAL_ADC_MspInit+0x80>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <HAL_ADC_MspInit+0x80>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <HAL_ADC_MspInit+0x80>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a0e      	ldr	r2, [pc, #56]	@ (8002644 <HAL_ADC_MspInit+0x80>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <HAL_ADC_MspInit+0x80>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = M1_CS_Pin|M2_CS_Pin|M3_CS_Pin|M4_CS_Pin;
 800261e:	23f0      	movs	r3, #240	@ 0xf0
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002622:	2303      	movs	r3, #3
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	@ (8002648 <HAL_ADC_MspInit+0x84>)
 8002632:	f000 ff29 	bl	8003488 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002636:	bf00      	nop
 8002638:	3728      	adds	r7, #40	@ 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40012000 	.word	0x40012000
 8002644:	40023800 	.word	0x40023800
 8002648:	40020000 	.word	0x40020000

0800264c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0e      	ldr	r2, [pc, #56]	@ (8002694 <HAL_TIM_Base_MspInit+0x48>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d115      	bne.n	800268a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <HAL_TIM_Base_MspInit+0x4c>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	4a0c      	ldr	r2, [pc, #48]	@ (8002698 <HAL_TIM_Base_MspInit+0x4c>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6453      	str	r3, [r2, #68]	@ 0x44
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_TIM_Base_MspInit+0x4c>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2019      	movs	r0, #25
 8002680:	f000 fecb 	bl	800341a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002684:	2019      	movs	r0, #25
 8002686:	f000 fee4 	bl	8003452 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40010000 	.word	0x40010000
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b090      	sub	sp, #64	@ 0x40
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026bc:	d153      	bne.n	8002766 <HAL_TIM_Encoder_MspInit+0xca>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c2:	4b81      	ldr	r3, [pc, #516]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	4a80      	ldr	r2, [pc, #512]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ce:	4b7e      	ldr	r3, [pc, #504]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026de:	4b7a      	ldr	r3, [pc, #488]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a79      	ldr	r2, [pc, #484]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b77      	ldr	r3, [pc, #476]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	4b73      	ldr	r3, [pc, #460]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a72      	ldr	r2, [pc, #456]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b70      	ldr	r3, [pc, #448]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	623b      	str	r3, [r7, #32]
 8002710:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1_EncoderCH1_Pin;
 8002712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002724:	2301      	movs	r3, #1
 8002726:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH1_GPIO_Port, &GPIO_InitStruct);
 8002728:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800272c:	4619      	mov	r1, r3
 800272e:	4867      	ldr	r0, [pc, #412]	@ (80028cc <HAL_TIM_Encoder_MspInit+0x230>)
 8002730:	f000 feaa 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_EncoderCH2_Pin;
 8002734:	2308      	movs	r3, #8
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002744:	2301      	movs	r3, #1
 8002746:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH2_GPIO_Port, &GPIO_InitStruct);
 8002748:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800274c:	4619      	mov	r1, r3
 800274e:	4860      	ldr	r0, [pc, #384]	@ (80028d0 <HAL_TIM_Encoder_MspInit+0x234>)
 8002750:	f000 fe9a 	bl	8003488 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	201c      	movs	r0, #28
 800275a:	f000 fe5e 	bl	800341a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800275e:	201c      	movs	r0, #28
 8002760:	f000 fe77 	bl	8003452 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002764:	e0ac      	b.n	80028c0 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5a      	ldr	r2, [pc, #360]	@ (80028d4 <HAL_TIM_Encoder_MspInit+0x238>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d134      	bne.n	80027da <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	4b54      	ldr	r3, [pc, #336]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	4a53      	ldr	r2, [pc, #332]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002780:	4b51      	ldr	r3, [pc, #324]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	4b4d      	ldr	r3, [pc, #308]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	4a4c      	ldr	r2, [pc, #304]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6313      	str	r3, [r2, #48]	@ 0x30
 800279c:	4b4a      	ldr	r3, [pc, #296]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2_EncoderCH1_Pin|M2_EncoderCH2_Pin;
 80027a8:	23c0      	movs	r3, #192	@ 0xc0
 80027aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027b8:	2302      	movs	r3, #2
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027c0:	4619      	mov	r1, r3
 80027c2:	4845      	ldr	r0, [pc, #276]	@ (80028d8 <HAL_TIM_Encoder_MspInit+0x23c>)
 80027c4:	f000 fe60 	bl	8003488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	201d      	movs	r0, #29
 80027ce:	f000 fe24 	bl	800341a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027d2:	201d      	movs	r0, #29
 80027d4:	f000 fe3d 	bl	8003452 <HAL_NVIC_EnableIRQ>
}
 80027d8:	e072      	b.n	80028c0 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a3f      	ldr	r2, [pc, #252]	@ (80028dc <HAL_TIM_Encoder_MspInit+0x240>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d134      	bne.n	800284e <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	4b37      	ldr	r3, [pc, #220]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	4a36      	ldr	r2, [pc, #216]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f4:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	4b30      	ldr	r3, [pc, #192]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002808:	4a2f      	ldr	r2, [pc, #188]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002810:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_EncoderCH1_Pin|M3_EncoderCH2_Pin;
 800281c:	23c0      	movs	r3, #192	@ 0xc0
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800282c:	2302      	movs	r3, #2
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002834:	4619      	mov	r1, r3
 8002836:	4826      	ldr	r0, [pc, #152]	@ (80028d0 <HAL_TIM_Encoder_MspInit+0x234>)
 8002838:	f000 fe26 	bl	8003488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	201e      	movs	r0, #30
 8002842:	f000 fdea 	bl	800341a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002846:	201e      	movs	r0, #30
 8002848:	f000 fe03 	bl	8003452 <HAL_NVIC_EnableIRQ>
}
 800284c:	e038      	b.n	80028c0 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <HAL_TIM_Encoder_MspInit+0x244>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d133      	bne.n	80028c0 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	4a19      	ldr	r2, [pc, #100]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6413      	str	r3, [r2, #64]	@ 0x40
 8002868:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6313      	str	r3, [r2, #48]	@ 0x30
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_EncoderCH1_Pin|M4_EncoderCH2_Pin;
 8002890:	2303      	movs	r3, #3
 8002892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2300      	movs	r3, #0
 800289e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028a0:	2302      	movs	r3, #2
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a8:	4619      	mov	r1, r3
 80028aa:	4808      	ldr	r0, [pc, #32]	@ (80028cc <HAL_TIM_Encoder_MspInit+0x230>)
 80028ac:	f000 fdec 	bl	8003488 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	2032      	movs	r0, #50	@ 0x32
 80028b6:	f000 fdb0 	bl	800341a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028ba:	2032      	movs	r0, #50	@ 0x32
 80028bc:	f000 fdc9 	bl	8003452 <HAL_NVIC_EnableIRQ>
}
 80028c0:	bf00      	nop
 80028c2:	3740      	adds	r7, #64	@ 0x40
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40000800 	.word	0x40000800
 80028e0:	40000c00 	.word	0x40000c00

080028e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a12      	ldr	r2, [pc, #72]	@ (800294c <HAL_TIM_MspPostInit+0x68>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d11e      	bne.n	8002944 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_TIM_MspPostInit+0x6c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	4a10      	ldr	r2, [pc, #64]	@ (8002950 <HAL_TIM_MspPostInit+0x6c>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6313      	str	r3, [r2, #48]	@ 0x30
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <HAL_TIM_MspPostInit+0x6c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8002922:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002926:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002934:	2301      	movs	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	4619      	mov	r1, r3
 800293e:	4805      	ldr	r0, [pc, #20]	@ (8002954 <HAL_TIM_MspPostInit+0x70>)
 8002940:	f000 fda2 	bl	8003488 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002944:	bf00      	nop
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40010000 	.word	0x40010000
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000

08002958 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	@ 0x30
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a41      	ldr	r2, [pc, #260]	@ (8002a7c <HAL_UART_MspInit+0x124>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d12c      	bne.n	80029d4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	4b40      	ldr	r3, [pc, #256]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	4a3f      	ldr	r2, [pc, #252]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 8002984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002988:	6413      	str	r3, [r2, #64]	@ 0x40
 800298a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a38      	ldr	r2, [pc, #224]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b36      	ldr	r3, [pc, #216]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029b2:	230c      	movs	r3, #12
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c2:	2307      	movs	r3, #7
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	4619      	mov	r1, r3
 80029cc:	482d      	ldr	r0, [pc, #180]	@ (8002a84 <HAL_UART_MspInit+0x12c>)
 80029ce:	f000 fd5b 	bl	8003488 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80029d2:	e04f      	b.n	8002a74 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a88 <HAL_UART_MspInit+0x130>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d14a      	bne.n	8002a74 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b27      	ldr	r3, [pc, #156]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	4a26      	ldr	r2, [pc, #152]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 80029e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ee:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a18      	ldr	r2, [pc, #96]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <HAL_UART_MspInit+0x128>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a32:	2320      	movs	r3, #32
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a42:	2307      	movs	r3, #7
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	480f      	ldr	r0, [pc, #60]	@ (8002a8c <HAL_UART_MspInit+0x134>)
 8002a4e:	f000 fd1b 	bl	8003488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a64:	2307      	movs	r3, #7
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4808      	ldr	r0, [pc, #32]	@ (8002a90 <HAL_UART_MspInit+0x138>)
 8002a70:	f000 fd0a 	bl	8003488 <HAL_GPIO_Init>
}
 8002a74:	bf00      	nop
 8002a76:	3730      	adds	r7, #48	@ 0x30
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	40004800 	.word	0x40004800
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020400 	.word	0x40020400

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <NMI_Handler+0x4>

08002a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <HardFault_Handler+0x4>

08002aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <MemManage_Handler+0x4>

08002aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aea:	f000 f929 	bl	8002d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8002aee:	f000 f88b 	bl	8002c08 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002afc:	4802      	ldr	r0, [pc, #8]	@ (8002b08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002afe:	f001 ff4d 	bl	800499c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000194 	.word	0x20000194

08002b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b10:	4802      	ldr	r0, [pc, #8]	@ (8002b1c <TIM2_IRQHandler+0x10>)
 8002b12:	f001 ff43 	bl	800499c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200001dc 	.word	0x200001dc

08002b20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b24:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <TIM3_IRQHandler+0x10>)
 8002b26:	f001 ff39 	bl	800499c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000224 	.word	0x20000224

08002b34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b38:	4802      	ldr	r0, [pc, #8]	@ (8002b44 <TIM4_IRQHandler+0x10>)
 8002b3a:	f001 ff2f 	bl	800499c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000026c 	.word	0x2000026c

08002b48 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002b4c:	4802      	ldr	r0, [pc, #8]	@ (8002b58 <TIM5_IRQHandler+0x10>)
 8002b4e:	f001 ff25 	bl	800499c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200002b4 	.word	0x200002b4

08002b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <SystemInit+0x20>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <SystemInit+0x20>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <CheckEncoderCounts>:
#include "kinematics.h"

// Control loop counter
static uint32_t control_counter = 0;

void CheckEncoderCounts(void) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
    // Check for encoder overflow and reset if necessary
    if (getForwardLeftEncoderCounts() > 30000 || getForwardRightEncoderCounts() > 30000 ||
 8002b84:	f7fd ff6a 	bl	8000a5c <getForwardLeftEncoderCounts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dc33      	bgt.n	8002bfc <CheckEncoderCounts+0x7c>
 8002b94:	f7fd ff6e 	bl	8000a74 <getForwardRightEncoderCounts>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dc2b      	bgt.n	8002bfc <CheckEncoderCounts+0x7c>
        getRearLeftEncoderCounts() > 30000 || getRearRightEncoderCounts() > 30000 ||
 8002ba4:	f7fd ff72 	bl	8000a8c <getRearLeftEncoderCounts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
    if (getForwardLeftEncoderCounts() > 30000 || getForwardRightEncoderCounts() > 30000 ||
 8002bac:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	dc23      	bgt.n	8002bfc <CheckEncoderCounts+0x7c>
        getRearLeftEncoderCounts() > 30000 || getRearRightEncoderCounts() > 30000 ||
 8002bb4:	f7fd ff76 	bl	8000aa4 <getRearRightEncoderCounts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	dc1b      	bgt.n	8002bfc <CheckEncoderCounts+0x7c>
        getForwardLeftEncoderCounts() < -30000 || getForwardRightEncoderCounts() < -30000 ||
 8002bc4:	f7fd ff4a 	bl	8000a5c <getForwardLeftEncoderCounts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
        getRearLeftEncoderCounts() > 30000 || getRearRightEncoderCounts() > 30000 ||
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <CheckEncoderCounts+0x84>)
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	db14      	blt.n	8002bfc <CheckEncoderCounts+0x7c>
        getForwardLeftEncoderCounts() < -30000 || getForwardRightEncoderCounts() < -30000 ||
 8002bd2:	f7fd ff4f 	bl	8000a74 <getForwardRightEncoderCounts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <CheckEncoderCounts+0x84>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	db0d      	blt.n	8002bfc <CheckEncoderCounts+0x7c>
        getRearLeftEncoderCounts() < -30000 || getRearRightEncoderCounts() < -30000) {
 8002be0:	f7fd ff54 	bl	8000a8c <getRearLeftEncoderCounts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
        getForwardLeftEncoderCounts() < -30000 || getForwardRightEncoderCounts() < -30000 ||
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <CheckEncoderCounts+0x84>)
 8002bea:	429a      	cmp	r2, r3
 8002bec:	db06      	blt.n	8002bfc <CheckEncoderCounts+0x7c>
        getRearLeftEncoderCounts() < -30000 || getRearRightEncoderCounts() < -30000) {
 8002bee:	f7fd ff59 	bl	8000aa4 <getRearRightEncoderCounts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <CheckEncoderCounts+0x84>)
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	da01      	bge.n	8002c00 <CheckEncoderCounts+0x80>

        // Reset encoders to prevent overflow
        resetEncodersinSystick();
 8002bfc:	f7fd ffac 	bl	8000b58 <resetEncodersinSystick>
    }
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	ffff8ad0 	.word	0xffff8ad0

08002c08 <SysTickFunction>:

void SysTickFunction(void) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
    /*
     * This function is called every millisecond (1kHz)
     * Main control loop for the Omni-Dorectional robot
     */

    control_counter++;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <SysTickFunction+0x38>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	4a0b      	ldr	r2, [pc, #44]	@ (8002c40 <SysTickFunction+0x38>)
 8002c14:	6013      	str	r3, [r2, #0]

    // Check for encoder overflow every 100ms
    if (control_counter % 100 == 0) {
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <SysTickFunction+0x38>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <SysTickFunction+0x3c>)
 8002c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	2164      	movs	r1, #100	@ 0x64
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <SysTickFunction+0x2a>
        CheckEncoderCounts();
 8002c2e:	f7ff ffa7 	bl	8002b80 <CheckEncoderCounts>
    }

    // Update kinematics control every millisecond
    update_kinematics_control();
 8002c32:	f7fe faf3 	bl	800121c <update_kinematics_control>

    // Update demo sequence
    update_demo_sequence();
 8002c36:	f7fe fd27 	bl	8001688 <update_demo_sequence>
        //        current_robot_velocity.vx,
        //        current_robot_velocity.vy,
        //        current_robot_velocity.wz);
    }
    */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000394 	.word	0x20000394
 8002c44:	51eb851f 	.word	0x51eb851f

08002c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c4c:	f7ff ff86 	bl	8002b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	@ (8002c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	@ (8002c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	@ (8002c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c76:	f003 f80d 	bl	8005c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7fe fe95 	bl	80019a8 <main>
  bx  lr    
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002c8c:	08006c24 	.word	0x08006c24
  ldr r2, =_sbss
 8002c90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002c94:	200004d4 	.word	0x200004d4

08002c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <HAL_Init+0x40>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <HAL_Init+0x40>)
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb8:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a07      	ldr	r2, [pc, #28]	@ (8002cdc <HAL_Init+0x40>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 fb9d 	bl	8003404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cca:	200f      	movs	r0, #15
 8002ccc:	f000 f808 	bl	8002ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd0:	f7ff fc50 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00

08002ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce8:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <HAL_InitTick+0x54>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <HAL_InitTick+0x58>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fbb5 	bl	800346e <HAL_SYSTICK_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00e      	b.n	8002d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d80a      	bhi.n	8002d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f000 fb7d 	bl	800341a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d20:	4a06      	ldr	r2, [pc, #24]	@ (8002d3c <HAL_InitTick+0x5c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	20000004 	.word	0x20000004

08002d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d44:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_IncTick+0x20>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_IncTick+0x24>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <HAL_IncTick+0x24>)
 8002d52:	6013      	str	r3, [r2, #0]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000008 	.word	0x20000008
 8002d64:	20000398 	.word	0x20000398

08002d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_GetTick+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000398 	.word	0x20000398

08002d80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e033      	b.n	8002dfe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fc10 	bl	80025c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d118      	bne.n	8002df0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dc6:	f023 0302 	bic.w	r3, r3, #2
 8002dca:	f043 0202 	orr.w	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f94a 	bl	800306c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	f043 0201 	orr.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dee:	e001      	b.n	8002df4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x1c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e113      	b.n	800304c <HAL_ADC_ConfigChannel+0x244>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d925      	bls.n	8002e80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68d9      	ldr	r1, [r3, #12]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	3b1e      	subs	r3, #30
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43da      	mvns	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	400a      	ands	r2, r1
 8002e58:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68d9      	ldr	r1, [r3, #12]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4403      	add	r3, r0
 8002e72:	3b1e      	subs	r3, #30
 8002e74:	409a      	lsls	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e022      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6919      	ldr	r1, [r3, #16]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	2207      	movs	r2, #7
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6919      	ldr	r1, [r3, #16]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4403      	add	r3, r0
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d824      	bhi.n	8002f18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3b05      	subs	r3, #5
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	400a      	ands	r2, r1
 8002eee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4618      	mov	r0, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b05      	subs	r3, #5
 8002f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f16:	e04c      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d824      	bhi.n	8002f6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b23      	subs	r3, #35	@ 0x23
 8002f32:	221f      	movs	r2, #31
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	400a      	ands	r2, r1
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b23      	subs	r3, #35	@ 0x23
 8002f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f68:	e023      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b41      	subs	r3, #65	@ 0x41
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	400a      	ands	r2, r1
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b41      	subs	r3, #65	@ 0x41
 8002fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb2:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <HAL_ADC_ConfigChannel+0x250>)
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a28      	ldr	r2, [pc, #160]	@ (800305c <HAL_ADC_ConfigChannel+0x254>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d8>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b12      	cmp	r3, #18
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800305c <HAL_ADC_ConfigChannel+0x254>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12b      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1c      	ldr	r2, [pc, #112]	@ (8003060 <HAL_ADC_ConfigChannel+0x258>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x1f4>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b11      	cmp	r3, #17
 8002ffa:	d122      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a11      	ldr	r2, [pc, #68]	@ (8003060 <HAL_ADC_ConfigChannel+0x258>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800301e:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <HAL_ADC_ConfigChannel+0x25c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a11      	ldr	r2, [pc, #68]	@ (8003068 <HAL_ADC_ConfigChannel+0x260>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9a      	lsrs	r2, r3, #18
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003034:	e002      	b.n	800303c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3b01      	subs	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f9      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40012300 	.word	0x40012300
 800305c:	40012000 	.word	0x40012000
 8003060:	10000012 	.word	0x10000012
 8003064:	20000000 	.word	0x20000000
 8003068:	431bde83 	.word	0x431bde83

0800306c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003074:	4b79      	ldr	r3, [pc, #484]	@ (800325c <ADC_Init+0x1f0>)
 8003076:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	4a58      	ldr	r2, [pc, #352]	@ (8003260 <ADC_Init+0x1f4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e00f      	b.n	800316a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003168:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0202 	bic.w	r2, r2, #2
 8003178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e1b      	ldrb	r3, [r3, #24]
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	3b01      	subs	r3, #1
 80031c4:	035a      	lsls	r2, r3, #13
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	e007      	b.n	80031e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	051a      	lsls	r2, r3, #20
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003222:	025a      	lsls	r2, r3, #9
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	029a      	lsls	r2, r3, #10
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40012300 	.word	0x40012300
 8003260:	0f000001 	.word	0x0f000001

08003264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003280:	4013      	ands	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800328c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003296:	4a04      	ldr	r2, [pc, #16]	@ (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	60d3      	str	r3, [r2, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b0:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <__NVIC_GetPriorityGrouping+0x18>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 0307 	and.w	r3, r3, #7
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db0b      	blt.n	80032f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4907      	ldr	r1, [pc, #28]	@ (8003300 <__NVIC_EnableIRQ+0x38>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2001      	movs	r0, #1
 80032ea:	fa00 f202 	lsl.w	r2, r0, r2
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db0a      	blt.n	800332e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	490c      	ldr	r1, [pc, #48]	@ (8003350 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	440b      	add	r3, r1
 8003328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800332c:	e00a      	b.n	8003344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4908      	ldr	r1, [pc, #32]	@ (8003354 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	440b      	add	r3, r1
 8003342:	761a      	strb	r2, [r3, #24]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	@ 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	bf28      	it	cs
 8003376:	2304      	movcs	r3, #4
 8003378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3304      	adds	r3, #4
 800337e:	2b06      	cmp	r3, #6
 8003380:	d902      	bls.n	8003388 <NVIC_EncodePriority+0x30>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3b03      	subs	r3, #3
 8003386:	e000      	b.n	800338a <NVIC_EncodePriority+0x32>
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	401a      	ands	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	4313      	orrs	r3, r2
         );
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	@ 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033d0:	d301      	bcc.n	80033d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00f      	b.n	80033f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <SysTick_Config+0x40>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033de:	210f      	movs	r1, #15
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f7ff ff8e 	bl	8003304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e8:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <SysTick_Config+0x40>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ee:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <SysTick_Config+0x40>)
 80033f0:	2207      	movs	r2, #7
 80033f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	e000e010 	.word	0xe000e010

08003404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff ff29 	bl	8003264 <__NVIC_SetPriorityGrouping>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800342c:	f7ff ff3e 	bl	80032ac <__NVIC_GetPriorityGrouping>
 8003430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7ff ff8e 	bl	8003358 <NVIC_EncodePriority>
 800343c:	4602      	mov	r2, r0
 800343e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff5d 	bl	8003304 <__NVIC_SetPriority>
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	4603      	mov	r3, r0
 800345a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800345c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff31 	bl	80032c8 <__NVIC_EnableIRQ>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ffa2 	bl	80033c0 <SysTick_Config>
 800347c:	4603      	mov	r3, r0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	@ 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e165      	b.n	8003770 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034a4:	2201      	movs	r2, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	429a      	cmp	r2, r3
 80034be:	f040 8154 	bne.w	800376a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d005      	beq.n	80034da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d130      	bne.n	800353c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003510:	2201      	movs	r2, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 0201 	and.w	r2, r3, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b03      	cmp	r3, #3
 8003546:	d017      	beq.n	8003578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d123      	bne.n	80035cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	08da      	lsrs	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3208      	adds	r2, #8
 800358c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	220f      	movs	r2, #15
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	08da      	lsrs	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3208      	adds	r2, #8
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0203 	and.w	r2, r3, #3
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80ae 	beq.w	800376a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	4b5d      	ldr	r3, [pc, #372]	@ (8003788 <HAL_GPIO_Init+0x300>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	4a5c      	ldr	r2, [pc, #368]	@ (8003788 <HAL_GPIO_Init+0x300>)
 8003618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800361c:	6453      	str	r3, [r2, #68]	@ 0x44
 800361e:	4b5a      	ldr	r3, [pc, #360]	@ (8003788 <HAL_GPIO_Init+0x300>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800362a:	4a58      	ldr	r2, [pc, #352]	@ (800378c <HAL_GPIO_Init+0x304>)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	3302      	adds	r3, #2
 8003632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	220f      	movs	r2, #15
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4f      	ldr	r2, [pc, #316]	@ (8003790 <HAL_GPIO_Init+0x308>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d025      	beq.n	80036a2 <HAL_GPIO_Init+0x21a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4e      	ldr	r2, [pc, #312]	@ (8003794 <HAL_GPIO_Init+0x30c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <HAL_GPIO_Init+0x216>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4d      	ldr	r2, [pc, #308]	@ (8003798 <HAL_GPIO_Init+0x310>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d019      	beq.n	800369a <HAL_GPIO_Init+0x212>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4c      	ldr	r2, [pc, #304]	@ (800379c <HAL_GPIO_Init+0x314>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_GPIO_Init+0x20e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4b      	ldr	r2, [pc, #300]	@ (80037a0 <HAL_GPIO_Init+0x318>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00d      	beq.n	8003692 <HAL_GPIO_Init+0x20a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4a      	ldr	r2, [pc, #296]	@ (80037a4 <HAL_GPIO_Init+0x31c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <HAL_GPIO_Init+0x206>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a49      	ldr	r2, [pc, #292]	@ (80037a8 <HAL_GPIO_Init+0x320>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_GPIO_Init+0x202>
 8003686:	2306      	movs	r3, #6
 8003688:	e00c      	b.n	80036a4 <HAL_GPIO_Init+0x21c>
 800368a:	2307      	movs	r3, #7
 800368c:	e00a      	b.n	80036a4 <HAL_GPIO_Init+0x21c>
 800368e:	2305      	movs	r3, #5
 8003690:	e008      	b.n	80036a4 <HAL_GPIO_Init+0x21c>
 8003692:	2304      	movs	r3, #4
 8003694:	e006      	b.n	80036a4 <HAL_GPIO_Init+0x21c>
 8003696:	2303      	movs	r3, #3
 8003698:	e004      	b.n	80036a4 <HAL_GPIO_Init+0x21c>
 800369a:	2302      	movs	r3, #2
 800369c:	e002      	b.n	80036a4 <HAL_GPIO_Init+0x21c>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_GPIO_Init+0x21c>
 80036a2:	2300      	movs	r3, #0
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	f002 0203 	and.w	r2, r2, #3
 80036aa:	0092      	lsls	r2, r2, #2
 80036ac:	4093      	lsls	r3, r2
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b4:	4935      	ldr	r1, [pc, #212]	@ (800378c <HAL_GPIO_Init+0x304>)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3302      	adds	r3, #2
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036c2:	4b3a      	ldr	r3, [pc, #232]	@ (80037ac <HAL_GPIO_Init+0x324>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036e6:	4a31      	ldr	r2, [pc, #196]	@ (80037ac <HAL_GPIO_Init+0x324>)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ec:	4b2f      	ldr	r3, [pc, #188]	@ (80037ac <HAL_GPIO_Init+0x324>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003710:	4a26      	ldr	r2, [pc, #152]	@ (80037ac <HAL_GPIO_Init+0x324>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003716:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <HAL_GPIO_Init+0x324>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800373a:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <HAL_GPIO_Init+0x324>)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003740:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_GPIO_Init+0x324>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003764:	4a11      	ldr	r2, [pc, #68]	@ (80037ac <HAL_GPIO_Init+0x324>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3301      	adds	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	f67f ae96 	bls.w	80034a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3724      	adds	r7, #36	@ 0x24
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	40013800 	.word	0x40013800
 8003790:	40020000 	.word	0x40020000
 8003794:	40020400 	.word	0x40020400
 8003798:	40020800 	.word	0x40020800
 800379c:	40020c00 	.word	0x40020c00
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40021400 	.word	0x40021400
 80037a8:	40021800 	.word	0x40021800
 80037ac:	40013c00 	.word	0x40013c00

080037b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
 80037bc:	4613      	mov	r3, r2
 80037be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037c0:	787b      	ldrb	r3, [r7, #1]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037cc:	e003      	b.n	80037d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	041a      	lsls	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	619a      	str	r2, [r3, #24]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <HAL_PWREx_EnableOverDrive+0x90>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003874 <HAL_PWREx_EnableOverDrive+0x90>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003874 <HAL_PWREx_EnableOverDrive+0x90>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800380a:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_PWREx_EnableOverDrive+0x94>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003810:	f7ff faaa 	bl	8002d68 <HAL_GetTick>
 8003814:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003816:	e009      	b.n	800382c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003818:	f7ff faa6 	bl	8002d68 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003826:	d901      	bls.n	800382c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e01f      	b.n	800386c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800382c:	4b13      	ldr	r3, [pc, #76]	@ (800387c <HAL_PWREx_EnableOverDrive+0x98>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003838:	d1ee      	bne.n	8003818 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_PWREx_EnableOverDrive+0x9c>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003840:	f7ff fa92 	bl	8002d68 <HAL_GetTick>
 8003844:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003846:	e009      	b.n	800385c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003848:	f7ff fa8e 	bl	8002d68 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003856:	d901      	bls.n	800385c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e007      	b.n	800386c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800385c:	4b07      	ldr	r3, [pc, #28]	@ (800387c <HAL_PWREx_EnableOverDrive+0x98>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003868:	d1ee      	bne.n	8003848 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40023800 	.word	0x40023800
 8003878:	420e0040 	.word	0x420e0040
 800387c:	40007000 	.word	0x40007000
 8003880:	420e0044 	.word	0x420e0044

08003884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0cc      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b68      	ldr	r3, [pc, #416]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d90c      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b65      	ldr	r3, [pc, #404]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b63      	ldr	r3, [pc, #396]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b8      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d8:	4b59      	ldr	r3, [pc, #356]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a58      	ldr	r2, [pc, #352]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f0:	4b53      	ldr	r3, [pc, #332]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a52      	ldr	r2, [pc, #328]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b50      	ldr	r3, [pc, #320]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	494d      	ldr	r1, [pc, #308]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d044      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d119      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	4b3f      	ldr	r3, [pc, #252]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e067      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003962:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4934      	ldr	r1, [pc, #208]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003974:	f7ff f9f8 	bl	8002d68 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	e00a      	b.n	8003992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7ff f9f4 	bl	8002d68 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e04f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 020c 	and.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1eb      	bne.n	800397c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d20c      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b20      	ldr	r3, [pc, #128]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4916      	ldr	r1, [pc, #88]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	490e      	ldr	r1, [pc, #56]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a0a:	f000 f855 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	490a      	ldr	r1, [pc, #40]	@ (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	5ccb      	ldrb	r3, [r1, r3]
 8003a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a22:	4a09      	ldr	r2, [pc, #36]	@ (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff f958 	bl	8002ce0 <HAL_InitTick>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00
 8003a40:	40023800 	.word	0x40023800
 8003a44:	0800682c 	.word	0x0800682c
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	20000004 	.word	0x20000004

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000000 	.word	0x20000000

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a6c:	f7ff fff0 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	0800683c 	.word	0x0800683c

08003a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a94:	f7ff ffdc 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	@ (8003ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	0800683c 	.word	0x0800683c

08003ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b0ae      	sub	sp, #184	@ 0xb8
 8003abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ade:	4bcb      	ldr	r3, [pc, #812]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	f200 8206 	bhi.w	8003ef8 <HAL_RCC_GetSysClockFreq+0x440>
 8003aec:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003ef9 	.word	0x08003ef9
 8003afc:	08003ef9 	.word	0x08003ef9
 8003b00:	08003ef9 	.word	0x08003ef9
 8003b04:	08003b31 	.word	0x08003b31
 8003b08:	08003ef9 	.word	0x08003ef9
 8003b0c:	08003ef9 	.word	0x08003ef9
 8003b10:	08003ef9 	.word	0x08003ef9
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003ef9 	.word	0x08003ef9
 8003b1c:	08003ef9 	.word	0x08003ef9
 8003b20:	08003ef9 	.word	0x08003ef9
 8003b24:	08003d29 	.word	0x08003d29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4bb9      	ldr	r3, [pc, #740]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b2e:	e1e7      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b30:	4bb8      	ldr	r3, [pc, #736]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b36:	e1e3      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b38:	4bb4      	ldr	r3, [pc, #720]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b44:	4bb1      	ldr	r3, [pc, #708]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d071      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b50:	4bae      	ldr	r3, [pc, #696]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b76:	4622      	mov	r2, r4
 8003b78:	462b      	mov	r3, r5
 8003b7a:	f04f 0000 	mov.w	r0, #0
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	0159      	lsls	r1, r3, #5
 8003b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b88:	0150      	lsls	r0, r2, #5
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4621      	mov	r1, r4
 8003b90:	1a51      	subs	r1, r2, r1
 8003b92:	6439      	str	r1, [r7, #64]	@ 0x40
 8003b94:	4629      	mov	r1, r5
 8003b96:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ba8:	4649      	mov	r1, r9
 8003baa:	018b      	lsls	r3, r1, #6
 8003bac:	4641      	mov	r1, r8
 8003bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	018a      	lsls	r2, r1, #6
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	1a51      	subs	r1, r2, r1
 8003bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	00cb      	lsls	r3, r1, #3
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bda:	4641      	mov	r1, r8
 8003bdc:	00ca      	lsls	r2, r1, #3
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	4622      	mov	r2, r4
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bea:	462b      	mov	r3, r5
 8003bec:	460a      	mov	r2, r1
 8003bee:	eb42 0303 	adc.w	r3, r2, r3
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c00:	4629      	mov	r1, r5
 8003c02:	024b      	lsls	r3, r1, #9
 8003c04:	4621      	mov	r1, r4
 8003c06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	024a      	lsls	r2, r1, #9
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c24:	f7fc fd84 	bl	8000730 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c32:	e067      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c34:	4b75      	ldr	r3, [pc, #468]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c40:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c4e:	2300      	movs	r3, #0
 8003c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003c56:	4622      	mov	r2, r4
 8003c58:	462b      	mov	r3, r5
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4621      	mov	r1, r4
 8003c70:	1a51      	subs	r1, r2, r1
 8003c72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c74:	4629      	mov	r1, r5
 8003c76:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003c88:	4649      	mov	r1, r9
 8003c8a:	018b      	lsls	r3, r1, #6
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c92:	4641      	mov	r1, r8
 8003c94:	018a      	lsls	r2, r1, #6
 8003c96:	4641      	mov	r1, r8
 8003c98:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb6:	4692      	mov	sl, r2
 8003cb8:	469b      	mov	fp, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	eb1a 0303 	adds.w	r3, sl, r3
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cec:	2200      	movs	r2, #0
 8003cee:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cf0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003cf6:	f7fc fd1b 	bl	8000730 <__aeabi_uldivmod>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4613      	mov	r3, r2
 8003d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d04:	4b41      	ldr	r3, [pc, #260]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d26:	e0eb      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d28:	4b38      	ldr	r3, [pc, #224]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d34:	4b35      	ldr	r3, [pc, #212]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d06b      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d40:	4b32      	ldr	r3, [pc, #200]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	2200      	movs	r2, #0
 8003d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d52:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d54:	2300      	movs	r3, #0
 8003d56:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	462b      	mov	r3, r5
 8003d60:	f04f 0000 	mov.w	r0, #0
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	0159      	lsls	r1, r3, #5
 8003d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6e:	0150      	lsls	r0, r2, #5
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4621      	mov	r1, r4
 8003d76:	1a51      	subs	r1, r2, r1
 8003d78:	61b9      	str	r1, [r7, #24]
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d8e:	4659      	mov	r1, fp
 8003d90:	018b      	lsls	r3, r1, #6
 8003d92:	4651      	mov	r1, sl
 8003d94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d98:	4651      	mov	r1, sl
 8003d9a:	018a      	lsls	r2, r1, #6
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ebb2 0801 	subs.w	r8, r2, r1
 8003da2:	4659      	mov	r1, fp
 8003da4:	eb63 0901 	sbc.w	r9, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dbc:	4690      	mov	r8, r2
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	4623      	mov	r3, r4
 8003dc2:	eb18 0303 	adds.w	r3, r8, r3
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	462b      	mov	r3, r5
 8003dca:	eb49 0303 	adc.w	r3, r9, r3
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ddc:	4629      	mov	r1, r5
 8003dde:	024b      	lsls	r3, r1, #9
 8003de0:	4621      	mov	r1, r4
 8003de2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003de6:	4621      	mov	r1, r4
 8003de8:	024a      	lsls	r2, r1, #9
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003df2:	2200      	movs	r2, #0
 8003df4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003df6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003df8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dfc:	f7fc fc98 	bl	8000730 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e0a:	e065      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x420>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e18:	4b3d      	ldr	r3, [pc, #244]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	4611      	mov	r1, r2
 8003e24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e28:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003e32:	4642      	mov	r2, r8
 8003e34:	464b      	mov	r3, r9
 8003e36:	f04f 0000 	mov.w	r0, #0
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	0159      	lsls	r1, r3, #5
 8003e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e44:	0150      	lsls	r0, r2, #5
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	1a51      	subs	r1, r2, r1
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	4649      	mov	r1, r9
 8003e52:	eb63 0301 	sbc.w	r3, r3, r1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e64:	4659      	mov	r1, fp
 8003e66:	018b      	lsls	r3, r1, #6
 8003e68:	4651      	mov	r1, sl
 8003e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e6e:	4651      	mov	r1, sl
 8003e70:	018a      	lsls	r2, r1, #6
 8003e72:	4651      	mov	r1, sl
 8003e74:	1a54      	subs	r4, r2, r1
 8003e76:	4659      	mov	r1, fp
 8003e78:	eb63 0501 	sbc.w	r5, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	00eb      	lsls	r3, r5, #3
 8003e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8a:	00e2      	lsls	r2, r4, #3
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	461d      	mov	r5, r3
 8003e90:	4643      	mov	r3, r8
 8003e92:	18e3      	adds	r3, r4, r3
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	464b      	mov	r3, r9
 8003e98:	eb45 0303 	adc.w	r3, r5, r3
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eaa:	4629      	mov	r1, r5
 8003eac:	028b      	lsls	r3, r1, #10
 8003eae:	4621      	mov	r1, r4
 8003eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	028a      	lsls	r2, r1, #10
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ec4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ec6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eca:	f7fc fc31 	bl	8000730 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	0f1b      	lsrs	r3, r3, #28
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ef6:	e003      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003efa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	37b8      	adds	r7, #184	@ 0xb8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	00f42400 	.word	0x00f42400

08003f18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e28d      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8083 	beq.w	800403e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f38:	4b94      	ldr	r3, [pc, #592]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d019      	beq.n	8003f78 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f44:	4b91      	ldr	r3, [pc, #580]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f50:	4b8e      	ldr	r3, [pc, #568]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f5c:	d00c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d112      	bne.n	8003f90 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b88      	ldr	r3, [pc, #544]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	4b84      	ldr	r3, [pc, #528]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05b      	beq.n	800403c <HAL_RCC_OscConfig+0x124>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d157      	bne.n	800403c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e25a      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x90>
 8003f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a7b      	ldr	r2, [pc, #492]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e01d      	b.n	8003fe4 <HAL_RCC_OscConfig+0xcc>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0xb4>
 8003fb2:	4b76      	ldr	r3, [pc, #472]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a75      	ldr	r2, [pc, #468]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b73      	ldr	r3, [pc, #460]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a72      	ldr	r2, [pc, #456]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0xcc>
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6b      	ldr	r2, [pc, #428]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fe febc 	bl	8002d68 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fe feb8 	bl	8002d68 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	@ 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e21f      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b61      	ldr	r3, [pc, #388]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xdc>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fe fea8 	bl	8002d68 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fe fea4 	bl	8002d68 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	@ 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e20b      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	4b57      	ldr	r3, [pc, #348]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x104>
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d06f      	beq.n	800412a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800404a:	4b50      	ldr	r3, [pc, #320]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b00      	cmp	r3, #0
 8004054:	d017      	beq.n	8004086 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004056:	4b4d      	ldr	r3, [pc, #308]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
        || \
 800405e:	2b08      	cmp	r3, #8
 8004060:	d105      	bne.n	800406e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004062:	4b4a      	ldr	r3, [pc, #296]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b47      	ldr	r3, [pc, #284]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b44      	ldr	r3, [pc, #272]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b41      	ldr	r3, [pc, #260]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x186>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1d3      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3b      	ldr	r3, [pc, #236]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4937      	ldr	r1, [pc, #220]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e03a      	b.n	800412a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b34      	ldr	r3, [pc, #208]	@ (8004190 <HAL_RCC_OscConfig+0x278>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe fe51 	bl	8002d68 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fe fe4d 	bl	8002d68 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1b4      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	4b2b      	ldr	r3, [pc, #172]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b28      	ldr	r3, [pc, #160]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4925      	ldr	r1, [pc, #148]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fe:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_RCC_OscConfig+0x278>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fe30 	bl	8002d68 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410c:	f7fe fe2c 	bl	8002d68 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e193      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d036      	beq.n	80041a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <HAL_RCC_OscConfig+0x27c>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fe fe10 	bl	8002d68 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414c:	f7fe fe0c 	bl	8002d68 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e173      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x234>
 800416a:	e01b      	b.n	80041a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <HAL_RCC_OscConfig+0x27c>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fe fdf9 	bl	8002d68 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	e00e      	b.n	8004198 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe fdf5 	bl	8002d68 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d907      	bls.n	8004198 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e15c      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
 800418c:	40023800 	.word	0x40023800
 8004190:	42470000 	.word	0x42470000
 8004194:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b8a      	ldr	r3, [pc, #552]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ea      	bne.n	800417a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8097 	beq.w	80042e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b83      	ldr	r3, [pc, #524]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b7f      	ldr	r3, [pc, #508]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	4a7e      	ldr	r2, [pc, #504]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d2:	4b7c      	ldr	r3, [pc, #496]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b79      	ldr	r3, [pc, #484]	@ (80043c8 <HAL_RCC_OscConfig+0x4b0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d118      	bne.n	8004220 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ee:	4b76      	ldr	r3, [pc, #472]	@ (80043c8 <HAL_RCC_OscConfig+0x4b0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a75      	ldr	r2, [pc, #468]	@ (80043c8 <HAL_RCC_OscConfig+0x4b0>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fdb5 	bl	8002d68 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fe fdb1 	bl	8002d68 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e118      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	4b6c      	ldr	r3, [pc, #432]	@ (80043c8 <HAL_RCC_OscConfig+0x4b0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x31e>
 8004228:	4b66      	ldr	r3, [pc, #408]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	4a65      	ldr	r2, [pc, #404]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	@ 0x70
 8004234:	e01c      	b.n	8004270 <HAL_RCC_OscConfig+0x358>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b05      	cmp	r3, #5
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x340>
 800423e:	4b61      	ldr	r3, [pc, #388]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004242:	4a60      	ldr	r2, [pc, #384]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	@ 0x70
 800424a:	4b5e      	ldr	r3, [pc, #376]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424e:	4a5d      	ldr	r2, [pc, #372]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	@ 0x70
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0x358>
 8004258:	4b5a      	ldr	r3, [pc, #360]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425c:	4a59      	ldr	r2, [pc, #356]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	@ 0x70
 8004264:	4b57      	ldr	r3, [pc, #348]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004268:	4a56      	ldr	r2, [pc, #344]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800426a:	f023 0304 	bic.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe fd76 	bl	8002d68 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fe fd72 	bl	8002d68 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e0d7      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	4b4b      	ldr	r3, [pc, #300]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ee      	beq.n	8004280 <HAL_RCC_OscConfig+0x368>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fe fd60 	bl	8002d68 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fe fd5c 	bl	8002d68 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0c1      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	4b40      	ldr	r3, [pc, #256]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ee      	bne.n	80042ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	4a3a      	ldr	r2, [pc, #232]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80ad 	beq.w	8004444 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ea:	4b36      	ldr	r3, [pc, #216]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d060      	beq.n	80043b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d145      	bne.n	800438a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b33      	ldr	r3, [pc, #204]	@ (80043cc <HAL_RCC_OscConfig+0x4b4>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fe fd30 	bl	8002d68 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fe fd2c 	bl	8002d68 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e093      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b29      	ldr	r3, [pc, #164]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	071b      	lsls	r3, r3, #28
 8004356:	491b      	ldr	r1, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCC_OscConfig+0x4b4>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fe fd01 	bl	8002d68 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436a:	f7fe fcfd 	bl	8002d68 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e064      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	4b11      	ldr	r3, [pc, #68]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x452>
 8004388:	e05c      	b.n	8004444 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b10      	ldr	r3, [pc, #64]	@ (80043cc <HAL_RCC_OscConfig+0x4b4>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fe fcea 	bl	8002d68 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fe fce6 	bl	8002d68 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e04d      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x480>
 80043b6:	e045      	b.n	8004444 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e040      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
 80043cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004450 <HAL_RCC_OscConfig+0x538>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d030      	beq.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d129      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d122      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004408:	4293      	cmp	r3, r2
 800440a:	d119      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	3b01      	subs	r3, #1
 800441a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d10f      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800

08004454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e041      	b.n	80044ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe f8e6 	bl	800264c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fd2e 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e041      	b.n	8004588 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f839 	bl	8004590 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f000 fcdf 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <HAL_TIM_PWM_Start+0x24>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e022      	b.n	800460e <HAL_TIM_PWM_Start+0x6a>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d109      	bne.n	80045e2 <HAL_TIM_PWM_Start+0x3e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	e015      	b.n	800460e <HAL_TIM_PWM_Start+0x6a>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d109      	bne.n	80045fc <HAL_TIM_PWM_Start+0x58>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e008      	b.n	800460e <HAL_TIM_PWM_Start+0x6a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07c      	b.n	8004710 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <HAL_TIM_PWM_Start+0x82>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004624:	e013      	b.n	800464e <HAL_TIM_PWM_Start+0xaa>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d104      	bne.n	8004636 <HAL_TIM_PWM_Start+0x92>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004634:	e00b      	b.n	800464e <HAL_TIM_PWM_Start+0xaa>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d104      	bne.n	8004646 <HAL_TIM_PWM_Start+0xa2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004644:	e003      	b.n	800464e <HAL_TIM_PWM_Start+0xaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2201      	movs	r2, #1
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 ff42 	bl	80054e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2d      	ldr	r2, [pc, #180]	@ (8004718 <HAL_TIM_PWM_Start+0x174>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_PWM_Start+0xcc>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2c      	ldr	r2, [pc, #176]	@ (800471c <HAL_TIM_PWM_Start+0x178>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_TIM_PWM_Start+0xd0>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_TIM_PWM_Start+0xd2>
 8004674:	2300      	movs	r3, #0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a22      	ldr	r2, [pc, #136]	@ (8004718 <HAL_TIM_PWM_Start+0x174>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <HAL_TIM_PWM_Start+0x136>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469c:	d01d      	beq.n	80046da <HAL_TIM_PWM_Start+0x136>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004720 <HAL_TIM_PWM_Start+0x17c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_TIM_PWM_Start+0x136>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004724 <HAL_TIM_PWM_Start+0x180>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_TIM_PWM_Start+0x136>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <HAL_TIM_PWM_Start+0x184>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_TIM_PWM_Start+0x136>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_TIM_PWM_Start+0x178>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_TIM_PWM_Start+0x136>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a18      	ldr	r2, [pc, #96]	@ (800472c <HAL_TIM_PWM_Start+0x188>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_TIM_PWM_Start+0x136>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <HAL_TIM_PWM_Start+0x18c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d111      	bne.n	80046fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b06      	cmp	r3, #6
 80046ea:	d010      	beq.n	800470e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	e007      	b.n	800470e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40010000 	.word	0x40010000
 800471c:	40010400 	.word	0x40010400
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40014000 	.word	0x40014000
 8004730:	40001800 	.word	0x40001800

08004734 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e097      	b.n	8004878 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fd ff9d 	bl	800269c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004778:	f023 0307 	bic.w	r3, r3, #7
 800477c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 fbb3 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	4313      	orrs	r3, r2
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80047d4:	f023 030c 	bic.w	r3, r3, #12
 80047d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	4313      	orrs	r3, r2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	011a      	lsls	r2, r3, #4
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	031b      	lsls	r3, r3, #12
 8004804:	4313      	orrs	r3, r2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800481a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	4313      	orrs	r3, r2
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004890:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004898:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d110      	bne.n	80048d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d102      	bne.n	80048bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80048b6:	7b7b      	ldrb	r3, [r7, #13]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d001      	beq.n	80048c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e069      	b.n	8004994 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048d0:	e031      	b.n	8004936 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d110      	bne.n	80048fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048d8:	7bbb      	ldrb	r3, [r7, #14]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d102      	bne.n	80048e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048de:	7b3b      	ldrb	r3, [r7, #12]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d001      	beq.n	80048e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e055      	b.n	8004994 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048f8:	e01d      	b.n	8004936 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d108      	bne.n	8004912 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004906:	7b7b      	ldrb	r3, [r7, #13]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d102      	bne.n	8004912 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800490c:	7b3b      	ldrb	r3, [r7, #12]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d001      	beq.n	8004916 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e03e      	b.n	8004994 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2202      	movs	r2, #2
 8004922:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_TIM_Encoder_Start+0xc4>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d008      	beq.n	8004954 <HAL_TIM_Encoder_Start+0xd4>
 8004942:	e00f      	b.n	8004964 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2201      	movs	r2, #1
 800494a:	2100      	movs	r1, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fdc7 	bl	80054e0 <TIM_CCxChannelCmd>
      break;
 8004952:	e016      	b.n	8004982 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2201      	movs	r2, #1
 800495a:	2104      	movs	r1, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fdbf 	bl	80054e0 <TIM_CCxChannelCmd>
      break;
 8004962:	e00e      	b.n	8004982 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2201      	movs	r2, #1
 800496a:	2100      	movs	r1, #0
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fdb7 	bl	80054e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	2104      	movs	r1, #4
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fdb0 	bl	80054e0 <TIM_CCxChannelCmd>
      break;
 8004980:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d020      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0202 	mvn.w	r2, #2
 80049d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa65 	bl	8004eb6 <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa57 	bl	8004ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fa68 	bl	8004eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0204 	mvn.w	r2, #4
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa3f 	bl	8004eb6 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fa31 	bl	8004ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fa42 	bl	8004eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d020      	beq.n	8004a98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0208 	mvn.w	r2, #8
 8004a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fa19 	bl	8004eb6 <HAL_TIM_IC_CaptureCallback>
 8004a84:	e005      	b.n	8004a92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa0b 	bl	8004ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fa1c 	bl	8004eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d020      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0210 	mvn.w	r2, #16
 8004ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2208      	movs	r2, #8
 8004aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f9f3 	bl	8004eb6 <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9e5 	bl	8004ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f9f6 	bl	8004eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00c      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0201 	mvn.w	r2, #1
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9c3 	bl	8004e8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00c      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fdd8 	bl	80056dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00c      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f9c7 	bl	8004ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0220 	mvn.w	r2, #32
 8004b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fdaa 	bl	80056c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0ae      	b.n	8004cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	f200 809f 	bhi.w	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004ce9 	.word	0x08004ce9
 8004bb8:	08004ce9 	.word	0x08004ce9
 8004bbc:	08004ce9 	.word	0x08004ce9
 8004bc0:	08004c25 	.word	0x08004c25
 8004bc4:	08004ce9 	.word	0x08004ce9
 8004bc8:	08004ce9 	.word	0x08004ce9
 8004bcc:	08004ce9 	.word	0x08004ce9
 8004bd0:	08004c67 	.word	0x08004c67
 8004bd4:	08004ce9 	.word	0x08004ce9
 8004bd8:	08004ce9 	.word	0x08004ce9
 8004bdc:	08004ce9 	.word	0x08004ce9
 8004be0:	08004ca7 	.word	0x08004ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa2e 	bl	800504c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0208 	orr.w	r2, r2, #8
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	619a      	str	r2, [r3, #24]
      break;
 8004c22:	e064      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fa7e 	bl	800512c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	619a      	str	r2, [r3, #24]
      break;
 8004c64:	e043      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fad3 	bl	8005218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0208 	orr.w	r2, r2, #8
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0204 	bic.w	r2, r2, #4
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	61da      	str	r2, [r3, #28]
      break;
 8004ca4:	e023      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fb27 	bl	8005300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	61da      	str	r2, [r3, #28]
      break;
 8004ce6:	e002      	b.n	8004cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	75fb      	strb	r3, [r7, #23]
      break;
 8004cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIM_ConfigClockSource+0x1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0b4      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x186>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d54:	d03e      	beq.n	8004dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8004d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5a:	f200 8087 	bhi.w	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d62:	f000 8086 	beq.w	8004e72 <HAL_TIM_ConfigClockSource+0x172>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6a:	d87f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	2b70      	cmp	r3, #112	@ 0x70
 8004d6e:	d01a      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0xa6>
 8004d70:	2b70      	cmp	r3, #112	@ 0x70
 8004d72:	d87b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b60      	cmp	r3, #96	@ 0x60
 8004d76:	d050      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x11a>
 8004d78:	2b60      	cmp	r3, #96	@ 0x60
 8004d7a:	d877      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b50      	cmp	r3, #80	@ 0x50
 8004d7e:	d03c      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0xfa>
 8004d80:	2b50      	cmp	r3, #80	@ 0x50
 8004d82:	d873      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b40      	cmp	r3, #64	@ 0x40
 8004d86:	d058      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x13a>
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	d86f      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b30      	cmp	r3, #48	@ 0x30
 8004d8e:	d064      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004d90:	2b30      	cmp	r3, #48	@ 0x30
 8004d92:	d86b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d060      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d867      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d05c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d05a      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	e062      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db6:	f000 fb73 	bl	80054a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
      break;
 8004dd2:	e04f      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de4:	f000 fb5c 	bl	80054a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004df6:	609a      	str	r2, [r3, #8]
      break;
 8004df8:	e03c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 fad0 	bl	80053ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2150      	movs	r1, #80	@ 0x50
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fb29 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004e18:	e02c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 faef 	bl	800540a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2160      	movs	r1, #96	@ 0x60
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fb19 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004e38:	e01c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	461a      	mov	r2, r3
 8004e48:	f000 fab0 	bl	80053ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2140      	movs	r1, #64	@ 0x40
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fb09 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004e58:	e00c      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f000 fb00 	bl	800546a <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e003      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a46      	ldr	r2, [pc, #280]	@ (8005020 <TIM_Base_SetConfig+0x12c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a43      	ldr	r2, [pc, #268]	@ (8005024 <TIM_Base_SetConfig+0x130>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a42      	ldr	r2, [pc, #264]	@ (8005028 <TIM_Base_SetConfig+0x134>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a41      	ldr	r2, [pc, #260]	@ (800502c <TIM_Base_SetConfig+0x138>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a40      	ldr	r2, [pc, #256]	@ (8005030 <TIM_Base_SetConfig+0x13c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a35      	ldr	r2, [pc, #212]	@ (8005020 <TIM_Base_SetConfig+0x12c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f54:	d027      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a32      	ldr	r2, [pc, #200]	@ (8005024 <TIM_Base_SetConfig+0x130>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d023      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a31      	ldr	r2, [pc, #196]	@ (8005028 <TIM_Base_SetConfig+0x134>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a30      	ldr	r2, [pc, #192]	@ (800502c <TIM_Base_SetConfig+0x138>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2f      	ldr	r2, [pc, #188]	@ (8005030 <TIM_Base_SetConfig+0x13c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2e      	ldr	r2, [pc, #184]	@ (8005034 <TIM_Base_SetConfig+0x140>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	@ (8005038 <TIM_Base_SetConfig+0x144>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	@ (800503c <TIM_Base_SetConfig+0x148>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	@ (8005040 <TIM_Base_SetConfig+0x14c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	@ (8005044 <TIM_Base_SetConfig+0x150>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	@ (8005048 <TIM_Base_SetConfig+0x154>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a10      	ldr	r2, [pc, #64]	@ (8005020 <TIM_Base_SetConfig+0x12c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_Base_SetConfig+0xf8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a12      	ldr	r2, [pc, #72]	@ (8005030 <TIM_Base_SetConfig+0x13c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d103      	bne.n	8004ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d105      	bne.n	8005012 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f023 0201 	bic.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]
  }
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40010400 	.word	0x40010400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800
 8005040:	40001800 	.word	0x40001800
 8005044:	40001c00 	.word	0x40001c00
 8005048:	40002000 	.word	0x40002000

0800504c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f023 0201 	bic.w	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 0302 	bic.w	r3, r3, #2
 8005094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a20      	ldr	r2, [pc, #128]	@ (8005124 <TIM_OC1_SetConfig+0xd8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_OC1_SetConfig+0x64>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005128 <TIM_OC1_SetConfig+0xdc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10c      	bne.n	80050ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0308 	bic.w	r3, r3, #8
 80050b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a15      	ldr	r2, [pc, #84]	@ (8005124 <TIM_OC1_SetConfig+0xd8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_OC1_SetConfig+0x8e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a14      	ldr	r2, [pc, #80]	@ (8005128 <TIM_OC1_SetConfig+0xdc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d111      	bne.n	80050fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	621a      	str	r2, [r3, #32]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400

0800512c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f023 0210 	bic.w	r2, r3, #16
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0320 	bic.w	r3, r3, #32
 8005176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a22      	ldr	r2, [pc, #136]	@ (8005210 <TIM_OC2_SetConfig+0xe4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC2_SetConfig+0x68>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a21      	ldr	r2, [pc, #132]	@ (8005214 <TIM_OC2_SetConfig+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10d      	bne.n	80051b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800519a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <TIM_OC2_SetConfig+0xe4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC2_SetConfig+0x94>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <TIM_OC2_SetConfig+0xe8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d113      	bne.n	80051e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40010000 	.word	0x40010000
 8005214:	40010400 	.word	0x40010400

08005218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0303 	bic.w	r3, r3, #3
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a21      	ldr	r2, [pc, #132]	@ (80052f8 <TIM_OC3_SetConfig+0xe0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_OC3_SetConfig+0x66>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a20      	ldr	r2, [pc, #128]	@ (80052fc <TIM_OC3_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10d      	bne.n	800529a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a16      	ldr	r2, [pc, #88]	@ (80052f8 <TIM_OC3_SetConfig+0xe0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC3_SetConfig+0x92>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <TIM_OC3_SetConfig+0xe4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d113      	bne.n	80052d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	621a      	str	r2, [r3, #32]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40010400 	.word	0x40010400

08005300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800532e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800534a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a12      	ldr	r2, [pc, #72]	@ (80053a4 <TIM_OC4_SetConfig+0xa4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC4_SetConfig+0x68>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a11      	ldr	r2, [pc, #68]	@ (80053a8 <TIM_OC4_SetConfig+0xa8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d109      	bne.n	800537c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800536e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40010400 	.word	0x40010400

080053ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f023 0201 	bic.w	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f023 030a 	bic.w	r3, r3, #10
 80053e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540a:	b480      	push	{r7}
 800540c:	b087      	sub	sp, #28
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f023 0210 	bic.w	r2, r3, #16
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	031b      	lsls	r3, r3, #12
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005446:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005480:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	f043 0307 	orr.w	r3, r3, #7
 800548c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	609a      	str	r2, [r3, #8]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2201      	movs	r2, #1
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	431a      	orrs	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005540:	2302      	movs	r3, #2
 8005542:	e05a      	b.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a21      	ldr	r2, [pc, #132]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005590:	d01d      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1d      	ldr	r2, [pc, #116]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a17      	ldr	r2, [pc, #92]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a15      	ldr	r2, [pc, #84]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10c      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40010400 	.word	0x40010400
 800561c:	40014000 	.word	0x40014000
 8005620:	40001800 	.word	0x40001800

08005624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800563c:	2302      	movs	r3, #2
 800563e:	e03d      	b.n	80056bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e042      	b.n	8005788 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fd f91e 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	@ 0x24
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f82b 	bl	8005790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b0c0      	sub	sp, #256	@ 0x100
 8005796:	af00      	add	r7, sp, #0
 8005798:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ac:	68d9      	ldr	r1, [r3, #12]
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	ea40 0301 	orr.w	r3, r0, r1
 80057b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057e8:	f021 010c 	bic.w	r1, r1, #12
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057f6:	430b      	orrs	r3, r1
 80057f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580a:	6999      	ldr	r1, [r3, #24]
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	ea40 0301 	orr.w	r3, r0, r1
 8005816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b8f      	ldr	r3, [pc, #572]	@ (8005a5c <UART_SetConfig+0x2cc>)
 8005820:	429a      	cmp	r2, r3
 8005822:	d005      	beq.n	8005830 <UART_SetConfig+0xa0>
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a60 <UART_SetConfig+0x2d0>)
 800582c:	429a      	cmp	r2, r3
 800582e:	d104      	bne.n	800583a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005830:	f7fe f92e 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 8005834:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005838:	e003      	b.n	8005842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800583a:	f7fe f915 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 800583e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800584c:	f040 810c 	bne.w	8005a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005854:	2200      	movs	r2, #0
 8005856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800585a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800585e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	1891      	adds	r1, r2, r2
 8005868:	65b9      	str	r1, [r7, #88]	@ 0x58
 800586a:	415b      	adcs	r3, r3
 800586c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800586e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005872:	4621      	mov	r1, r4
 8005874:	eb12 0801 	adds.w	r8, r2, r1
 8005878:	4629      	mov	r1, r5
 800587a:	eb43 0901 	adc.w	r9, r3, r1
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800588a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800588e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005892:	4690      	mov	r8, r2
 8005894:	4699      	mov	r9, r3
 8005896:	4623      	mov	r3, r4
 8005898:	eb18 0303 	adds.w	r3, r8, r3
 800589c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058a0:	462b      	mov	r3, r5
 80058a2:	eb49 0303 	adc.w	r3, r9, r3
 80058a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058be:	460b      	mov	r3, r1
 80058c0:	18db      	adds	r3, r3, r3
 80058c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058c4:	4613      	mov	r3, r2
 80058c6:	eb42 0303 	adc.w	r3, r2, r3
 80058ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80058cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80058d4:	f7fa ff2c 	bl	8000730 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b61      	ldr	r3, [pc, #388]	@ (8005a64 <UART_SetConfig+0x2d4>)
 80058de:	fba3 2302 	umull	r2, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	011c      	lsls	r4, r3, #4
 80058e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	1891      	adds	r1, r2, r2
 80058fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005900:	415b      	adcs	r3, r3
 8005902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005908:	4641      	mov	r1, r8
 800590a:	eb12 0a01 	adds.w	sl, r2, r1
 800590e:	4649      	mov	r1, r9
 8005910:	eb43 0b01 	adc.w	fp, r3, r1
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005928:	4692      	mov	sl, r2
 800592a:	469b      	mov	fp, r3
 800592c:	4643      	mov	r3, r8
 800592e:	eb1a 0303 	adds.w	r3, sl, r3
 8005932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005936:	464b      	mov	r3, r9
 8005938:	eb4b 0303 	adc.w	r3, fp, r3
 800593c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800594c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005954:	460b      	mov	r3, r1
 8005956:	18db      	adds	r3, r3, r3
 8005958:	643b      	str	r3, [r7, #64]	@ 0x40
 800595a:	4613      	mov	r3, r2
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	647b      	str	r3, [r7, #68]	@ 0x44
 8005962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800596a:	f7fa fee1 	bl	8000730 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4611      	mov	r1, r2
 8005974:	4b3b      	ldr	r3, [pc, #236]	@ (8005a64 <UART_SetConfig+0x2d4>)
 8005976:	fba3 2301 	umull	r2, r3, r3, r1
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	2264      	movs	r2, #100	@ 0x64
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	1acb      	subs	r3, r1, r3
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800598a:	4b36      	ldr	r3, [pc, #216]	@ (8005a64 <UART_SetConfig+0x2d4>)
 800598c:	fba3 2302 	umull	r2, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005998:	441c      	add	r4, r3
 800599a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	1891      	adds	r1, r2, r2
 80059b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059b4:	415b      	adcs	r3, r3
 80059b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059bc:	4641      	mov	r1, r8
 80059be:	1851      	adds	r1, r2, r1
 80059c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80059c2:	4649      	mov	r1, r9
 80059c4:	414b      	adcs	r3, r1
 80059c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80059d4:	4659      	mov	r1, fp
 80059d6:	00cb      	lsls	r3, r1, #3
 80059d8:	4651      	mov	r1, sl
 80059da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059de:	4651      	mov	r1, sl
 80059e0:	00ca      	lsls	r2, r1, #3
 80059e2:	4610      	mov	r0, r2
 80059e4:	4619      	mov	r1, r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	4642      	mov	r2, r8
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059f0:	464b      	mov	r3, r9
 80059f2:	460a      	mov	r2, r1
 80059f4:	eb42 0303 	adc.w	r3, r2, r3
 80059f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a10:	460b      	mov	r3, r1
 8005a12:	18db      	adds	r3, r3, r3
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a16:	4613      	mov	r3, r2
 8005a18:	eb42 0303 	adc.w	r3, r2, r3
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a26:	f7fa fe83 	bl	8000730 <__aeabi_uldivmod>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <UART_SetConfig+0x2d4>)
 8005a30:	fba3 1302 	umull	r1, r3, r3, r2
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	2164      	movs	r1, #100	@ 0x64
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	3332      	adds	r3, #50	@ 0x32
 8005a42:	4a08      	ldr	r2, [pc, #32]	@ (8005a64 <UART_SetConfig+0x2d4>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	f003 0207 	and.w	r2, r3, #7
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4422      	add	r2, r4
 8005a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a58:	e106      	b.n	8005c68 <UART_SetConfig+0x4d8>
 8005a5a:	bf00      	nop
 8005a5c:	40011000 	.word	0x40011000
 8005a60:	40011400 	.word	0x40011400
 8005a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a7a:	4642      	mov	r2, r8
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	1891      	adds	r1, r2, r2
 8005a80:	6239      	str	r1, [r7, #32]
 8005a82:	415b      	adcs	r3, r3
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a8a:	4641      	mov	r1, r8
 8005a8c:	1854      	adds	r4, r2, r1
 8005a8e:	4649      	mov	r1, r9
 8005a90:	eb43 0501 	adc.w	r5, r3, r1
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	00eb      	lsls	r3, r5, #3
 8005a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aa2:	00e2      	lsls	r2, r4, #3
 8005aa4:	4614      	mov	r4, r2
 8005aa6:	461d      	mov	r5, r3
 8005aa8:	4643      	mov	r3, r8
 8005aaa:	18e3      	adds	r3, r4, r3
 8005aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ab0:	464b      	mov	r3, r9
 8005ab2:	eb45 0303 	adc.w	r3, r5, r3
 8005ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	008b      	lsls	r3, r1, #2
 8005ada:	4621      	mov	r1, r4
 8005adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	008a      	lsls	r2, r1, #2
 8005ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ae8:	f7fa fe22 	bl	8000730 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4b60      	ldr	r3, [pc, #384]	@ (8005c74 <UART_SetConfig+0x4e4>)
 8005af2:	fba3 2302 	umull	r2, r3, r3, r2
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	011c      	lsls	r4, r3, #4
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	1891      	adds	r1, r2, r2
 8005b12:	61b9      	str	r1, [r7, #24]
 8005b14:	415b      	adcs	r3, r3
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	1851      	adds	r1, r2, r1
 8005b20:	6139      	str	r1, [r7, #16]
 8005b22:	4649      	mov	r1, r9
 8005b24:	414b      	adcs	r3, r1
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b34:	4659      	mov	r1, fp
 8005b36:	00cb      	lsls	r3, r1, #3
 8005b38:	4651      	mov	r1, sl
 8005b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3e:	4651      	mov	r1, sl
 8005b40:	00ca      	lsls	r2, r1, #3
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	4642      	mov	r2, r8
 8005b4a:	189b      	adds	r3, r3, r2
 8005b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b50:	464b      	mov	r3, r9
 8005b52:	460a      	mov	r2, r1
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b74:	4649      	mov	r1, r9
 8005b76:	008b      	lsls	r3, r1, #2
 8005b78:	4641      	mov	r1, r8
 8005b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7e:	4641      	mov	r1, r8
 8005b80:	008a      	lsls	r2, r1, #2
 8005b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b86:	f7fa fdd3 	bl	8000730 <__aeabi_uldivmod>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4b38      	ldr	r3, [pc, #224]	@ (8005c74 <UART_SetConfig+0x4e4>)
 8005b92:	fba3 2301 	umull	r2, r3, r3, r1
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2264      	movs	r2, #100	@ 0x64
 8005b9a:	fb02 f303 	mul.w	r3, r2, r3
 8005b9e:	1acb      	subs	r3, r1, r3
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	3332      	adds	r3, #50	@ 0x32
 8005ba4:	4a33      	ldr	r2, [pc, #204]	@ (8005c74 <UART_SetConfig+0x4e4>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bb0:	441c      	add	r4, r3
 8005bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bba:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	1891      	adds	r1, r2, r2
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	1851      	adds	r1, r2, r1
 8005bd4:	6039      	str	r1, [r7, #0]
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	414b      	adcs	r3, r1
 8005bda:	607b      	str	r3, [r7, #4]
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005be8:	4659      	mov	r1, fp
 8005bea:	00cb      	lsls	r3, r1, #3
 8005bec:	4651      	mov	r1, sl
 8005bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	00ca      	lsls	r2, r1, #3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	189b      	adds	r3, r3, r2
 8005c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c02:	464b      	mov	r3, r9
 8005c04:	460a      	mov	r2, r1
 8005c06:	eb42 0303 	adc.w	r3, r2, r3
 8005c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c16:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c24:	4649      	mov	r1, r9
 8005c26:	008b      	lsls	r3, r1, #2
 8005c28:	4641      	mov	r1, r8
 8005c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c2e:	4641      	mov	r1, r8
 8005c30:	008a      	lsls	r2, r1, #2
 8005c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c36:	f7fa fd7b 	bl	8000730 <__aeabi_uldivmod>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <UART_SetConfig+0x4e4>)
 8005c40:	fba3 1302 	umull	r1, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	2164      	movs	r1, #100	@ 0x64
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	3332      	adds	r3, #50	@ 0x32
 8005c52:	4a08      	ldr	r2, [pc, #32]	@ (8005c74 <UART_SetConfig+0x4e4>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f003 020f 	and.w	r2, r3, #15
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4422      	add	r2, r4
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c74:	51eb851f 	.word	0x51eb851f

08005c78 <memset>:
 8005c78:	4402      	add	r2, r0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d100      	bne.n	8005c82 <memset+0xa>
 8005c80:	4770      	bx	lr
 8005c82:	f803 1b01 	strb.w	r1, [r3], #1
 8005c86:	e7f9      	b.n	8005c7c <memset+0x4>

08005c88 <__errno>:
 8005c88:	4b01      	ldr	r3, [pc, #4]	@ (8005c90 <__errno+0x8>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	2000000c 	.word	0x2000000c

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4d0d      	ldr	r5, [pc, #52]	@ (8005ccc <__libc_init_array+0x38>)
 8005c98:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd0 <__libc_init_array+0x3c>)
 8005c9a:	1b64      	subs	r4, r4, r5
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8005cd4 <__libc_init_array+0x40>)
 8005ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8005cd8 <__libc_init_array+0x44>)
 8005ca8:	f000 fdae 	bl	8006808 <_init>
 8005cac:	1b64      	subs	r4, r4, r5
 8005cae:	10a4      	asrs	r4, r4, #2
 8005cb0:	2600      	movs	r6, #0
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08006c1c 	.word	0x08006c1c
 8005cd0:	08006c1c 	.word	0x08006c1c
 8005cd4:	08006c1c 	.word	0x08006c1c
 8005cd8:	08006c20 	.word	0x08006c20

08005cdc <sqrtf>:
 8005cdc:	b508      	push	{r3, lr}
 8005cde:	ed2d 8b02 	vpush	{d8}
 8005ce2:	eeb0 8a40 	vmov.f32	s16, s0
 8005ce6:	f000 f8a1 	bl	8005e2c <__ieee754_sqrtf>
 8005cea:	eeb4 8a48 	vcmp.f32	s16, s16
 8005cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf2:	d60c      	bvs.n	8005d0e <sqrtf+0x32>
 8005cf4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005d14 <sqrtf+0x38>
 8005cf8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d00:	d505      	bpl.n	8005d0e <sqrtf+0x32>
 8005d02:	f7ff ffc1 	bl	8005c88 <__errno>
 8005d06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005d0a:	2321      	movs	r3, #33	@ 0x21
 8005d0c:	6003      	str	r3, [r0, #0]
 8005d0e:	ecbd 8b02 	vpop	{d8}
 8005d12:	bd08      	pop	{r3, pc}
 8005d14:	00000000 	.word	0x00000000

08005d18 <cosf>:
 8005d18:	ee10 3a10 	vmov	r3, s0
 8005d1c:	b507      	push	{r0, r1, r2, lr}
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d98 <cosf+0x80>)
 8005d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d806      	bhi.n	8005d36 <cosf+0x1e>
 8005d28:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8005d9c <cosf+0x84>
 8005d2c:	b003      	add	sp, #12
 8005d2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d32:	f000 b87f 	b.w	8005e34 <__kernel_cosf>
 8005d36:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005d3a:	d304      	bcc.n	8005d46 <cosf+0x2e>
 8005d3c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005d40:	b003      	add	sp, #12
 8005d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d46:	4668      	mov	r0, sp
 8005d48:	f000 f914 	bl	8005f74 <__ieee754_rem_pio2f>
 8005d4c:	f000 0003 	and.w	r0, r0, #3
 8005d50:	2801      	cmp	r0, #1
 8005d52:	d009      	beq.n	8005d68 <cosf+0x50>
 8005d54:	2802      	cmp	r0, #2
 8005d56:	d010      	beq.n	8005d7a <cosf+0x62>
 8005d58:	b9b0      	cbnz	r0, 8005d88 <cosf+0x70>
 8005d5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d5e:	ed9d 0a00 	vldr	s0, [sp]
 8005d62:	f000 f867 	bl	8005e34 <__kernel_cosf>
 8005d66:	e7eb      	b.n	8005d40 <cosf+0x28>
 8005d68:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d6c:	ed9d 0a00 	vldr	s0, [sp]
 8005d70:	f000 f8b8 	bl	8005ee4 <__kernel_sinf>
 8005d74:	eeb1 0a40 	vneg.f32	s0, s0
 8005d78:	e7e2      	b.n	8005d40 <cosf+0x28>
 8005d7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d7e:	ed9d 0a00 	vldr	s0, [sp]
 8005d82:	f000 f857 	bl	8005e34 <__kernel_cosf>
 8005d86:	e7f5      	b.n	8005d74 <cosf+0x5c>
 8005d88:	eddd 0a01 	vldr	s1, [sp, #4]
 8005d8c:	ed9d 0a00 	vldr	s0, [sp]
 8005d90:	2001      	movs	r0, #1
 8005d92:	f000 f8a7 	bl	8005ee4 <__kernel_sinf>
 8005d96:	e7d3      	b.n	8005d40 <cosf+0x28>
 8005d98:	3f490fd8 	.word	0x3f490fd8
 8005d9c:	00000000 	.word	0x00000000

08005da0 <sinf>:
 8005da0:	ee10 3a10 	vmov	r3, s0
 8005da4:	b507      	push	{r0, r1, r2, lr}
 8005da6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e24 <sinf+0x84>)
 8005da8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d807      	bhi.n	8005dc0 <sinf+0x20>
 8005db0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005e28 <sinf+0x88>
 8005db4:	2000      	movs	r0, #0
 8005db6:	b003      	add	sp, #12
 8005db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dbc:	f000 b892 	b.w	8005ee4 <__kernel_sinf>
 8005dc0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005dc4:	d304      	bcc.n	8005dd0 <sinf+0x30>
 8005dc6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005dca:	b003      	add	sp, #12
 8005dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dd0:	4668      	mov	r0, sp
 8005dd2:	f000 f8cf 	bl	8005f74 <__ieee754_rem_pio2f>
 8005dd6:	f000 0003 	and.w	r0, r0, #3
 8005dda:	2801      	cmp	r0, #1
 8005ddc:	d00a      	beq.n	8005df4 <sinf+0x54>
 8005dde:	2802      	cmp	r0, #2
 8005de0:	d00f      	beq.n	8005e02 <sinf+0x62>
 8005de2:	b9c0      	cbnz	r0, 8005e16 <sinf+0x76>
 8005de4:	eddd 0a01 	vldr	s1, [sp, #4]
 8005de8:	ed9d 0a00 	vldr	s0, [sp]
 8005dec:	2001      	movs	r0, #1
 8005dee:	f000 f879 	bl	8005ee4 <__kernel_sinf>
 8005df2:	e7ea      	b.n	8005dca <sinf+0x2a>
 8005df4:	eddd 0a01 	vldr	s1, [sp, #4]
 8005df8:	ed9d 0a00 	vldr	s0, [sp]
 8005dfc:	f000 f81a 	bl	8005e34 <__kernel_cosf>
 8005e00:	e7e3      	b.n	8005dca <sinf+0x2a>
 8005e02:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e06:	ed9d 0a00 	vldr	s0, [sp]
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	f000 f86a 	bl	8005ee4 <__kernel_sinf>
 8005e10:	eeb1 0a40 	vneg.f32	s0, s0
 8005e14:	e7d9      	b.n	8005dca <sinf+0x2a>
 8005e16:	eddd 0a01 	vldr	s1, [sp, #4]
 8005e1a:	ed9d 0a00 	vldr	s0, [sp]
 8005e1e:	f000 f809 	bl	8005e34 <__kernel_cosf>
 8005e22:	e7f5      	b.n	8005e10 <sinf+0x70>
 8005e24:	3f490fd8 	.word	0x3f490fd8
 8005e28:	00000000 	.word	0x00000000

08005e2c <__ieee754_sqrtf>:
 8005e2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005e30:	4770      	bx	lr
	...

08005e34 <__kernel_cosf>:
 8005e34:	ee10 3a10 	vmov	r3, s0
 8005e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e3c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005e40:	eef0 6a40 	vmov.f32	s13, s0
 8005e44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005e48:	d204      	bcs.n	8005e54 <__kernel_cosf+0x20>
 8005e4a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005e4e:	ee17 2a90 	vmov	r2, s15
 8005e52:	b342      	cbz	r2, 8005ea6 <__kernel_cosf+0x72>
 8005e54:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005e58:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005ec4 <__kernel_cosf+0x90>
 8005e5c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005ec8 <__kernel_cosf+0x94>
 8005e60:	4a1a      	ldr	r2, [pc, #104]	@ (8005ecc <__kernel_cosf+0x98>)
 8005e62:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005e66:	4293      	cmp	r3, r2
 8005e68:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005ed0 <__kernel_cosf+0x9c>
 8005e6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005e70:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8005ed4 <__kernel_cosf+0xa0>
 8005e74:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005e78:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8005ed8 <__kernel_cosf+0xa4>
 8005e7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005e80:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8005edc <__kernel_cosf+0xa8>
 8005e84:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005e88:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005e8c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005e90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005e94:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9c:	d804      	bhi.n	8005ea8 <__kernel_cosf+0x74>
 8005e9e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005ea2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ea6:	4770      	bx	lr
 8005ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee0 <__kernel_cosf+0xac>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	bf9a      	itte	ls
 8005eae:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8005eb2:	ee07 3a10 	vmovls	s14, r3
 8005eb6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005eba:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ec2:	e7ec      	b.n	8005e9e <__kernel_cosf+0x6a>
 8005ec4:	ad47d74e 	.word	0xad47d74e
 8005ec8:	310f74f6 	.word	0x310f74f6
 8005ecc:	3e999999 	.word	0x3e999999
 8005ed0:	b493f27c 	.word	0xb493f27c
 8005ed4:	37d00d01 	.word	0x37d00d01
 8005ed8:	bab60b61 	.word	0xbab60b61
 8005edc:	3d2aaaab 	.word	0x3d2aaaab
 8005ee0:	3f480000 	.word	0x3f480000

08005ee4 <__kernel_sinf>:
 8005ee4:	ee10 3a10 	vmov	r3, s0
 8005ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005ef0:	d204      	bcs.n	8005efc <__kernel_sinf+0x18>
 8005ef2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005ef6:	ee17 3a90 	vmov	r3, s15
 8005efa:	b35b      	cbz	r3, 8005f54 <__kernel_sinf+0x70>
 8005efc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005f00:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005f58 <__kernel_sinf+0x74>
 8005f04:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005f5c <__kernel_sinf+0x78>
 8005f08:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005f0c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005f60 <__kernel_sinf+0x7c>
 8005f10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005f14:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005f64 <__kernel_sinf+0x80>
 8005f18:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005f1c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005f68 <__kernel_sinf+0x84>
 8005f20:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005f24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005f28:	b930      	cbnz	r0, 8005f38 <__kernel_sinf+0x54>
 8005f2a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005f6c <__kernel_sinf+0x88>
 8005f2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005f32:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005f36:	4770      	bx	lr
 8005f38:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005f3c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005f40:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005f44:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005f48:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005f70 <__kernel_sinf+0x8c>
 8005f4c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005f50:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	2f2ec9d3 	.word	0x2f2ec9d3
 8005f5c:	b2d72f34 	.word	0xb2d72f34
 8005f60:	3638ef1b 	.word	0x3638ef1b
 8005f64:	b9500d01 	.word	0xb9500d01
 8005f68:	3c088889 	.word	0x3c088889
 8005f6c:	be2aaaab 	.word	0xbe2aaaab
 8005f70:	3e2aaaab 	.word	0x3e2aaaab

08005f74 <__ieee754_rem_pio2f>:
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	ee10 6a10 	vmov	r6, s0
 8005f7a:	4b88      	ldr	r3, [pc, #544]	@ (800619c <__ieee754_rem_pio2f+0x228>)
 8005f7c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005f80:	429d      	cmp	r5, r3
 8005f82:	b087      	sub	sp, #28
 8005f84:	4604      	mov	r4, r0
 8005f86:	d805      	bhi.n	8005f94 <__ieee754_rem_pio2f+0x20>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	ed80 0a00 	vstr	s0, [r0]
 8005f8e:	6043      	str	r3, [r0, #4]
 8005f90:	2000      	movs	r0, #0
 8005f92:	e022      	b.n	8005fda <__ieee754_rem_pio2f+0x66>
 8005f94:	4b82      	ldr	r3, [pc, #520]	@ (80061a0 <__ieee754_rem_pio2f+0x22c>)
 8005f96:	429d      	cmp	r5, r3
 8005f98:	d83a      	bhi.n	8006010 <__ieee754_rem_pio2f+0x9c>
 8005f9a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80061a4 <__ieee754_rem_pio2f+0x230>
 8005fa4:	4a80      	ldr	r2, [pc, #512]	@ (80061a8 <__ieee754_rem_pio2f+0x234>)
 8005fa6:	f023 030f 	bic.w	r3, r3, #15
 8005faa:	dd18      	ble.n	8005fde <__ieee754_rem_pio2f+0x6a>
 8005fac:	4293      	cmp	r3, r2
 8005fae:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005fb2:	bf09      	itett	eq
 8005fb4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80061ac <__ieee754_rem_pio2f+0x238>
 8005fb8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80061b0 <__ieee754_rem_pio2f+0x23c>
 8005fbc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80061b4 <__ieee754_rem_pio2f+0x240>
 8005fc0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005fc4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fcc:	ed80 7a00 	vstr	s14, [r0]
 8005fd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005fd4:	edc0 7a01 	vstr	s15, [r0, #4]
 8005fd8:	2001      	movs	r0, #1
 8005fda:	b007      	add	sp, #28
 8005fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005fe4:	bf09      	itett	eq
 8005fe6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80061ac <__ieee754_rem_pio2f+0x238>
 8005fea:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80061b0 <__ieee754_rem_pio2f+0x23c>
 8005fee:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80061b4 <__ieee754_rem_pio2f+0x240>
 8005ff2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005ff6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ffe:	ed80 7a00 	vstr	s14, [r0]
 8006002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006006:	edc0 7a01 	vstr	s15, [r0, #4]
 800600a:	f04f 30ff 	mov.w	r0, #4294967295
 800600e:	e7e4      	b.n	8005fda <__ieee754_rem_pio2f+0x66>
 8006010:	4b69      	ldr	r3, [pc, #420]	@ (80061b8 <__ieee754_rem_pio2f+0x244>)
 8006012:	429d      	cmp	r5, r3
 8006014:	d873      	bhi.n	80060fe <__ieee754_rem_pio2f+0x18a>
 8006016:	f000 f8dd 	bl	80061d4 <fabsf>
 800601a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80061bc <__ieee754_rem_pio2f+0x248>
 800601e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006022:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800602a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800602e:	ee17 0a90 	vmov	r0, s15
 8006032:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80061a4 <__ieee754_rem_pio2f+0x230>
 8006036:	eea7 0a67 	vfms.f32	s0, s14, s15
 800603a:	281f      	cmp	r0, #31
 800603c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80061b0 <__ieee754_rem_pio2f+0x23c>
 8006040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006044:	eeb1 6a47 	vneg.f32	s12, s14
 8006048:	ee70 6a67 	vsub.f32	s13, s0, s15
 800604c:	ee16 1a90 	vmov	r1, s13
 8006050:	dc09      	bgt.n	8006066 <__ieee754_rem_pio2f+0xf2>
 8006052:	4a5b      	ldr	r2, [pc, #364]	@ (80061c0 <__ieee754_rem_pio2f+0x24c>)
 8006054:	1e47      	subs	r7, r0, #1
 8006056:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800605a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800605e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006062:	4293      	cmp	r3, r2
 8006064:	d107      	bne.n	8006076 <__ieee754_rem_pio2f+0x102>
 8006066:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800606a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800606e:	2a08      	cmp	r2, #8
 8006070:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006074:	dc14      	bgt.n	80060a0 <__ieee754_rem_pio2f+0x12c>
 8006076:	6021      	str	r1, [r4, #0]
 8006078:	ed94 7a00 	vldr	s14, [r4]
 800607c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006080:	2e00      	cmp	r6, #0
 8006082:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006086:	ed84 0a01 	vstr	s0, [r4, #4]
 800608a:	daa6      	bge.n	8005fda <__ieee754_rem_pio2f+0x66>
 800608c:	eeb1 7a47 	vneg.f32	s14, s14
 8006090:	eeb1 0a40 	vneg.f32	s0, s0
 8006094:	ed84 7a00 	vstr	s14, [r4]
 8006098:	ed84 0a01 	vstr	s0, [r4, #4]
 800609c:	4240      	negs	r0, r0
 800609e:	e79c      	b.n	8005fda <__ieee754_rem_pio2f+0x66>
 80060a0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80061ac <__ieee754_rem_pio2f+0x238>
 80060a4:	eef0 6a40 	vmov.f32	s13, s0
 80060a8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80060ac:	ee70 7a66 	vsub.f32	s15, s0, s13
 80060b0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80060b4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80061b4 <__ieee754_rem_pio2f+0x240>
 80060b8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80060bc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80060c0:	ee15 2a90 	vmov	r2, s11
 80060c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80060c8:	1a5b      	subs	r3, r3, r1
 80060ca:	2b19      	cmp	r3, #25
 80060cc:	dc04      	bgt.n	80060d8 <__ieee754_rem_pio2f+0x164>
 80060ce:	edc4 5a00 	vstr	s11, [r4]
 80060d2:	eeb0 0a66 	vmov.f32	s0, s13
 80060d6:	e7cf      	b.n	8006078 <__ieee754_rem_pio2f+0x104>
 80060d8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80061c4 <__ieee754_rem_pio2f+0x250>
 80060dc:	eeb0 0a66 	vmov.f32	s0, s13
 80060e0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80060e4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80060e8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80061c8 <__ieee754_rem_pio2f+0x254>
 80060ec:	eee6 7a25 	vfma.f32	s15, s12, s11
 80060f0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80060f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80060f8:	ed84 7a00 	vstr	s14, [r4]
 80060fc:	e7bc      	b.n	8006078 <__ieee754_rem_pio2f+0x104>
 80060fe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8006102:	d306      	bcc.n	8006112 <__ieee754_rem_pio2f+0x19e>
 8006104:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006108:	edc0 7a01 	vstr	s15, [r0, #4]
 800610c:	edc0 7a00 	vstr	s15, [r0]
 8006110:	e73e      	b.n	8005f90 <__ieee754_rem_pio2f+0x1c>
 8006112:	15ea      	asrs	r2, r5, #23
 8006114:	3a86      	subs	r2, #134	@ 0x86
 8006116:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006122:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80061cc <__ieee754_rem_pio2f+0x258>
 8006126:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800612a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800612e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006132:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006136:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800613a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800613e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006142:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006146:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800614a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006152:	edcd 7a05 	vstr	s15, [sp, #20]
 8006156:	d11e      	bne.n	8006196 <__ieee754_rem_pio2f+0x222>
 8006158:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006160:	bf0c      	ite	eq
 8006162:	2301      	moveq	r3, #1
 8006164:	2302      	movne	r3, #2
 8006166:	491a      	ldr	r1, [pc, #104]	@ (80061d0 <__ieee754_rem_pio2f+0x25c>)
 8006168:	9101      	str	r1, [sp, #4]
 800616a:	2102      	movs	r1, #2
 800616c:	9100      	str	r1, [sp, #0]
 800616e:	a803      	add	r0, sp, #12
 8006170:	4621      	mov	r1, r4
 8006172:	f000 f837 	bl	80061e4 <__kernel_rem_pio2f>
 8006176:	2e00      	cmp	r6, #0
 8006178:	f6bf af2f 	bge.w	8005fda <__ieee754_rem_pio2f+0x66>
 800617c:	edd4 7a00 	vldr	s15, [r4]
 8006180:	eef1 7a67 	vneg.f32	s15, s15
 8006184:	edc4 7a00 	vstr	s15, [r4]
 8006188:	edd4 7a01 	vldr	s15, [r4, #4]
 800618c:	eef1 7a67 	vneg.f32	s15, s15
 8006190:	edc4 7a01 	vstr	s15, [r4, #4]
 8006194:	e782      	b.n	800609c <__ieee754_rem_pio2f+0x128>
 8006196:	2303      	movs	r3, #3
 8006198:	e7e5      	b.n	8006166 <__ieee754_rem_pio2f+0x1f2>
 800619a:	bf00      	nop
 800619c:	3f490fd8 	.word	0x3f490fd8
 80061a0:	4016cbe3 	.word	0x4016cbe3
 80061a4:	3fc90f80 	.word	0x3fc90f80
 80061a8:	3fc90fd0 	.word	0x3fc90fd0
 80061ac:	37354400 	.word	0x37354400
 80061b0:	37354443 	.word	0x37354443
 80061b4:	2e85a308 	.word	0x2e85a308
 80061b8:	43490f80 	.word	0x43490f80
 80061bc:	3f22f984 	.word	0x3f22f984
 80061c0:	08006844 	.word	0x08006844
 80061c4:	2e85a300 	.word	0x2e85a300
 80061c8:	248d3132 	.word	0x248d3132
 80061cc:	43800000 	.word	0x43800000
 80061d0:	080068c4 	.word	0x080068c4

080061d4 <fabsf>:
 80061d4:	ee10 3a10 	vmov	r3, s0
 80061d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061dc:	ee00 3a10 	vmov	s0, r3
 80061e0:	4770      	bx	lr
	...

080061e4 <__kernel_rem_pio2f>:
 80061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	ed2d 8b04 	vpush	{d8-d9}
 80061ec:	b0d9      	sub	sp, #356	@ 0x164
 80061ee:	4690      	mov	r8, r2
 80061f0:	9001      	str	r0, [sp, #4]
 80061f2:	4ab6      	ldr	r2, [pc, #728]	@ (80064cc <__kernel_rem_pio2f+0x2e8>)
 80061f4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80061f6:	f118 0f04 	cmn.w	r8, #4
 80061fa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80061fe:	460f      	mov	r7, r1
 8006200:	f103 3bff 	add.w	fp, r3, #4294967295
 8006204:	db26      	blt.n	8006254 <__kernel_rem_pio2f+0x70>
 8006206:	f1b8 0203 	subs.w	r2, r8, #3
 800620a:	bf48      	it	mi
 800620c:	f108 0204 	addmi.w	r2, r8, #4
 8006210:	10d2      	asrs	r2, r2, #3
 8006212:	1c55      	adds	r5, r2, #1
 8006214:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006216:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80064dc <__kernel_rem_pio2f+0x2f8>
 800621a:	00e8      	lsls	r0, r5, #3
 800621c:	eba2 060b 	sub.w	r6, r2, fp
 8006220:	9002      	str	r0, [sp, #8]
 8006222:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8006226:	eb0a 0c0b 	add.w	ip, sl, fp
 800622a:	ac1c      	add	r4, sp, #112	@ 0x70
 800622c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8006230:	2000      	movs	r0, #0
 8006232:	4560      	cmp	r0, ip
 8006234:	dd10      	ble.n	8006258 <__kernel_rem_pio2f+0x74>
 8006236:	a91c      	add	r1, sp, #112	@ 0x70
 8006238:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800623c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8006240:	2600      	movs	r6, #0
 8006242:	4556      	cmp	r6, sl
 8006244:	dc24      	bgt.n	8006290 <__kernel_rem_pio2f+0xac>
 8006246:	f8dd e004 	ldr.w	lr, [sp, #4]
 800624a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80064dc <__kernel_rem_pio2f+0x2f8>
 800624e:	4684      	mov	ip, r0
 8006250:	2400      	movs	r4, #0
 8006252:	e016      	b.n	8006282 <__kernel_rem_pio2f+0x9e>
 8006254:	2200      	movs	r2, #0
 8006256:	e7dc      	b.n	8006212 <__kernel_rem_pio2f+0x2e>
 8006258:	42c6      	cmn	r6, r0
 800625a:	bf5d      	ittte	pl
 800625c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8006260:	ee07 1a90 	vmovpl	s15, r1
 8006264:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006268:	eef0 7a47 	vmovmi.f32	s15, s14
 800626c:	ece4 7a01 	vstmia	r4!, {s15}
 8006270:	3001      	adds	r0, #1
 8006272:	e7de      	b.n	8006232 <__kernel_rem_pio2f+0x4e>
 8006274:	ecfe 6a01 	vldmia	lr!, {s13}
 8006278:	ed3c 7a01 	vldmdb	ip!, {s14}
 800627c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006280:	3401      	adds	r4, #1
 8006282:	455c      	cmp	r4, fp
 8006284:	ddf6      	ble.n	8006274 <__kernel_rem_pio2f+0x90>
 8006286:	ece9 7a01 	vstmia	r9!, {s15}
 800628a:	3601      	adds	r6, #1
 800628c:	3004      	adds	r0, #4
 800628e:	e7d8      	b.n	8006242 <__kernel_rem_pio2f+0x5e>
 8006290:	a908      	add	r1, sp, #32
 8006292:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006296:	9104      	str	r1, [sp, #16]
 8006298:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800629a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80064d8 <__kernel_rem_pio2f+0x2f4>
 800629e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80064d4 <__kernel_rem_pio2f+0x2f0>
 80062a2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80062a6:	9203      	str	r2, [sp, #12]
 80062a8:	4654      	mov	r4, sl
 80062aa:	00a2      	lsls	r2, r4, #2
 80062ac:	9205      	str	r2, [sp, #20]
 80062ae:	aa58      	add	r2, sp, #352	@ 0x160
 80062b0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80062b4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80062b8:	a944      	add	r1, sp, #272	@ 0x110
 80062ba:	aa08      	add	r2, sp, #32
 80062bc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80062c0:	4694      	mov	ip, r2
 80062c2:	4626      	mov	r6, r4
 80062c4:	2e00      	cmp	r6, #0
 80062c6:	dc4c      	bgt.n	8006362 <__kernel_rem_pio2f+0x17e>
 80062c8:	4628      	mov	r0, r5
 80062ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062ce:	f000 f9f1 	bl	80066b4 <scalbnf>
 80062d2:	eeb0 8a40 	vmov.f32	s16, s0
 80062d6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80062da:	ee28 0a00 	vmul.f32	s0, s16, s0
 80062de:	f000 fa4f 	bl	8006780 <floorf>
 80062e2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80062e6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80062ea:	2d00      	cmp	r5, #0
 80062ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062f0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80062f4:	ee17 9a90 	vmov	r9, s15
 80062f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062fc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006300:	dd41      	ble.n	8006386 <__kernel_rem_pio2f+0x1a2>
 8006302:	f104 3cff 	add.w	ip, r4, #4294967295
 8006306:	a908      	add	r1, sp, #32
 8006308:	f1c5 0e08 	rsb	lr, r5, #8
 800630c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8006310:	fa46 f00e 	asr.w	r0, r6, lr
 8006314:	4481      	add	r9, r0
 8006316:	fa00 f00e 	lsl.w	r0, r0, lr
 800631a:	1a36      	subs	r6, r6, r0
 800631c:	f1c5 0007 	rsb	r0, r5, #7
 8006320:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8006324:	4106      	asrs	r6, r0
 8006326:	2e00      	cmp	r6, #0
 8006328:	dd3c      	ble.n	80063a4 <__kernel_rem_pio2f+0x1c0>
 800632a:	f04f 0e00 	mov.w	lr, #0
 800632e:	f109 0901 	add.w	r9, r9, #1
 8006332:	4670      	mov	r0, lr
 8006334:	4574      	cmp	r4, lr
 8006336:	dc68      	bgt.n	800640a <__kernel_rem_pio2f+0x226>
 8006338:	2d00      	cmp	r5, #0
 800633a:	dd03      	ble.n	8006344 <__kernel_rem_pio2f+0x160>
 800633c:	2d01      	cmp	r5, #1
 800633e:	d074      	beq.n	800642a <__kernel_rem_pio2f+0x246>
 8006340:	2d02      	cmp	r5, #2
 8006342:	d07d      	beq.n	8006440 <__kernel_rem_pio2f+0x25c>
 8006344:	2e02      	cmp	r6, #2
 8006346:	d12d      	bne.n	80063a4 <__kernel_rem_pio2f+0x1c0>
 8006348:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800634c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006350:	b340      	cbz	r0, 80063a4 <__kernel_rem_pio2f+0x1c0>
 8006352:	4628      	mov	r0, r5
 8006354:	9306      	str	r3, [sp, #24]
 8006356:	f000 f9ad 	bl	80066b4 <scalbnf>
 800635a:	9b06      	ldr	r3, [sp, #24]
 800635c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006360:	e020      	b.n	80063a4 <__kernel_rem_pio2f+0x1c0>
 8006362:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006366:	3e01      	subs	r6, #1
 8006368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800636c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006370:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006374:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006378:	ecac 0a01 	vstmia	ip!, {s0}
 800637c:	ed30 0a01 	vldmdb	r0!, {s0}
 8006380:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006384:	e79e      	b.n	80062c4 <__kernel_rem_pio2f+0xe0>
 8006386:	d105      	bne.n	8006394 <__kernel_rem_pio2f+0x1b0>
 8006388:	1e60      	subs	r0, r4, #1
 800638a:	a908      	add	r1, sp, #32
 800638c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006390:	11f6      	asrs	r6, r6, #7
 8006392:	e7c8      	b.n	8006326 <__kernel_rem_pio2f+0x142>
 8006394:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006398:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800639c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a0:	da31      	bge.n	8006406 <__kernel_rem_pio2f+0x222>
 80063a2:	2600      	movs	r6, #0
 80063a4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80063a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ac:	f040 8098 	bne.w	80064e0 <__kernel_rem_pio2f+0x2fc>
 80063b0:	1e60      	subs	r0, r4, #1
 80063b2:	2200      	movs	r2, #0
 80063b4:	4550      	cmp	r0, sl
 80063b6:	da4b      	bge.n	8006450 <__kernel_rem_pio2f+0x26c>
 80063b8:	2a00      	cmp	r2, #0
 80063ba:	d065      	beq.n	8006488 <__kernel_rem_pio2f+0x2a4>
 80063bc:	3c01      	subs	r4, #1
 80063be:	ab08      	add	r3, sp, #32
 80063c0:	3d08      	subs	r5, #8
 80063c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f8      	beq.n	80063bc <__kernel_rem_pio2f+0x1d8>
 80063ca:	4628      	mov	r0, r5
 80063cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80063d0:	f000 f970 	bl	80066b4 <scalbnf>
 80063d4:	1c63      	adds	r3, r4, #1
 80063d6:	aa44      	add	r2, sp, #272	@ 0x110
 80063d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80064d8 <__kernel_rem_pio2f+0x2f4>
 80063dc:	0099      	lsls	r1, r3, #2
 80063de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80063e2:	4623      	mov	r3, r4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f280 80a9 	bge.w	800653c <__kernel_rem_pio2f+0x358>
 80063ea:	4623      	mov	r3, r4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f2c0 80c7 	blt.w	8006580 <__kernel_rem_pio2f+0x39c>
 80063f2:	aa44      	add	r2, sp, #272	@ 0x110
 80063f4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80063f8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80064d0 <__kernel_rem_pio2f+0x2ec>
 80063fc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80064dc <__kernel_rem_pio2f+0x2f8>
 8006400:	2000      	movs	r0, #0
 8006402:	1ae2      	subs	r2, r4, r3
 8006404:	e0b1      	b.n	800656a <__kernel_rem_pio2f+0x386>
 8006406:	2602      	movs	r6, #2
 8006408:	e78f      	b.n	800632a <__kernel_rem_pio2f+0x146>
 800640a:	f852 1b04 	ldr.w	r1, [r2], #4
 800640e:	b948      	cbnz	r0, 8006424 <__kernel_rem_pio2f+0x240>
 8006410:	b121      	cbz	r1, 800641c <__kernel_rem_pio2f+0x238>
 8006412:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8006416:	f842 1c04 	str.w	r1, [r2, #-4]
 800641a:	2101      	movs	r1, #1
 800641c:	f10e 0e01 	add.w	lr, lr, #1
 8006420:	4608      	mov	r0, r1
 8006422:	e787      	b.n	8006334 <__kernel_rem_pio2f+0x150>
 8006424:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8006428:	e7f5      	b.n	8006416 <__kernel_rem_pio2f+0x232>
 800642a:	f104 3cff 	add.w	ip, r4, #4294967295
 800642e:	aa08      	add	r2, sp, #32
 8006430:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006434:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006438:	a908      	add	r1, sp, #32
 800643a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800643e:	e781      	b.n	8006344 <__kernel_rem_pio2f+0x160>
 8006440:	f104 3cff 	add.w	ip, r4, #4294967295
 8006444:	aa08      	add	r2, sp, #32
 8006446:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800644a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800644e:	e7f3      	b.n	8006438 <__kernel_rem_pio2f+0x254>
 8006450:	a908      	add	r1, sp, #32
 8006452:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006456:	3801      	subs	r0, #1
 8006458:	430a      	orrs	r2, r1
 800645a:	e7ab      	b.n	80063b4 <__kernel_rem_pio2f+0x1d0>
 800645c:	3201      	adds	r2, #1
 800645e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006462:	2e00      	cmp	r6, #0
 8006464:	d0fa      	beq.n	800645c <__kernel_rem_pio2f+0x278>
 8006466:	9905      	ldr	r1, [sp, #20]
 8006468:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800646c:	eb0d 0001 	add.w	r0, sp, r1
 8006470:	18e6      	adds	r6, r4, r3
 8006472:	a91c      	add	r1, sp, #112	@ 0x70
 8006474:	f104 0c01 	add.w	ip, r4, #1
 8006478:	384c      	subs	r0, #76	@ 0x4c
 800647a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800647e:	4422      	add	r2, r4
 8006480:	4562      	cmp	r2, ip
 8006482:	da04      	bge.n	800648e <__kernel_rem_pio2f+0x2aa>
 8006484:	4614      	mov	r4, r2
 8006486:	e710      	b.n	80062aa <__kernel_rem_pio2f+0xc6>
 8006488:	9804      	ldr	r0, [sp, #16]
 800648a:	2201      	movs	r2, #1
 800648c:	e7e7      	b.n	800645e <__kernel_rem_pio2f+0x27a>
 800648e:	9903      	ldr	r1, [sp, #12]
 8006490:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006494:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8006498:	9105      	str	r1, [sp, #20]
 800649a:	ee07 1a90 	vmov	s15, r1
 800649e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064a2:	2400      	movs	r4, #0
 80064a4:	ece6 7a01 	vstmia	r6!, {s15}
 80064a8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80064dc <__kernel_rem_pio2f+0x2f8>
 80064ac:	46b1      	mov	r9, r6
 80064ae:	455c      	cmp	r4, fp
 80064b0:	dd04      	ble.n	80064bc <__kernel_rem_pio2f+0x2d8>
 80064b2:	ece0 7a01 	vstmia	r0!, {s15}
 80064b6:	f10c 0c01 	add.w	ip, ip, #1
 80064ba:	e7e1      	b.n	8006480 <__kernel_rem_pio2f+0x29c>
 80064bc:	ecfe 6a01 	vldmia	lr!, {s13}
 80064c0:	ed39 7a01 	vldmdb	r9!, {s14}
 80064c4:	3401      	adds	r4, #1
 80064c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80064ca:	e7f0      	b.n	80064ae <__kernel_rem_pio2f+0x2ca>
 80064cc:	08006c08 	.word	0x08006c08
 80064d0:	08006bdc 	.word	0x08006bdc
 80064d4:	43800000 	.word	0x43800000
 80064d8:	3b800000 	.word	0x3b800000
 80064dc:	00000000 	.word	0x00000000
 80064e0:	9b02      	ldr	r3, [sp, #8]
 80064e2:	eeb0 0a48 	vmov.f32	s0, s16
 80064e6:	eba3 0008 	sub.w	r0, r3, r8
 80064ea:	f000 f8e3 	bl	80066b4 <scalbnf>
 80064ee:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80064d4 <__kernel_rem_pio2f+0x2f0>
 80064f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80064f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fa:	db19      	blt.n	8006530 <__kernel_rem_pio2f+0x34c>
 80064fc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80064d8 <__kernel_rem_pio2f+0x2f4>
 8006500:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006504:	aa08      	add	r2, sp, #32
 8006506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800650a:	3508      	adds	r5, #8
 800650c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006510:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006518:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800651c:	ee10 3a10 	vmov	r3, s0
 8006520:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006524:	ee17 3a90 	vmov	r3, s15
 8006528:	3401      	adds	r4, #1
 800652a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800652e:	e74c      	b.n	80063ca <__kernel_rem_pio2f+0x1e6>
 8006530:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006534:	aa08      	add	r2, sp, #32
 8006536:	ee10 3a10 	vmov	r3, s0
 800653a:	e7f6      	b.n	800652a <__kernel_rem_pio2f+0x346>
 800653c:	a808      	add	r0, sp, #32
 800653e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006542:	9001      	str	r0, [sp, #4]
 8006544:	ee07 0a90 	vmov	s15, r0
 8006548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800654c:	3b01      	subs	r3, #1
 800654e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006552:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006556:	ed62 7a01 	vstmdb	r2!, {s15}
 800655a:	e743      	b.n	80063e4 <__kernel_rem_pio2f+0x200>
 800655c:	ecfc 6a01 	vldmia	ip!, {s13}
 8006560:	ecb5 7a01 	vldmia	r5!, {s14}
 8006564:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006568:	3001      	adds	r0, #1
 800656a:	4550      	cmp	r0, sl
 800656c:	dc01      	bgt.n	8006572 <__kernel_rem_pio2f+0x38e>
 800656e:	4290      	cmp	r0, r2
 8006570:	ddf4      	ble.n	800655c <__kernel_rem_pio2f+0x378>
 8006572:	a858      	add	r0, sp, #352	@ 0x160
 8006574:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006578:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800657c:	3b01      	subs	r3, #1
 800657e:	e735      	b.n	80063ec <__kernel_rem_pio2f+0x208>
 8006580:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006582:	2b02      	cmp	r3, #2
 8006584:	dc09      	bgt.n	800659a <__kernel_rem_pio2f+0x3b6>
 8006586:	2b00      	cmp	r3, #0
 8006588:	dc27      	bgt.n	80065da <__kernel_rem_pio2f+0x3f6>
 800658a:	d040      	beq.n	800660e <__kernel_rem_pio2f+0x42a>
 800658c:	f009 0007 	and.w	r0, r9, #7
 8006590:	b059      	add	sp, #356	@ 0x164
 8006592:	ecbd 8b04 	vpop	{d8-d9}
 8006596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800659c:	2b03      	cmp	r3, #3
 800659e:	d1f5      	bne.n	800658c <__kernel_rem_pio2f+0x3a8>
 80065a0:	aa30      	add	r2, sp, #192	@ 0xc0
 80065a2:	1f0b      	subs	r3, r1, #4
 80065a4:	4413      	add	r3, r2
 80065a6:	461a      	mov	r2, r3
 80065a8:	4620      	mov	r0, r4
 80065aa:	2800      	cmp	r0, #0
 80065ac:	dc50      	bgt.n	8006650 <__kernel_rem_pio2f+0x46c>
 80065ae:	4622      	mov	r2, r4
 80065b0:	2a01      	cmp	r2, #1
 80065b2:	dc5d      	bgt.n	8006670 <__kernel_rem_pio2f+0x48c>
 80065b4:	ab30      	add	r3, sp, #192	@ 0xc0
 80065b6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80064dc <__kernel_rem_pio2f+0x2f8>
 80065ba:	440b      	add	r3, r1
 80065bc:	2c01      	cmp	r4, #1
 80065be:	dc67      	bgt.n	8006690 <__kernel_rem_pio2f+0x4ac>
 80065c0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80065c4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80065c8:	2e00      	cmp	r6, #0
 80065ca:	d167      	bne.n	800669c <__kernel_rem_pio2f+0x4b8>
 80065cc:	edc7 6a00 	vstr	s13, [r7]
 80065d0:	ed87 7a01 	vstr	s14, [r7, #4]
 80065d4:	edc7 7a02 	vstr	s15, [r7, #8]
 80065d8:	e7d8      	b.n	800658c <__kernel_rem_pio2f+0x3a8>
 80065da:	ab30      	add	r3, sp, #192	@ 0xc0
 80065dc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80064dc <__kernel_rem_pio2f+0x2f8>
 80065e0:	440b      	add	r3, r1
 80065e2:	4622      	mov	r2, r4
 80065e4:	2a00      	cmp	r2, #0
 80065e6:	da24      	bge.n	8006632 <__kernel_rem_pio2f+0x44e>
 80065e8:	b34e      	cbz	r6, 800663e <__kernel_rem_pio2f+0x45a>
 80065ea:	eef1 7a47 	vneg.f32	s15, s14
 80065ee:	edc7 7a00 	vstr	s15, [r7]
 80065f2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80065f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065fa:	aa31      	add	r2, sp, #196	@ 0xc4
 80065fc:	2301      	movs	r3, #1
 80065fe:	429c      	cmp	r4, r3
 8006600:	da20      	bge.n	8006644 <__kernel_rem_pio2f+0x460>
 8006602:	b10e      	cbz	r6, 8006608 <__kernel_rem_pio2f+0x424>
 8006604:	eef1 7a67 	vneg.f32	s15, s15
 8006608:	edc7 7a01 	vstr	s15, [r7, #4]
 800660c:	e7be      	b.n	800658c <__kernel_rem_pio2f+0x3a8>
 800660e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006610:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80064dc <__kernel_rem_pio2f+0x2f8>
 8006614:	440b      	add	r3, r1
 8006616:	2c00      	cmp	r4, #0
 8006618:	da05      	bge.n	8006626 <__kernel_rem_pio2f+0x442>
 800661a:	b10e      	cbz	r6, 8006620 <__kernel_rem_pio2f+0x43c>
 800661c:	eef1 7a67 	vneg.f32	s15, s15
 8006620:	edc7 7a00 	vstr	s15, [r7]
 8006624:	e7b2      	b.n	800658c <__kernel_rem_pio2f+0x3a8>
 8006626:	ed33 7a01 	vldmdb	r3!, {s14}
 800662a:	3c01      	subs	r4, #1
 800662c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006630:	e7f1      	b.n	8006616 <__kernel_rem_pio2f+0x432>
 8006632:	ed73 7a01 	vldmdb	r3!, {s15}
 8006636:	3a01      	subs	r2, #1
 8006638:	ee37 7a27 	vadd.f32	s14, s14, s15
 800663c:	e7d2      	b.n	80065e4 <__kernel_rem_pio2f+0x400>
 800663e:	eef0 7a47 	vmov.f32	s15, s14
 8006642:	e7d4      	b.n	80065ee <__kernel_rem_pio2f+0x40a>
 8006644:	ecb2 7a01 	vldmia	r2!, {s14}
 8006648:	3301      	adds	r3, #1
 800664a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800664e:	e7d6      	b.n	80065fe <__kernel_rem_pio2f+0x41a>
 8006650:	ed72 7a01 	vldmdb	r2!, {s15}
 8006654:	edd2 6a01 	vldr	s13, [r2, #4]
 8006658:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800665c:	3801      	subs	r0, #1
 800665e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006662:	ed82 7a00 	vstr	s14, [r2]
 8006666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666a:	edc2 7a01 	vstr	s15, [r2, #4]
 800666e:	e79c      	b.n	80065aa <__kernel_rem_pio2f+0x3c6>
 8006670:	ed73 7a01 	vldmdb	r3!, {s15}
 8006674:	edd3 6a01 	vldr	s13, [r3, #4]
 8006678:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800667c:	3a01      	subs	r2, #1
 800667e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006682:	ed83 7a00 	vstr	s14, [r3]
 8006686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668a:	edc3 7a01 	vstr	s15, [r3, #4]
 800668e:	e78f      	b.n	80065b0 <__kernel_rem_pio2f+0x3cc>
 8006690:	ed33 7a01 	vldmdb	r3!, {s14}
 8006694:	3c01      	subs	r4, #1
 8006696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800669a:	e78f      	b.n	80065bc <__kernel_rem_pio2f+0x3d8>
 800669c:	eef1 6a66 	vneg.f32	s13, s13
 80066a0:	eeb1 7a47 	vneg.f32	s14, s14
 80066a4:	edc7 6a00 	vstr	s13, [r7]
 80066a8:	ed87 7a01 	vstr	s14, [r7, #4]
 80066ac:	eef1 7a67 	vneg.f32	s15, s15
 80066b0:	e790      	b.n	80065d4 <__kernel_rem_pio2f+0x3f0>
 80066b2:	bf00      	nop

080066b4 <scalbnf>:
 80066b4:	ee10 3a10 	vmov	r3, s0
 80066b8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80066bc:	d02b      	beq.n	8006716 <scalbnf+0x62>
 80066be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80066c2:	d302      	bcc.n	80066ca <scalbnf+0x16>
 80066c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80066c8:	4770      	bx	lr
 80066ca:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80066ce:	d123      	bne.n	8006718 <scalbnf+0x64>
 80066d0:	4b24      	ldr	r3, [pc, #144]	@ (8006764 <scalbnf+0xb0>)
 80066d2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006768 <scalbnf+0xb4>
 80066d6:	4298      	cmp	r0, r3
 80066d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80066dc:	db17      	blt.n	800670e <scalbnf+0x5a>
 80066de:	ee10 3a10 	vmov	r3, s0
 80066e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80066e6:	3a19      	subs	r2, #25
 80066e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80066ec:	4288      	cmp	r0, r1
 80066ee:	dd15      	ble.n	800671c <scalbnf+0x68>
 80066f0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800676c <scalbnf+0xb8>
 80066f4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006770 <scalbnf+0xbc>
 80066f8:	ee10 3a10 	vmov	r3, s0
 80066fc:	eeb0 7a67 	vmov.f32	s14, s15
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfb8      	it	lt
 8006704:	eef0 7a66 	vmovlt.f32	s15, s13
 8006708:	ee27 0a87 	vmul.f32	s0, s15, s14
 800670c:	4770      	bx	lr
 800670e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006774 <scalbnf+0xc0>
 8006712:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006716:	4770      	bx	lr
 8006718:	0dd2      	lsrs	r2, r2, #23
 800671a:	e7e5      	b.n	80066e8 <scalbnf+0x34>
 800671c:	4410      	add	r0, r2
 800671e:	28fe      	cmp	r0, #254	@ 0xfe
 8006720:	dce6      	bgt.n	80066f0 <scalbnf+0x3c>
 8006722:	2800      	cmp	r0, #0
 8006724:	dd06      	ble.n	8006734 <scalbnf+0x80>
 8006726:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800672a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800672e:	ee00 3a10 	vmov	s0, r3
 8006732:	4770      	bx	lr
 8006734:	f110 0f16 	cmn.w	r0, #22
 8006738:	da09      	bge.n	800674e <scalbnf+0x9a>
 800673a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006774 <scalbnf+0xc0>
 800673e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006778 <scalbnf+0xc4>
 8006742:	ee10 3a10 	vmov	r3, s0
 8006746:	eeb0 7a67 	vmov.f32	s14, s15
 800674a:	2b00      	cmp	r3, #0
 800674c:	e7d9      	b.n	8006702 <scalbnf+0x4e>
 800674e:	3019      	adds	r0, #25
 8006750:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006754:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006758:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800677c <scalbnf+0xc8>
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	e7d7      	b.n	8006712 <scalbnf+0x5e>
 8006762:	bf00      	nop
 8006764:	ffff3cb0 	.word	0xffff3cb0
 8006768:	4c000000 	.word	0x4c000000
 800676c:	7149f2ca 	.word	0x7149f2ca
 8006770:	f149f2ca 	.word	0xf149f2ca
 8006774:	0da24260 	.word	0x0da24260
 8006778:	8da24260 	.word	0x8da24260
 800677c:	33000000 	.word	0x33000000

08006780 <floorf>:
 8006780:	ee10 3a10 	vmov	r3, s0
 8006784:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006788:	3a7f      	subs	r2, #127	@ 0x7f
 800678a:	2a16      	cmp	r2, #22
 800678c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006790:	dc2b      	bgt.n	80067ea <floorf+0x6a>
 8006792:	2a00      	cmp	r2, #0
 8006794:	da12      	bge.n	80067bc <floorf+0x3c>
 8006796:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80067fc <floorf+0x7c>
 800679a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800679e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80067a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a6:	dd06      	ble.n	80067b6 <floorf+0x36>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	da24      	bge.n	80067f6 <floorf+0x76>
 80067ac:	2900      	cmp	r1, #0
 80067ae:	4b14      	ldr	r3, [pc, #80]	@ (8006800 <floorf+0x80>)
 80067b0:	bf08      	it	eq
 80067b2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80067b6:	ee00 3a10 	vmov	s0, r3
 80067ba:	4770      	bx	lr
 80067bc:	4911      	ldr	r1, [pc, #68]	@ (8006804 <floorf+0x84>)
 80067be:	4111      	asrs	r1, r2
 80067c0:	420b      	tst	r3, r1
 80067c2:	d0fa      	beq.n	80067ba <floorf+0x3a>
 80067c4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80067fc <floorf+0x7c>
 80067c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80067cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80067d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d4:	ddef      	ble.n	80067b6 <floorf+0x36>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bfbe      	ittt	lt
 80067da:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80067de:	fa40 f202 	asrlt.w	r2, r0, r2
 80067e2:	189b      	addlt	r3, r3, r2
 80067e4:	ea23 0301 	bic.w	r3, r3, r1
 80067e8:	e7e5      	b.n	80067b6 <floorf+0x36>
 80067ea:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80067ee:	d3e4      	bcc.n	80067ba <floorf+0x3a>
 80067f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80067f4:	4770      	bx	lr
 80067f6:	2300      	movs	r3, #0
 80067f8:	e7dd      	b.n	80067b6 <floorf+0x36>
 80067fa:	bf00      	nop
 80067fc:	7149f2ca 	.word	0x7149f2ca
 8006800:	bf800000 	.word	0xbf800000
 8006804:	007fffff 	.word	0x007fffff

08006808 <_init>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	bf00      	nop
 800680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680e:	bc08      	pop	{r3}
 8006810:	469e      	mov	lr, r3
 8006812:	4770      	bx	lr

08006814 <_fini>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	bf00      	nop
 8006818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681a:	bc08      	pop	{r3}
 800681c:	469e      	mov	lr, r3
 800681e:	4770      	bx	lr
