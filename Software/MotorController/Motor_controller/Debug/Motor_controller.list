
Motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006400  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080065c8  080065c8  000075c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800664c  0800664c  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006654  08006654  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006654  08006654  00007654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006658  08006658  00007658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800665c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000000c  08006668  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08006668  0000835c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011502  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a2  00000000  00000000  0001953e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001bee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c73  00000000  00000000  0001ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e95  00000000  00000000  0001db4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f30  00000000  00000000  000419e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de696  00000000  00000000  00055910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133fa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004404  00000000  00000000  00133fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  001383f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080065b0 	.word	0x080065b0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080065b0 	.word	0x080065b0

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <int_to_str>:
#include "stdio.h"  // only for strlen
#include "stdlib.h"

// Convert integer to string
void int_to_str(int num, char *str)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
    char temp[12];
    int i = 0, j = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
    int is_negative = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

    if (num < 0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da04      	bge.n	8000eb6 <int_to_str+0x26>
    {
        is_negative = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
        num = -num;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	607b      	str	r3, [r7, #4]
    }

    do {
        temp[i++] = (num % 10) + '0';
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <int_to_str+0xbc>)
 8000eba:	fb83 1302 	smull	r1, r3, r3, r2
 8000ebe:	1099      	asrs	r1, r3, #2
 8000ec0:	17d3      	asrs	r3, r2, #31
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	1ad1      	subs	r1, r2, r3
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	1c59      	adds	r1, r3, #1
 8000ed4:	61f9      	str	r1, [r7, #28]
 8000ed6:	3230      	adds	r2, #48	@ 0x30
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	3320      	adds	r3, #32
 8000edc:	443b      	add	r3, r7
 8000ede:	f803 2c18 	strb.w	r2, [r3, #-24]
        num /= 10;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <int_to_str+0xbc>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	1092      	asrs	r2, r2, #2
 8000eec:	17db      	asrs	r3, r3, #31
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	607b      	str	r3, [r7, #4]
    } while (num != 0);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1de      	bne.n	8000eb6 <int_to_str+0x26>

    if (is_negative)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d017      	beq.n	8000f2e <int_to_str+0x9e>
        temp[i++] = '-';
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	61fa      	str	r2, [r7, #28]
 8000f04:	3320      	adds	r3, #32
 8000f06:	443b      	add	r3, r7
 8000f08:	222d      	movs	r2, #45	@ 0x2d
 8000f0a:	f803 2c18 	strb.w	r2, [r3, #-24]

    // Reverse string
    while (i > 0)
 8000f0e:	e00e      	b.n	8000f2e <int_to_str+0x9e>
        str[j++] = temp[--i];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	61ba      	str	r2, [r7, #24]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	440a      	add	r2, r1
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	701a      	strb	r2, [r3, #0]
    while (i > 0)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dced      	bgt.n	8000f10 <int_to_str+0x80>

    str[j] = '\0';
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	66666667 	.word	0x66666667

08000f50 <float_to_string>:

// Convert float to string (basic, fixed decimal points)
void float_to_string(float num, char *str, uint8_t decimal_points)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	@ 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f5a:	60b8      	str	r0, [r7, #8]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
    int int_part = (int)num;
 8000f60:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f68:	ee17 3a90 	vmov	r3, s15
 8000f6c:	623b      	str	r3, [r7, #32]
    float fraction = num - int_part;
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f78:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f80:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (fraction < 0) fraction = -fraction;
 8000f84:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f90:	d505      	bpl.n	8000f9e <float_to_string+0x4e>
 8000f92:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f96:	eef1 7a67 	vneg.f32	s15, s15
 8000f9a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    char int_str[12];
    int_to_str(int_part, int_str);
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6a38      	ldr	r0, [r7, #32]
 8000fa6:	f7ff ff73 	bl	8000e90 <int_to_str>

    strcpy(str, int_str);
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f005 faf5 	bl	80065a0 <strcpy>
    int len = strlen(str);
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f7ff f926 	bl	8000208 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    str[len++] = '.';
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	222e      	movs	r2, #46	@ 0x2e
 8000fce:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < decimal_points; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000fd6:	e029      	b.n	800102c <float_to_string+0xdc>
    {
        fraction *= 10;
 8000fd8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fdc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        int digit = (int)fraction;
 8000fe8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff0:	ee17 3a90 	vmov	r3, s15
 8000ff4:	61fb      	str	r3, [r7, #28]
        str[len++] = digit + '0';
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ffc:	1c59      	adds	r1, r3, #1
 8000ffe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001000:	4619      	mov	r1, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	440b      	add	r3, r1
 8001006:	3230      	adds	r2, #48	@ 0x30
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
        fraction -= digit;
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800101a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t i = 0; i < decimal_points; i++)
 8001022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001026:	3301      	adds	r3, #1
 8001028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800102c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3d0      	bcc.n	8000fd8 <float_to_string+0x88>
    }

    str[len] = '\0';
 8001036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	@ 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <UART_Init>:

// UART Initialization
void UART_Init(UART_HandleTypeDef *huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    HAL_UART_Init(huart);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f004 fe5d 	bl	8005d10 <HAL_UART_Init>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <UART_Transmit_WheelW>:

    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void UART_Transmit_WheelW(UART_HandleTypeDef *huart, float W1, float W2, float W3, float W4)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0a6      	sub	sp, #152	@ 0x98
 8001064:	af00      	add	r7, sp, #0
 8001066:	6178      	str	r0, [r7, #20]
 8001068:	ed87 0a04 	vstr	s0, [r7, #16]
 800106c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001070:	ed87 1a02 	vstr	s2, [r7, #8]
 8001074:	edc7 1a01 	vstr	s3, [r7, #4]
    char buffer[80];
    char t1[12], t2[12], t3[12], t4[12];

    float_to_string(W1, t1, 3);
 8001078:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800107c:	2103      	movs	r1, #3
 800107e:	4618      	mov	r0, r3
 8001080:	ed97 0a04 	vldr	s0, [r7, #16]
 8001084:	f7ff ff64 	bl	8000f50 <float_to_string>
    float_to_string(W2, t2, 3);
 8001088:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800108c:	2103      	movs	r1, #3
 800108e:	4618      	mov	r0, r3
 8001090:	ed97 0a03 	vldr	s0, [r7, #12]
 8001094:	f7ff ff5c 	bl	8000f50 <float_to_string>
    float_to_string(W3, t3, 3);
 8001098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109c:	2103      	movs	r1, #3
 800109e:	4618      	mov	r0, r3
 80010a0:	ed97 0a02 	vldr	s0, [r7, #8]
 80010a4:	f7ff ff54 	bl	8000f50 <float_to_string>
    float_to_string(W4, t4, 3);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2103      	movs	r1, #3
 80010ae:	4618      	mov	r0, r3
 80010b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b4:	f7ff ff4c 	bl	8000f50 <float_to_string>

    strcpy(buffer, ">FL:");
 80010b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010bc:	4a39      	ldr	r2, [pc, #228]	@ (80011a4 <UART_Transmit_WheelW+0x144>)
 80010be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c2:	6018      	str	r0, [r3, #0]
 80010c4:	3304      	adds	r3, #4
 80010c6:	7019      	strb	r1, [r3, #0]
    strcat(buffer, t1);
 80010c8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80010cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fa30 	bl	8006538 <strcat>
    strcat(buffer, ",FR:");
 80010d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f893 	bl	8000208 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010ea:	4413      	add	r3, r2
 80010ec:	4a2e      	ldr	r2, [pc, #184]	@ (80011a8 <UART_Transmit_WheelW+0x148>)
 80010ee:	6810      	ldr	r0, [r2, #0]
 80010f0:	6018      	str	r0, [r3, #0]
 80010f2:	7912      	ldrb	r2, [r2, #4]
 80010f4:	711a      	strb	r2, [r3, #4]
    strcat(buffer, t2);
 80010f6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f005 fa19 	bl	8006538 <strcat>
    strcat(buffer, ",RL:");
 8001106:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f87c 	bl	8000208 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001118:	4413      	add	r3, r2
 800111a:	4a24      	ldr	r2, [pc, #144]	@ (80011ac <UART_Transmit_WheelW+0x14c>)
 800111c:	6810      	ldr	r0, [r2, #0]
 800111e:	6018      	str	r0, [r3, #0]
 8001120:	7912      	ldrb	r2, [r2, #4]
 8001122:	711a      	strb	r2, [r3, #4]
    strcat(buffer, t3);
 8001124:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001128:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f005 fa02 	bl	8006538 <strcat>
    strcat(buffer, ",RR:");
 8001134:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f865 	bl	8000208 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001146:	4413      	add	r3, r2
 8001148:	4a19      	ldr	r2, [pc, #100]	@ (80011b0 <UART_Transmit_WheelW+0x150>)
 800114a:	6810      	ldr	r0, [r2, #0]
 800114c:	6018      	str	r0, [r3, #0]
 800114e:	7912      	ldrb	r2, [r2, #4]
 8001150:	711a      	strb	r2, [r3, #4]
    strcat(buffer, t4);
 8001152:	f107 0218 	add.w	r2, r7, #24
 8001156:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f005 f9eb 	bl	8006538 <strcat>
    strcat(buffer, "\r\n");
 8001162:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f84e 	bl	8000208 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001174:	4413      	add	r3, r2
 8001176:	4a0f      	ldr	r2, [pc, #60]	@ (80011b4 <UART_Transmit_WheelW+0x154>)
 8001178:	8811      	ldrh	r1, [r2, #0]
 800117a:	7892      	ldrb	r2, [r2, #2]
 800117c:	8019      	strh	r1, [r3, #0]
 800117e:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001180:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f83f 	bl	8000208 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f004 fe0a 	bl	8005db0 <HAL_UART_Transmit>
}
 800119c:	bf00      	nop
 800119e:	3798      	adds	r7, #152	@ 0x98
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	080065f8 	.word	0x080065f8
 80011a8:	08006600 	.word	0x08006600
 80011ac:	08006608 	.word	0x08006608
 80011b0:	08006610 	.word	0x08006610
 80011b4:	080065cc 	.word	0x080065cc

080011b8 <clampf>:

const float MAXINTCLAMP = 1;


// Clamp float
float clampf(float val, float min, float max) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0a03 	vstr	s0, [r7, #12]
 80011c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80011c6:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val < min) return min;
 80011ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d501      	bpl.n	80011e0 <clampf+0x28>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	e00b      	b.n	80011f8 <clampf+0x40>
    if (val > max) return max;
 80011e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	dd01      	ble.n	80011f6 <clampf+0x3e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	e000      	b.n	80011f8 <clampf+0x40>
    return val;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <getForwardLeftEncoderCounts>:
volatile float m4_W = 0;
volatile float m2_W = 0;
volatile float m3_W = 0;


int16_t getForwardLeftEncoderCounts() {
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 800120e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	b21b      	sxth	r3, r3
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <getForwardRightEncoderCounts>:

int16_t getForwardRightEncoderCounts() {
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	return (int16_t) TIM3->CNT;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <getForwardRightEncoderCounts+0x14>)
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	b21b      	sxth	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40000400 	.word	0x40000400

08001238 <getRearLeftEncoderCounts>:

int16_t getRearLeftEncoderCounts() {
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
	return (int16_t) TIM4->CNT;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <getRearLeftEncoderCounts+0x14>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001240:	b21b      	sxth	r3, r3
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40000800 	.word	0x40000800

08001250 <getRearRightEncoderCounts>:

int16_t getRearRightEncoderCounts() {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	return (int16_t) TIM5->CNT;
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <getRearRightEncoderCounts+0x14>)
 8001256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001258:	b21b      	sxth	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40000c00 	.word	0x40000c00

08001268 <resetEncoders>:

void resetEncoders() {
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 800126c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = (int16_t) 0;
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <resetEncoders+0x68>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CNT = (int16_t) 0;
 800127a:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <resetEncoders+0x6c>)
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->CNT = (int16_t) 0;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <resetEncoders+0x70>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24

	m_robot_distance = 0;
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <resetEncoders+0x74>)
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <resetEncoders+0x78>)
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

	ForwardLeft_delta = 0;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <resetEncoders+0x7c>)
 8001298:	2200      	movs	r2, #0
 800129a:	801a      	strh	r2, [r3, #0]
	ForwardRight_delta = 0;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <resetEncoders+0x80>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
	RearLeft_delta = 0;
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <resetEncoders+0x84>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	801a      	strh	r2, [r3, #0]
	RearRight_delta = 0;
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <resetEncoders+0x88>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	801a      	strh	r2, [r3, #0]

	previous_ForwardLeft_count = 0;
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <resetEncoders+0x8c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = 0;
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <resetEncoders+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = 0;
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <resetEncoders+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = 0;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <resetEncoders+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	801a      	strh	r2, [r3, #0]

}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40000400 	.word	0x40000400
 80012d4:	40000800 	.word	0x40000800
 80012d8:	40000c00 	.word	0x40000c00
 80012dc:	20000028 	.word	0x20000028
 80012e0:	2000002c 	.word	0x2000002c
 80012e4:	20000030 	.word	0x20000030
 80012e8:	20000032 	.word	0x20000032
 80012ec:	20000034 	.word	0x20000034
 80012f0:	20000036 	.word	0x20000036
 80012f4:	20000038 	.word	0x20000038
 80012f8:	2000003a 	.word	0x2000003a
 80012fc:	2000003c 	.word	0x2000003c
 8001300:	2000003e 	.word	0x2000003e

08001304 <update_Encoder_Data>:
	TIM4->CNT = (int16_t) 0;
	TIM5->CNT = (int16_t) 0;
}


void update_Encoder_Data(){
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
	int16_t ForwardLeft_count= getForwardLeftEncoderCounts();
 800130a:	f7ff ff7e 	bl	800120a <getForwardLeftEncoderCounts>
 800130e:	4603      	mov	r3, r0
 8001310:	82fb      	strh	r3, [r7, #22]
	int16_t ForwardRight_count = getForwardRightEncoderCounts();
 8001312:	f7ff ff85 	bl	8001220 <getForwardRightEncoderCounts>
 8001316:	4603      	mov	r3, r0
 8001318:	82bb      	strh	r3, [r7, #20]
	int16_t RearLeft_count = getRearLeftEncoderCounts();
 800131a:	f7ff ff8d 	bl	8001238 <getRearLeftEncoderCounts>
 800131e:	4603      	mov	r3, r0
 8001320:	827b      	strh	r3, [r7, #18]
	int16_t RearRight_count = getRearRightEncoderCounts();
 8001322:	f7ff ff95 	bl	8001250 <getRearRightEncoderCounts>
 8001326:	4603      	mov	r3, r0
 8001328:	823b      	strh	r3, [r7, #16]


	ForwardLeft_delta = ForwardLeft_count - previous_ForwardLeft_count;
 800132a:	8afa      	ldrh	r2, [r7, #22]
 800132c:	4b49      	ldr	r3, [pc, #292]	@ (8001454 <update_Encoder_Data+0x150>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	b29b      	uxth	r3, r3
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b47      	ldr	r3, [pc, #284]	@ (8001458 <update_Encoder_Data+0x154>)
 800133c:	801a      	strh	r2, [r3, #0]
	previous_ForwardLeft_count = ForwardLeft_count;
 800133e:	4a45      	ldr	r2, [pc, #276]	@ (8001454 <update_Encoder_Data+0x150>)
 8001340:	8afb      	ldrh	r3, [r7, #22]
 8001342:	8013      	strh	r3, [r2, #0]

	ForwardRight_delta = ForwardRight_count - previous_ForwardRight_count;
 8001344:	8aba      	ldrh	r2, [r7, #20]
 8001346:	4b45      	ldr	r3, [pc, #276]	@ (800145c <update_Encoder_Data+0x158>)
 8001348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134c:	b29b      	uxth	r3, r3
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	b29b      	uxth	r3, r3
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b42      	ldr	r3, [pc, #264]	@ (8001460 <update_Encoder_Data+0x15c>)
 8001356:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = ForwardRight_count;
 8001358:	4a40      	ldr	r2, [pc, #256]	@ (800145c <update_Encoder_Data+0x158>)
 800135a:	8abb      	ldrh	r3, [r7, #20]
 800135c:	8013      	strh	r3, [r2, #0]

	RearLeft_delta = RearLeft_count - previous_RearLeft_count;
 800135e:	8a7a      	ldrh	r2, [r7, #18]
 8001360:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <update_Encoder_Data+0x160>)
 8001362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001366:	b29b      	uxth	r3, r3
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b3e      	ldr	r3, [pc, #248]	@ (8001468 <update_Encoder_Data+0x164>)
 8001370:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = RearLeft_count;
 8001372:	4a3c      	ldr	r2, [pc, #240]	@ (8001464 <update_Encoder_Data+0x160>)
 8001374:	8a7b      	ldrh	r3, [r7, #18]
 8001376:	8013      	strh	r3, [r2, #0]


	RearRight_delta = RearRight_count - previous_RearRight_count;
 8001378:	8a3a      	ldrh	r2, [r7, #16]
 800137a:	4b3c      	ldr	r3, [pc, #240]	@ (800146c <update_Encoder_Data+0x168>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	b29b      	uxth	r3, r3
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b39      	ldr	r3, [pc, #228]	@ (8001470 <update_Encoder_Data+0x16c>)
 800138a:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = RearRight_count;
 800138c:	4a37      	ldr	r2, [pc, #220]	@ (800146c <update_Encoder_Data+0x168>)
 800138e:	8a3b      	ldrh	r3, [r7, #16]
 8001390:	8013      	strh	r3, [r2, #0]

	float ForwardLeft = ForwardLeft_delta * RAD_PER_COUNT_FORWARD_LEFT;
 8001392:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <update_Encoder_Data+0x154>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001474 <update_Encoder_Data+0x170>
 80013a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a8:	edc7 7a03 	vstr	s15, [r7, #12]
	float ForwardRight = ForwardRight_delta * RAD_PER_COUNT_FORWARD_RIGHT;
 80013ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001460 <update_Encoder_Data+0x15c>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001474 <update_Encoder_Data+0x170>
 80013be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c2:	edc7 7a02 	vstr	s15, [r7, #8]
	float RearLeft = RearLeft_delta * RAD_PER_COUNT_REAR_LEFT;
 80013c6:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <update_Encoder_Data+0x164>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001474 <update_Encoder_Data+0x170>
 80013d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013dc:	edc7 7a01 	vstr	s15, [r7, #4]
	float RearRight = RearRight_delta * RAD_PER_COUNT_REAR_RIGHT;
 80013e0:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <update_Encoder_Data+0x16c>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ee:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001474 <update_Encoder_Data+0x170>
 80013f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f6:	edc7 7a00 	vstr	s15, [r7]


	m1_W = ForwardLeft * LOOP_FREQUENCY;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <update_Encoder_Data+0x174>)
 80013fc:	ed93 7a00 	vldr	s14, [r3]
 8001400:	edd7 7a03 	vldr	s15, [r7, #12]
 8001404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <update_Encoder_Data+0x178>)
 800140a:	edc3 7a00 	vstr	s15, [r3]
	m4_W = ForwardRight * LOOP_FREQUENCY;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <update_Encoder_Data+0x174>)
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	edd7 7a02 	vldr	s15, [r7, #8]
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <update_Encoder_Data+0x17c>)
 800141e:	edc3 7a00 	vstr	s15, [r3]
	m2_W = RearLeft * LOOP_FREQUENCY;
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <update_Encoder_Data+0x174>)
 8001424:	ed93 7a00 	vldr	s14, [r3]
 8001428:	edd7 7a01 	vldr	s15, [r7, #4]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <update_Encoder_Data+0x180>)
 8001432:	edc3 7a00 	vstr	s15, [r3]
	m3_W = RearRight * LOOP_FREQUENCY;
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <update_Encoder_Data+0x174>)
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	edd7 7a00 	vldr	s15, [r7]
 8001440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <update_Encoder_Data+0x184>)
 8001446:	edc3 7a00 	vstr	s15, [r3]

}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000038 	.word	0x20000038
 8001458:	20000030 	.word	0x20000030
 800145c:	2000003a 	.word	0x2000003a
 8001460:	20000032 	.word	0x20000032
 8001464:	2000003c 	.word	0x2000003c
 8001468:	20000034 	.word	0x20000034
 800146c:	2000003e 	.word	0x2000003e
 8001470:	20000036 	.word	0x20000036
 8001474:	3a723872 	.word	0x3a723872
 8001478:	08006618 	.word	0x08006618
 800147c:	20000040 	.word	0x20000040
 8001480:	20000044 	.word	0x20000044
 8001484:	20000048 	.word	0x20000048
 8001488:	2000004c 	.word	0x2000004c

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001490:	f001 fd0a 	bl	8002ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001494:	f000 f8a8 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001498:	f000 fbfa 	bl	8001c90 <MX_GPIO_Init>
  MX_DMA_Init();
 800149c:	f000 fbd8 	bl	8001c50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014a0:	f000 fb82 	bl	8001ba8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014a4:	f000 f912 	bl	80016cc <MX_ADC1_Init>
  MX_TIM1_Init();
 80014a8:	f000 f962 	bl	8001770 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014ac:	f000 fa08 	bl	80018c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014b0:	f000 fa5a 	bl	8001968 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014b4:	f000 faac 	bl	8001a10 <MX_TIM4_Init>
  MX_TIM5_Init();
 80014b8:	f000 fafe 	bl	8001ab8 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80014bc:	f000 fb9e 	bl	8001bfc <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80014c0:	f000 fb4e 	bl	8001b60 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014c4:	2100      	movs	r1, #0
 80014c6:	4838      	ldr	r0, [pc, #224]	@ (80015a8 <main+0x11c>)
 80014c8:	f003 fce8 	bl	8004e9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014cc:	2104      	movs	r1, #4
 80014ce:	4836      	ldr	r0, [pc, #216]	@ (80015a8 <main+0x11c>)
 80014d0:	f003 fce4 	bl	8004e9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014d4:	2108      	movs	r1, #8
 80014d6:	4834      	ldr	r0, [pc, #208]	@ (80015a8 <main+0x11c>)
 80014d8:	f003 fce0 	bl	8004e9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014dc:	210c      	movs	r1, #12
 80014de:	4832      	ldr	r0, [pc, #200]	@ (80015a8 <main+0x11c>)
 80014e0:	f003 fcdc 	bl	8004e9c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80014e4:	213c      	movs	r1, #60	@ 0x3c
 80014e6:	4831      	ldr	r0, [pc, #196]	@ (80015ac <main+0x120>)
 80014e8:	f003 fe46 	bl	8005178 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80014ec:	213c      	movs	r1, #60	@ 0x3c
 80014ee:	4830      	ldr	r0, [pc, #192]	@ (80015b0 <main+0x124>)
 80014f0:	f003 fe42 	bl	8005178 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80014f4:	213c      	movs	r1, #60	@ 0x3c
 80014f6:	482f      	ldr	r0, [pc, #188]	@ (80015b4 <main+0x128>)
 80014f8:	f003 fe3e 	bl	8005178 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80014fc:	213c      	movs	r1, #60	@ 0x3c
 80014fe:	482e      	ldr	r0, [pc, #184]	@ (80015b8 <main+0x12c>)
 8001500:	f003 fe3a 	bl	8005178 <HAL_TIM_Encoder_Start>

//  // Initialize kinematics system
//  init_kinematics();

  // Reset encoders
  resetEncoders();
 8001504:	f7ff feb0 	bl	8001268 <resetEncoders>

  // Init BLuetooth Debug
  UART_Init(&huart2);
 8001508:	482c      	ldr	r0, [pc, #176]	@ (80015bc <main+0x130>)
 800150a:	f7ff fd9d 	bl	8001048 <UART_Init>

  // Velocity timer
  HAL_TIM_Base_Start_IT(&htim14);
 800150e:	482c      	ldr	r0, [pc, #176]	@ (80015c0 <main+0x134>)
 8001510:	f003 fc04 	bl	8004d1c <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800151a:	482a      	ldr	r0, [pc, #168]	@ (80015c4 <main+0x138>)
 800151c:	f002 fd5c 	bl	8003fd8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001520:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001524:	f001 fd32 	bl	8002f8c <HAL_Delay>
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800152e:	4825      	ldr	r0, [pc, #148]	@ (80015c4 <main+0x138>)
 8001530:	f002 fd52 	bl	8003fd8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001534:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001538:	f001 fd28 	bl	8002f8c <HAL_Delay>
//  HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, 1);
//  HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 0);
//  HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, 1);
//  HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 0);

  m1_target_W = 0;
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <main+0x13c>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
  m2_target_W = 0;
 8001544:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <main+0x140>)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
  m3_target_W = 0;
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <main+0x144>)
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
  m4_target_W = 0;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <main+0x148>)
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
//setForwardLeftMotorPWM(0.3);
//setForwardRightMotorPWM(0.6);
//setRearLeftMotorPWM(0.7);
//setRearRightMotorPWM(0.2);

 HAL_Delay(3000);
 800155c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001560:	f001 fd14 	bl	8002f8c <HAL_Delay>
 setTargetVelocities(6, 3, 7, 2);
 8001564:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 8001568:	eeb1 1a0c 	vmov.f32	s2, #28	@ 0x40e00000  7.0
 800156c:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 8001570:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 8001574:	f001 f8ca 	bl	800270c <setTargetVelocities>
	//UART_Transmit_Float(&huart2, "i", current, 2);
    //UART_Transmit_Int(&huart2, "C", cunt);



	  UART_Transmit_WheelW(&huart2, m1_W, m4_W, m2_W, m3_W);
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <main+0x14c>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <main+0x150>)
 8001580:	ed93 7a00 	vldr	s14, [r3]
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <main+0x154>)
 8001586:	edd3 6a00 	vldr	s13, [r3]
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <main+0x158>)
 800158c:	ed93 6a00 	vldr	s12, [r3]
 8001590:	eef0 1a46 	vmov.f32	s3, s12
 8001594:	eeb0 1a66 	vmov.f32	s2, s13
 8001598:	eef0 0a47 	vmov.f32	s1, s14
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	4806      	ldr	r0, [pc, #24]	@ (80015bc <main+0x130>)
 80015a2:	f7ff fd5d 	bl	8001060 <UART_Transmit_WheelW>
 80015a6:	e7e7      	b.n	8001578 <main+0xec>
 80015a8:	200000f8 	.word	0x200000f8
 80015ac:	20000140 	.word	0x20000140
 80015b0:	20000188 	.word	0x20000188
 80015b4:	200001d0 	.word	0x200001d0
 80015b8:	20000218 	.word	0x20000218
 80015bc:	200002a8 	.word	0x200002a8
 80015c0:	20000260 	.word	0x20000260
 80015c4:	40020000 	.word	0x40020000
 80015c8:	20000338 	.word	0x20000338
 80015cc:	2000033c 	.word	0x2000033c
 80015d0:	20000340 	.word	0x20000340
 80015d4:	20000344 	.word	0x20000344
 80015d8:	20000040 	.word	0x20000040
 80015dc:	20000044 	.word	0x20000044
 80015e0:	20000048 	.word	0x20000048
 80015e4:	2000004c 	.word	0x2000004c

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	@ 0x50
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2234      	movs	r2, #52	@ 0x34
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 ff96 	bl	8006528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	4b2c      	ldr	r3, [pc, #176]	@ (80016c4 <SystemClock_Config+0xdc>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a2b      	ldr	r2, [pc, #172]	@ (80016c4 <SystemClock_Config+0xdc>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	@ 0x40
 800161c:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <SystemClock_Config+0xdc>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001628:	2300      	movs	r3, #0
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <SystemClock_Config+0xe0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a25      	ldr	r2, [pc, #148]	@ (80016c8 <SystemClock_Config+0xe0>)
 8001632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <SystemClock_Config+0xe0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001644:	2302      	movs	r3, #2
 8001646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	2301      	movs	r3, #1
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164c:	2310      	movs	r3, #16
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001650:	2302      	movs	r3, #2
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001658:	2308      	movs	r3, #8
 800165a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800165c:	23b4      	movs	r3, #180	@ 0xb4
 800165e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001660:	2302      	movs	r3, #2
 8001662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001664:	2302      	movs	r3, #2
 8001666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001668:	2302      	movs	r3, #2
 800166a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f865 	bl	8004740 <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800167c:	f000 fbb6 	bl	8001dec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001680:	f002 fcc4 	bl	800400c <HAL_PWREx_EnableOverDrive>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800168a:	f000 fbaf 	bl	8001dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168e:	230f      	movs	r3, #15
 8001690:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001692:	2302      	movs	r3, #2
 8001694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800169a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800169e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2105      	movs	r1, #5
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fcfd 	bl	80040ac <HAL_RCC_ClockConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016b8:	f000 fb98 	bl	8001dec <Error_Handler>
  }
}
 80016bc:	bf00      	nop
 80016be:	3750      	adds	r7, #80	@ 0x50
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000

080016cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d2:	463b      	mov	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <MX_ADC1_Init+0x98>)
 80016e0:	4a21      	ldr	r2, [pc, #132]	@ (8001768 <MX_ADC1_Init+0x9c>)
 80016e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_ADC1_Init+0x98>)
 80016e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_ADC1_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_ADC1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_ADC1_Init+0x98>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_ADC1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_ADC1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_ADC1_Init+0x98>)
 800170e:	4a17      	ldr	r2, [pc, #92]	@ (800176c <MX_ADC1_Init+0xa0>)
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <MX_ADC1_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <MX_ADC1_Init+0x98>)
 800171a:	2201      	movs	r2, #1
 800171c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <MX_ADC1_Init+0x98>)
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <MX_ADC1_Init+0x98>)
 8001728:	2201      	movs	r2, #1
 800172a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800172c:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_ADC1_Init+0x98>)
 800172e:	f001 fc51 	bl	8002fd4 <HAL_ADC_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001738:	f000 fb58 	bl	8001dec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800173c:	2304      	movs	r3, #4
 800173e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_ADC1_Init+0x98>)
 800174e:	f001 fc85 	bl	800305c <HAL_ADC_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001758:	f000 fb48 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000050 	.word	0x20000050
 8001768:	40012000 	.word	0x40012000
 800176c:	0f000001 	.word	0x0f000001

08001770 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b092      	sub	sp, #72	@ 0x48
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	615a      	str	r2, [r3, #20]
 8001792:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2220      	movs	r2, #32
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f004 fec4 	bl	8006528 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a0:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017a2:	4a46      	ldr	r2, [pc, #280]	@ (80018bc <MX_TIM1_Init+0x14c>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017a6:	4b44      	ldr	r3, [pc, #272]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b42      	ldr	r3, [pc, #264]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80017b2:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017b4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80017b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b3f      	ldr	r3, [pc, #252]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c0:	4b3d      	ldr	r3, [pc, #244]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b3c      	ldr	r3, [pc, #240]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017cc:	483a      	ldr	r0, [pc, #232]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017ce:	f003 fb15 	bl	8004dfc <HAL_TIM_PWM_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80017d8:	f000 fb08 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017e8:	4619      	mov	r1, r3
 80017ea:	4833      	ldr	r0, [pc, #204]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80017ec:	f004 f9ae 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80017f6:	f000 faf9 	bl	8001dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	@ 0x60
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4826      	ldr	r0, [pc, #152]	@ (80018b8 <MX_TIM1_Init+0x148>)
 8001820:	f003 fe28 	bl	8005474 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800182a:	f000 fadf 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	2204      	movs	r2, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4820      	ldr	r0, [pc, #128]	@ (80018b8 <MX_TIM1_Init+0x148>)
 8001838:	f003 fe1c 	bl	8005474 <HAL_TIM_PWM_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001842:	f000 fad3 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184a:	2208      	movs	r2, #8
 800184c:	4619      	mov	r1, r3
 800184e:	481a      	ldr	r0, [pc, #104]	@ (80018b8 <MX_TIM1_Init+0x148>)
 8001850:	f003 fe10 	bl	8005474 <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800185a:	f000 fac7 	bl	8001dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800185e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001862:	220c      	movs	r2, #12
 8001864:	4619      	mov	r1, r3
 8001866:	4814      	ldr	r0, [pc, #80]	@ (80018b8 <MX_TIM1_Init+0x148>)
 8001868:	f003 fe04 	bl	8005474 <HAL_TIM_PWM_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001872:	f000 fabb 	bl	8001dec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800188e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4807      	ldr	r0, [pc, #28]	@ (80018b8 <MX_TIM1_Init+0x148>)
 800189a:	f004 f9d3 	bl	8005c44 <HAL_TIMEx_ConfigBreakDeadTime>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80018a4:	f000 faa2 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018a8:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <MX_TIM1_Init+0x148>)
 80018aa:	f001 f969 	bl	8002b80 <HAL_TIM_MspPostInit>

}
 80018ae:	bf00      	nop
 80018b0:	3748      	adds	r7, #72	@ 0x48
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000f8 	.word	0x200000f8
 80018bc:	40010000 	.word	0x40010000

080018c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	@ 0x30
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2224      	movs	r2, #36	@ 0x24
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 fe2a 	bl	8006528 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018dc:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <MX_TIM2_Init+0xa4>)
 80018de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <MX_TIM2_Init+0xa4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <MX_TIM2_Init+0xa4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001964 <MX_TIM2_Init+0xa4>)
 80018f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <MX_TIM2_Init+0xa4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <MX_TIM2_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001904:	2303      	movs	r3, #3
 8001906:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800190c:	2301      	movs	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800191c:	2301      	movs	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4619      	mov	r1, r3
 800192e:	480d      	ldr	r0, [pc, #52]	@ (8001964 <MX_TIM2_Init+0xa4>)
 8001930:	f003 fb7c 	bl	800502c <HAL_TIM_Encoder_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800193a:	f000 fa57 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4806      	ldr	r0, [pc, #24]	@ (8001964 <MX_TIM2_Init+0xa4>)
 800194c:	f004 f8fe 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001956:	f000 fa49 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	3730      	adds	r7, #48	@ 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000140 	.word	0x20000140

08001968 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	@ 0x30
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2224      	movs	r2, #36	@ 0x24
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fdd6 	bl	8006528 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <MX_TIM3_Init+0xa0>)
 8001986:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <MX_TIM3_Init+0xa4>)
 8001988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800198a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <MX_TIM3_Init+0xa0>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <MX_TIM3_Init+0xa0>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <MX_TIM3_Init+0xa0>)
 8001998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_TIM3_Init+0xa0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <MX_TIM3_Init+0xa0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019aa:	2303      	movs	r3, #3
 80019ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80019ae:	2302      	movs	r3, #2
 80019b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c2:	2301      	movs	r3, #1
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <MX_TIM3_Init+0xa0>)
 80019d6:	f003 fb29 	bl	800502c <HAL_TIM_Encoder_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80019e0:	f000 fa04 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_TIM3_Init+0xa0>)
 80019f2:	f004 f8ab 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80019fc:	f000 f9f6 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3730      	adds	r7, #48	@ 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000188 	.word	0x20000188
 8001a0c:	40000400 	.word	0x40000400

08001a10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	@ 0x30
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	2224      	movs	r2, #36	@ 0x24
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 fd82 	bl	8006528 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a2e:	4a21      	ldr	r2, [pc, #132]	@ (8001ab4 <MX_TIM4_Init+0xa4>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a52:	2303      	movs	r3, #3
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a7e:	f003 fad5 	bl	800502c <HAL_TIM_Encoder_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a88:	f000 f9b0 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a9a:	f004 f857 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001aa4:	f000 f9a2 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	@ 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200001d0 	.word	0x200001d0
 8001ab4:	40000800 	.word	0x40000800

08001ab8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	@ 0x30
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	2224      	movs	r2, #36	@ 0x24
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fd2e 	bl	8006528 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ad4:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <MX_TIM5_Init+0xa0>)
 8001ad6:	4a21      	ldr	r2, [pc, #132]	@ (8001b5c <MX_TIM5_Init+0xa4>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <MX_TIM5_Init+0xa0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <MX_TIM5_Init+0xa0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <MX_TIM5_Init+0xa0>)
 8001ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <MX_TIM5_Init+0xa0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <MX_TIM5_Init+0xa0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001afa:	2303      	movs	r3, #3
 8001afc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001afe:	2302      	movs	r3, #2
 8001b00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <MX_TIM5_Init+0xa0>)
 8001b26:	f003 fa81 	bl	800502c <HAL_TIM_Encoder_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b30:	f000 f95c 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <MX_TIM5_Init+0xa0>)
 8001b42:	f004 f803 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001b4c:	f000 f94e 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	@ 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000218 	.word	0x20000218
 8001b5c:	40000c00 	.word	0x40000c00

08001b60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <MX_TIM14_Init+0x40>)
 8001b66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba4 <MX_TIM14_Init+0x44>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1800-1;
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <MX_TIM14_Init+0x40>)
 8001b6c:	f240 7207 	movw	r2, #1799	@ 0x707
 8001b70:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <MX_TIM14_Init+0x40>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 500-1;
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <MX_TIM14_Init+0x40>)
 8001b7a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001b7e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <MX_TIM14_Init+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <MX_TIM14_Init+0x40>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <MX_TIM14_Init+0x40>)
 8001b8e:	f003 f875 	bl	8004c7c <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001b98:	f000 f928 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000260 	.word	0x20000260
 8001ba4:	40002000 	.word	0x40002000

08001ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bac:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <MX_USART2_UART_Init+0x50>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <MX_USART2_UART_Init+0x4c>)
 8001be0:	f004 f896 	bl	8005d10 <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bea:	f000 f8ff 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200002a8 	.word	0x200002a8
 8001bf8:	40004400 	.word	0x40004400

08001bfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <MX_USART3_UART_Init+0x50>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_USART3_UART_Init+0x4c>)
 8001c34:	f004 f86c 	bl	8005d10 <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c3e:	f000 f8d5 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200002f0 	.word	0x200002f0
 8001c4c:	40004800 	.word	0x40004800

08001c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <MX_DMA_Init+0x3c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <MX_DMA_Init+0x3c>)
 8001c60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <MX_DMA_Init+0x3c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2038      	movs	r0, #56	@ 0x38
 8001c78:	f001 fcf9 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c7c:	2038      	movs	r0, #56	@ 0x38
 8001c7e:	f001 fd12 	bl	80036a6 <HAL_NVIC_EnableIRQ>

}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800

08001c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b43      	ldr	r3, [pc, #268]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a42      	ldr	r2, [pc, #264]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b40      	ldr	r3, [pc, #256]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a3b      	ldr	r2, [pc, #236]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b39      	ldr	r3, [pc, #228]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b35      	ldr	r3, [pc, #212]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a34      	ldr	r2, [pc, #208]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b32      	ldr	r3, [pc, #200]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a2d      	ldr	r2, [pc, #180]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <MX_GPIO_Init+0x128>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 8001d16:	2200      	movs	r2, #0
 8001d18:	f640 711c 	movw	r1, #3868	@ 0xf1c
 8001d1c:	4827      	ldr	r0, [pc, #156]	@ (8001dbc <MX_GPIO_Init+0x12c>)
 8001d1e:	f002 f95b 	bl	8003fd8 <HAL_GPIO_WritePin>
                          |M2_INB_Pin|M1_INA_Pin|M1_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2136      	movs	r1, #54	@ 0x36
 8001d26:	4826      	ldr	r0, [pc, #152]	@ (8001dc0 <MX_GPIO_Init+0x130>)
 8001d28:	f002 f956 	bl	8003fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d32:	4824      	ldr	r0, [pc, #144]	@ (8001dc4 <MX_GPIO_Init+0x134>)
 8001d34:	f002 f950 	bl	8003fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_INA_Pin M4_INB_Pin TX_EN_Pin M2_INA_Pin
                           M1_INA_Pin M1_INB_Pin */
  GPIO_InitStruct.Pin = M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 8001d38:	f640 531c 	movw	r3, #3356	@ 0xd1c
 8001d3c:	617b      	str	r3, [r7, #20]
                          |M1_INA_Pin|M1_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	481a      	ldr	r0, [pc, #104]	@ (8001dbc <MX_GPIO_Init+0x12c>)
 8001d52:	f001 ffad 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RX_Pin LED_TX_Pin M3_INA_Pin M3_INB_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin;
 8001d56:	2336      	movs	r3, #54	@ 0x36
 8001d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4814      	ldr	r0, [pc, #80]	@ (8001dc0 <MX_GPIO_Init+0x130>)
 8001d6e:	f001 ff9f 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_INB_Pin */
  GPIO_InitStruct.Pin = M2_INB_Pin;
 8001d72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_INB_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <MX_GPIO_Init+0x12c>)
 8001d8c:	f001 ff90 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8001d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4806      	ldr	r0, [pc, #24]	@ (8001dc4 <MX_GPIO_Init+0x134>)
 8001daa:	f001 ff81 	bl	8003cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <HAL_TIM_PeriodElapsedCallback>:
{
    return &hadc1;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d103      	bne.n	8001de0 <HAL_TIM_PeriodElapsedCallback+0x18>
		update_Encoder_Data();
 8001dd8:	f7ff fa94 	bl	8001304 <update_Encoder_Data>
		updateMotors();
 8001ddc:	f000 f948 	bl	8002070 <updateMotors>
	}
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000260 	.word	0x20000260

08001dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
}
 8001df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <Error_Handler+0x8>

08001df8 <limitPWM>:





float limitPWM(float pwm) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	ed87 0a01 	vstr	s0, [r7, #4]
    if (pwm > PWM_MAX)
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fb6c 	bl	80004e0 <__aeabi_f2d>
 8001e08:	a313      	add	r3, pc, #76	@ (adr r3, 8001e58 <limitPWM+0x60>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fe4f 	bl	8000ab0 <__aeabi_dcmpgt>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <limitPWM+0x24>
        return PWM_MAX;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <limitPWM+0x58>)
 8001e1a:	e00d      	b.n	8001e38 <limitPWM+0x40>
    else if (pwm < -PWM_MAX)
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fb5f 	bl	80004e0 <__aeabi_f2d>
 8001e22:	a309      	add	r3, pc, #36	@ (adr r3, 8001e48 <limitPWM+0x50>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fe24 	bl	8000a74 <__aeabi_dcmplt>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <limitPWM+0x3e>
        return -PWM_MAX;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <limitPWM+0x5c>)
 8001e34:	e000      	b.n	8001e38 <limitPWM+0x40>
    return pwm;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	7ae147ae 	.word	0x7ae147ae
 8001e4c:	bfefae14 	.word	0xbfefae14
 8001e50:	3f7d70a4 	.word	0x3f7d70a4
 8001e54:	bf7d70a4 	.word	0xbf7d70a4
 8001e58:	7ae147ae 	.word	0x7ae147ae
 8001e5c:	3fefae14 	.word	0x3fefae14

08001e60 <setForwardLeftMotorPWM>:

void setForwardLeftMotorPWM(float pwm) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8001e6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e6e:	f7ff ffc3 	bl	8001df8 <limitPWM>
 8001e72:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8001e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	db0f      	blt.n	8001ea4 <setForwardLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M1_INA = PC10, M1_INB = PC11
        // Reset bit 10 and Set bit 11 simultaneously
        GPIOC->BSRR = (1U << (10 + 16)) | (1U << 11);
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <setForwardLeftMotorPWM+0x70>)
 8001e86:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <setForwardLeftMotorPWM+0x74>)
 8001e88:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8001e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001ed8 <setForwardLeftMotorPWM+0x78>
 8001e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <setForwardLeftMotorPWM+0x7c>)
 8001e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9c:	ee17 2a90 	vmov	r2, s15
 8001ea0:	635a      	str	r2, [r3, #52]	@ 0x34
        // Reverse direction: INA=1, INB=0
        // Set bit 10 and Reset bit 11 simultaneously
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 8001ea2:	e010      	b.n	8001ec6 <setForwardLeftMotorPWM+0x66>
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <setForwardLeftMotorPWM+0x70>)
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <setForwardLeftMotorPWM+0x80>)
 8001ea8:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8001eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eae:	eef1 7a67 	vneg.f32	s15, s15
 8001eb2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001ed8 <setForwardLeftMotorPWM+0x78>
 8001eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <setForwardLeftMotorPWM+0x7c>)
 8001ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec0:	ee17 2a90 	vmov	r2, s15
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	04000800 	.word	0x04000800
 8001ed8:	45e0f800 	.word	0x45e0f800
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	08000400 	.word	0x08000400

08001ee4 <setForwardRightMotorPWM>:

void setForwardRightMotorPWM(float pwm) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8001eee:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ef2:	f7ff ff81 	bl	8001df8 <limitPWM>
 8001ef6:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8001efa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001efe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	db0f      	blt.n	8001f28 <setForwardRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M2_INA = PC8, M2_INB = PC9
        // Set bit 8 and Reset bit 9 simultaneously
        GPIOC->BSRR = (1U << 8) | (1U << (9 + 16));
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <setForwardRightMotorPWM+0x70>)
 8001f0a:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <setForwardRightMotorPWM+0x74>)
 8001f0c:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8001f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f12:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001f5c <setForwardRightMotorPWM+0x78>
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <setForwardRightMotorPWM+0x7c>)
 8001f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f20:	ee17 2a90 	vmov	r2, s15
 8001f24:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reverse direction: INA=0, INB=1
        // Reset bit 8 and Set bit 9 simultaneously
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 8001f26:	e010      	b.n	8001f4a <setForwardRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
 8001f28:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <setForwardRightMotorPWM+0x70>)
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <setForwardRightMotorPWM+0x80>)
 8001f2c:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8001f2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f32:	eef1 7a67 	vneg.f32	s15, s15
 8001f36:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001f5c <setForwardRightMotorPWM+0x78>
 8001f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <setForwardRightMotorPWM+0x7c>)
 8001f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f44:	ee17 2a90 	vmov	r2, s15
 8001f48:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40020800 	.word	0x40020800
 8001f58:	02000100 	.word	0x02000100
 8001f5c:	45e0f800 	.word	0x45e0f800
 8001f60:	40010000 	.word	0x40010000
 8001f64:	01000200 	.word	0x01000200

08001f68 <setRearLeftMotorPWM>:

void setRearLeftMotorPWM(float pwm) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8001f72:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f76:	f7ff ff3f 	bl	8001df8 <limitPWM>
 8001f7a:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8001f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	db0f      	blt.n	8001fac <setRearLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M3_INA = PB4, M3_INB = PB5
        // Reset bit 4 and Set bit 5 simultaneously
        GPIOB->BSRR = (1U << (4 + 16)) | (1U << 5);
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <setRearLeftMotorPWM+0x70>)
 8001f8e:	4a13      	ldr	r2, [pc, #76]	@ (8001fdc <setRearLeftMotorPWM+0x74>)
 8001f90:	619a      	str	r2, [r3, #24]
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 0);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);
        TIM1->CCR3 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8001f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f96:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001fe0 <setRearLeftMotorPWM+0x78>
 8001f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <setRearLeftMotorPWM+0x7c>)
 8001fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa4:	ee17 2a90 	vmov	r2, s15
 8001fa8:	63da      	str	r2, [r3, #60]	@ 0x3c
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 1);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 0);
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 8001faa:	e010      	b.n	8001fce <setRearLeftMotorPWM+0x66>
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
 8001fac:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <setRearLeftMotorPWM+0x70>)
 8001fae:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe8 <setRearLeftMotorPWM+0x80>)
 8001fb0:	619a      	str	r2, [r3, #24]
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8001fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb6:	eef1 7a67 	vneg.f32	s15, s15
 8001fba:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001fe0 <setRearLeftMotorPWM+0x78>
 8001fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <setRearLeftMotorPWM+0x7c>)
 8001fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc8:	ee17 2a90 	vmov	r2, s15
 8001fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	00100020 	.word	0x00100020
 8001fe0:	45e0f800 	.word	0x45e0f800
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	00200010 	.word	0x00200010

08001fec <setRearRightMotorPWM>:

void setRearRightMotorPWM(float pwm) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8001ff6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ffa:	f7ff fefd 	bl	8001df8 <limitPWM>
 8001ffe:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002002:	edd7 7a01 	vldr	s15, [r7, #4]
 8002006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200e:	db0f      	blt.n	8002030 <setRearRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M4_INA = PC2, M4_INB = PC3
        // Set bit 2 and Reset bit 3 simultaneously
        GPIOC->BSRR = (1U << 2) | (1U << (3 + 16));
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <setRearRightMotorPWM+0x70>)
 8002012:	4a13      	ldr	r2, [pc, #76]	@ (8002060 <setRearRightMotorPWM+0x74>)
 8002014:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002016:	edd7 7a01 	vldr	s15, [r7, #4]
 800201a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002064 <setRearRightMotorPWM+0x78>
 800201e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002022:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <setRearRightMotorPWM+0x7c>)
 8002024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002028:	ee17 2a90 	vmov	r2, s15
 800202c:	641a      	str	r2, [r3, #64]	@ 0x40
        // Reverse direction: INA=0, INB=1
        // Reset bit 2 and Set bit 3 simultaneously
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 800202e:	e010      	b.n	8002052 <setRearRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
 8002030:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <setRearRightMotorPWM+0x70>)
 8002032:	4a0e      	ldr	r2, [pc, #56]	@ (800206c <setRearRightMotorPWM+0x80>)
 8002034:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8002036:	edd7 7a01 	vldr	s15, [r7, #4]
 800203a:	eef1 7a67 	vneg.f32	s15, s15
 800203e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002064 <setRearRightMotorPWM+0x78>
 8002042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <setRearRightMotorPWM+0x7c>)
 8002048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800204c:	ee17 2a90 	vmov	r2, s15
 8002050:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40020800 	.word	0x40020800
 8002060:	00080004 	.word	0x00080004
 8002064:	45e0f800 	.word	0x45e0f800
 8002068:	40010000 	.word	0x40010000
 800206c:	00040008 	.word	0x00040008

08002070 <updateMotors>:
    // GPIOB: Reset M3_INA(PB4), M3_INB(PB5)
    GPIOB->BSRR = (1U << (4 + 16)) | (1U << (5 + 16));
}


void updateMotors(){
 8002070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002074:	b088      	sub	sp, #32
 8002076:	af00      	add	r7, sp, #0
    // Calculate velocity errors
    float m1_err = m1_target_W - m1_W;
 8002078:	4ba7      	ldr	r3, [pc, #668]	@ (8002318 <updateMotors+0x2a8>)
 800207a:	ed93 7a00 	vldr	s14, [r3]
 800207e:	4ba7      	ldr	r3, [pc, #668]	@ (800231c <updateMotors+0x2ac>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002088:	edc7 7a03 	vstr	s15, [r7, #12]
    float m2_err = m2_target_W - m2_W;
 800208c:	4ba4      	ldr	r3, [pc, #656]	@ (8002320 <updateMotors+0x2b0>)
 800208e:	ed93 7a00 	vldr	s14, [r3]
 8002092:	4ba4      	ldr	r3, [pc, #656]	@ (8002324 <updateMotors+0x2b4>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209c:	edc7 7a02 	vstr	s15, [r7, #8]
    float m3_err = m3_target_W - m3_W;
 80020a0:	4ba1      	ldr	r3, [pc, #644]	@ (8002328 <updateMotors+0x2b8>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	4ba1      	ldr	r3, [pc, #644]	@ (800232c <updateMotors+0x2bc>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b0:	edc7 7a01 	vstr	s15, [r7, #4]
    float m4_err = m4_target_W - m4_W;
 80020b4:	4b9e      	ldr	r3, [pc, #632]	@ (8002330 <updateMotors+0x2c0>)
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002334 <updateMotors+0x2c4>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c4:	edc7 7a00 	vstr	s15, [r7]



    m1_int += m1_err * LOOP_INTERVAL;
 80020c8:	4b9b      	ldr	r3, [pc, #620]	@ (8002338 <updateMotors+0x2c8>)
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80020d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d6:	4b99      	ldr	r3, [pc, #612]	@ (800233c <updateMotors+0x2cc>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e0:	4b96      	ldr	r3, [pc, #600]	@ (800233c <updateMotors+0x2cc>)
 80020e2:	edc3 7a00 	vstr	s15, [r3]
    m2_int += m2_err * LOOP_INTERVAL;
 80020e6:	4b94      	ldr	r3, [pc, #592]	@ (8002338 <updateMotors+0x2c8>)
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80020f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f4:	4b92      	ldr	r3, [pc, #584]	@ (8002340 <updateMotors+0x2d0>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fe:	4b90      	ldr	r3, [pc, #576]	@ (8002340 <updateMotors+0x2d0>)
 8002100:	edc3 7a00 	vstr	s15, [r3]
    m3_int += m3_err * LOOP_INTERVAL;
 8002104:	4b8c      	ldr	r3, [pc, #560]	@ (8002338 <updateMotors+0x2c8>)
 8002106:	ed93 7a00 	vldr	s14, [r3]
 800210a:	edd7 7a01 	vldr	s15, [r7, #4]
 800210e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002112:	4b8c      	ldr	r3, [pc, #560]	@ (8002344 <updateMotors+0x2d4>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211c:	4b89      	ldr	r3, [pc, #548]	@ (8002344 <updateMotors+0x2d4>)
 800211e:	edc3 7a00 	vstr	s15, [r3]
    m4_int += m4_err * LOOP_INTERVAL;
 8002122:	4b85      	ldr	r3, [pc, #532]	@ (8002338 <updateMotors+0x2c8>)
 8002124:	ed93 7a00 	vldr	s14, [r3]
 8002128:	edd7 7a00 	vldr	s15, [r7]
 800212c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002130:	4b85      	ldr	r3, [pc, #532]	@ (8002348 <updateMotors+0x2d8>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213a:	4b83      	ldr	r3, [pc, #524]	@ (8002348 <updateMotors+0x2d8>)
 800213c:	edc3 7a00 	vstr	s15, [r3]


    m1_int = clampf(m1_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002140:	4b7e      	ldr	r3, [pc, #504]	@ (800233c <updateMotors+0x2cc>)
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	4b81      	ldr	r3, [pc, #516]	@ (800234c <updateMotors+0x2dc>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	eef1 7a67 	vneg.f32	s15, s15
 8002150:	4b7e      	ldr	r3, [pc, #504]	@ (800234c <updateMotors+0x2dc>)
 8002152:	edd3 6a00 	vldr	s13, [r3]
 8002156:	eeb0 1a66 	vmov.f32	s2, s13
 800215a:	eef0 0a67 	vmov.f32	s1, s15
 800215e:	eeb0 0a47 	vmov.f32	s0, s14
 8002162:	f7ff f829 	bl	80011b8 <clampf>
 8002166:	eef0 7a40 	vmov.f32	s15, s0
 800216a:	4b74      	ldr	r3, [pc, #464]	@ (800233c <updateMotors+0x2cc>)
 800216c:	edc3 7a00 	vstr	s15, [r3]
    m2_int = clampf(m2_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002170:	4b73      	ldr	r3, [pc, #460]	@ (8002340 <updateMotors+0x2d0>)
 8002172:	ed93 7a00 	vldr	s14, [r3]
 8002176:	4b75      	ldr	r3, [pc, #468]	@ (800234c <updateMotors+0x2dc>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	eef1 7a67 	vneg.f32	s15, s15
 8002180:	4b72      	ldr	r3, [pc, #456]	@ (800234c <updateMotors+0x2dc>)
 8002182:	edd3 6a00 	vldr	s13, [r3]
 8002186:	eeb0 1a66 	vmov.f32	s2, s13
 800218a:	eef0 0a67 	vmov.f32	s1, s15
 800218e:	eeb0 0a47 	vmov.f32	s0, s14
 8002192:	f7ff f811 	bl	80011b8 <clampf>
 8002196:	eef0 7a40 	vmov.f32	s15, s0
 800219a:	4b69      	ldr	r3, [pc, #420]	@ (8002340 <updateMotors+0x2d0>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
    m3_int = clampf(m3_int, -MAXINTCLAMP, MAXINTCLAMP);
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <updateMotors+0x2d4>)
 80021a2:	ed93 7a00 	vldr	s14, [r3]
 80021a6:	4b69      	ldr	r3, [pc, #420]	@ (800234c <updateMotors+0x2dc>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eef1 7a67 	vneg.f32	s15, s15
 80021b0:	4b66      	ldr	r3, [pc, #408]	@ (800234c <updateMotors+0x2dc>)
 80021b2:	edd3 6a00 	vldr	s13, [r3]
 80021b6:	eeb0 1a66 	vmov.f32	s2, s13
 80021ba:	eef0 0a67 	vmov.f32	s1, s15
 80021be:	eeb0 0a47 	vmov.f32	s0, s14
 80021c2:	f7fe fff9 	bl	80011b8 <clampf>
 80021c6:	eef0 7a40 	vmov.f32	s15, s0
 80021ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002344 <updateMotors+0x2d4>)
 80021cc:	edc3 7a00 	vstr	s15, [r3]
    m4_int = clampf(m4_int, -MAXINTCLAMP, MAXINTCLAMP);
 80021d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002348 <updateMotors+0x2d8>)
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	4b5d      	ldr	r3, [pc, #372]	@ (800234c <updateMotors+0x2dc>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	eef1 7a67 	vneg.f32	s15, s15
 80021e0:	4b5a      	ldr	r3, [pc, #360]	@ (800234c <updateMotors+0x2dc>)
 80021e2:	edd3 6a00 	vldr	s13, [r3]
 80021e6:	eeb0 1a66 	vmov.f32	s2, s13
 80021ea:	eef0 0a67 	vmov.f32	s1, s15
 80021ee:	eeb0 0a47 	vmov.f32	s0, s14
 80021f2:	f7fe ffe1 	bl	80011b8 <clampf>
 80021f6:	eef0 7a40 	vmov.f32	s15, s0
 80021fa:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <updateMotors+0x2d8>)
 80021fc:	edc3 7a00 	vstr	s15, [r3]


    float m1_output = Kp_Vel * m1_err + Ki_Vel * m1_int;
 8002200:	4b53      	ldr	r3, [pc, #332]	@ (8002350 <updateMotors+0x2e0>)
 8002202:	ed93 7a00 	vldr	s14, [r3]
 8002206:	edd7 7a03 	vldr	s15, [r7, #12]
 800220a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220e:	4b51      	ldr	r3, [pc, #324]	@ (8002354 <updateMotors+0x2e4>)
 8002210:	edd3 6a00 	vldr	s13, [r3]
 8002214:	4b49      	ldr	r3, [pc, #292]	@ (800233c <updateMotors+0x2cc>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	edc7 7a07 	vstr	s15, [r7, #28]
    float m2_output = Kp_Vel * m2_err + Ki_Vel * m2_int;
 8002226:	4b4a      	ldr	r3, [pc, #296]	@ (8002350 <updateMotors+0x2e0>)
 8002228:	ed93 7a00 	vldr	s14, [r3]
 800222c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002234:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <updateMotors+0x2e4>)
 8002236:	edd3 6a00 	vldr	s13, [r3]
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <updateMotors+0x2d0>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002248:	edc7 7a06 	vstr	s15, [r7, #24]
    float m3_output = Kp_Vel * m3_err + Ki_Vel * m3_int;
 800224c:	4b40      	ldr	r3, [pc, #256]	@ (8002350 <updateMotors+0x2e0>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	edd7 7a01 	vldr	s15, [r7, #4]
 8002256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225a:	4b3e      	ldr	r3, [pc, #248]	@ (8002354 <updateMotors+0x2e4>)
 800225c:	edd3 6a00 	vldr	s13, [r3]
 8002260:	4b38      	ldr	r3, [pc, #224]	@ (8002344 <updateMotors+0x2d4>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226e:	edc7 7a05 	vstr	s15, [r7, #20]
    float m4_output = Kp_Vel * m4_err + Ki_Vel * m4_int;
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <updateMotors+0x2e0>)
 8002274:	ed93 7a00 	vldr	s14, [r3]
 8002278:	edd7 7a00 	vldr	s15, [r7]
 800227c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002280:	4b34      	ldr	r3, [pc, #208]	@ (8002354 <updateMotors+0x2e4>)
 8002282:	edd3 6a00 	vldr	s13, [r3]
 8002286:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <updateMotors+0x2d8>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002294:	edc7 7a04 	vstr	s15, [r7, #16]

    //  integral windup prevention
    // If output is saturated, reduce integral term
    if (m1_output > PWM_MAX) {
 8002298:	69f8      	ldr	r0, [r7, #28]
 800229a:	f7fe f921 	bl	80004e0 <__aeabi_f2d>
 800229e:	a31c      	add	r3, pc, #112	@ (adr r3, 8002310 <updateMotors+0x2a0>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f7fe fc04 	bl	8000ab0 <__aeabi_dcmpgt>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d056      	beq.n	800235c <updateMotors+0x2ec>
        m1_int -= (m1_output - PWM_MAX) / Ki_Vel;
 80022ae:	4b23      	ldr	r3, [pc, #140]	@ (800233c <updateMotors+0x2cc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f914 	bl	80004e0 <__aeabi_f2d>
 80022b8:	4604      	mov	r4, r0
 80022ba:	460d      	mov	r5, r1
 80022bc:	69f8      	ldr	r0, [r7, #28]
 80022be:	f7fe f90f 	bl	80004e0 <__aeabi_f2d>
 80022c2:	a313      	add	r3, pc, #76	@ (adr r3, 8002310 <updateMotors+0x2a0>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fd ffaa 	bl	8000220 <__aeabi_dsub>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4690      	mov	r8, r2
 80022d2:	4699      	mov	r9, r3
 80022d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <updateMotors+0x2e4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe f901 	bl	80004e0 <__aeabi_f2d>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4640      	mov	r0, r8
 80022e4:	4649      	mov	r1, r9
 80022e6:	f7fe fa7d 	bl	80007e4 <__aeabi_ddiv>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4620      	mov	r0, r4
 80022f0:	4629      	mov	r1, r5
 80022f2:	f7fd ff95 	bl	8000220 <__aeabi_dsub>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fbe1 	bl	8000ac4 <__aeabi_d2f>
 8002302:	4603      	mov	r3, r0
 8002304:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <updateMotors+0x2cc>)
 8002306:	6013      	str	r3, [r2, #0]
        m1_output = PWM_MAX;
 8002308:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <updateMotors+0x2e8>)
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	e060      	b.n	80023d0 <updateMotors+0x360>
 800230e:	bf00      	nop
 8002310:	7ae147ae 	.word	0x7ae147ae
 8002314:	3fefae14 	.word	0x3fefae14
 8002318:	20000338 	.word	0x20000338
 800231c:	20000040 	.word	0x20000040
 8002320:	2000033c 	.word	0x2000033c
 8002324:	20000048 	.word	0x20000048
 8002328:	20000340 	.word	0x20000340
 800232c:	2000004c 	.word	0x2000004c
 8002330:	20000344 	.word	0x20000344
 8002334:	20000044 	.word	0x20000044
 8002338:	0800661c 	.word	0x0800661c
 800233c:	20000348 	.word	0x20000348
 8002340:	2000034c 	.word	0x2000034c
 8002344:	20000350 	.word	0x20000350
 8002348:	20000354 	.word	0x20000354
 800234c:	08006628 	.word	0x08006628
 8002350:	08006620 	.word	0x08006620
 8002354:	08006624 	.word	0x08006624
 8002358:	3f7d70a4 	.word	0x3f7d70a4
    } else if (m1_output < -PWM_MAX) {
 800235c:	69f8      	ldr	r0, [r7, #28]
 800235e:	f7fe f8bf 	bl	80004e0 <__aeabi_f2d>
 8002362:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002628 <updateMotors+0x5b8>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe fb84 	bl	8000a74 <__aeabi_dcmplt>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d02e      	beq.n	80023d0 <updateMotors+0x360>
        m1_int -= (m1_output + PWM_MAX) / Ki_Vel;
 8002372:	4baf      	ldr	r3, [pc, #700]	@ (8002630 <updateMotors+0x5c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f8b2 	bl	80004e0 <__aeabi_f2d>
 800237c:	4604      	mov	r4, r0
 800237e:	460d      	mov	r5, r1
 8002380:	69f8      	ldr	r0, [r7, #28]
 8002382:	f7fe f8ad 	bl	80004e0 <__aeabi_f2d>
 8002386:	a3a6      	add	r3, pc, #664	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fd ff4a 	bl	8000224 <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4690      	mov	r8, r2
 8002396:	4699      	mov	r9, r3
 8002398:	4ba6      	ldr	r3, [pc, #664]	@ (8002634 <updateMotors+0x5c4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f89f 	bl	80004e0 <__aeabi_f2d>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4640      	mov	r0, r8
 80023a8:	4649      	mov	r1, r9
 80023aa:	f7fe fa1b 	bl	80007e4 <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4620      	mov	r0, r4
 80023b4:	4629      	mov	r1, r5
 80023b6:	f7fd ff33 	bl	8000220 <__aeabi_dsub>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fb7f 	bl	8000ac4 <__aeabi_d2f>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a99      	ldr	r2, [pc, #612]	@ (8002630 <updateMotors+0x5c0>)
 80023ca:	6013      	str	r3, [r2, #0]
        m1_output = -PWM_MAX;
 80023cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002638 <updateMotors+0x5c8>)
 80023ce:	61fb      	str	r3, [r7, #28]
    }

    if (m2_output > PWM_MAX) {
 80023d0:	69b8      	ldr	r0, [r7, #24]
 80023d2:	f7fe f885 	bl	80004e0 <__aeabi_f2d>
 80023d6:	a392      	add	r3, pc, #584	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fe fb68 	bl	8000ab0 <__aeabi_dcmpgt>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d02f      	beq.n	8002446 <updateMotors+0x3d6>
        m2_int -= (m2_output - PWM_MAX) / Ki_Vel;
 80023e6:	4b95      	ldr	r3, [pc, #596]	@ (800263c <updateMotors+0x5cc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f878 	bl	80004e0 <__aeabi_f2d>
 80023f0:	4604      	mov	r4, r0
 80023f2:	460d      	mov	r5, r1
 80023f4:	69b8      	ldr	r0, [r7, #24]
 80023f6:	f7fe f873 	bl	80004e0 <__aeabi_f2d>
 80023fa:	a389      	add	r3, pc, #548	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fd ff0e 	bl	8000220 <__aeabi_dsub>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4690      	mov	r8, r2
 800240a:	4699      	mov	r9, r3
 800240c:	4b89      	ldr	r3, [pc, #548]	@ (8002634 <updateMotors+0x5c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f865 	bl	80004e0 <__aeabi_f2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4640      	mov	r0, r8
 800241c:	4649      	mov	r1, r9
 800241e:	f7fe f9e1 	bl	80007e4 <__aeabi_ddiv>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fd fef9 	bl	8000220 <__aeabi_dsub>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fb45 	bl	8000ac4 <__aeabi_d2f>
 800243a:	4603      	mov	r3, r0
 800243c:	4a7f      	ldr	r2, [pc, #508]	@ (800263c <updateMotors+0x5cc>)
 800243e:	6013      	str	r3, [r2, #0]
        m2_output = PWM_MAX;
 8002440:	4b7f      	ldr	r3, [pc, #508]	@ (8002640 <updateMotors+0x5d0>)
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e039      	b.n	80024ba <updateMotors+0x44a>
    } else if (m2_output < -PWM_MAX) {
 8002446:	69b8      	ldr	r0, [r7, #24]
 8002448:	f7fe f84a 	bl	80004e0 <__aeabi_f2d>
 800244c:	a376      	add	r3, pc, #472	@ (adr r3, 8002628 <updateMotors+0x5b8>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fe fb0f 	bl	8000a74 <__aeabi_dcmplt>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02e      	beq.n	80024ba <updateMotors+0x44a>
        m2_int -= (m2_output + PWM_MAX) / Ki_Vel;
 800245c:	4b77      	ldr	r3, [pc, #476]	@ (800263c <updateMotors+0x5cc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe f83d 	bl	80004e0 <__aeabi_f2d>
 8002466:	4604      	mov	r4, r0
 8002468:	460d      	mov	r5, r1
 800246a:	69b8      	ldr	r0, [r7, #24]
 800246c:	f7fe f838 	bl	80004e0 <__aeabi_f2d>
 8002470:	a36b      	add	r3, pc, #428	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	f7fd fed5 	bl	8000224 <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4690      	mov	r8, r2
 8002480:	4699      	mov	r9, r3
 8002482:	4b6c      	ldr	r3, [pc, #432]	@ (8002634 <updateMotors+0x5c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f82a 	bl	80004e0 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4640      	mov	r0, r8
 8002492:	4649      	mov	r1, r9
 8002494:	f7fe f9a6 	bl	80007e4 <__aeabi_ddiv>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4620      	mov	r0, r4
 800249e:	4629      	mov	r1, r5
 80024a0:	f7fd febe 	bl	8000220 <__aeabi_dsub>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fb0a 	bl	8000ac4 <__aeabi_d2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a62      	ldr	r2, [pc, #392]	@ (800263c <updateMotors+0x5cc>)
 80024b4:	6013      	str	r3, [r2, #0]
        m2_output = -PWM_MAX;
 80024b6:	4b60      	ldr	r3, [pc, #384]	@ (8002638 <updateMotors+0x5c8>)
 80024b8:	61bb      	str	r3, [r7, #24]
    }

    if (m3_output > PWM_MAX) {
 80024ba:	6978      	ldr	r0, [r7, #20]
 80024bc:	f7fe f810 	bl	80004e0 <__aeabi_f2d>
 80024c0:	a357      	add	r3, pc, #348	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe faf3 	bl	8000ab0 <__aeabi_dcmpgt>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d02f      	beq.n	8002530 <updateMotors+0x4c0>
        m3_int -= (m3_output - PWM_MAX) / Ki_Vel;
 80024d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002644 <updateMotors+0x5d4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f803 	bl	80004e0 <__aeabi_f2d>
 80024da:	4604      	mov	r4, r0
 80024dc:	460d      	mov	r5, r1
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	f7fd fffe 	bl	80004e0 <__aeabi_f2d>
 80024e4:	a34e      	add	r3, pc, #312	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	f7fd fe99 	bl	8000220 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4690      	mov	r8, r2
 80024f4:	4699      	mov	r9, r3
 80024f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002634 <updateMotors+0x5c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fd fff0 	bl	80004e0 <__aeabi_f2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4640      	mov	r0, r8
 8002506:	4649      	mov	r1, r9
 8002508:	f7fe f96c 	bl	80007e4 <__aeabi_ddiv>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fd fe84 	bl	8000220 <__aeabi_dsub>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe fad0 	bl	8000ac4 <__aeabi_d2f>
 8002524:	4603      	mov	r3, r0
 8002526:	4a47      	ldr	r2, [pc, #284]	@ (8002644 <updateMotors+0x5d4>)
 8002528:	6013      	str	r3, [r2, #0]
        m3_output = PWM_MAX;
 800252a:	4b45      	ldr	r3, [pc, #276]	@ (8002640 <updateMotors+0x5d0>)
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e039      	b.n	80025a4 <updateMotors+0x534>
    } else if (m3_output < -PWM_MAX) {
 8002530:	6978      	ldr	r0, [r7, #20]
 8002532:	f7fd ffd5 	bl	80004e0 <__aeabi_f2d>
 8002536:	a33c      	add	r3, pc, #240	@ (adr r3, 8002628 <updateMotors+0x5b8>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe fa9a 	bl	8000a74 <__aeabi_dcmplt>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d02e      	beq.n	80025a4 <updateMotors+0x534>
        m3_int -= (m3_output + PWM_MAX) / Ki_Vel;
 8002546:	4b3f      	ldr	r3, [pc, #252]	@ (8002644 <updateMotors+0x5d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd ffc8 	bl	80004e0 <__aeabi_f2d>
 8002550:	4604      	mov	r4, r0
 8002552:	460d      	mov	r5, r1
 8002554:	6978      	ldr	r0, [r7, #20]
 8002556:	f7fd ffc3 	bl	80004e0 <__aeabi_f2d>
 800255a:	a331      	add	r3, pc, #196	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fd fe60 	bl	8000224 <__adddf3>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4690      	mov	r8, r2
 800256a:	4699      	mov	r9, r3
 800256c:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <updateMotors+0x5c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ffb5 	bl	80004e0 <__aeabi_f2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4640      	mov	r0, r8
 800257c:	4649      	mov	r1, r9
 800257e:	f7fe f931 	bl	80007e4 <__aeabi_ddiv>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4620      	mov	r0, r4
 8002588:	4629      	mov	r1, r5
 800258a:	f7fd fe49 	bl	8000220 <__aeabi_dsub>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	f7fe fa95 	bl	8000ac4 <__aeabi_d2f>
 800259a:	4603      	mov	r3, r0
 800259c:	4a29      	ldr	r2, [pc, #164]	@ (8002644 <updateMotors+0x5d4>)
 800259e:	6013      	str	r3, [r2, #0]
        m3_output = -PWM_MAX;
 80025a0:	4b25      	ldr	r3, [pc, #148]	@ (8002638 <updateMotors+0x5c8>)
 80025a2:	617b      	str	r3, [r7, #20]
    }

    if (m4_output > PWM_MAX) {
 80025a4:	6938      	ldr	r0, [r7, #16]
 80025a6:	f7fd ff9b 	bl	80004e0 <__aeabi_f2d>
 80025aa:	a31d      	add	r3, pc, #116	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe fa7e 	bl	8000ab0 <__aeabi_dcmpgt>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d048      	beq.n	800264c <updateMotors+0x5dc>
        m4_int -= (m4_output - PWM_MAX) / Ki_Vel;
 80025ba:	4b23      	ldr	r3, [pc, #140]	@ (8002648 <updateMotors+0x5d8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ff8e 	bl	80004e0 <__aeabi_f2d>
 80025c4:	4604      	mov	r4, r0
 80025c6:	460d      	mov	r5, r1
 80025c8:	6938      	ldr	r0, [r7, #16]
 80025ca:	f7fd ff89 	bl	80004e0 <__aeabi_f2d>
 80025ce:	a314      	add	r3, pc, #80	@ (adr r3, 8002620 <updateMotors+0x5b0>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fd fe24 	bl	8000220 <__aeabi_dsub>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4690      	mov	r8, r2
 80025de:	4699      	mov	r9, r3
 80025e0:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <updateMotors+0x5c4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ff7b 	bl	80004e0 <__aeabi_f2d>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4640      	mov	r0, r8
 80025f0:	4649      	mov	r1, r9
 80025f2:	f7fe f8f7 	bl	80007e4 <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fd fe0f 	bl	8000220 <__aeabi_dsub>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe fa5b 	bl	8000ac4 <__aeabi_d2f>
 800260e:	4603      	mov	r3, r0
 8002610:	4a0d      	ldr	r2, [pc, #52]	@ (8002648 <updateMotors+0x5d8>)
 8002612:	6013      	str	r3, [r2, #0]
        m4_output = PWM_MAX;
 8002614:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <updateMotors+0x5d0>)
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	e052      	b.n	80026c0 <updateMotors+0x650>
 800261a:	bf00      	nop
 800261c:	f3af 8000 	nop.w
 8002620:	7ae147ae 	.word	0x7ae147ae
 8002624:	3fefae14 	.word	0x3fefae14
 8002628:	7ae147ae 	.word	0x7ae147ae
 800262c:	bfefae14 	.word	0xbfefae14
 8002630:	20000348 	.word	0x20000348
 8002634:	08006624 	.word	0x08006624
 8002638:	bf7d70a4 	.word	0xbf7d70a4
 800263c:	2000034c 	.word	0x2000034c
 8002640:	3f7d70a4 	.word	0x3f7d70a4
 8002644:	20000350 	.word	0x20000350
 8002648:	20000354 	.word	0x20000354
    } else if (m4_output < -PWM_MAX) {
 800264c:	6938      	ldr	r0, [r7, #16]
 800264e:	f7fd ff47 	bl	80004e0 <__aeabi_f2d>
 8002652:	a32c      	add	r3, pc, #176	@ (adr r3, 8002704 <updateMotors+0x694>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fe fa0c 	bl	8000a74 <__aeabi_dcmplt>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d02e      	beq.n	80026c0 <updateMotors+0x650>
        m4_int -= (m4_output + PWM_MAX) / Ki_Vel;
 8002662:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <updateMotors+0x688>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff3a 	bl	80004e0 <__aeabi_f2d>
 800266c:	4604      	mov	r4, r0
 800266e:	460d      	mov	r5, r1
 8002670:	6938      	ldr	r0, [r7, #16]
 8002672:	f7fd ff35 	bl	80004e0 <__aeabi_f2d>
 8002676:	a31e      	add	r3, pc, #120	@ (adr r3, 80026f0 <updateMotors+0x680>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fd fdd2 	bl	8000224 <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4690      	mov	r8, r2
 8002686:	4699      	mov	r9, r3
 8002688:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <updateMotors+0x68c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff27 	bl	80004e0 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4640      	mov	r0, r8
 8002698:	4649      	mov	r1, r9
 800269a:	f7fe f8a3 	bl	80007e4 <__aeabi_ddiv>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4620      	mov	r0, r4
 80026a4:	4629      	mov	r1, r5
 80026a6:	f7fd fdbb 	bl	8000220 <__aeabi_dsub>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe fa07 	bl	8000ac4 <__aeabi_d2f>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4a0f      	ldr	r2, [pc, #60]	@ (80026f8 <updateMotors+0x688>)
 80026ba:	6013      	str	r3, [r2, #0]
        m4_output = -PWM_MAX;
 80026bc:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <updateMotors+0x690>)
 80026be:	613b      	str	r3, [r7, #16]
    }


    setForwardLeftMotorPWM(m1_output);
 80026c0:	ed97 0a07 	vldr	s0, [r7, #28]
 80026c4:	f7ff fbcc 	bl	8001e60 <setForwardLeftMotorPWM>
    setForwardRightMotorPWM(m4_output);
 80026c8:	ed97 0a04 	vldr	s0, [r7, #16]
 80026cc:	f7ff fc0a 	bl	8001ee4 <setForwardRightMotorPWM>
    setRearLeftMotorPWM(m2_output);
 80026d0:	ed97 0a06 	vldr	s0, [r7, #24]
 80026d4:	f7ff fc48 	bl	8001f68 <setRearLeftMotorPWM>
    setRearRightMotorPWM(m3_output);
 80026d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80026dc:	f7ff fc86 	bl	8001fec <setRearRightMotorPWM>
}
 80026e0:	bf00      	nop
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026ea:	bf00      	nop
 80026ec:	f3af 8000 	nop.w
 80026f0:	7ae147ae 	.word	0x7ae147ae
 80026f4:	3fefae14 	.word	0x3fefae14
 80026f8:	20000354 	.word	0x20000354
 80026fc:	08006624 	.word	0x08006624
 8002700:	bf7d70a4 	.word	0xbf7d70a4
 8002704:	7ae147ae 	.word	0x7ae147ae
 8002708:	bfefae14 	.word	0xbfefae14

0800270c <setTargetVelocities>:
    m3_int = 0;
    m4_int = 0;
}


void setTargetVelocities(float m1_target, float m2_target, float m3_target, float m4_target) {
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	ed87 0a03 	vstr	s0, [r7, #12]
 8002716:	edc7 0a02 	vstr	s1, [r7, #8]
 800271a:	ed87 1a01 	vstr	s2, [r7, #4]
 800271e:	edc7 1a00 	vstr	s3, [r7]
    m1_target_W = m1_target;
 8002722:	4a09      	ldr	r2, [pc, #36]	@ (8002748 <setTargetVelocities+0x3c>)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6013      	str	r3, [r2, #0]
    m2_target_W = m2_target;
 8002728:	4a08      	ldr	r2, [pc, #32]	@ (800274c <setTargetVelocities+0x40>)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6013      	str	r3, [r2, #0]
    m3_target_W = m3_target;
 800272e:	4a08      	ldr	r2, [pc, #32]	@ (8002750 <setTargetVelocities+0x44>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6013      	str	r3, [r2, #0]
    m4_target_W = m4_target;
 8002734:	4a07      	ldr	r2, [pc, #28]	@ (8002754 <setTargetVelocities+0x48>)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000338 	.word	0x20000338
 800274c:	2000033c 	.word	0x2000033c
 8002750:	20000340 	.word	0x20000340
 8002754:	20000344 	.word	0x20000344

08002758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <HAL_MspInit+0x4c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	4a0f      	ldr	r2, [pc, #60]	@ (80027a4 <HAL_MspInit+0x4c>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <HAL_MspInit+0x4c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_MspInit+0x4c>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	4a08      	ldr	r2, [pc, #32]	@ (80027a4 <HAL_MspInit+0x4c>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	@ 0x40
 800278a:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_MspInit+0x4c>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	@ 0x28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002884 <HAL_ADC_MspInit+0xdc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d157      	bne.n	800287a <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002888 <HAL_ADC_MspInit+0xe0>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002888 <HAL_ADC_MspInit+0xe0>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027da:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_ADC_MspInit+0xe0>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <HAL_ADC_MspInit+0xe0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a26      	ldr	r2, [pc, #152]	@ (8002888 <HAL_ADC_MspInit+0xe0>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b24      	ldr	r3, [pc, #144]	@ (8002888 <HAL_ADC_MspInit+0xe0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = M1_CS_Pin|M2_CS_Pin|M3_CS_Pin|M4_CS_Pin;
 8002802:	23f0      	movs	r3, #240	@ 0xf0
 8002804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002806:	2303      	movs	r3, #3
 8002808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	481d      	ldr	r0, [pc, #116]	@ (800288c <HAL_ADC_MspInit+0xe4>)
 8002816:	f001 fa4b 	bl	8003cb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800281a:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 800281c:	4a1d      	ldr	r2, [pc, #116]	@ (8002894 <HAL_ADC_MspInit+0xec>)
 800281e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 8002822:	2200      	movs	r2, #0
 8002824:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002826:	4b1a      	ldr	r3, [pc, #104]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800282c:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002832:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 8002834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002838:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 800283c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002840:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002842:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 8002844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002848:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 800284c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002850:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002852:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002858:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 800285a:	2200      	movs	r2, #0
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800285e:	480c      	ldr	r0, [pc, #48]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 8002860:	f000 ff3c 	bl	80036dc <HAL_DMA_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800286a:	f7ff fabf 	bl	8001dec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a07      	ldr	r2, [pc, #28]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 8002872:	639a      	str	r2, [r3, #56]	@ 0x38
 8002874:	4a06      	ldr	r2, [pc, #24]	@ (8002890 <HAL_ADC_MspInit+0xe8>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	@ 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40012000 	.word	0x40012000
 8002888:	40023800 	.word	0x40023800
 800288c:	40020000 	.word	0x40020000
 8002890:	20000098 	.word	0x20000098
 8002894:	40026410 	.word	0x40026410

08002898 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	@ (80028e0 <HAL_TIM_PWM_MspInit+0x48>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d115      	bne.n	80028d6 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	4a0c      	ldr	r2, [pc, #48]	@ (80028e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	2019      	movs	r0, #25
 80028cc:	f000 fecf 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028d0:	2019      	movs	r0, #25
 80028d2:	f000 fee8 	bl	80036a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b090      	sub	sp, #64	@ 0x40
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002908:	d153      	bne.n	80029b2 <HAL_TIM_Encoder_MspInit+0xca>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800290e:	4b81      	ldr	r3, [pc, #516]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4a80      	ldr	r2, [pc, #512]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6413      	str	r3, [r2, #64]	@ 0x40
 800291a:	4b7e      	ldr	r3, [pc, #504]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002924:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
 800292a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a79      	ldr	r2, [pc, #484]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b77      	ldr	r3, [pc, #476]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
 8002946:	4b73      	ldr	r3, [pc, #460]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	4a72      	ldr	r2, [pc, #456]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	6313      	str	r3, [r2, #48]	@ 0x30
 8002952:	4b70      	ldr	r3, [pc, #448]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1_EncoderCH1_Pin;
 800295e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002970:	2301      	movs	r3, #1
 8002972:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH1_GPIO_Port, &GPIO_InitStruct);
 8002974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002978:	4619      	mov	r1, r3
 800297a:	4867      	ldr	r0, [pc, #412]	@ (8002b18 <HAL_TIM_Encoder_MspInit+0x230>)
 800297c:	f001 f998 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_EncoderCH2_Pin;
 8002980:	2308      	movs	r3, #8
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002990:	2301      	movs	r3, #1
 8002992:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH2_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002998:	4619      	mov	r1, r3
 800299a:	4860      	ldr	r0, [pc, #384]	@ (8002b1c <HAL_TIM_Encoder_MspInit+0x234>)
 800299c:	f001 f988 	bl	8003cb0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2100      	movs	r1, #0
 80029a4:	201c      	movs	r0, #28
 80029a6:	f000 fe62 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029aa:	201c      	movs	r0, #28
 80029ac:	f000 fe7b 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80029b0:	e0ac      	b.n	8002b0c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b20 <HAL_TIM_Encoder_MspInit+0x238>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d134      	bne.n	8002a26 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	4b54      	ldr	r3, [pc, #336]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	4a53      	ldr	r2, [pc, #332]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80029cc:	4b51      	ldr	r3, [pc, #324]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2_EncoderCH1_Pin|M2_EncoderCH2_Pin;
 80029f4:	23c0      	movs	r3, #192	@ 0xc0
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a04:	2302      	movs	r3, #2
 8002a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4845      	ldr	r0, [pc, #276]	@ (8002b24 <HAL_TIM_Encoder_MspInit+0x23c>)
 8002a10:	f001 f94e 	bl	8003cb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	201d      	movs	r0, #29
 8002a1a:	f000 fe28 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a1e:	201d      	movs	r0, #29
 8002a20:	f000 fe41 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002a24:	e072      	b.n	8002b0c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b28 <HAL_TIM_Encoder_MspInit+0x240>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d134      	bne.n	8002a9a <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	4b37      	ldr	r3, [pc, #220]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	4a36      	ldr	r2, [pc, #216]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a40:	4b34      	ldr	r3, [pc, #208]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	4a2f      	ldr	r2, [pc, #188]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_EncoderCH1_Pin|M3_EncoderCH2_Pin;
 8002a68:	23c0      	movs	r3, #192	@ 0xc0
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a80:	4619      	mov	r1, r3
 8002a82:	4826      	ldr	r0, [pc, #152]	@ (8002b1c <HAL_TIM_Encoder_MspInit+0x234>)
 8002a84:	f001 f914 	bl	8003cb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	201e      	movs	r0, #30
 8002a8e:	f000 fdee 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a92:	201e      	movs	r0, #30
 8002a94:	f000 fe07 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002a98:	e038      	b.n	8002b0c <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <HAL_TIM_Encoder_MspInit+0x244>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d133      	bne.n	8002b0c <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002aae:	f043 0308 	orr.w	r3, r3, #8
 8002ab2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_EncoderCH1_Pin|M4_EncoderCH2_Pin;
 8002adc:	2303      	movs	r3, #3
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002aec:	2302      	movs	r3, #2
 8002aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	4808      	ldr	r0, [pc, #32]	@ (8002b18 <HAL_TIM_Encoder_MspInit+0x230>)
 8002af8:	f001 f8da 	bl	8003cb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	2032      	movs	r0, #50	@ 0x32
 8002b02:	f000 fdb4 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b06:	2032      	movs	r0, #50	@ 0x32
 8002b08:	f000 fdcd 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002b0c:	bf00      	nop
 8002b0e:	3740      	adds	r7, #64	@ 0x40
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00

08002b30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b78 <HAL_TIM_Base_MspInit+0x48>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d115      	bne.n	8002b6e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <HAL_TIM_Base_MspInit+0x4c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <HAL_TIM_Base_MspInit+0x4c>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <HAL_TIM_Base_MspInit+0x4c>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	202d      	movs	r0, #45	@ 0x2d
 8002b64:	f000 fd83 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b68:	202d      	movs	r0, #45	@ 0x2d
 8002b6a:	f000 fd9c 	bl	80036a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40002000 	.word	0x40002000
 8002b7c:	40023800 	.word	0x40023800

08002b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <HAL_TIM_MspPostInit+0x68>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11e      	bne.n	8002be0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a10      	ldr	r2, [pc, #64]	@ (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8002bbe:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002bc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4805      	ldr	r0, [pc, #20]	@ (8002bf0 <HAL_TIM_MspPostInit+0x70>)
 8002bdc:	f001 f868 	bl	8003cb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002be0:	bf00      	nop
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40010000 	.word	0x40010000
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	@ 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a41      	ldr	r2, [pc, #260]	@ (8002d18 <HAL_UART_MspInit+0x124>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d12c      	bne.n	8002c70 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	4b40      	ldr	r3, [pc, #256]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c26:	4b3d      	ldr	r3, [pc, #244]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	4b39      	ldr	r3, [pc, #228]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	4a38      	ldr	r2, [pc, #224]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c42:	4b36      	ldr	r3, [pc, #216]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c4e:	230c      	movs	r3, #12
 8002c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c5e:	2307      	movs	r3, #7
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	4619      	mov	r1, r3
 8002c68:	482d      	ldr	r0, [pc, #180]	@ (8002d20 <HAL_UART_MspInit+0x12c>)
 8002c6a:	f001 f821 	bl	8003cb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c6e:	e04f      	b.n	8002d10 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2b      	ldr	r2, [pc, #172]	@ (8002d24 <HAL_UART_MspInit+0x130>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d14a      	bne.n	8002d10 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	4b27      	ldr	r3, [pc, #156]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a26      	ldr	r2, [pc, #152]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8a:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <HAL_UART_MspInit+0x128>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cde:	2307      	movs	r3, #7
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480f      	ldr	r0, [pc, #60]	@ (8002d28 <HAL_UART_MspInit+0x134>)
 8002cea:	f000 ffe1 	bl	8003cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d00:	2307      	movs	r3, #7
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4808      	ldr	r0, [pc, #32]	@ (8002d2c <HAL_UART_MspInit+0x138>)
 8002d0c:	f000 ffd0 	bl	8003cb0 <HAL_GPIO_Init>
}
 8002d10:	bf00      	nop
 8002d12:	3730      	adds	r7, #48	@ 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40004400 	.word	0x40004400
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40004800 	.word	0x40004800
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020400 	.word	0x40020400

08002d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <NMI_Handler+0x4>

08002d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <HardFault_Handler+0x4>

08002d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <MemManage_Handler+0x4>

08002d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <BusFault_Handler+0x4>

08002d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <UsageFault_Handler+0x4>

08002d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d86:	f000 f8e1 	bl	8002f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8002d8a:	f000 f85b 	bl	8002e44 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d98:	4802      	ldr	r0, [pc, #8]	@ (8002da4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d9a:	f002 fa7b 	bl	8005294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200000f8 	.word	0x200000f8

08002da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dac:	4802      	ldr	r0, [pc, #8]	@ (8002db8 <TIM2_IRQHandler+0x10>)
 8002dae:	f002 fa71 	bl	8005294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000140 	.word	0x20000140

08002dbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002dc0:	4802      	ldr	r0, [pc, #8]	@ (8002dcc <TIM3_IRQHandler+0x10>)
 8002dc2:	f002 fa67 	bl	8005294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000188 	.word	0x20000188

08002dd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dd4:	4802      	ldr	r0, [pc, #8]	@ (8002de0 <TIM4_IRQHandler+0x10>)
 8002dd6:	f002 fa5d 	bl	8005294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200001d0 	.word	0x200001d0

08002de4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002de8:	4802      	ldr	r0, [pc, #8]	@ (8002df4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002dea:	f002 fa53 	bl	8005294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000260 	.word	0x20000260

08002df8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002dfc:	4802      	ldr	r0, [pc, #8]	@ (8002e08 <TIM5_IRQHandler+0x10>)
 8002dfe:	f002 fa49 	bl	8005294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000218 	.word	0x20000218

08002e0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e10:	4802      	ldr	r0, [pc, #8]	@ (8002e1c <DMA2_Stream0_IRQHandler+0x10>)
 8002e12:	f000 fd11 	bl	8003838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000098 	.word	0x20000098

08002e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <SystemInit+0x20>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2a:	4a05      	ldr	r2, [pc, #20]	@ (8002e40 <SystemInit+0x20>)
 8002e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <SysTickFunction>:
        // Reset encoders to prevent overflow
        resetEncodersinSystick();
    }
}

void SysTickFunction(void) {
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
        //        current_robot_velocity.vx,
        //        current_robot_velocity.vy,
        //        current_robot_velocity.wz);
    }
    */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e58:	f7ff ffe2 	bl	8002e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e5c:	480c      	ldr	r0, [pc, #48]	@ (8002e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e5e:	490d      	ldr	r1, [pc, #52]	@ (8002e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e60:	4a0d      	ldr	r2, [pc, #52]	@ (8002e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e64:	e002      	b.n	8002e6c <LoopCopyDataInit>

08002e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6a:	3304      	adds	r3, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e70:	d3f9      	bcc.n	8002e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e72:	4a0a      	ldr	r2, [pc, #40]	@ (8002e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e74:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e78:	e001      	b.n	8002e7e <LoopFillZerobss>

08002e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e7c:	3204      	adds	r2, #4

08002e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e80:	d3fb      	bcc.n	8002e7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e82:	f003 fb69 	bl	8006558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e86:	f7fe fb01 	bl	800148c <main>
  bx  lr    
 8002e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002e98:	0800665c 	.word	0x0800665c
  ldr r2, =_sbss
 8002e9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002ea0:	2000035c 	.word	0x2000035c

08002ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC_IRQHandler>
	...

08002ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <HAL_Init+0x40>)
 8002eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <HAL_Init+0x40>)
 8002ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec4:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	@ (8002ee8 <HAL_Init+0x40>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f000 fbc1 	bl	8003658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed6:	200f      	movs	r0, #15
 8002ed8:	f000 f808 	bl	8002eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002edc:	f7ff fc3c 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00

08002eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef4:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <HAL_InitTick+0x54>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b12      	ldr	r3, [pc, #72]	@ (8002f44 <HAL_InitTick+0x58>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fbd9 	bl	80036c2 <HAL_SYSTICK_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00e      	b.n	8002f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0f      	cmp	r3, #15
 8002f1e:	d80a      	bhi.n	8002f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f20:	2200      	movs	r2, #0
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f000 fba1 	bl	800366e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f2c:	4a06      	ldr	r2, [pc, #24]	@ (8002f48 <HAL_InitTick+0x5c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000008 	.word	0x20000008
 8002f48:	20000004 	.word	0x20000004

08002f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <HAL_IncTick+0x20>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_IncTick+0x24>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4a04      	ldr	r2, [pc, #16]	@ (8002f70 <HAL_IncTick+0x24>)
 8002f5e:	6013      	str	r3, [r2, #0]
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	20000358 	.word	0x20000358

08002f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return uwTick;
 8002f78:	4b03      	ldr	r3, [pc, #12]	@ (8002f88 <HAL_GetTick+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000358 	.word	0x20000358

08002f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f94:	f7ff ffee 	bl	8002f74 <HAL_GetTick>
 8002f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d005      	beq.n	8002fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <HAL_Delay+0x44>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fb2:	bf00      	nop
 8002fb4:	f7ff ffde 	bl	8002f74 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d8f7      	bhi.n	8002fb4 <HAL_Delay+0x28>
  {
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000008 	.word	0x20000008

08002fd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e033      	b.n	8003052 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff fbd8 	bl	80027a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	d118      	bne.n	8003044 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800301a:	f023 0302 	bic.w	r3, r3, #2
 800301e:	f043 0202 	orr.w	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f94a 	bl	80032c0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
 8003042:	e001      	b.n	8003048 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1c>
 8003074:	2302      	movs	r3, #2
 8003076:	e113      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x244>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b09      	cmp	r3, #9
 8003086:	d925      	bls.n	80030d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68d9      	ldr	r1, [r3, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	3b1e      	subs	r3, #30
 800309e:	2207      	movs	r2, #7
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43da      	mvns	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	400a      	ands	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	4603      	mov	r3, r0
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4403      	add	r3, r0
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	409a      	lsls	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	e022      	b.n	800311a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6919      	ldr	r1, [r3, #16]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	2207      	movs	r2, #7
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	400a      	ands	r2, r1
 80030f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	4618      	mov	r0, r3
 800310a:	4603      	mov	r3, r0
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4403      	add	r3, r0
 8003110:	409a      	lsls	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d824      	bhi.n	800316c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b05      	subs	r3, #5
 8003134:	221f      	movs	r2, #31
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b05      	subs	r3, #5
 800315e:	fa00 f203 	lsl.w	r2, r0, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	635a      	str	r2, [r3, #52]	@ 0x34
 800316a:	e04c      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d824      	bhi.n	80031be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	3b23      	subs	r3, #35	@ 0x23
 8003186:	221f      	movs	r2, #31
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43da      	mvns	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	400a      	ands	r2, r1
 8003194:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b23      	subs	r3, #35	@ 0x23
 80031b0:	fa00 f203 	lsl.w	r2, r0, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80031bc:	e023      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	3b41      	subs	r3, #65	@ 0x41
 80031d0:	221f      	movs	r2, #31
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	400a      	ands	r2, r1
 80031de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	4618      	mov	r0, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b41      	subs	r3, #65	@ 0x41
 80031fa:	fa00 f203 	lsl.w	r2, r0, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003206:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <HAL_ADC_ConfigChannel+0x250>)
 8003208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a28      	ldr	r2, [pc, #160]	@ (80032b0 <HAL_ADC_ConfigChannel+0x254>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10f      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x1d8>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b12      	cmp	r3, #18
 800321a:	d10b      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1d      	ldr	r2, [pc, #116]	@ (80032b0 <HAL_ADC_ConfigChannel+0x254>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d12b      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x23a>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1c      	ldr	r2, [pc, #112]	@ (80032b4 <HAL_ADC_ConfigChannel+0x258>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <HAL_ADC_ConfigChannel+0x1f4>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b11      	cmp	r3, #17
 800324e:	d122      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a11      	ldr	r2, [pc, #68]	@ (80032b4 <HAL_ADC_ConfigChannel+0x258>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003272:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <HAL_ADC_ConfigChannel+0x25c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a11      	ldr	r2, [pc, #68]	@ (80032bc <HAL_ADC_ConfigChannel+0x260>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	0c9a      	lsrs	r2, r3, #18
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003288:	e002      	b.n	8003290 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3b01      	subs	r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f9      	bne.n	800328a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40012300 	.word	0x40012300
 80032b0:	40012000 	.word	0x40012000
 80032b4:	10000012 	.word	0x10000012
 80032b8:	20000000 	.word	0x20000000
 80032bc:	431bde83 	.word	0x431bde83

080032c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032c8:	4b79      	ldr	r3, [pc, #484]	@ (80034b0 <ADC_Init+0x1f0>)
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800333a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003352:	4a58      	ldr	r2, [pc, #352]	@ (80034b4 <ADC_Init+0x1f4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003366:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	e00f      	b.n	80033be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0202 	bic.w	r2, r2, #2
 80033cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	7e1b      	ldrb	r3, [r3, #24]
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800340a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	3b01      	subs	r3, #1
 8003418:	035a      	lsls	r2, r3, #13
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	e007      	b.n	8003434 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003442:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	3b01      	subs	r3, #1
 8003450:	051a      	lsls	r2, r3, #20
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6899      	ldr	r1, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003476:	025a      	lsls	r2, r3, #9
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	029a      	lsls	r2, r3, #10
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40012300 	.word	0x40012300
 80034b4:	0f000001 	.word	0x0f000001

080034b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c8:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ea:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	60d3      	str	r3, [r2, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <__NVIC_GetPriorityGrouping+0x18>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0307 	and.w	r3, r3, #7
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0b      	blt.n	8003546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4907      	ldr	r1, [pc, #28]	@ (8003554 <__NVIC_EnableIRQ+0x38>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2001      	movs	r0, #1
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	@ (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	@ (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	@ 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf28      	it	cs
 80035ca:	2304      	movcs	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <NVIC_EncodePriority+0x30>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3b03      	subs	r3, #3
 80035da:	e000      	b.n	80035de <NVIC_EncodePriority+0x32>
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	401a      	ands	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43d9      	mvns	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
         );
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	@ 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003624:	d301      	bcc.n	800362a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003626:	2301      	movs	r3, #1
 8003628:	e00f      	b.n	800364a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362a:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <SysTick_Config+0x40>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003632:	210f      	movs	r1, #15
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	f7ff ff8e 	bl	8003558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800363c:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <SysTick_Config+0x40>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003642:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <SysTick_Config+0x40>)
 8003644:	2207      	movs	r2, #7
 8003646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000e010 	.word	0xe000e010

08003658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff29 	bl	80034b8 <__NVIC_SetPriorityGrouping>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003680:	f7ff ff3e 	bl	8003500 <__NVIC_GetPriorityGrouping>
 8003684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff8e 	bl	80035ac <NVIC_EncodePriority>
 8003690:	4602      	mov	r2, r0
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5d 	bl	8003558 <__NVIC_SetPriority>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff31 	bl	800351c <__NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffa2 	bl	8003614 <SysTick_Config>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff fc44 	bl	8002f74 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e099      	b.n	800382c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003718:	e00f      	b.n	800373a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371a:	f7ff fc2b 	bl	8002f74 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b05      	cmp	r3, #5
 8003726:	d908      	bls.n	800373a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2203      	movs	r2, #3
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e078      	b.n	800382c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e8      	bne.n	800371a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4b38      	ldr	r3, [pc, #224]	@ (8003834 <HAL_DMA_Init+0x158>)
 8003754:	4013      	ands	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003766:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	2b04      	cmp	r3, #4
 8003792:	d107      	bne.n	80037a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	4313      	orrs	r3, r2
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d117      	bne.n	80037fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f9e9 	bl	8003bb8 <DMA_CheckFifoParam>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037fa:	2301      	movs	r3, #1
 80037fc:	e016      	b.n	800382c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9a0 	bl	8003b4c <DMA_CalcBaseAndBitshift>
 800380c:	4603      	mov	r3, r0
 800380e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	223f      	movs	r2, #63	@ 0x3f
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	f010803f 	.word	0xf010803f

08003838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003844:	4b8e      	ldr	r3, [pc, #568]	@ (8003a80 <HAL_DMA_IRQHandler+0x248>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a8e      	ldr	r2, [pc, #568]	@ (8003a84 <HAL_DMA_IRQHandler+0x24c>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0a9b      	lsrs	r3, r3, #10
 8003850:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003862:	2208      	movs	r2, #8
 8003864:	409a      	lsls	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01a      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0204 	bic.w	r2, r2, #4
 800388a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	2208      	movs	r2, #8
 8003892:	409a      	lsls	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	2201      	movs	r2, #1
 80038aa:	409a      	lsls	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	2201      	movs	r2, #1
 80038c8:	409a      	lsls	r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038de:	2204      	movs	r2, #4
 80038e0:	409a      	lsls	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fc:	2204      	movs	r2, #4
 80038fe:	409a      	lsls	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	2210      	movs	r2, #16
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d043      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d03c      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	2210      	movs	r2, #16
 8003934:	409a      	lsls	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d024      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
 8003966:	e01f      	b.n	80039a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e016      	b.n	80039a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d107      	bne.n	8003998 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0208 	bic.w	r2, r2, #8
 8003996:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	2220      	movs	r2, #32
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 808f 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8087 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ce:	2220      	movs	r2, #32
 80039d0:	409a      	lsls	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b05      	cmp	r3, #5
 80039e0:	d136      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0216 	bic.w	r2, r2, #22
 80039f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x1da>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0208 	bic.w	r2, r2, #8
 8003a20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	223f      	movs	r2, #63	@ 0x3f
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d07e      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
        }
        return;
 8003a4e:	e079      	b.n	8003b44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01d      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10d      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d031      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
 8003a7c:	e02c      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
 8003a7e:	bf00      	nop
 8003a80:	20000000 	.word	0x20000000
 8003a84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d023      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e01e      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10f      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0210 	bic.w	r2, r2, #16
 8003ab6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d032      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d022      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2205      	movs	r2, #5
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3301      	adds	r3, #1
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d307      	bcc.n	8003b20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f2      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x2cc>
 8003b1e:	e000      	b.n	8003b22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
 8003b42:	e000      	b.n	8003b46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b44:	bf00      	nop
    }
  }
}
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	3b10      	subs	r3, #16
 8003b5c:	4a14      	ldr	r2, [pc, #80]	@ (8003bb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b66:	4a13      	ldr	r2, [pc, #76]	@ (8003bb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d909      	bls.n	8003b8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	1d1a      	adds	r2, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b8c:	e007      	b.n	8003b9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	aaaaaaab 	.word	0xaaaaaaab
 8003bb4:	08006644 	.word	0x08006644

08003bb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11f      	bne.n	8003c12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d856      	bhi.n	8003c86 <DMA_CheckFifoParam+0xce>
 8003bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <DMA_CheckFifoParam+0x28>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003bf1 	.word	0x08003bf1
 8003be4:	08003c03 	.word	0x08003c03
 8003be8:	08003bf1 	.word	0x08003bf1
 8003bec:	08003c87 	.word	0x08003c87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d046      	beq.n	8003c8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c00:	e043      	b.n	8003c8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c0a:	d140      	bne.n	8003c8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c10:	e03d      	b.n	8003c8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c1a:	d121      	bne.n	8003c60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d837      	bhi.n	8003c92 <DMA_CheckFifoParam+0xda>
 8003c22:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <DMA_CheckFifoParam+0x70>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c3f 	.word	0x08003c3f
 8003c30:	08003c39 	.word	0x08003c39
 8003c34:	08003c51 	.word	0x08003c51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e030      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d025      	beq.n	8003c96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4e:	e022      	b.n	8003c96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c58:	d11f      	bne.n	8003c9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c5e:	e01c      	b.n	8003c9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d903      	bls.n	8003c6e <DMA_CheckFifoParam+0xb6>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d003      	beq.n	8003c74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c6c:	e018      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
      break;
 8003c72:	e015      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00e      	beq.n	8003c9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e00b      	b.n	8003c9e <DMA_CheckFifoParam+0xe6>
      break;
 8003c86:	bf00      	nop
 8003c88:	e00a      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e008      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e006      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c92:	bf00      	nop
 8003c94:	e004      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c96:	bf00      	nop
 8003c98:	e002      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop

08003cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e165      	b.n	8003f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ccc:	2201      	movs	r2, #1
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	f040 8154 	bne.w	8003f92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d005      	beq.n	8003d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d130      	bne.n	8003d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 0201 	and.w	r2, r3, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d017      	beq.n	8003da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d123      	bne.n	8003df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	08da      	lsrs	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	08da      	lsrs	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3208      	adds	r2, #8
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80ae 	beq.w	8003f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb0 <HAL_GPIO_Init+0x300>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003fb0 <HAL_GPIO_Init+0x300>)
 8003e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e46:	4b5a      	ldr	r3, [pc, #360]	@ (8003fb0 <HAL_GPIO_Init+0x300>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e52:	4a58      	ldr	r2, [pc, #352]	@ (8003fb4 <HAL_GPIO_Init+0x304>)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	220f      	movs	r2, #15
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a4f      	ldr	r2, [pc, #316]	@ (8003fb8 <HAL_GPIO_Init+0x308>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d025      	beq.n	8003eca <HAL_GPIO_Init+0x21a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a4e      	ldr	r2, [pc, #312]	@ (8003fbc <HAL_GPIO_Init+0x30c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01f      	beq.n	8003ec6 <HAL_GPIO_Init+0x216>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc0 <HAL_GPIO_Init+0x310>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d019      	beq.n	8003ec2 <HAL_GPIO_Init+0x212>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a4c      	ldr	r2, [pc, #304]	@ (8003fc4 <HAL_GPIO_Init+0x314>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x20e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4b      	ldr	r2, [pc, #300]	@ (8003fc8 <HAL_GPIO_Init+0x318>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00d      	beq.n	8003eba <HAL_GPIO_Init+0x20a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8003fcc <HAL_GPIO_Init+0x31c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <HAL_GPIO_Init+0x206>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a49      	ldr	r2, [pc, #292]	@ (8003fd0 <HAL_GPIO_Init+0x320>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <HAL_GPIO_Init+0x202>
 8003eae:	2306      	movs	r3, #6
 8003eb0:	e00c      	b.n	8003ecc <HAL_GPIO_Init+0x21c>
 8003eb2:	2307      	movs	r3, #7
 8003eb4:	e00a      	b.n	8003ecc <HAL_GPIO_Init+0x21c>
 8003eb6:	2305      	movs	r3, #5
 8003eb8:	e008      	b.n	8003ecc <HAL_GPIO_Init+0x21c>
 8003eba:	2304      	movs	r3, #4
 8003ebc:	e006      	b.n	8003ecc <HAL_GPIO_Init+0x21c>
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e004      	b.n	8003ecc <HAL_GPIO_Init+0x21c>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e002      	b.n	8003ecc <HAL_GPIO_Init+0x21c>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <HAL_GPIO_Init+0x21c>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	f002 0203 	and.w	r2, r2, #3
 8003ed2:	0092      	lsls	r2, r2, #2
 8003ed4:	4093      	lsls	r3, r2
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003edc:	4935      	ldr	r1, [pc, #212]	@ (8003fb4 <HAL_GPIO_Init+0x304>)
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eea:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f0e:	4a31      	ldr	r2, [pc, #196]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f14:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f38:	4a26      	ldr	r2, [pc, #152]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f3e:	4b25      	ldr	r3, [pc, #148]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f62:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f68:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f8c:	4a11      	ldr	r2, [pc, #68]	@ (8003fd4 <HAL_GPIO_Init+0x324>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3301      	adds	r3, #1
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b0f      	cmp	r3, #15
 8003f9c:	f67f ae96 	bls.w	8003ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	3724      	adds	r7, #36	@ 0x24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40013800 	.word	0x40013800
 8003fb8:	40020000 	.word	0x40020000
 8003fbc:	40020400 	.word	0x40020400
 8003fc0:	40020800 	.word	0x40020800
 8003fc4:	40020c00 	.word	0x40020c00
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40021400 	.word	0x40021400
 8003fd0:	40021800 	.word	0x40021800
 8003fd4:	40013c00 	.word	0x40013c00

08003fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe8:	787b      	ldrb	r3, [r7, #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ff4:	e003      	b.n	8003ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	041a      	lsls	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	619a      	str	r2, [r3, #24]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4b20      	ldr	r3, [pc, #128]	@ (800409c <HAL_PWREx_EnableOverDrive+0x90>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	4a1f      	ldr	r2, [pc, #124]	@ (800409c <HAL_PWREx_EnableOverDrive+0x90>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	6413      	str	r3, [r2, #64]	@ 0x40
 8004026:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_PWREx_EnableOverDrive+0x90>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004032:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004038:	f7fe ff9c 	bl	8002f74 <HAL_GetTick>
 800403c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800403e:	e009      	b.n	8004054 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004040:	f7fe ff98 	bl	8002f74 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800404e:	d901      	bls.n	8004054 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e01f      	b.n	8004094 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004054:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004060:	d1ee      	bne.n	8004040 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004062:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004068:	f7fe ff84 	bl	8002f74 <HAL_GetTick>
 800406c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800406e:	e009      	b.n	8004084 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004070:	f7fe ff80 	bl	8002f74 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800407e:	d901      	bls.n	8004084 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e007      	b.n	8004094 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004084:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004090:	d1ee      	bne.n	8004070 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	420e0040 	.word	0x420e0040
 80040a4:	40007000 	.word	0x40007000
 80040a8:	420e0044 	.word	0x420e0044

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0cc      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b68      	ldr	r3, [pc, #416]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d90c      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b65      	ldr	r3, [pc, #404]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b63      	ldr	r3, [pc, #396]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004100:	4b59      	ldr	r3, [pc, #356]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a58      	ldr	r2, [pc, #352]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800410a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004118:	4b53      	ldr	r3, [pc, #332]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a52      	ldr	r2, [pc, #328]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b50      	ldr	r3, [pc, #320]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494d      	ldr	r1, [pc, #308]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d044      	beq.n	80041cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b47      	ldr	r3, [pc, #284]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d119      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d003      	beq.n	800416a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004166:	2b03      	cmp	r3, #3
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b3f      	ldr	r3, [pc, #252]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e06f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e067      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b37      	ldr	r3, [pc, #220]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4934      	ldr	r1, [pc, #208]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800419c:	f7fe feea 	bl	8002f74 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fe fee6 	bl	8002f74 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041cc:	4b25      	ldr	r3, [pc, #148]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d20c      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b22      	ldr	r3, [pc, #136]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b20      	ldr	r3, [pc, #128]	@ (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e032      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b19      	ldr	r3, [pc, #100]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4916      	ldr	r1, [pc, #88]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421e:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490e      	ldr	r1, [pc, #56]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004232:	f000 f855 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8004236:	4602      	mov	r2, r0
 8004238:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	490a      	ldr	r1, [pc, #40]	@ (800426c <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	fa22 f303 	lsr.w	r3, r2, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	@ (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800424e:	4b09      	ldr	r3, [pc, #36]	@ (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fe4a 	bl	8002eec <HAL_InitTick>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023c00 	.word	0x40023c00
 8004268:	40023800 	.word	0x40023800
 800426c:	0800662c 	.word	0x0800662c
 8004270:	20000000 	.word	0x20000000
 8004274:	20000004 	.word	0x20000004

08004278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800427c:	4b03      	ldr	r3, [pc, #12]	@ (800428c <HAL_RCC_GetHCLKFreq+0x14>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000000 	.word	0x20000000

08004290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004294:	f7ff fff0 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0a9b      	lsrs	r3, r3, #10
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4903      	ldr	r1, [pc, #12]	@ (80042b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40023800 	.word	0x40023800
 80042b4:	0800663c 	.word	0x0800663c

080042b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042bc:	f7ff ffdc 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0b5b      	lsrs	r3, r3, #13
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	@ (80042dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	0800663c 	.word	0x0800663c

080042e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e4:	b0ae      	sub	sp, #184	@ 0xb8
 80042e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004306:	4bcb      	ldr	r3, [pc, #812]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b0c      	cmp	r3, #12
 8004310:	f200 8206 	bhi.w	8004720 <HAL_RCC_GetSysClockFreq+0x440>
 8004314:	a201      	add	r2, pc, #4	@ (adr r2, 800431c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431a:	bf00      	nop
 800431c:	08004351 	.word	0x08004351
 8004320:	08004721 	.word	0x08004721
 8004324:	08004721 	.word	0x08004721
 8004328:	08004721 	.word	0x08004721
 800432c:	08004359 	.word	0x08004359
 8004330:	08004721 	.word	0x08004721
 8004334:	08004721 	.word	0x08004721
 8004338:	08004721 	.word	0x08004721
 800433c:	08004361 	.word	0x08004361
 8004340:	08004721 	.word	0x08004721
 8004344:	08004721 	.word	0x08004721
 8004348:	08004721 	.word	0x08004721
 800434c:	08004551 	.word	0x08004551
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004350:	4bb9      	ldr	r3, [pc, #740]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 8004352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004356:	e1e7      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004358:	4bb8      	ldr	r3, [pc, #736]	@ (800463c <HAL_RCC_GetSysClockFreq+0x35c>)
 800435a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800435e:	e1e3      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004360:	4bb4      	ldr	r3, [pc, #720]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800436c:	4bb1      	ldr	r3, [pc, #708]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d071      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004378:	4bae      	ldr	r3, [pc, #696]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	2200      	movs	r2, #0
 8004380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004384:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800438c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800439a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	0159      	lsls	r1, r3, #5
 80043ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b0:	0150      	lsls	r0, r2, #5
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4621      	mov	r1, r4
 80043b8:	1a51      	subs	r1, r2, r1
 80043ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80043bc:	4629      	mov	r1, r5
 80043be:	eb63 0301 	sbc.w	r3, r3, r1
 80043c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80043d0:	4649      	mov	r1, r9
 80043d2:	018b      	lsls	r3, r1, #6
 80043d4:	4641      	mov	r1, r8
 80043d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043da:	4641      	mov	r1, r8
 80043dc:	018a      	lsls	r2, r1, #6
 80043de:	4641      	mov	r1, r8
 80043e0:	1a51      	subs	r1, r2, r1
 80043e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043e4:	4649      	mov	r1, r9
 80043e6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80043f8:	4649      	mov	r1, r9
 80043fa:	00cb      	lsls	r3, r1, #3
 80043fc:	4641      	mov	r1, r8
 80043fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004402:	4641      	mov	r1, r8
 8004404:	00ca      	lsls	r2, r1, #3
 8004406:	4610      	mov	r0, r2
 8004408:	4619      	mov	r1, r3
 800440a:	4603      	mov	r3, r0
 800440c:	4622      	mov	r2, r4
 800440e:	189b      	adds	r3, r3, r2
 8004410:	633b      	str	r3, [r7, #48]	@ 0x30
 8004412:	462b      	mov	r3, r5
 8004414:	460a      	mov	r2, r1
 8004416:	eb42 0303 	adc.w	r3, r2, r3
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004428:	4629      	mov	r1, r5
 800442a:	024b      	lsls	r3, r1, #9
 800442c:	4621      	mov	r1, r4
 800442e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004432:	4621      	mov	r1, r4
 8004434:	024a      	lsls	r2, r1, #9
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800443e:	2200      	movs	r2, #0
 8004440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004444:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004448:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800444c:	f7fc fb8a 	bl	8000b64 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4613      	mov	r3, r2
 8004456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800445a:	e067      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445c:	4b75      	ldr	r3, [pc, #468]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	099b      	lsrs	r3, r3, #6
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004468:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800446c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004474:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004476:	2300      	movs	r3, #0
 8004478:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800447a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800447e:	4622      	mov	r2, r4
 8004480:	462b      	mov	r3, r5
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f04f 0100 	mov.w	r1, #0
 800448a:	0159      	lsls	r1, r3, #5
 800448c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004490:	0150      	lsls	r0, r2, #5
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4621      	mov	r1, r4
 8004498:	1a51      	subs	r1, r2, r1
 800449a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800449c:	4629      	mov	r1, r5
 800449e:	eb63 0301 	sbc.w	r3, r3, r1
 80044a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80044b0:	4649      	mov	r1, r9
 80044b2:	018b      	lsls	r3, r1, #6
 80044b4:	4641      	mov	r1, r8
 80044b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ba:	4641      	mov	r1, r8
 80044bc:	018a      	lsls	r2, r1, #6
 80044be:	4641      	mov	r1, r8
 80044c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80044c4:	4649      	mov	r1, r9
 80044c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044de:	4692      	mov	sl, r2
 80044e0:	469b      	mov	fp, r3
 80044e2:	4623      	mov	r3, r4
 80044e4:	eb1a 0303 	adds.w	r3, sl, r3
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	462b      	mov	r3, r5
 80044ec:	eb4b 0303 	adc.w	r3, fp, r3
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044fe:	4629      	mov	r1, r5
 8004500:	028b      	lsls	r3, r1, #10
 8004502:	4621      	mov	r1, r4
 8004504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004508:	4621      	mov	r1, r4
 800450a:	028a      	lsls	r2, r1, #10
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004514:	2200      	movs	r2, #0
 8004516:	673b      	str	r3, [r7, #112]	@ 0x70
 8004518:	677a      	str	r2, [r7, #116]	@ 0x74
 800451a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800451e:	f7fc fb21 	bl	8000b64 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4613      	mov	r3, r2
 8004528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800452c:	4b41      	ldr	r3, [pc, #260]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800453e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004546:	fbb2 f3f3 	udiv	r3, r2, r3
 800454a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800454e:	e0eb      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004550:	4b38      	ldr	r3, [pc, #224]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800455c:	4b35      	ldr	r3, [pc, #212]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d06b      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004568:	4b32      	ldr	r3, [pc, #200]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x354>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	2200      	movs	r2, #0
 8004570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004572:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004574:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	663b      	str	r3, [r7, #96]	@ 0x60
 800457c:	2300      	movs	r3, #0
 800457e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004580:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004584:	4622      	mov	r2, r4
 8004586:	462b      	mov	r3, r5
 8004588:	f04f 0000 	mov.w	r0, #0
 800458c:	f04f 0100 	mov.w	r1, #0
 8004590:	0159      	lsls	r1, r3, #5
 8004592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004596:	0150      	lsls	r0, r2, #5
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4621      	mov	r1, r4
 800459e:	1a51      	subs	r1, r2, r1
 80045a0:	61b9      	str	r1, [r7, #24]
 80045a2:	4629      	mov	r1, r5
 80045a4:	eb63 0301 	sbc.w	r3, r3, r1
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045b6:	4659      	mov	r1, fp
 80045b8:	018b      	lsls	r3, r1, #6
 80045ba:	4651      	mov	r1, sl
 80045bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045c0:	4651      	mov	r1, sl
 80045c2:	018a      	lsls	r2, r1, #6
 80045c4:	4651      	mov	r1, sl
 80045c6:	ebb2 0801 	subs.w	r8, r2, r1
 80045ca:	4659      	mov	r1, fp
 80045cc:	eb63 0901 	sbc.w	r9, r3, r1
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045e4:	4690      	mov	r8, r2
 80045e6:	4699      	mov	r9, r3
 80045e8:	4623      	mov	r3, r4
 80045ea:	eb18 0303 	adds.w	r3, r8, r3
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	462b      	mov	r3, r5
 80045f2:	eb49 0303 	adc.w	r3, r9, r3
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004604:	4629      	mov	r1, r5
 8004606:	024b      	lsls	r3, r1, #9
 8004608:	4621      	mov	r1, r4
 800460a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800460e:	4621      	mov	r1, r4
 8004610:	024a      	lsls	r2, r1, #9
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800461a:	2200      	movs	r2, #0
 800461c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800461e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004620:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004624:	f7fc fa9e 	bl	8000b64 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4613      	mov	r3, r2
 800462e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004632:	e065      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x420>
 8004634:	40023800 	.word	0x40023800
 8004638:	00f42400 	.word	0x00f42400
 800463c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004640:	4b3d      	ldr	r3, [pc, #244]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x458>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	2200      	movs	r2, #0
 8004648:	4618      	mov	r0, r3
 800464a:	4611      	mov	r1, r2
 800464c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004650:	653b      	str	r3, [r7, #80]	@ 0x50
 8004652:	2300      	movs	r3, #0
 8004654:	657b      	str	r3, [r7, #84]	@ 0x54
 8004656:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800465a:	4642      	mov	r2, r8
 800465c:	464b      	mov	r3, r9
 800465e:	f04f 0000 	mov.w	r0, #0
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	0159      	lsls	r1, r3, #5
 8004668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800466c:	0150      	lsls	r0, r2, #5
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4641      	mov	r1, r8
 8004674:	1a51      	subs	r1, r2, r1
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	4649      	mov	r1, r9
 800467a:	eb63 0301 	sbc.w	r3, r3, r1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800468c:	4659      	mov	r1, fp
 800468e:	018b      	lsls	r3, r1, #6
 8004690:	4651      	mov	r1, sl
 8004692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004696:	4651      	mov	r1, sl
 8004698:	018a      	lsls	r2, r1, #6
 800469a:	4651      	mov	r1, sl
 800469c:	1a54      	subs	r4, r2, r1
 800469e:	4659      	mov	r1, fp
 80046a0:	eb63 0501 	sbc.w	r5, r3, r1
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	00eb      	lsls	r3, r5, #3
 80046ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b2:	00e2      	lsls	r2, r4, #3
 80046b4:	4614      	mov	r4, r2
 80046b6:	461d      	mov	r5, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	18e3      	adds	r3, r4, r3
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	464b      	mov	r3, r9
 80046c0:	eb45 0303 	adc.w	r3, r5, r3
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046d2:	4629      	mov	r1, r5
 80046d4:	028b      	lsls	r3, r1, #10
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046dc:	4621      	mov	r1, r4
 80046de:	028a      	lsls	r2, r1, #10
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046e8:	2200      	movs	r2, #0
 80046ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80046ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046f2:	f7fc fa37 	bl	8000b64 <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4613      	mov	r3, r2
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004700:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x458>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	0f1b      	lsrs	r3, r3, #28
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800470e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004712:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800471e:	e003      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004726:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004728:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800472c:	4618      	mov	r0, r3
 800472e:	37b8      	adds	r7, #184	@ 0xb8
 8004730:	46bd      	mov	sp, r7
 8004732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	00f42400 	.word	0x00f42400

08004740 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e28d      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8083 	beq.w	8004866 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004760:	4b94      	ldr	r3, [pc, #592]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b04      	cmp	r3, #4
 800476a:	d019      	beq.n	80047a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800476c:	4b91      	ldr	r3, [pc, #580]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
        || \
 8004774:	2b08      	cmp	r3, #8
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004778:	4b8e      	ldr	r3, [pc, #568]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004784:	d00c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004786:	4b8b      	ldr	r3, [pc, #556]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d112      	bne.n	80047b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004792:	4b88      	ldr	r3, [pc, #544]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800479e:	d10b      	bne.n	80047b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	4b84      	ldr	r3, [pc, #528]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d05b      	beq.n	8004864 <HAL_RCC_OscConfig+0x124>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d157      	bne.n	8004864 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e25a      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c0:	d106      	bne.n	80047d0 <HAL_RCC_OscConfig+0x90>
 80047c2:	4b7c      	ldr	r3, [pc, #496]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a7b      	ldr	r2, [pc, #492]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e01d      	b.n	800480c <HAL_RCC_OscConfig+0xcc>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0xb4>
 80047da:	4b76      	ldr	r3, [pc, #472]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a75      	ldr	r2, [pc, #468]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4b73      	ldr	r3, [pc, #460]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a72      	ldr	r2, [pc, #456]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e00b      	b.n	800480c <HAL_RCC_OscConfig+0xcc>
 80047f4:	4b6f      	ldr	r3, [pc, #444]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a6e      	ldr	r2, [pc, #440]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80047fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b6c      	ldr	r3, [pc, #432]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6b      	ldr	r2, [pc, #428]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800480a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d013      	beq.n	800483c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fe fbae 	bl	8002f74 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481c:	f7fe fbaa 	bl	8002f74 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b64      	cmp	r3, #100	@ 0x64
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e21f      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	4b61      	ldr	r3, [pc, #388]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0xdc>
 800483a:	e014      	b.n	8004866 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fe fb9a 	bl	8002f74 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004844:	f7fe fb96 	bl	8002f74 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	@ 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e20b      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004856:	4b57      	ldr	r3, [pc, #348]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x104>
 8004862:	e000      	b.n	8004866 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d06f      	beq.n	8004952 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004872:	4b50      	ldr	r3, [pc, #320]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b00      	cmp	r3, #0
 800487c:	d017      	beq.n	80048ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800487e:	4b4d      	ldr	r3, [pc, #308]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
        || \
 8004886:	2b08      	cmp	r3, #8
 8004888:	d105      	bne.n	8004896 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800488a:	4b4a      	ldr	r3, [pc, #296]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004896:	4b47      	ldr	r3, [pc, #284]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d11c      	bne.n	80048dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b44      	ldr	r3, [pc, #272]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d116      	bne.n	80048dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ae:	4b41      	ldr	r3, [pc, #260]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_RCC_OscConfig+0x186>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e1d3      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c6:	4b3b      	ldr	r3, [pc, #236]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4937      	ldr	r1, [pc, #220]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048da:	e03a      	b.n	8004952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d020      	beq.n	8004926 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e4:	4b34      	ldr	r3, [pc, #208]	@ (80049b8 <HAL_RCC_OscConfig+0x278>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fe fb43 	bl	8002f74 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f2:	f7fe fb3f 	bl	8002f74 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1b4      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	4b2b      	ldr	r3, [pc, #172]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004910:	4b28      	ldr	r3, [pc, #160]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4925      	ldr	r1, [pc, #148]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
 8004924:	e015      	b.n	8004952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004926:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fe fb22 	bl	8002f74 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004934:	f7fe fb1e 	bl	8002f74 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e193      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	4b1b      	ldr	r3, [pc, #108]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d036      	beq.n	80049cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004966:	4b15      	ldr	r3, [pc, #84]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496c:	f7fe fb02 	bl	8002f74 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004974:	f7fe fafe 	bl	8002f74 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e173      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <HAL_RCC_OscConfig+0x274>)
 8004988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x234>
 8004992:	e01b      	b.n	80049cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004994:	4b09      	ldr	r3, [pc, #36]	@ (80049bc <HAL_RCC_OscConfig+0x27c>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7fe faeb 	bl	8002f74 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a0:	e00e      	b.n	80049c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a2:	f7fe fae7 	bl	8002f74 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d907      	bls.n	80049c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e15c      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	42470000 	.word	0x42470000
 80049bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	4b8a      	ldr	r3, [pc, #552]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 80049c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1ea      	bne.n	80049a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8097 	beq.w	8004b08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049de:	4b83      	ldr	r3, [pc, #524]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	4b7f      	ldr	r3, [pc, #508]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049fa:	4b7c      	ldr	r3, [pc, #496]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a06:	2301      	movs	r3, #1
 8004a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0a:	4b79      	ldr	r3, [pc, #484]	@ (8004bf0 <HAL_RCC_OscConfig+0x4b0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d118      	bne.n	8004a48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a16:	4b76      	ldr	r3, [pc, #472]	@ (8004bf0 <HAL_RCC_OscConfig+0x4b0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a75      	ldr	r2, [pc, #468]	@ (8004bf0 <HAL_RCC_OscConfig+0x4b0>)
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a22:	f7fe faa7 	bl	8002f74 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2a:	f7fe faa3 	bl	8002f74 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e118      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3c:	4b6c      	ldr	r3, [pc, #432]	@ (8004bf0 <HAL_RCC_OscConfig+0x4b0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_OscConfig+0x31e>
 8004a50:	4b66      	ldr	r3, [pc, #408]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a54:	4a65      	ldr	r2, [pc, #404]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a5c:	e01c      	b.n	8004a98 <HAL_RCC_OscConfig+0x358>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x340>
 8004a66:	4b61      	ldr	r3, [pc, #388]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	4a60      	ldr	r2, [pc, #384]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a72:	4b5e      	ldr	r3, [pc, #376]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	4a5d      	ldr	r2, [pc, #372]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0x358>
 8004a80:	4b5a      	ldr	r3, [pc, #360]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a84:	4a59      	ldr	r2, [pc, #356]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a8c:	4b57      	ldr	r3, [pc, #348]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a90:	4a56      	ldr	r2, [pc, #344]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004a92:	f023 0304 	bic.w	r3, r3, #4
 8004a96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d015      	beq.n	8004acc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fe fa68 	bl	8002f74 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa8:	f7fe fa64 	bl	8002f74 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0d7      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004abe:	4b4b      	ldr	r3, [pc, #300]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ee      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x368>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fe fa52 	bl	8002f74 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad2:	e00a      	b.n	8004aea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	f7fe fa4e 	bl	8002f74 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e0c1      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aea:	4b40      	ldr	r3, [pc, #256]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1ee      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d105      	bne.n	8004b08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	4a3a      	ldr	r2, [pc, #232]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80ad 	beq.w	8004c6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b12:	4b36      	ldr	r3, [pc, #216]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d060      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d145      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b26:	4b33      	ldr	r3, [pc, #204]	@ (8004bf4 <HAL_RCC_OscConfig+0x4b4>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fe fa22 	bl	8002f74 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fe fa1e 	bl	8002f74 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e093      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	4b29      	ldr	r3, [pc, #164]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69da      	ldr	r2, [r3, #28]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	019b      	lsls	r3, r3, #6
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	041b      	lsls	r3, r3, #16
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	491b      	ldr	r1, [pc, #108]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b84:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf4 <HAL_RCC_OscConfig+0x4b4>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe f9f3 	bl	8002f74 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b92:	f7fe f9ef 	bl	8002f74 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e064      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba4:	4b11      	ldr	r3, [pc, #68]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x452>
 8004bb0:	e05c      	b.n	8004c6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb2:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <HAL_RCC_OscConfig+0x4b4>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fe f9dc 	bl	8002f74 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fe f9d8 	bl	8002f74 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e04d      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <HAL_RCC_OscConfig+0x4ac>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x480>
 8004bde:	e045      	b.n	8004c6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e040      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c78 <HAL_RCC_OscConfig+0x538>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d030      	beq.n	8004c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d129      	bne.n	8004c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d122      	bne.n	8004c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d119      	bne.n	8004c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	3b01      	subs	r3, #1
 8004c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d10f      	bne.n	8004c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d107      	bne.n	8004c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800

08004c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e041      	b.n	8004d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd ff44 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 fcc4 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d001      	beq.n	8004d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e04e      	b.n	8004dd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a23      	ldr	r2, [pc, #140]	@ (8004de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d022      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x80>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5e:	d01d      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x80>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1f      	ldr	r2, [pc, #124]	@ (8004de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d018      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x80>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d013      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x80>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1c      	ldr	r2, [pc, #112]	@ (8004dec <HAL_TIM_Base_Start_IT+0xd0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00e      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x80>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1b      	ldr	r2, [pc, #108]	@ (8004df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d009      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x80>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	@ (8004df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x80>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a18      	ldr	r2, [pc, #96]	@ (8004df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d111      	bne.n	8004dc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b06      	cmp	r3, #6
 8004dac:	d010      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	e007      	b.n	8004dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40010400 	.word	0x40010400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40001800 	.word	0x40001800

08004dfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e041      	b.n	8004e92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fd38 	bl	8002898 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fc04 	bl	8005648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0x24>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e022      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d109      	bne.n	8004eda <HAL_TIM_PWM_Start+0x3e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e015      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d109      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0x58>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_PWM_Start+0x6a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07c      	b.n	8005008 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x82>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f1c:	e013      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0x92>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f2c:	e00b      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Start+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f3c:	e003      	b.n	8004f46 <HAL_TIM_PWM_Start+0xaa>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fdd6 	bl	8005b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	@ (8005010 <HAL_TIM_PWM_Start+0x174>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIM_PWM_Start+0xcc>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	@ (8005014 <HAL_TIM_PWM_Start+0x178>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <HAL_TIM_PWM_Start+0xd0>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_TIM_PWM_Start+0xd2>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a22      	ldr	r2, [pc, #136]	@ (8005010 <HAL_TIM_PWM_Start+0x174>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d01d      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <HAL_TIM_PWM_Start+0x17c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800501c <HAL_TIM_PWM_Start+0x180>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <HAL_TIM_PWM_Start+0x184>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	@ (8005014 <HAL_TIM_PWM_Start+0x178>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <HAL_TIM_PWM_Start+0x188>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x136>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	@ (8005028 <HAL_TIM_PWM_Start+0x18c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d111      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b06      	cmp	r3, #6
 8004fe2:	d010      	beq.n	8005006 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff4:	e007      	b.n	8005006 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40010000 	.word	0x40010000
 8005014:	40010400 	.word	0x40010400
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	40000c00 	.word	0x40000c00
 8005024:	40014000 	.word	0x40014000
 8005028:	40001800 	.word	0x40001800

0800502c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e097      	b.n	8005170 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fd fc47 	bl	80028e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fae1 	bl	8005648 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	4313      	orrs	r3, r2
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80050cc:	f023 030c 	bic.w	r3, r3, #12
 80050d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	4313      	orrs	r3, r2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	011a      	lsls	r2, r3, #4
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	031b      	lsls	r3, r3, #12
 80050fc:	4313      	orrs	r3, r2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	4313      	orrs	r3, r2
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005188:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005190:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005198:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d110      	bne.n	80051ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d102      	bne.n	80051b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ae:	7b7b      	ldrb	r3, [r7, #13]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e069      	b.n	800528c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c8:	e031      	b.n	800522e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d110      	bne.n	80051f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051d0:	7bbb      	ldrb	r3, [r7, #14]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d102      	bne.n	80051dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051d6:	7b3b      	ldrb	r3, [r7, #12]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d001      	beq.n	80051e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e055      	b.n	800528c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051f0:	e01d      	b.n	800522e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d108      	bne.n	800520a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051f8:	7bbb      	ldrb	r3, [r7, #14]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d105      	bne.n	800520a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051fe:	7b7b      	ldrb	r3, [r7, #13]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d102      	bne.n	800520a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005204:	7b3b      	ldrb	r3, [r7, #12]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d001      	beq.n	800520e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e03e      	b.n	800528c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2202      	movs	r2, #2
 800521a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_TIM_Encoder_Start+0xc4>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b04      	cmp	r3, #4
 8005238:	d008      	beq.n	800524c <HAL_TIM_Encoder_Start+0xd4>
 800523a:	e00f      	b.n	800525c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fc5b 	bl	8005b00 <TIM_CCxChannelCmd>
      break;
 800524a:	e016      	b.n	800527a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	2104      	movs	r1, #4
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fc53 	bl	8005b00 <TIM_CCxChannelCmd>
      break;
 800525a:	e00e      	b.n	800527a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2201      	movs	r2, #1
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fc4b 	bl	8005b00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2201      	movs	r2, #1
 8005270:	2104      	movs	r1, #4
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fc44 	bl	8005b00 <TIM_CCxChannelCmd>
      break;
 8005278:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d020      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01b      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0202 	mvn.w	r2, #2
 80052c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f994 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f986 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f997 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d020      	beq.n	8005344 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0204 	mvn.w	r2, #4
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2202      	movs	r2, #2
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f96e 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f960 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f971 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d020      	beq.n	8005390 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01b      	beq.n	8005390 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0208 	mvn.w	r2, #8
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2204      	movs	r2, #4
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f948 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f93a 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f94b 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d020      	beq.n	80053dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0210 	mvn.w	r2, #16
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2208      	movs	r2, #8
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f922 	bl	800560c <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f914 	bl	80055f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f925 	bl	8005620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00c      	beq.n	8005400 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0201 	mvn.w	r2, #1
 80053f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc fce4 	bl	8001dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00c      	beq.n	8005424 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800541c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fc6c 	bl	8005cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00c      	beq.n	8005448 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f8f6 	bl	8005634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0220 	mvn.w	r2, #32
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fc3e 	bl	8005ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800548e:	2302      	movs	r3, #2
 8005490:	e0ae      	b.n	80055f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b0c      	cmp	r3, #12
 800549e:	f200 809f 	bhi.w	80055e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054a2:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	080055e1 	.word	0x080055e1
 80054b0:	080055e1 	.word	0x080055e1
 80054b4:	080055e1 	.word	0x080055e1
 80054b8:	0800551d 	.word	0x0800551d
 80054bc:	080055e1 	.word	0x080055e1
 80054c0:	080055e1 	.word	0x080055e1
 80054c4:	080055e1 	.word	0x080055e1
 80054c8:	0800555f 	.word	0x0800555f
 80054cc:	080055e1 	.word	0x080055e1
 80054d0:	080055e1 	.word	0x080055e1
 80054d4:	080055e1 	.word	0x080055e1
 80054d8:	0800559f 	.word	0x0800559f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f95c 	bl	80057a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0208 	orr.w	r2, r2, #8
 80054f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0204 	bic.w	r2, r2, #4
 8005506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6999      	ldr	r1, [r3, #24]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	619a      	str	r2, [r3, #24]
      break;
 800551a:	e064      	b.n	80055e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f9ac 	bl	8005880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6999      	ldr	r1, [r3, #24]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	021a      	lsls	r2, r3, #8
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	619a      	str	r2, [r3, #24]
      break;
 800555c:	e043      	b.n	80055e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fa01 	bl	800596c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0208 	orr.w	r2, r2, #8
 8005578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0204 	bic.w	r2, r2, #4
 8005588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69d9      	ldr	r1, [r3, #28]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	61da      	str	r2, [r3, #28]
      break;
 800559c:	e023      	b.n	80055e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fa55 	bl	8005a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69d9      	ldr	r1, [r3, #28]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	021a      	lsls	r2, r3, #8
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	61da      	str	r2, [r3, #28]
      break;
 80055de:	e002      	b.n	80055e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	75fb      	strb	r3, [r7, #23]
      break;
 80055e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a46      	ldr	r2, [pc, #280]	@ (8005774 <TIM_Base_SetConfig+0x12c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d013      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005666:	d00f      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a43      	ldr	r2, [pc, #268]	@ (8005778 <TIM_Base_SetConfig+0x130>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a42      	ldr	r2, [pc, #264]	@ (800577c <TIM_Base_SetConfig+0x134>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d007      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a41      	ldr	r2, [pc, #260]	@ (8005780 <TIM_Base_SetConfig+0x138>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a40      	ldr	r2, [pc, #256]	@ (8005784 <TIM_Base_SetConfig+0x13c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800568e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a35      	ldr	r2, [pc, #212]	@ (8005774 <TIM_Base_SetConfig+0x12c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d02b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a8:	d027      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a32      	ldr	r2, [pc, #200]	@ (8005778 <TIM_Base_SetConfig+0x130>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d023      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a31      	ldr	r2, [pc, #196]	@ (800577c <TIM_Base_SetConfig+0x134>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01f      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a30      	ldr	r2, [pc, #192]	@ (8005780 <TIM_Base_SetConfig+0x138>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d01b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005784 <TIM_Base_SetConfig+0x13c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d017      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005788 <TIM_Base_SetConfig+0x140>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d013      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <TIM_Base_SetConfig+0x144>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00f      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005790 <TIM_Base_SetConfig+0x148>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00b      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005794 <TIM_Base_SetConfig+0x14c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005798 <TIM_Base_SetConfig+0x150>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d003      	beq.n	80056fa <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a29      	ldr	r2, [pc, #164]	@ (800579c <TIM_Base_SetConfig+0x154>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d108      	bne.n	800570c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a10      	ldr	r2, [pc, #64]	@ (8005774 <TIM_Base_SetConfig+0x12c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0xf8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a12      	ldr	r2, [pc, #72]	@ (8005784 <TIM_Base_SetConfig+0x13c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b01      	cmp	r3, #1
 8005758:	d105      	bne.n	8005766 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	611a      	str	r2, [r3, #16]
  }
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40010400 	.word	0x40010400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800
 8005794:	40001800 	.word	0x40001800
 8005798:	40001c00 	.word	0x40001c00
 800579c:	40002000 	.word	0x40002000

080057a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f023 0201 	bic.w	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f023 0302 	bic.w	r3, r3, #2
 80057e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a20      	ldr	r2, [pc, #128]	@ (8005878 <TIM_OC1_SetConfig+0xd8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC1_SetConfig+0x64>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a1f      	ldr	r2, [pc, #124]	@ (800587c <TIM_OC1_SetConfig+0xdc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d10c      	bne.n	800581e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0308 	bic.w	r3, r3, #8
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 0304 	bic.w	r3, r3, #4
 800581c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a15      	ldr	r2, [pc, #84]	@ (8005878 <TIM_OC1_SetConfig+0xd8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC1_SetConfig+0x8e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a14      	ldr	r2, [pc, #80]	@ (800587c <TIM_OC1_SetConfig+0xdc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d111      	bne.n	8005852 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	621a      	str	r2, [r3, #32]
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	40010000 	.word	0x40010000
 800587c:	40010400 	.word	0x40010400

08005880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f023 0210 	bic.w	r2, r3, #16
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 0320 	bic.w	r3, r3, #32
 80058ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a22      	ldr	r2, [pc, #136]	@ (8005964 <TIM_OC2_SetConfig+0xe4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC2_SetConfig+0x68>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a21      	ldr	r2, [pc, #132]	@ (8005968 <TIM_OC2_SetConfig+0xe8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10d      	bne.n	8005904 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a17      	ldr	r2, [pc, #92]	@ (8005964 <TIM_OC2_SetConfig+0xe4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_OC2_SetConfig+0x94>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a16      	ldr	r2, [pc, #88]	@ (8005968 <TIM_OC2_SetConfig+0xe8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d113      	bne.n	800593c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800591a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400

0800596c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a21      	ldr	r2, [pc, #132]	@ (8005a4c <TIM_OC3_SetConfig+0xe0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_OC3_SetConfig+0x66>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a20      	ldr	r2, [pc, #128]	@ (8005a50 <TIM_OC3_SetConfig+0xe4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d10d      	bne.n	80059ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a16      	ldr	r2, [pc, #88]	@ (8005a4c <TIM_OC3_SetConfig+0xe0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_OC3_SetConfig+0x92>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a15      	ldr	r2, [pc, #84]	@ (8005a50 <TIM_OC3_SetConfig+0xe4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d113      	bne.n	8005a26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	621a      	str	r2, [r3, #32]
}
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400

08005a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	031b      	lsls	r3, r3, #12
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a12      	ldr	r2, [pc, #72]	@ (8005af8 <TIM_OC4_SetConfig+0xa4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC4_SetConfig+0x68>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a11      	ldr	r2, [pc, #68]	@ (8005afc <TIM_OC4_SetConfig+0xa8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d109      	bne.n	8005ad0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	019b      	lsls	r3, r3, #6
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40010400 	.word	0x40010400

08005b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	2201      	movs	r2, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1a      	ldr	r2, [r3, #32]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	401a      	ands	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
	...

08005b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e05a      	b.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a21      	ldr	r2, [pc, #132]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb0:	d01d      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1a      	ldr	r2, [pc, #104]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a18      	ldr	r2, [pc, #96]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a17      	ldr	r2, [pc, #92]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a15      	ldr	r2, [pc, #84]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d10c      	bne.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	40000c00 	.word	0x40000c00
 8005c38:	40010400 	.word	0x40010400
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40001800 	.word	0x40001800

08005c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e03d      	b.n	8005cdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e042      	b.n	8005da8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fc ff5c 	bl	8002bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2224      	movs	r2, #36	@ 0x24
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f973 	bl	8006040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	@ 0x28
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d175      	bne.n	8005ebc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_UART_Transmit+0x2c>
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e06e      	b.n	8005ebe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2221      	movs	r2, #33	@ 0x21
 8005dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dee:	f7fd f8c1 	bl	8002f74 <HAL_GetTick>
 8005df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e08:	d108      	bne.n	8005e1c <HAL_UART_Transmit+0x6c>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e003      	b.n	8005e24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e24:	e02e      	b.n	8005e84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2180      	movs	r1, #128	@ 0x80
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f848 	bl	8005ec6 <UART_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e03a      	b.n	8005ebe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3302      	adds	r3, #2
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	e007      	b.n	8005e76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	781a      	ldrb	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	3301      	adds	r3, #1
 8005e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1cb      	bne.n	8005e26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	2140      	movs	r1, #64	@ 0x40
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f814 	bl	8005ec6 <UART_WaitOnFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e006      	b.n	8005ebe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e000      	b.n	8005ebe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3720      	adds	r7, #32
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed6:	e03b      	b.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	d037      	beq.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee0:	f7fd f848 	bl	8002f74 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	6a3a      	ldr	r2, [r7, #32]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d302      	bcc.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e03a      	b.n	8005f70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d023      	beq.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b80      	cmp	r3, #128	@ 0x80
 8005f0c:	d020      	beq.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b40      	cmp	r3, #64	@ 0x40
 8005f12:	d01d      	beq.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d116      	bne.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f81d 	bl	8005f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2208      	movs	r2, #8
 8005f42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e00f      	b.n	8005f70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d0b4      	beq.n	8005ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b095      	sub	sp, #84	@ 0x54
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fa0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d119      	bne.n	8006024 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f023 0310 	bic.w	r3, r3, #16
 8006006:	647b      	str	r3, [r7, #68]	@ 0x44
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006010:	61ba      	str	r2, [r7, #24]
 8006012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	613b      	str	r3, [r7, #16]
   return(result);
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e5      	bne.n	8005ff0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006032:	bf00      	nop
 8006034:	3754      	adds	r7, #84	@ 0x54
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006044:	b0c0      	sub	sp, #256	@ 0x100
 8006046:	af00      	add	r7, sp, #0
 8006048:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605c:	68d9      	ldr	r1, [r3, #12]
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	ea40 0301 	orr.w	r3, r0, r1
 8006068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	431a      	orrs	r2, r3
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	431a      	orrs	r2, r3
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006098:	f021 010c 	bic.w	r1, r1, #12
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060a6:	430b      	orrs	r3, r1
 80060a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ba:	6999      	ldr	r1, [r3, #24]
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	ea40 0301 	orr.w	r3, r0, r1
 80060c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b8f      	ldr	r3, [pc, #572]	@ (800630c <UART_SetConfig+0x2cc>)
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d005      	beq.n	80060e0 <UART_SetConfig+0xa0>
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b8d      	ldr	r3, [pc, #564]	@ (8006310 <UART_SetConfig+0x2d0>)
 80060dc:	429a      	cmp	r2, r3
 80060de:	d104      	bne.n	80060ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060e0:	f7fe f8ea 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 80060e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060e8:	e003      	b.n	80060f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ea:	f7fe f8d1 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 80060ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060fc:	f040 810c 	bne.w	8006318 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006104:	2200      	movs	r2, #0
 8006106:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800610a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800610e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006112:	4622      	mov	r2, r4
 8006114:	462b      	mov	r3, r5
 8006116:	1891      	adds	r1, r2, r2
 8006118:	65b9      	str	r1, [r7, #88]	@ 0x58
 800611a:	415b      	adcs	r3, r3
 800611c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800611e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006122:	4621      	mov	r1, r4
 8006124:	eb12 0801 	adds.w	r8, r2, r1
 8006128:	4629      	mov	r1, r5
 800612a:	eb43 0901 	adc.w	r9, r3, r1
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800613a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800613e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006142:	4690      	mov	r8, r2
 8006144:	4699      	mov	r9, r3
 8006146:	4623      	mov	r3, r4
 8006148:	eb18 0303 	adds.w	r3, r8, r3
 800614c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006150:	462b      	mov	r3, r5
 8006152:	eb49 0303 	adc.w	r3, r9, r3
 8006156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006166:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800616a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800616e:	460b      	mov	r3, r1
 8006170:	18db      	adds	r3, r3, r3
 8006172:	653b      	str	r3, [r7, #80]	@ 0x50
 8006174:	4613      	mov	r3, r2
 8006176:	eb42 0303 	adc.w	r3, r2, r3
 800617a:	657b      	str	r3, [r7, #84]	@ 0x54
 800617c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006180:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006184:	f7fa fcee 	bl	8000b64 <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4b61      	ldr	r3, [pc, #388]	@ (8006314 <UART_SetConfig+0x2d4>)
 800618e:	fba3 2302 	umull	r2, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	011c      	lsls	r4, r3, #4
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800619a:	2200      	movs	r2, #0
 800619c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	1891      	adds	r1, r2, r2
 80061ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061b0:	415b      	adcs	r3, r3
 80061b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061b8:	4641      	mov	r1, r8
 80061ba:	eb12 0a01 	adds.w	sl, r2, r1
 80061be:	4649      	mov	r1, r9
 80061c0:	eb43 0b01 	adc.w	fp, r3, r1
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061d8:	4692      	mov	sl, r2
 80061da:	469b      	mov	fp, r3
 80061dc:	4643      	mov	r3, r8
 80061de:	eb1a 0303 	adds.w	r3, sl, r3
 80061e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061e6:	464b      	mov	r3, r9
 80061e8:	eb4b 0303 	adc.w	r3, fp, r3
 80061ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006204:	460b      	mov	r3, r1
 8006206:	18db      	adds	r3, r3, r3
 8006208:	643b      	str	r3, [r7, #64]	@ 0x40
 800620a:	4613      	mov	r3, r2
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	647b      	str	r3, [r7, #68]	@ 0x44
 8006212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800621a:	f7fa fca3 	bl	8000b64 <__aeabi_uldivmod>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4611      	mov	r1, r2
 8006224:	4b3b      	ldr	r3, [pc, #236]	@ (8006314 <UART_SetConfig+0x2d4>)
 8006226:	fba3 2301 	umull	r2, r3, r3, r1
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	2264      	movs	r2, #100	@ 0x64
 800622e:	fb02 f303 	mul.w	r3, r2, r3
 8006232:	1acb      	subs	r3, r1, r3
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800623a:	4b36      	ldr	r3, [pc, #216]	@ (8006314 <UART_SetConfig+0x2d4>)
 800623c:	fba3 2302 	umull	r2, r3, r3, r2
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006248:	441c      	add	r4, r3
 800624a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800624e:	2200      	movs	r2, #0
 8006250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006254:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006258:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800625c:	4642      	mov	r2, r8
 800625e:	464b      	mov	r3, r9
 8006260:	1891      	adds	r1, r2, r2
 8006262:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006264:	415b      	adcs	r3, r3
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800626c:	4641      	mov	r1, r8
 800626e:	1851      	adds	r1, r2, r1
 8006270:	6339      	str	r1, [r7, #48]	@ 0x30
 8006272:	4649      	mov	r1, r9
 8006274:	414b      	adcs	r3, r1
 8006276:	637b      	str	r3, [r7, #52]	@ 0x34
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006284:	4659      	mov	r1, fp
 8006286:	00cb      	lsls	r3, r1, #3
 8006288:	4651      	mov	r1, sl
 800628a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800628e:	4651      	mov	r1, sl
 8006290:	00ca      	lsls	r2, r1, #3
 8006292:	4610      	mov	r0, r2
 8006294:	4619      	mov	r1, r3
 8006296:	4603      	mov	r3, r0
 8006298:	4642      	mov	r2, r8
 800629a:	189b      	adds	r3, r3, r2
 800629c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062a0:	464b      	mov	r3, r9
 80062a2:	460a      	mov	r2, r1
 80062a4:	eb42 0303 	adc.w	r3, r2, r3
 80062a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062c0:	460b      	mov	r3, r1
 80062c2:	18db      	adds	r3, r3, r3
 80062c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c6:	4613      	mov	r3, r2
 80062c8:	eb42 0303 	adc.w	r3, r2, r3
 80062cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062d6:	f7fa fc45 	bl	8000b64 <__aeabi_uldivmod>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4b0d      	ldr	r3, [pc, #52]	@ (8006314 <UART_SetConfig+0x2d4>)
 80062e0:	fba3 1302 	umull	r1, r3, r3, r2
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	2164      	movs	r1, #100	@ 0x64
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	3332      	adds	r3, #50	@ 0x32
 80062f2:	4a08      	ldr	r2, [pc, #32]	@ (8006314 <UART_SetConfig+0x2d4>)
 80062f4:	fba2 2303 	umull	r2, r3, r2, r3
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	f003 0207 	and.w	r2, r3, #7
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4422      	add	r2, r4
 8006306:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006308:	e106      	b.n	8006518 <UART_SetConfig+0x4d8>
 800630a:	bf00      	nop
 800630c:	40011000 	.word	0x40011000
 8006310:	40011400 	.word	0x40011400
 8006314:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631c:	2200      	movs	r2, #0
 800631e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006322:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006326:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800632a:	4642      	mov	r2, r8
 800632c:	464b      	mov	r3, r9
 800632e:	1891      	adds	r1, r2, r2
 8006330:	6239      	str	r1, [r7, #32]
 8006332:	415b      	adcs	r3, r3
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
 8006336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800633a:	4641      	mov	r1, r8
 800633c:	1854      	adds	r4, r2, r1
 800633e:	4649      	mov	r1, r9
 8006340:	eb43 0501 	adc.w	r5, r3, r1
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	00eb      	lsls	r3, r5, #3
 800634e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006352:	00e2      	lsls	r2, r4, #3
 8006354:	4614      	mov	r4, r2
 8006356:	461d      	mov	r5, r3
 8006358:	4643      	mov	r3, r8
 800635a:	18e3      	adds	r3, r4, r3
 800635c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006360:	464b      	mov	r3, r9
 8006362:	eb45 0303 	adc.w	r3, r5, r3
 8006366:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006376:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006386:	4629      	mov	r1, r5
 8006388:	008b      	lsls	r3, r1, #2
 800638a:	4621      	mov	r1, r4
 800638c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006390:	4621      	mov	r1, r4
 8006392:	008a      	lsls	r2, r1, #2
 8006394:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006398:	f7fa fbe4 	bl	8000b64 <__aeabi_uldivmod>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4b60      	ldr	r3, [pc, #384]	@ (8006524 <UART_SetConfig+0x4e4>)
 80063a2:	fba3 2302 	umull	r2, r3, r3, r2
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	011c      	lsls	r4, r3, #4
 80063aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	1891      	adds	r1, r2, r2
 80063c2:	61b9      	str	r1, [r7, #24]
 80063c4:	415b      	adcs	r3, r3
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063cc:	4641      	mov	r1, r8
 80063ce:	1851      	adds	r1, r2, r1
 80063d0:	6139      	str	r1, [r7, #16]
 80063d2:	4649      	mov	r1, r9
 80063d4:	414b      	adcs	r3, r1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e4:	4659      	mov	r1, fp
 80063e6:	00cb      	lsls	r3, r1, #3
 80063e8:	4651      	mov	r1, sl
 80063ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ee:	4651      	mov	r1, sl
 80063f0:	00ca      	lsls	r2, r1, #3
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	4642      	mov	r2, r8
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006400:	464b      	mov	r3, r9
 8006402:	460a      	mov	r2, r1
 8006404:	eb42 0303 	adc.w	r3, r2, r3
 8006408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006416:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006424:	4649      	mov	r1, r9
 8006426:	008b      	lsls	r3, r1, #2
 8006428:	4641      	mov	r1, r8
 800642a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800642e:	4641      	mov	r1, r8
 8006430:	008a      	lsls	r2, r1, #2
 8006432:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006436:	f7fa fb95 	bl	8000b64 <__aeabi_uldivmod>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4611      	mov	r1, r2
 8006440:	4b38      	ldr	r3, [pc, #224]	@ (8006524 <UART_SetConfig+0x4e4>)
 8006442:	fba3 2301 	umull	r2, r3, r3, r1
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	2264      	movs	r2, #100	@ 0x64
 800644a:	fb02 f303 	mul.w	r3, r2, r3
 800644e:	1acb      	subs	r3, r1, r3
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	3332      	adds	r3, #50	@ 0x32
 8006454:	4a33      	ldr	r2, [pc, #204]	@ (8006524 <UART_SetConfig+0x4e4>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006460:	441c      	add	r4, r3
 8006462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006466:	2200      	movs	r2, #0
 8006468:	673b      	str	r3, [r7, #112]	@ 0x70
 800646a:	677a      	str	r2, [r7, #116]	@ 0x74
 800646c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006470:	4642      	mov	r2, r8
 8006472:	464b      	mov	r3, r9
 8006474:	1891      	adds	r1, r2, r2
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	415b      	adcs	r3, r3
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006480:	4641      	mov	r1, r8
 8006482:	1851      	adds	r1, r2, r1
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	4649      	mov	r1, r9
 8006488:	414b      	adcs	r3, r1
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006498:	4659      	mov	r1, fp
 800649a:	00cb      	lsls	r3, r1, #3
 800649c:	4651      	mov	r1, sl
 800649e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a2:	4651      	mov	r1, sl
 80064a4:	00ca      	lsls	r2, r1, #3
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	4642      	mov	r2, r8
 80064ae:	189b      	adds	r3, r3, r2
 80064b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064b2:	464b      	mov	r3, r9
 80064b4:	460a      	mov	r2, r1
 80064b6:	eb42 0303 	adc.w	r3, r2, r3
 80064ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80064c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064d4:	4649      	mov	r1, r9
 80064d6:	008b      	lsls	r3, r1, #2
 80064d8:	4641      	mov	r1, r8
 80064da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064de:	4641      	mov	r1, r8
 80064e0:	008a      	lsls	r2, r1, #2
 80064e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064e6:	f7fa fb3d 	bl	8000b64 <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <UART_SetConfig+0x4e4>)
 80064f0:	fba3 1302 	umull	r1, r3, r3, r2
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	2164      	movs	r1, #100	@ 0x64
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	3332      	adds	r3, #50	@ 0x32
 8006502:	4a08      	ldr	r2, [pc, #32]	@ (8006524 <UART_SetConfig+0x4e4>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	f003 020f 	and.w	r2, r3, #15
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4422      	add	r2, r4
 8006516:	609a      	str	r2, [r3, #8]
}
 8006518:	bf00      	nop
 800651a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800651e:	46bd      	mov	sp, r7
 8006520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006524:	51eb851f 	.word	0x51eb851f

08006528 <memset>:
 8006528:	4402      	add	r2, r0
 800652a:	4603      	mov	r3, r0
 800652c:	4293      	cmp	r3, r2
 800652e:	d100      	bne.n	8006532 <memset+0xa>
 8006530:	4770      	bx	lr
 8006532:	f803 1b01 	strb.w	r1, [r3], #1
 8006536:	e7f9      	b.n	800652c <memset+0x4>

08006538 <strcat>:
 8006538:	b510      	push	{r4, lr}
 800653a:	4602      	mov	r2, r0
 800653c:	7814      	ldrb	r4, [r2, #0]
 800653e:	4613      	mov	r3, r2
 8006540:	3201      	adds	r2, #1
 8006542:	2c00      	cmp	r4, #0
 8006544:	d1fa      	bne.n	800653c <strcat+0x4>
 8006546:	3b01      	subs	r3, #1
 8006548:	f811 2b01 	ldrb.w	r2, [r1], #1
 800654c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006550:	2a00      	cmp	r2, #0
 8006552:	d1f9      	bne.n	8006548 <strcat+0x10>
 8006554:	bd10      	pop	{r4, pc}
	...

08006558 <__libc_init_array>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	4d0d      	ldr	r5, [pc, #52]	@ (8006590 <__libc_init_array+0x38>)
 800655c:	4c0d      	ldr	r4, [pc, #52]	@ (8006594 <__libc_init_array+0x3c>)
 800655e:	1b64      	subs	r4, r4, r5
 8006560:	10a4      	asrs	r4, r4, #2
 8006562:	2600      	movs	r6, #0
 8006564:	42a6      	cmp	r6, r4
 8006566:	d109      	bne.n	800657c <__libc_init_array+0x24>
 8006568:	4d0b      	ldr	r5, [pc, #44]	@ (8006598 <__libc_init_array+0x40>)
 800656a:	4c0c      	ldr	r4, [pc, #48]	@ (800659c <__libc_init_array+0x44>)
 800656c:	f000 f820 	bl	80065b0 <_init>
 8006570:	1b64      	subs	r4, r4, r5
 8006572:	10a4      	asrs	r4, r4, #2
 8006574:	2600      	movs	r6, #0
 8006576:	42a6      	cmp	r6, r4
 8006578:	d105      	bne.n	8006586 <__libc_init_array+0x2e>
 800657a:	bd70      	pop	{r4, r5, r6, pc}
 800657c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006580:	4798      	blx	r3
 8006582:	3601      	adds	r6, #1
 8006584:	e7ee      	b.n	8006564 <__libc_init_array+0xc>
 8006586:	f855 3b04 	ldr.w	r3, [r5], #4
 800658a:	4798      	blx	r3
 800658c:	3601      	adds	r6, #1
 800658e:	e7f2      	b.n	8006576 <__libc_init_array+0x1e>
 8006590:	08006654 	.word	0x08006654
 8006594:	08006654 	.word	0x08006654
 8006598:	08006654 	.word	0x08006654
 800659c:	08006658 	.word	0x08006658

080065a0 <strcpy>:
 80065a0:	4603      	mov	r3, r0
 80065a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065a6:	f803 2b01 	strb.w	r2, [r3], #1
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	d1f9      	bne.n	80065a2 <strcpy+0x2>
 80065ae:	4770      	bx	lr

080065b0 <_init>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr

080065bc <_fini>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	bf00      	nop
 80065c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c2:	bc08      	pop	{r3}
 80065c4:	469e      	mov	lr, r3
 80065c6:	4770      	bx	lr
