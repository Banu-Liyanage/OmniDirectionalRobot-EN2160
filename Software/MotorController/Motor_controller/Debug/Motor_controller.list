
Motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080077a0  080077a0  000087a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007844  08007844  00009014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007844  08007844  00008844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800784c  0800784c  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800784c  0800784c  0000884c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007850  08007850  00008850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007854  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000014  08007868  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08007868  0000942c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125e6  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e52  00000000  00000000  0001b62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1f  00000000  00000000  0001f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d7d  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001634e  00000000  00000000  00045004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df3da  00000000  00000000  0005b352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a72c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  0013a770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0013eeac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007788 	.word	0x08007788

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08007788 	.word	0x08007788

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <int_to_str>:
#include "stdio.h"  // only for strlen
#include "stdlib.h"

// Convert integer to string
void int_to_str(int num, char *str)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
    char temp[12];
    int i = 0, j = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
    int is_negative = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

    if (num < 0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da04      	bge.n	8000eb6 <int_to_str+0x26>
    {
        is_negative = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
        num = -num;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	607b      	str	r3, [r7, #4]
    }

    do {
        temp[i++] = (num % 10) + '0';
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <int_to_str+0xbc>)
 8000eba:	fb83 1302 	smull	r1, r3, r3, r2
 8000ebe:	1099      	asrs	r1, r3, #2
 8000ec0:	17d3      	asrs	r3, r2, #31
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	1ad1      	subs	r1, r2, r3
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	1c59      	adds	r1, r3, #1
 8000ed4:	61f9      	str	r1, [r7, #28]
 8000ed6:	3230      	adds	r2, #48	@ 0x30
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	3320      	adds	r3, #32
 8000edc:	443b      	add	r3, r7
 8000ede:	f803 2c18 	strb.w	r2, [r3, #-24]
        num /= 10;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <int_to_str+0xbc>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	1092      	asrs	r2, r2, #2
 8000eec:	17db      	asrs	r3, r3, #31
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	607b      	str	r3, [r7, #4]
    } while (num != 0);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1de      	bne.n	8000eb6 <int_to_str+0x26>

    if (is_negative)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d017      	beq.n	8000f2e <int_to_str+0x9e>
        temp[i++] = '-';
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	61fa      	str	r2, [r7, #28]
 8000f04:	3320      	adds	r3, #32
 8000f06:	443b      	add	r3, r7
 8000f08:	222d      	movs	r2, #45	@ 0x2d
 8000f0a:	f803 2c18 	strb.w	r2, [r3, #-24]

    // Reverse string
    while (i > 0)
 8000f0e:	e00e      	b.n	8000f2e <int_to_str+0x9e>
        str[j++] = temp[--i];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	61ba      	str	r2, [r7, #24]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	440a      	add	r2, r1
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	701a      	strb	r2, [r3, #0]
    while (i > 0)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dced      	bgt.n	8000f10 <int_to_str+0x80>

    str[j] = '\0';
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	66666667 	.word	0x66666667

08000f50 <UART_Init>:
    str[len] = '\0';
}

// UART Initialization
void UART_Init(UART_HandleTypeDef *huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    HAL_UART_Init(huart);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f005 fb7b 	bl	8006654 <HAL_UART_Init>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <UART_Transmit_Int>:
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}

// Transmit int with header
void UART_Transmit_Int(UART_HandleTypeDef *huart, const char *header, int number)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b096      	sub	sp, #88	@ 0x58
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
    char int_str[12];
    char buffer[60];

    int_to_str(number, int_str);
 8000f74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff88 	bl	8000e90 <int_to_str>

    strcpy(buffer, header);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 fbf6 	bl	8007778 <strcpy>
    strcat(buffer, ":");
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f939 	bl	8000208 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4916      	ldr	r1, [pc, #88]	@ (8000ffc <UART_Transmit_Int+0x94>)
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	8013      	strh	r3, [r2, #0]
    strcat(buffer, int_str);
 8000faa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fbab 	bl	8007710 <strcat>
    strcat(buffer, "\r\n");
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f922 	bl	8000208 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <UART_Transmit_Int+0x98>)
 8000fd0:	8811      	ldrh	r1, [r2, #0]
 8000fd2:	7892      	ldrb	r2, [r2, #2]
 8000fd4:	8019      	strh	r1, [r3, #0]
 8000fd6:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f913 	bl	8000208 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f107 0110 	add.w	r1, r7, #16
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f005 fb80 	bl	80066f4 <HAL_UART_Transmit>
}
 8000ff4:	bf00      	nop
 8000ff6:	3758      	adds	r7, #88	@ 0x58
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	080077a0 	.word	0x080077a0
 8001000:	080077a4 	.word	0x080077a4

08001004 <clampf>:

const float MAXINTCLAMP = 1;


// Clamp float
float clampf(float val, float min, float max) {
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	ed87 0a03 	vstr	s0, [r7, #12]
 800100e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001012:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val < min) return min;
 8001016:	ed97 7a03 	vldr	s14, [r7, #12]
 800101a:	edd7 7a02 	vldr	s15, [r7, #8]
 800101e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	d501      	bpl.n	800102c <clampf+0x28>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	e00b      	b.n	8001044 <clampf+0x40>
    if (val > max) return max;
 800102c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001030:	edd7 7a01 	vldr	s15, [r7, #4]
 8001034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	dd01      	ble.n	8001042 <clampf+0x3e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	e000      	b.n	8001044 <clampf+0x40>
    return val;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <Controller_Init>:

#include "controller.h"
#include "config.h"
#include "kinematics.h"

void Controller_Init(Controller *controller) {
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->x_error = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
	controller->y_error = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
	controller->w_error = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
	controller->previous_x_error = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
	controller->previous_y_error = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
	controller->previous_w_error = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	615a      	str	r2, [r3, #20]

	controller->x_velocity = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
	controller->y_velocity = 0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
	controller->omega = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]

	controller->controllers_enabled = 1;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <UpdateControllers>:
		controller->previous_y_error = 0;
		controller->previous_w_error = 0;
}


void UpdateControllers(Controller *controller, float x_velocity, float y_velocity,  float omega, float steering_adjustment) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b090      	sub	sp, #64	@ 0x40
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6178      	str	r0, [r7, #20]
 80010c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80010c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80010cc:	ed87 1a02 	vstr	s2, [r7, #8]
 80010d0:	edc7 1a01 	vstr	s3, [r7, #4]
    float forward_output, strafe_output, rotational_output;
//    float left_speed, right_speed;
//
    controller->x_velocity = x_velocity;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	619a      	str	r2, [r3, #24]
    controller->y_velocity = y_velocity;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	61da      	str	r2, [r3, #28]
    controller->omega = omega;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	621a      	str	r2, [r3, #32]
//
    float x_increment = x_velocity * CONTROLLER_LOOP_INTERVAL;
 80010e6:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <UpdateControllers+0x1b8>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    controller->x_error += x_increment - current_robot_velocity.vx * CONTROLLER_LOOP_INTERVAL;
 80010f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001278 <UpdateControllers+0x1bc>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <UpdateControllers+0x1b8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001108:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800110c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	edc3 7a00 	vstr	s15, [r3]
    float x_diff = controller->x_error - controller->previous_x_error;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	ed93 7a00 	vldr	s14, [r3]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	edd3 7a03 	vldr	s15, [r3, #12]
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    controller->previous_x_error = controller->x_error;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	60da      	str	r2, [r3, #12]
    forward_output = FWD_KP * controller->x_error + FWD_KD * x_diff;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	4b4e      	ldr	r3, [pc, #312]	@ (800127c <UpdateControllers+0x1c0>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114c:	4b4c      	ldr	r3, [pc, #304]	@ (8001280 <UpdateControllers+0x1c4>)
 800114e:	edd3 6a00 	vldr	s13, [r3]
 8001152:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    float y_increment = y_velocity * CONTROLLER_LOOP_INTERVAL;
 8001162:	4b44      	ldr	r3, [pc, #272]	@ (8001274 <UpdateControllers+0x1b8>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ed97 7a03 	vldr	s14, [r7, #12]
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	controller->y_error += y_increment - current_robot_velocity.vy * CONTROLLER_LOOP_INTERVAL;
 8001174:	4b40      	ldr	r3, [pc, #256]	@ (8001278 <UpdateControllers+0x1bc>)
 8001176:	ed93 7a01 	vldr	s14, [r3, #4]
 800117a:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <UpdateControllers+0x1b8>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	edc3 7a01 	vstr	s15, [r3, #4]
	float y_diff = controller->y_error - controller->previous_y_error;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	ed93 7a01 	vldr	s14, [r3, #4]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80011a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	controller->previous_y_error = controller->y_error;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	611a      	str	r2, [r3, #16]
	strafe_output = STRAFE_KP * controller->y_error + STRAFE_KD * y_diff;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <UpdateControllers+0x1c8>)
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <UpdateControllers+0x1cc>)
 80011ca:	edd3 6a00 	vldr	s13, [r3]
 80011ce:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011da:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        //x_output = K
	float w_increment = omega * CONTROLLER_LOOP_INTERVAL;
 80011de:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <UpdateControllers+0x1b8>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	controller->w_error += w_increment - current_robot_velocity.omega * CONTROLLER_LOOP_INTERVAL;
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <UpdateControllers+0x1bc>)
 80011f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <UpdateControllers+0x1b8>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001204:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	edd3 7a02 	vldr	s15, [r3, #8]
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	edc3 7a02 	vstr	s15, [r3, #8]
	float w_diff = controller->w_error - controller->previous_w_error;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	ed93 7a02 	vldr	s14, [r3, #8]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	edd3 7a05 	vldr	s15, [r3, #20]
 8001224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001228:	edc7 7a08 	vstr	s15, [r7, #32]
	controller->previous_w_error = controller->w_error;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	615a      	str	r2, [r3, #20]
	rotational_output = ROT_KP * controller->omega + ROT_KD * w_diff;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	ed93 7a08 	vldr	s14, [r3, #32]
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <UpdateControllers+0x1d0>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <UpdateControllers+0x1d4>)
 8001246:	edd3 6a00 	vldr	s13, [r3]
 800124a:	edd7 7a08 	vldr	s15, [r7, #32]
 800124e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	edc7 7a07 	vstr	s15, [r7, #28]


	set_robot_velocity(forward_output, strafe_output, rotational_output);
 800125a:	ed97 1a07 	vldr	s2, [r7, #28]
 800125e:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001262:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001266:	f000 fa2f 	bl	80016c8 <set_robot_velocity>

}
 800126a:	bf00      	nop
 800126c:	3740      	adds	r7, #64	@ 0x40
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	080077fc 	.word	0x080077fc
 8001278:	20000030 	.word	0x20000030
 800127c:	08007808 	.word	0x08007808
 8001280:	0800780c 	.word	0x0800780c
 8001284:	08007810 	.word	0x08007810
 8001288:	08007814 	.word	0x08007814
 800128c:	08007818 	.word	0x08007818
 8001290:	0800781c 	.word	0x0800781c

08001294 <getForwardLeftEncoderCounts>:
float m_x_change = 0;
float m_rot_change = 0;



int16_t getForwardLeftEncoderCounts() {
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8001298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	b21b      	sxth	r3, r3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <getForwardRightEncoderCounts>:

int16_t getForwardRightEncoderCounts() {
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	return (int16_t) TIM3->CNT;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <getForwardRightEncoderCounts+0x14>)
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	b21b      	sxth	r3, r3
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40000400 	.word	0x40000400

080012c4 <getRearLeftEncoderCounts>:

int16_t getRearLeftEncoderCounts() {
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	return (int16_t) TIM4->CNT;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <getRearLeftEncoderCounts+0x14>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012cc:	b21b      	sxth	r3, r3
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40000800 	.word	0x40000800

080012dc <getRearRightEncoderCounts>:

int16_t getRearRightEncoderCounts() {
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	return (int16_t) TIM5->CNT;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <getRearRightEncoderCounts+0x14>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	b21b      	sxth	r3, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40000c00 	.word	0x40000c00

080012f4 <resetEncoders>:

void resetEncoders() {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 80012f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = (int16_t) 0;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <resetEncoders+0x68>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CNT = (int16_t) 0;
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <resetEncoders+0x6c>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->CNT = (int16_t) 0;
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <resetEncoders+0x70>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24

	m_robot_distance = 0;
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <resetEncoders+0x74>)
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <resetEncoders+0x78>)
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

	ForwardLeft_delta = 0;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <resetEncoders+0x7c>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
	ForwardRight_delta = 0;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <resetEncoders+0x80>)
 800132a:	2200      	movs	r2, #0
 800132c:	801a      	strh	r2, [r3, #0]
	RearLeft_delta = 0;
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <resetEncoders+0x84>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
	RearRight_delta = 0;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <resetEncoders+0x88>)
 8001336:	2200      	movs	r2, #0
 8001338:	801a      	strh	r2, [r3, #0]

	previous_ForwardLeft_count = 0;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <resetEncoders+0x8c>)
 800133c:	2200      	movs	r2, #0
 800133e:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = 0;
 8001340:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <resetEncoders+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = 0;
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <resetEncoders+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = 0;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <resetEncoders+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]

}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40000400 	.word	0x40000400
 8001360:	40000800 	.word	0x40000800
 8001364:	40000c00 	.word	0x40000c00
 8001368:	2000005c 	.word	0x2000005c
 800136c:	20000060 	.word	0x20000060
 8001370:	20000064 	.word	0x20000064
 8001374:	20000066 	.word	0x20000066
 8001378:	20000068 	.word	0x20000068
 800137c:	2000006a 	.word	0x2000006a
 8001380:	2000006c 	.word	0x2000006c
 8001384:	2000006e 	.word	0x2000006e
 8001388:	20000070 	.word	0x20000070
 800138c:	20000072 	.word	0x20000072

08001390 <update_Encoder_Data>:
	TIM4->CNT = (int16_t) 0;
	TIM5->CNT = (int16_t) 0;
}


void update_Encoder_Data(){
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
	int16_t ForwardLeft_count= getForwardLeftEncoderCounts();
 8001396:	f7ff ff7d 	bl	8001294 <getForwardLeftEncoderCounts>
 800139a:	4603      	mov	r3, r0
 800139c:	82fb      	strh	r3, [r7, #22]
	int16_t ForwardRight_count = getForwardRightEncoderCounts();
 800139e:	f7ff ff85 	bl	80012ac <getForwardRightEncoderCounts>
 80013a2:	4603      	mov	r3, r0
 80013a4:	82bb      	strh	r3, [r7, #20]
	int16_t RearLeft_count = getRearLeftEncoderCounts();
 80013a6:	f7ff ff8d 	bl	80012c4 <getRearLeftEncoderCounts>
 80013aa:	4603      	mov	r3, r0
 80013ac:	827b      	strh	r3, [r7, #18]
	int16_t RearRight_count = getRearRightEncoderCounts();
 80013ae:	f7ff ff95 	bl	80012dc <getRearRightEncoderCounts>
 80013b2:	4603      	mov	r3, r0
 80013b4:	823b      	strh	r3, [r7, #16]


	ForwardLeft_delta = ForwardLeft_count - previous_ForwardLeft_count;
 80013b6:	8afa      	ldrh	r2, [r7, #22]
 80013b8:	4b4a      	ldr	r3, [pc, #296]	@ (80014e4 <update_Encoder_Data+0x154>)
 80013ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b48      	ldr	r3, [pc, #288]	@ (80014e8 <update_Encoder_Data+0x158>)
 80013c8:	801a      	strh	r2, [r3, #0]
	previous_ForwardLeft_count = ForwardLeft_count;
 80013ca:	4a46      	ldr	r2, [pc, #280]	@ (80014e4 <update_Encoder_Data+0x154>)
 80013cc:	8afb      	ldrh	r3, [r7, #22]
 80013ce:	8013      	strh	r3, [r2, #0]

	ForwardRight_delta = ForwardRight_count - previous_ForwardRight_count;
 80013d0:	8aba      	ldrh	r2, [r7, #20]
 80013d2:	4b46      	ldr	r3, [pc, #280]	@ (80014ec <update_Encoder_Data+0x15c>)
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b21a      	sxth	r2, r3
 80013e0:	4b43      	ldr	r3, [pc, #268]	@ (80014f0 <update_Encoder_Data+0x160>)
 80013e2:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = ForwardRight_count;
 80013e4:	4a41      	ldr	r2, [pc, #260]	@ (80014ec <update_Encoder_Data+0x15c>)
 80013e6:	8abb      	ldrh	r3, [r7, #20]
 80013e8:	8013      	strh	r3, [r2, #0]

	RearLeft_delta = RearLeft_count - previous_RearLeft_count;
 80013ea:	8a7a      	ldrh	r2, [r7, #18]
 80013ec:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <update_Encoder_Data+0x164>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	4b3f      	ldr	r3, [pc, #252]	@ (80014f8 <update_Encoder_Data+0x168>)
 80013fc:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = RearLeft_count;
 80013fe:	4a3d      	ldr	r2, [pc, #244]	@ (80014f4 <update_Encoder_Data+0x164>)
 8001400:	8a7b      	ldrh	r3, [r7, #18]
 8001402:	8013      	strh	r3, [r2, #0]


	RearRight_delta = RearRight_count - previous_RearRight_count;
 8001404:	8a3a      	ldrh	r2, [r7, #16]
 8001406:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <update_Encoder_Data+0x16c>)
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	b29b      	uxth	r3, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <update_Encoder_Data+0x170>)
 8001416:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = RearRight_count;
 8001418:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <update_Encoder_Data+0x16c>)
 800141a:	8a3b      	ldrh	r3, [r7, #16]
 800141c:	8013      	strh	r3, [r2, #0]

	float ForwardLeft = ForwardLeft_delta * RAD_PER_COUNT_FORWARD_LEFT;
 800141e:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <update_Encoder_Data+0x158>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001504 <update_Encoder_Data+0x174>
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001434:	edc7 7a03 	vstr	s15, [r7, #12]
	float ForwardRight = ForwardRight_delta * RAD_PER_COUNT_FORWARD_RIGHT;
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <update_Encoder_Data+0x160>)
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001446:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001504 <update_Encoder_Data+0x174>
 800144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144e:	edc7 7a02 	vstr	s15, [r7, #8]
	float RearLeft = RearLeft_delta * RAD_PER_COUNT_REAR_LEFT;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <update_Encoder_Data+0x168>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001460:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001504 <update_Encoder_Data+0x174>
 8001464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001468:	edc7 7a01 	vstr	s15, [r7, #4]
	float RearRight = RearRight_delta * RAD_PER_COUNT_REAR_RIGHT;
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <update_Encoder_Data+0x170>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001504 <update_Encoder_Data+0x174>
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	edc7 7a00 	vstr	s15, [r7]
//	current_wheel_W.front_left = ForwardLeft * LOOP_FREQUENCY;
//	current_wheel_W.rear_left = RearLeft * LOOP_FREQUENCY;
//	current_wheel_W.front_right = ForwardRight * LOOP_FREQUENCY;
//	current_wheel_W.rear_right = RearRight * LOOP_FREQUENCY;

	current_wheel_W.front_left = ForwardLeft * LOOP_FREQUENCY;
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <update_Encoder_Data+0x178>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <update_Encoder_Data+0x17c>)
 8001496:	edc3 7a00 	vstr	s15, [r3]
	current_wheel_W.rear_left = RearLeft * LOOP_FREQUENCY;
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <update_Encoder_Data+0x178>)
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <update_Encoder_Data+0x17c>)
 80014aa:	edc3 7a01 	vstr	s15, [r3, #4]
	current_wheel_W.front_right = ForwardRight * LOOP_FREQUENCY;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <update_Encoder_Data+0x178>)
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <update_Encoder_Data+0x17c>)
 80014be:	edc3 7a03 	vstr	s15, [r3, #12]
	current_wheel_W.rear_right = RearRight * LOOP_FREQUENCY;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <update_Encoder_Data+0x178>)
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	edd7 7a00 	vldr	s15, [r7]
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <update_Encoder_Data+0x17c>)
 80014d2:	edc3 7a02 	vstr	s15, [r3, #8]

	calculate_robot_velocity();
 80014d6:	f000 f92d 	bl	8001734 <calculate_robot_velocity>
	//UART_Transmit_Float(&huart2, ">y", current_robot_velocity.vy, 3);

}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000006c 	.word	0x2000006c
 80014e8:	20000064 	.word	0x20000064
 80014ec:	2000006e 	.word	0x2000006e
 80014f0:	20000066 	.word	0x20000066
 80014f4:	20000070 	.word	0x20000070
 80014f8:	20000068 	.word	0x20000068
 80014fc:	20000072 	.word	0x20000072
 8001500:	2000006a 	.word	0x2000006a
 8001504:	3a723872 	.word	0x3a723872
 8001508:	080077f4 	.word	0x080077f4
 800150c:	2000003c 	.word	0x2000003c

08001510 <mecanum_inverse_kinematics>:
 * ω1 = (1/R) * (vx - vy - (L+W)*ω)  // Front Left
 * ω2 = (1/R) * (vx + vy - (L+W)*ω)  // Rear Left
 * ω3 = (1/R) * (vx - vy + (L+W)*ω)  // Rear Right
 * ω4 = (1/R) * (vx + vy + (L+W)*ω)  // Front Right
 */
void mecanum_inverse_kinematics(RobotVelocity robot_vel, WheelVelocities* wheel_vel) {
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	eef0 6a40 	vmov.f32	s13, s0
 800151a:	eeb0 7a60 	vmov.f32	s14, s1
 800151e:	eef0 7a41 	vmov.f32	s15, s2
 8001522:	6038      	str	r0, [r7, #0]
 8001524:	edc7 6a01 	vstr	s13, [r7, #4]
 8001528:	ed87 7a02 	vstr	s14, [r7, #8]
 800152c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate wheel angular velocities (rad/s)

	wheel_vel->front_left  = inv_radius * (robot_vel.vx - robot_vel.vy - L_plus_W * robot_vel.omega);
 8001530:	ed97 7a01 	vldr	s14, [r7, #4]
 8001534:	edd7 7a02 	vldr	s15, [r7, #8]
 8001538:	ee37 7a67 	vsub.f32	s14, s14, s15
 800153c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <mecanum_inverse_kinematics+0xe4>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <mecanum_inverse_kinematics+0xe8>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	edc3 7a00 	vstr	s15, [r3]
	wheel_vel->front_right = inv_radius * (robot_vel.vx + robot_vel.vy + L_plus_W * robot_vel.omega);
 800155e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001562:	edd7 7a02 	vldr	s15, [r7, #8]
 8001566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156a:	edd7 6a03 	vldr	s13, [r7, #12]
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <mecanum_inverse_kinematics+0xe4>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <mecanum_inverse_kinematics+0xe8>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a03 	vstr	s15, [r3, #12]
	wheel_vel->rear_left   = inv_radius * (robot_vel.vx + robot_vel.vy - L_plus_W * robot_vel.omega);
 800158c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001590:	edd7 7a02 	vldr	s15, [r7, #8]
 8001594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001598:	edd7 6a03 	vldr	s13, [r7, #12]
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <mecanum_inverse_kinematics+0xe4>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <mecanum_inverse_kinematics+0xe8>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	edc3 7a01 	vstr	s15, [r3, #4]
	wheel_vel->rear_right  = inv_radius * (robot_vel.vx - robot_vel.vy + L_plus_W * robot_vel.omega);
 80015ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80015be:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c6:	edd7 6a03 	vldr	s13, [r7, #12]
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <mecanum_inverse_kinematics+0xe4>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <mecanum_inverse_kinematics+0xe8>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <mecanum_forward_kinematics>:
//
//    robot_vel->omega = R_over_4 / L_plus_W * (-wheel_vel.front_left - wheel_vel.rear_left +
//                                              wheel_vel.rear_right + wheel_vel.front_right);
//}

void mecanum_forward_kinematics(WheelVelocities wheel_vel, volatile RobotVelocity* robot_vel) {
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	eeb0 6a40 	vmov.f32	s12, s0
 8001606:	eef0 6a60 	vmov.f32	s13, s1
 800160a:	eeb0 7a41 	vmov.f32	s14, s2
 800160e:	eef0 7a61 	vmov.f32	s15, s3
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	ed87 6a02 	vstr	s12, [r7, #8]
 8001618:	edc7 6a03 	vstr	s13, [r7, #12]
 800161c:	ed87 7a04 	vstr	s14, [r7, #16]
 8001620:	edc7 7a05 	vstr	s15, [r7, #20]
    float R_over_4 = WHEEL_RADIUS / 4.0f;
 8001624:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <mecanum_forward_kinematics+0xc4>)
 8001626:	61fb      	str	r3, [r7, #28]
    float L_plus_W = HALF_LENGTH + HALF_WIDTH;
 8001628:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <mecanum_forward_kinematics+0xc8>)
 800162a:	61bb      	str	r3, [r7, #24]

    // Calculate robot velocities
    robot_vel->vx = R_over_4 * (wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left + wheel_vel.rear_right);
 800162c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001630:	edd7 7a05 	vldr	s15, [r7, #20]
 8001634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001638:	edd7 7a03 	vldr	s15, [r7, #12]
 800163c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001640:	edd7 7a04 	vldr	s15, [r7, #16]
 8001644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001648:	edd7 7a07 	vldr	s15, [r7, #28]
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	edc3 7a00 	vstr	s15, [r3]

    robot_vel->vy = R_over_4 * (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right);
 8001656:	ed97 7a05 	vldr	s14, [r7, #20]
 800165a:	edd7 7a02 	vldr	s15, [r7, #8]
 800165e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001662:	edd7 7a03 	vldr	s15, [r7, #12]
 8001666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166a:	edd7 7a04 	vldr	s15, [r7, #16]
 800166e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001672:	edd7 7a07 	vldr	s15, [r7, #28]
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edc3 7a01 	vstr	s15, [r3, #4]

    robot_vel->omega = R_over_4 / L_plus_W * (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right);
 8001680:	edd7 6a07 	vldr	s13, [r7, #28]
 8001684:	edd7 7a06 	vldr	s15, [r7, #24]
 8001688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800168c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001690:	edd7 7a02 	vldr	s15, [r7, #8]
 8001694:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001698:	edd7 7a03 	vldr	s15, [r7, #12]
 800169c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80016b2:	bf00      	nop
 80016b4:	3724      	adds	r7, #36	@ 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	3c1fbe77 	.word	0x3c1fbe77
 80016c4:	3ea8f5c2 	.word	0x3ea8f5c2

080016c8 <set_robot_velocity>:



void set_robot_velocity(float vx, float vy, float omega) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80016d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016d6:	ed87 1a01 	vstr	s2, [r7, #4]
    RobotVelocity desired_vel = {vx, vy, omega};
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    WheelVelocities wheel_targets;

    // Convert robot velocity to wheel velocities
    mecanum_inverse_kinematics(desired_vel, &wheel_targets);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016ee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80016f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016f6:	4618      	mov	r0, r3
 80016f8:	eeb0 0a66 	vmov.f32	s0, s13
 80016fc:	eef0 0a47 	vmov.f32	s1, s14
 8001700:	eeb0 1a67 	vmov.f32	s2, s15
 8001704:	f7ff ff04 	bl	8001510 <mecanum_inverse_kinematics>

    // Set target velocities for the motor controller
    setTargetVelocities(wheel_targets.front_left,  // m1
 8001708:	edd7 7a05 	vldr	s15, [r7, #20]
 800170c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001710:	edd7 6a07 	vldr	s13, [r7, #28]
 8001714:	ed97 6a08 	vldr	s12, [r7, #32]
 8001718:	eef0 1a46 	vmov.f32	s3, s12
 800171c:	eeb0 1a66 	vmov.f32	s2, s13
 8001720:	eef0 0a47 	vmov.f32	s1, s14
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	f001 f9e0 	bl	8002aec <setTargetVelocities>
                       wheel_targets.rear_left,    // m2
                       wheel_targets.rear_right,   // m3
                       wheel_targets.front_right); // m4
}
 800172c:	bf00      	nop
 800172e:	3730      	adds	r7, #48	@ 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <calculate_robot_velocity>:

void calculate_robot_velocity(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	mecanum_forward_kinematics(current_wheel_W, &current_robot_velocity);
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <calculate_robot_velocity+0x30>)
 800173a:	ed93 6a00 	vldr	s12, [r3]
 800173e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001742:	ed93 7a02 	vldr	s14, [r3, #8]
 8001746:	edd3 7a03 	vldr	s15, [r3, #12]
 800174a:	4807      	ldr	r0, [pc, #28]	@ (8001768 <calculate_robot_velocity+0x34>)
 800174c:	eeb0 0a46 	vmov.f32	s0, s12
 8001750:	eef0 0a66 	vmov.f32	s1, s13
 8001754:	eeb0 1a47 	vmov.f32	s2, s14
 8001758:	eef0 1a67 	vmov.f32	s3, s15
 800175c:	f7ff ff4e 	bl	80015fc <mecanum_forward_kinematics>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000003c 	.word	0x2000003c
 8001768:	20000030 	.word	0x20000030

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001772:	f001 ff8f 	bl	8003694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001776:	f000 f8bb 	bl	80018f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177a:	f000 fc31 	bl	8001fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 800177e:	f000 fc0f 	bl	8001fa0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001782:	f000 fbb9 	bl	8001ef8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001786:	f000 f925 	bl	80019d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800178a:	f000 f975 	bl	8001a78 <MX_TIM1_Init>
  MX_TIM2_Init();
 800178e:	f000 fa1b 	bl	8001bc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001792:	f000 fa6d 	bl	8001c70 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001796:	f000 fabf 	bl	8001d18 <MX_TIM4_Init>
  MX_TIM5_Init();
 800179a:	f000 fb11 	bl	8001dc0 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800179e:	f000 fbd5 	bl	8001f4c <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80017a2:	f000 fb85 	bl	8001eb0 <MX_TIM14_Init>
  MX_TIM13_Init();
 80017a6:	f000 fb5f 	bl	8001e68 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017aa:	2100      	movs	r1, #0
 80017ac:	483e      	ldr	r0, [pc, #248]	@ (80018a8 <main+0x13c>)
 80017ae:	f004 f817 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017b2:	2104      	movs	r1, #4
 80017b4:	483c      	ldr	r0, [pc, #240]	@ (80018a8 <main+0x13c>)
 80017b6:	f004 f813 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017ba:	2108      	movs	r1, #8
 80017bc:	483a      	ldr	r0, [pc, #232]	@ (80018a8 <main+0x13c>)
 80017be:	f004 f80f 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80017c2:	210c      	movs	r1, #12
 80017c4:	4838      	ldr	r0, [pc, #224]	@ (80018a8 <main+0x13c>)
 80017c6:	f004 f80b 	bl	80057e0 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80017ca:	213c      	movs	r1, #60	@ 0x3c
 80017cc:	4837      	ldr	r0, [pc, #220]	@ (80018ac <main+0x140>)
 80017ce:	f004 f975 	bl	8005abc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017d2:	213c      	movs	r1, #60	@ 0x3c
 80017d4:	4836      	ldr	r0, [pc, #216]	@ (80018b0 <main+0x144>)
 80017d6:	f004 f971 	bl	8005abc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80017da:	213c      	movs	r1, #60	@ 0x3c
 80017dc:	4835      	ldr	r0, [pc, #212]	@ (80018b4 <main+0x148>)
 80017de:	f004 f96d 	bl	8005abc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80017e2:	213c      	movs	r1, #60	@ 0x3c
 80017e4:	4834      	ldr	r0, [pc, #208]	@ (80018b8 <main+0x14c>)
 80017e6:	f004 f969 	bl	8005abc <HAL_TIM_Encoder_Start>

//  // Initialize kinematics system
//  init_kinematics();

  // Reset encoders
  resetEncoders();
 80017ea:	f7ff fd83 	bl	80012f4 <resetEncoders>

  // Init BLuetooth Debug
  UART_Init(&huart2);
 80017ee:	4833      	ldr	r0, [pc, #204]	@ (80018bc <main+0x150>)
 80017f0:	f7ff fbae 	bl	8000f50 <UART_Init>

  // Velocity timer
  HAL_TIM_Base_Start_IT(&htim14);
 80017f4:	4832      	ldr	r0, [pc, #200]	@ (80018c0 <main+0x154>)
 80017f6:	f003 ff33 	bl	8005660 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 80017fa:	4832      	ldr	r0, [pc, #200]	@ (80018c4 <main+0x158>)
 80017fc:	f003 ff30 	bl	8005660 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001806:	4830      	ldr	r0, [pc, #192]	@ (80018c8 <main+0x15c>)
 8001808:	f003 f86e 	bl	80048e8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800180c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001810:	f001 ffb2 	bl	8003778 <HAL_Delay>
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800181a:	482b      	ldr	r0, [pc, #172]	@ (80018c8 <main+0x15c>)
 800181c:	f003 f864 	bl	80048e8 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001820:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001824:	f001 ffa8 	bl	8003778 <HAL_Delay>

  Controller_Init(&controller);
 8001828:	4828      	ldr	r0, [pc, #160]	@ (80018cc <main+0x160>)
 800182a:	f7ff fc14 	bl	8001056 <Controller_Init>
//  HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 0);
//  HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, 1);
//  HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 0);


  setTargetVelocities(0, 0, 0, 0);
 800182e:	eddf 1a28 	vldr	s3, [pc, #160]	@ 80018d0 <main+0x164>
 8001832:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 80018d0 <main+0x164>
 8001836:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80018d0 <main+0x164>
 800183a:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80018d0 <main+0x164>
 800183e:	f001 f955 	bl	8002aec <setTargetVelocities>
  Profile_Reset(&x_profile);
 8001842:	4824      	ldr	r0, [pc, #144]	@ (80018d4 <main+0x168>)
 8001844:	f001 f972 	bl	8002b2c <Profile_Reset>
  Profile_Reset(&y_profile);
 8001848:	4823      	ldr	r0, [pc, #140]	@ (80018d8 <main+0x16c>)
 800184a:	f001 f96f 	bl	8002b2c <Profile_Reset>

  HAL_Delay(1000);
 800184e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001852:	f001 ff91 	bl	8003778 <HAL_Delay>

  //Profile_Move(&x_profile, 2, 0.3, 0, 0.1);
  //Profile_Move(&x_profile, 0, 0, 0, 0);
  Profile_Move(&y_profile, 1, 0.1, 0, 0.05);
 8001856:	eddf 1a21 	vldr	s3, [pc, #132]	@ 80018dc <main+0x170>
 800185a:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 80018d0 <main+0x164>
 800185e:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80018e0 <main+0x174>
 8001862:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001866:	481c      	ldr	r0, [pc, #112]	@ (80018d8 <main+0x16c>)
 8001868:	f001 faf2 	bl	8002e50 <Profile_Move>

  HAL_Delay(1000);
 800186c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001870:	f001 ff82 	bl	8003778 <HAL_Delay>

  HAL_UART_Receive_IT(&huart3, rx_data, 1);
 8001874:	2201      	movs	r2, #1
 8001876:	491b      	ldr	r1, [pc, #108]	@ (80018e4 <main+0x178>)
 8001878:	481b      	ldr	r0, [pc, #108]	@ (80018e8 <main+0x17c>)
 800187a:	f004 ffc6 	bl	800680a <HAL_UART_Receive_IT>
//    set_robot_velocity(0.08, 0, 0);
//

// set_robot_velocity(0, 0, 0);
 //resetIntegralTerms();
  int i = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */
	//int cunt = getRearRightEncoderCounts();
	 //float current = 2.434;
	//UART_Transmit_Float(&huart2, "i", current, 2);
    UART_Transmit_Int(&huart2, "S", i);
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4919      	ldr	r1, [pc, #100]	@ (80018ec <main+0x180>)
 8001886:	480d      	ldr	r0, [pc, #52]	@ (80018bc <main+0x150>)
 8001888:	f7ff fb6e 	bl	8000f68 <UART_Transmit_Int>
    UART_Transmit_Int(&huart3, "S", i);
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4917      	ldr	r1, [pc, #92]	@ (80018ec <main+0x180>)
 8001890:	4815      	ldr	r0, [pc, #84]	@ (80018e8 <main+0x17c>)
 8001892:	f7ff fb69 	bl	8000f68 <UART_Transmit_Int>
    i++;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
    HAL_Delay(1000);
 800189c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a0:	f001 ff6a 	bl	8003778 <HAL_Delay>
    UART_Transmit_Int(&huart2, "S", i);
 80018a4:	bf00      	nop
 80018a6:	e7ec      	b.n	8001882 <main+0x116>
 80018a8:	2000011c 	.word	0x2000011c
 80018ac:	20000164 	.word	0x20000164
 80018b0:	200001ac 	.word	0x200001ac
 80018b4:	200001f4 	.word	0x200001f4
 80018b8:	2000023c 	.word	0x2000023c
 80018bc:	20000314 	.word	0x20000314
 80018c0:	200002cc 	.word	0x200002cc
 80018c4:	20000284 	.word	0x20000284
 80018c8:	40020000 	.word	0x40020000
 80018cc:	200003f0 	.word	0x200003f0
 80018d0:	00000000 	.word	0x00000000
 80018d4:	200003a8 	.word	0x200003a8
 80018d8:	200003cc 	.word	0x200003cc
 80018dc:	3d4ccccd 	.word	0x3d4ccccd
 80018e0:	3dcccccd 	.word	0x3dcccccd
 80018e4:	200003a4 	.word	0x200003a4
 80018e8:	2000035c 	.word	0x2000035c
 80018ec:	080077f0 	.word	0x080077f0

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b094      	sub	sp, #80	@ 0x50
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	2234      	movs	r2, #52	@ 0x34
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f005 fefe 	bl	8007700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <SystemClock_Config+0xdc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	4a2b      	ldr	r2, [pc, #172]	@ (80019cc <SystemClock_Config+0xdc>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001922:	6413      	str	r3, [r2, #64]	@ 0x40
 8001924:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <SystemClock_Config+0xdc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <SystemClock_Config+0xe0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a25      	ldr	r2, [pc, #148]	@ (80019d0 <SystemClock_Config+0xe0>)
 800193a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <SystemClock_Config+0xe0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800194c:	2302      	movs	r3, #2
 800194e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001950:	2301      	movs	r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001954:	2310      	movs	r3, #16
 8001956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001958:	2302      	movs	r3, #2
 800195a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001960:	2308      	movs	r3, #8
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001964:	23b4      	movs	r3, #180	@ 0xb4
 8001966:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001968:	2302      	movs	r3, #2
 800196a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800196c:	2302      	movs	r3, #2
 800196e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001970:	2302      	movs	r3, #2
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fb83 	bl	8005084 <HAL_RCC_OscConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001984:	f000 fc2e 	bl	80021e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001988:	f002 ffe2 	bl	8004950 <HAL_PWREx_EnableOverDrive>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001992:	f000 fc27 	bl	80021e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001996:	230f      	movs	r3, #15
 8001998:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199a:	2302      	movs	r3, #2
 800199c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	2105      	movs	r1, #5
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 f81b 	bl	80049f0 <HAL_RCC_ClockConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019c0:	f000 fc10 	bl	80021e4 <Error_Handler>
  }
}
 80019c4:	bf00      	nop
 80019c6:	3750      	adds	r7, #80	@ 0x50
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000

080019d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019e6:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <MX_ADC1_Init+0x98>)
 80019e8:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <MX_ADC1_Init+0x9c>)
 80019ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019ec:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <MX_ADC1_Init+0x98>)
 80019ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <MX_ADC1_Init+0x98>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a6c <MX_ADC1_Init+0x98>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a06:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a16:	4a17      	ldr	r2, [pc, #92]	@ (8001a74 <MX_ADC1_Init+0xa0>)
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a36:	f001 fec3 	bl	80037c0 <HAL_ADC_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a40:	f000 fbd0 	bl	80021e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a44:	2304      	movs	r3, #4
 8001a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a56:	f001 fef7 	bl	8003848 <HAL_ADC_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a60:	f000 fbc0 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000074 	.word	0x20000074
 8001a70:	40012000 	.word	0x40012000
 8001a74:	0f000001 	.word	0x0f000001

08001a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b092      	sub	sp, #72	@ 0x48
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fe2c 	bl	8007700 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001aaa:	4a46      	ldr	r2, [pc, #280]	@ (8001bc4 <MX_TIM1_Init+0x14c>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aae:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b42      	ldr	r3, [pc, #264]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001abc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ad4:	483a      	ldr	r0, [pc, #232]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001ad6:	f003 fe33 	bl	8005740 <HAL_TIM_PWM_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ae0:	f000 fb80 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001af0:	4619      	mov	r1, r3
 8001af2:	4833      	ldr	r0, [pc, #204]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001af4:	f004 fccc 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001afe:	f000 fb71 	bl	80021e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b02:	2360      	movs	r3, #96	@ 0x60
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b22:	2200      	movs	r2, #0
 8001b24:	4619      	mov	r1, r3
 8001b26:	4826      	ldr	r0, [pc, #152]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001b28:	f004 f946 	bl	8005db8 <HAL_TIM_PWM_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001b32:	f000 fb57 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4820      	ldr	r0, [pc, #128]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001b40:	f004 f93a 	bl	8005db8 <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b4a:	f000 fb4b 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b52:	2208      	movs	r2, #8
 8001b54:	4619      	mov	r1, r3
 8001b56:	481a      	ldr	r0, [pc, #104]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001b58:	f004 f92e 	bl	8005db8 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001b62:	f000 fb3f 	bl	80021e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4814      	ldr	r0, [pc, #80]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001b70:	f004 f922 	bl	8005db8 <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001b7a:	f000 fb33 	bl	80021e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001ba2:	f004 fcf1 	bl	8006588 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001bac:	f000 fb1a 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bb0:	4803      	ldr	r0, [pc, #12]	@ (8001bc0 <MX_TIM1_Init+0x148>)
 8001bb2:	f001 fbbf 	bl	8003334 <HAL_TIM_MspPostInit>

}
 8001bb6:	bf00      	nop
 8001bb8:	3748      	adds	r7, #72	@ 0x48
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000011c 	.word	0x2000011c
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	@ 0x30
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	2224      	movs	r2, #36	@ 0x24
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 fd92 	bl	8007700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be4:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <MX_TIM2_Init+0xa4>)
 8001be6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <MX_TIM2_Init+0xa4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <MX_TIM2_Init+0xa4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <MX_TIM2_Init+0xa4>)
 8001bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <MX_TIM2_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <MX_TIM2_Init+0xa4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c14:	2301      	movs	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c24:	2301      	movs	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	4619      	mov	r1, r3
 8001c36:	480d      	ldr	r0, [pc, #52]	@ (8001c6c <MX_TIM2_Init+0xa4>)
 8001c38:	f003 fe9a 	bl	8005970 <HAL_TIM_Encoder_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c42:	f000 facf 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4806      	ldr	r0, [pc, #24]	@ (8001c6c <MX_TIM2_Init+0xa4>)
 8001c54:	f004 fc1c 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c5e:	f000 fac1 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	3730      	adds	r7, #48	@ 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000164 	.word	0x20000164

08001c70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	@ 0x30
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2224      	movs	r2, #36	@ 0x24
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f005 fd3e 	bl	8007700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c8c:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <MX_TIM3_Init+0xa0>)
 8001c8e:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <MX_TIM3_Init+0xa4>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <MX_TIM3_Init+0xa0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <MX_TIM3_Init+0xa0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d10 <MX_TIM3_Init+0xa0>)
 8001ca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <MX_TIM3_Init+0xa0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <MX_TIM3_Init+0xa0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	@ (8001d10 <MX_TIM3_Init+0xa0>)
 8001cde:	f003 fe47 	bl	8005970 <HAL_TIM_Encoder_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ce8:	f000 fa7c 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_TIM3_Init+0xa0>)
 8001cfa:	f004 fbc9 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d04:	f000 fa6e 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3730      	adds	r7, #48	@ 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200001ac 	.word	0x200001ac
 8001d14:	40000400 	.word	0x40000400

08001d18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	@ 0x30
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	2224      	movs	r2, #36	@ 0x24
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fcea 	bl	8007700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d34:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <MX_TIM4_Init+0xa0>)
 8001d36:	4a21      	ldr	r2, [pc, #132]	@ (8001dbc <MX_TIM4_Init+0xa4>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_TIM4_Init+0xa0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <MX_TIM4_Init+0xa0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_TIM4_Init+0xa0>)
 8001d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM4_Init+0xa0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <MX_TIM4_Init+0xa0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d62:	2301      	movs	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d72:	2301      	movs	r3, #1
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <MX_TIM4_Init+0xa0>)
 8001d86:	f003 fdf3 	bl	8005970 <HAL_TIM_Encoder_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d90:	f000 fa28 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_TIM4_Init+0xa0>)
 8001da2:	f004 fb75 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001dac:	f000 fa1a 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3730      	adds	r7, #48	@ 0x30
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200001f4 	.word	0x200001f4
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	@ 0x30
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f005 fc96 	bl	8007700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <MX_TIM5_Init+0xa0>)
 8001dde:	4a21      	ldr	r2, [pc, #132]	@ (8001e64 <MX_TIM5_Init+0xa4>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001de2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <MX_TIM5_Init+0xa0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <MX_TIM5_Init+0xa0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <MX_TIM5_Init+0xa0>)
 8001df0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001df4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <MX_TIM5_Init+0xa0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <MX_TIM5_Init+0xa0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e02:	2303      	movs	r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e06:	2302      	movs	r3, #2
 8001e08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <MX_TIM5_Init+0xa0>)
 8001e2e:	f003 fd9f 	bl	8005970 <HAL_TIM_Encoder_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e38:	f000 f9d4 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_TIM5_Init+0xa0>)
 8001e4a:	f004 fb21 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001e54:	f000 f9c6 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3730      	adds	r7, #48	@ 0x30
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000023c 	.word	0x2000023c
 8001e64:	40000c00 	.word	0x40000c00

08001e68 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001eac <MX_TIM13_Init+0x44>)
 8001e70:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1800-1;
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e74:	f240 7207 	movw	r2, #1799	@ 0x707
 8001e78:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e86:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <MX_TIM13_Init+0x40>)
 8001e96:	f003 fb93 	bl	80055c0 <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001ea0:	f000 f9a0 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000284 	.word	0x20000284
 8001eac:	40001c00 	.word	0x40001c00

08001eb0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <MX_TIM14_Init+0x40>)
 8001eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef4 <MX_TIM14_Init+0x44>)
 8001eb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1800-1;
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <MX_TIM14_Init+0x40>)
 8001ebc:	f240 7207 	movw	r2, #1799	@ 0x707
 8001ec0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <MX_TIM14_Init+0x40>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 500-1;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <MX_TIM14_Init+0x40>)
 8001eca:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001ece:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <MX_TIM14_Init+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <MX_TIM14_Init+0x40>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	@ (8001ef0 <MX_TIM14_Init+0x40>)
 8001ede:	f003 fb6f 	bl	80055c0 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001ee8:	f000 f97c 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200002cc 	.word	0x200002cc
 8001ef4:	40002000 	.word	0x40002000

08001ef8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <MX_USART2_UART_Init+0x50>)
 8001f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f2e:	4805      	ldr	r0, [pc, #20]	@ (8001f44 <MX_USART2_UART_Init+0x4c>)
 8001f30:	f004 fb90 	bl	8006654 <HAL_UART_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f3a:	f000 f953 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000314 	.word	0x20000314
 8001f48:	40004400 	.word	0x40004400

08001f4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <MX_USART3_UART_Init+0x50>)
 8001f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f72:	220c      	movs	r2, #12
 8001f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f76:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f84:	f004 fb66 	bl	8006654 <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f8e:	f000 f929 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000035c 	.word	0x2000035c
 8001f9c:	40004800 	.word	0x40004800

08001fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <MX_DMA_Init+0x3c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <MX_DMA_Init+0x3c>)
 8001fb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <MX_DMA_Init+0x3c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2038      	movs	r0, #56	@ 0x38
 8001fc8:	f001 ff47 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fcc:	2038      	movs	r0, #56	@ 0x38
 8001fce:	f001 ff60 	bl	8003e92 <HAL_NVIC_EnableIRQ>

}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	@ 0x28
 8001fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b43      	ldr	r3, [pc, #268]	@ (8002108 <MX_GPIO_Init+0x128>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a42      	ldr	r2, [pc, #264]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b40      	ldr	r3, [pc, #256]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b3c      	ldr	r3, [pc, #240]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a3b      	ldr	r2, [pc, #236]	@ (8002108 <MX_GPIO_Init+0x128>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b39      	ldr	r3, [pc, #228]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b35      	ldr	r3, [pc, #212]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a34      	ldr	r2, [pc, #208]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b32      	ldr	r3, [pc, #200]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a2d      	ldr	r2, [pc, #180]	@ (8002108 <MX_GPIO_Init+0x128>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b2b      	ldr	r3, [pc, #172]	@ (8002108 <MX_GPIO_Init+0x128>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 8002066:	2200      	movs	r2, #0
 8002068:	f640 711c 	movw	r1, #3868	@ 0xf1c
 800206c:	4827      	ldr	r0, [pc, #156]	@ (800210c <MX_GPIO_Init+0x12c>)
 800206e:	f002 fc3b 	bl	80048e8 <HAL_GPIO_WritePin>
                          |M2_INB_Pin|M1_INA_Pin|M1_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	2136      	movs	r1, #54	@ 0x36
 8002076:	4826      	ldr	r0, [pc, #152]	@ (8002110 <MX_GPIO_Init+0x130>)
 8002078:	f002 fc36 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002082:	4824      	ldr	r0, [pc, #144]	@ (8002114 <MX_GPIO_Init+0x134>)
 8002084:	f002 fc30 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_INA_Pin M4_INB_Pin TX_EN_Pin M2_INA_Pin
                           M1_INA_Pin M1_INB_Pin */
  GPIO_InitStruct.Pin = M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 8002088:	f640 531c 	movw	r3, #3356	@ 0xd1c
 800208c:	617b      	str	r3, [r7, #20]
                          |M1_INA_Pin|M1_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	481a      	ldr	r0, [pc, #104]	@ (800210c <MX_GPIO_Init+0x12c>)
 80020a2:	f002 fa8d 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RX_Pin LED_TX_Pin M3_INA_Pin M3_INB_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin;
 80020a6:	2336      	movs	r3, #54	@ 0x36
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	4814      	ldr	r0, [pc, #80]	@ (8002110 <MX_GPIO_Init+0x130>)
 80020be:	f002 fa7f 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_INB_Pin */
  GPIO_InitStruct.Pin = M2_INB_Pin;
 80020c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_INB_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	480c      	ldr	r0, [pc, #48]	@ (800210c <MX_GPIO_Init+0x12c>)
 80020dc:	f002 fa70 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 80020e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4806      	ldr	r0, [pc, #24]	@ (8002114 <MX_GPIO_Init+0x134>)
 80020fa:	f002 fa61 	bl	80045c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	@ 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	40020800 	.word	0x40020800
 8002110:	40020400 	.word	0x40020400
 8002114:	40020000 	.word	0x40020000

08002118 <HAL_TIM_PeriodElapsedCallback>:
{
    return &hadc1;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002118:	b580      	push	{r7, lr}
 800211a:	ed2d 8b02 	vpush	{d8}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a16      	ldr	r2, [pc, #88]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d104      	bne.n	8002136 <HAL_TIM_PeriodElapsedCallback+0x1e>
		update_Encoder_Data();
 800212c:	f7ff f930 	bl	8001390 <update_Encoder_Data>
		updateMotors();
 8002130:	f000 f99a 	bl	8002468 <updateMotors>
		Profile_Update(&x_profile);
		Profile_Update(&y_profile);
		UpdateControllers(&controller, Profile_GetSpeed(&x_profile), Profile_GetSpeed(&y_profile),  0, 0);

	}
}
 8002134:	e01e      	b.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x5c>
	else if(htim == &htim13){
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d11a      	bne.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x5c>
		Profile_Update(&x_profile);
 800213e:	4812      	ldr	r0, [pc, #72]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002140:	f000 fdc0 	bl	8002cc4 <Profile_Update>
		Profile_Update(&y_profile);
 8002144:	4811      	ldr	r0, [pc, #68]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002146:	f000 fdbd 	bl	8002cc4 <Profile_Update>
		UpdateControllers(&controller, Profile_GetSpeed(&x_profile), Profile_GetSpeed(&y_profile),  0, 0);
 800214a:	480f      	ldr	r0, [pc, #60]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800214c:	f000 feb0 	bl	8002eb0 <Profile_GetSpeed>
 8002150:	eeb0 8a40 	vmov.f32	s16, s0
 8002154:	480d      	ldr	r0, [pc, #52]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002156:	f000 feab 	bl	8002eb0 <Profile_GetSpeed>
 800215a:	eef0 7a40 	vmov.f32	s15, s0
 800215e:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8002190 <HAL_TIM_PeriodElapsedCallback+0x78>
 8002162:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8002190 <HAL_TIM_PeriodElapsedCallback+0x78>
 8002166:	eef0 0a67 	vmov.f32	s1, s15
 800216a:	eeb0 0a48 	vmov.f32	s0, s16
 800216e:	4809      	ldr	r0, [pc, #36]	@ (8002194 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002170:	f7fe ffa4 	bl	80010bc <UpdateControllers>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	ecbd 8b02 	vpop	{d8}
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200002cc 	.word	0x200002cc
 8002184:	20000284 	.word	0x20000284
 8002188:	200003a8 	.word	0x200003a8
 800218c:	200003cc 	.word	0x200003cc
 8002190:	00000000 	.word	0x00000000
 8002194:	200003f0 	.word	0x200003f0

08002198 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	@ (80021d4 <HAL_UART_RxCpltCallback+0x3c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d110      	bne.n	80021ca <HAL_UART_RxCpltCallback+0x32>
  {
    // Transmit received data via USART2


    HAL_UART_Transmit(&huart2, rx_data, 1, HAL_MAX_DELAY);
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	2201      	movs	r2, #1
 80021ae:	490a      	ldr	r1, [pc, #40]	@ (80021d8 <HAL_UART_RxCpltCallback+0x40>)
 80021b0:	480a      	ldr	r0, [pc, #40]	@ (80021dc <HAL_UART_RxCpltCallback+0x44>)
 80021b2:	f004 fa9f 	bl	80066f4 <HAL_UART_Transmit>
	//UART_Transmit_Int(&huart2, "RT", 69);

    HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 80021b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021ba:	4809      	ldr	r0, [pc, #36]	@ (80021e0 <HAL_UART_RxCpltCallback+0x48>)
 80021bc:	f002 fbad 	bl	800491a <HAL_GPIO_TogglePin>

    // Restart reception
    HAL_UART_Receive_IT(&huart3, rx_data, 1);
 80021c0:	2201      	movs	r2, #1
 80021c2:	4905      	ldr	r1, [pc, #20]	@ (80021d8 <HAL_UART_RxCpltCallback+0x40>)
 80021c4:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <HAL_UART_RxCpltCallback+0x3c>)
 80021c6:	f004 fb20 	bl	800680a <HAL_UART_Receive_IT>
  }
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000035c 	.word	0x2000035c
 80021d8:	200003a4 	.word	0x200003a4
 80021dc:	20000314 	.word	0x20000314
 80021e0:	40020000 	.word	0x40020000

080021e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <Error_Handler+0x8>

080021f0 <limitPWM>:
volatile float m4_int = 0;




float limitPWM(float pwm) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (pwm > PWM_MAX)
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe f970 	bl	80004e0 <__aeabi_f2d>
 8002200:	a313      	add	r3, pc, #76	@ (adr r3, 8002250 <limitPWM+0x60>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	f7fe fc53 	bl	8000ab0 <__aeabi_dcmpgt>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <limitPWM+0x24>
        return PWM_MAX;
 8002210:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <limitPWM+0x58>)
 8002212:	e00d      	b.n	8002230 <limitPWM+0x40>
    else if (pwm < -PWM_MAX)
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7fe f963 	bl	80004e0 <__aeabi_f2d>
 800221a:	a309      	add	r3, pc, #36	@ (adr r3, 8002240 <limitPWM+0x50>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe fc28 	bl	8000a74 <__aeabi_dcmplt>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <limitPWM+0x3e>
        return -PWM_MAX;
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <limitPWM+0x5c>)
 800222c:	e000      	b.n	8002230 <limitPWM+0x40>
    return pwm;
 800222e:	687b      	ldr	r3, [r7, #4]
}
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eeb0 0a67 	vmov.f32	s0, s15
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	7ae147ae 	.word	0x7ae147ae
 8002244:	bfefae14 	.word	0xbfefae14
 8002248:	3f7d70a4 	.word	0x3f7d70a4
 800224c:	bf7d70a4 	.word	0xbf7d70a4
 8002250:	7ae147ae 	.word	0x7ae147ae
 8002254:	3fefae14 	.word	0x3fefae14

08002258 <setForwardLeftMotorPWM>:

void setForwardLeftMotorPWM(float pwm) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8002262:	ed97 0a01 	vldr	s0, [r7, #4]
 8002266:	f7ff ffc3 	bl	80021f0 <limitPWM>
 800226a:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 800226e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	db0f      	blt.n	800229c <setForwardLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M1_INA = PC10, M1_INB = PC11
        // Reset bit 10 and Set bit 11 simultaneously
        GPIOC->BSRR = (1U << (10 + 16)) | (1U << 11);
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <setForwardLeftMotorPWM+0x70>)
 800227e:	4a13      	ldr	r2, [pc, #76]	@ (80022cc <setForwardLeftMotorPWM+0x74>)
 8002280:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002282:	edd7 7a01 	vldr	s15, [r7, #4]
 8002286:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80022d0 <setForwardLeftMotorPWM+0x78>
 800228a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <setForwardLeftMotorPWM+0x7c>)
 8002290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002294:	ee17 2a90 	vmov	r2, s15
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34
        // Reverse direction: INA=1, INB=0
        // Set bit 10 and Reset bit 11 simultaneously
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 800229a:	e010      	b.n	80022be <setForwardLeftMotorPWM+0x66>
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
 800229c:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <setForwardLeftMotorPWM+0x70>)
 800229e:	4a0e      	ldr	r2, [pc, #56]	@ (80022d8 <setForwardLeftMotorPWM+0x80>)
 80022a0:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80022a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022a6:	eef1 7a67 	vneg.f32	s15, s15
 80022aa:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80022d0 <setForwardLeftMotorPWM+0x78>
 80022ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b2:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <setForwardLeftMotorPWM+0x7c>)
 80022b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b8:	ee17 2a90 	vmov	r2, s15
 80022bc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40020800 	.word	0x40020800
 80022cc:	04000800 	.word	0x04000800
 80022d0:	45e0f800 	.word	0x45e0f800
 80022d4:	40010000 	.word	0x40010000
 80022d8:	08000400 	.word	0x08000400

080022dc <setForwardRightMotorPWM>:

void setForwardRightMotorPWM(float pwm) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 80022e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80022ea:	f7ff ff81 	bl	80021f0 <limitPWM>
 80022ee:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 80022f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fe:	db0f      	blt.n	8002320 <setForwardRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M2_INA = PC8, M2_INB = PC9
        // Set bit 8 and Reset bit 9 simultaneously
        GPIOC->BSRR = (1U << 8) | (1U << (9 + 16));
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <setForwardRightMotorPWM+0x70>)
 8002302:	4a13      	ldr	r2, [pc, #76]	@ (8002350 <setForwardRightMotorPWM+0x74>)
 8002304:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002306:	edd7 7a01 	vldr	s15, [r7, #4]
 800230a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002354 <setForwardRightMotorPWM+0x78>
 800230e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <setForwardRightMotorPWM+0x7c>)
 8002314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002318:	ee17 2a90 	vmov	r2, s15
 800231c:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reverse direction: INA=0, INB=1
        // Reset bit 8 and Set bit 9 simultaneously
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 800231e:	e010      	b.n	8002342 <setForwardRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
 8002320:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <setForwardRightMotorPWM+0x70>)
 8002322:	4a0e      	ldr	r2, [pc, #56]	@ (800235c <setForwardRightMotorPWM+0x80>)
 8002324:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8002326:	edd7 7a01 	vldr	s15, [r7, #4]
 800232a:	eef1 7a67 	vneg.f32	s15, s15
 800232e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002354 <setForwardRightMotorPWM+0x78>
 8002332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <setForwardRightMotorPWM+0x7c>)
 8002338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233c:	ee17 2a90 	vmov	r2, s15
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40020800 	.word	0x40020800
 8002350:	02000100 	.word	0x02000100
 8002354:	45e0f800 	.word	0x45e0f800
 8002358:	40010000 	.word	0x40010000
 800235c:	01000200 	.word	0x01000200

08002360 <setRearLeftMotorPWM>:

void setRearLeftMotorPWM(float pwm) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 800236a:	ed97 0a01 	vldr	s0, [r7, #4]
 800236e:	f7ff ff3f 	bl	80021f0 <limitPWM>
 8002372:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002376:	edd7 7a01 	vldr	s15, [r7, #4]
 800237a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	db0f      	blt.n	80023a4 <setRearLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M3_INA = PB4, M3_INB = PB5
        // Reset bit 4 and Set bit 5 simultaneously
        GPIOB->BSRR = (1U << (4 + 16)) | (1U << 5);
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <setRearLeftMotorPWM+0x70>)
 8002386:	4a13      	ldr	r2, [pc, #76]	@ (80023d4 <setRearLeftMotorPWM+0x74>)
 8002388:	619a      	str	r2, [r3, #24]
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 0);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);
        TIM1->CCR3 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 800238a:	edd7 7a01 	vldr	s15, [r7, #4]
 800238e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80023d8 <setRearLeftMotorPWM+0x78>
 8002392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002396:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <setRearLeftMotorPWM+0x7c>)
 8002398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239c:	ee17 2a90 	vmov	r2, s15
 80023a0:	63da      	str	r2, [r3, #60]	@ 0x3c
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 1);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 0);
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80023a2:	e010      	b.n	80023c6 <setRearLeftMotorPWM+0x66>
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
 80023a4:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <setRearLeftMotorPWM+0x70>)
 80023a6:	4a0e      	ldr	r2, [pc, #56]	@ (80023e0 <setRearLeftMotorPWM+0x80>)
 80023a8:	619a      	str	r2, [r3, #24]
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80023aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ae:	eef1 7a67 	vneg.f32	s15, s15
 80023b2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80023d8 <setRearLeftMotorPWM+0x78>
 80023b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <setRearLeftMotorPWM+0x7c>)
 80023bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c0:	ee17 2a90 	vmov	r2, s15
 80023c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40020400 	.word	0x40020400
 80023d4:	00100020 	.word	0x00100020
 80023d8:	45e0f800 	.word	0x45e0f800
 80023dc:	40010000 	.word	0x40010000
 80023e0:	00200010 	.word	0x00200010

080023e4 <setRearRightMotorPWM>:

void setRearRightMotorPWM(float pwm) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 80023ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80023f2:	f7ff fefd 	bl	80021f0 <limitPWM>
 80023f6:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 80023fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80023fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	db0f      	blt.n	8002428 <setRearRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M4_INA = PC2, M4_INB = PC3
        // Set bit 2 and Reset bit 3 simultaneously
        GPIOC->BSRR = (1U << 2) | (1U << (3 + 16));
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <setRearRightMotorPWM+0x70>)
 800240a:	4a13      	ldr	r2, [pc, #76]	@ (8002458 <setRearRightMotorPWM+0x74>)
 800240c:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 800240e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002412:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800245c <setRearRightMotorPWM+0x78>
 8002416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241a:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <setRearRightMotorPWM+0x7c>)
 800241c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002420:	ee17 2a90 	vmov	r2, s15
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40
        // Reverse direction: INA=0, INB=1
        // Reset bit 2 and Set bit 3 simultaneously
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 8002426:	e010      	b.n	800244a <setRearRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
 8002428:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <setRearRightMotorPWM+0x70>)
 800242a:	4a0e      	ldr	r2, [pc, #56]	@ (8002464 <setRearRightMotorPWM+0x80>)
 800242c:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 800242e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002432:	eef1 7a67 	vneg.f32	s15, s15
 8002436:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800245c <setRearRightMotorPWM+0x78>
 800243a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243e:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <setRearRightMotorPWM+0x7c>)
 8002440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002444:	ee17 2a90 	vmov	r2, s15
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40020800 	.word	0x40020800
 8002458:	00080004 	.word	0x00080004
 800245c:	45e0f800 	.word	0x45e0f800
 8002460:	40010000 	.word	0x40010000
 8002464:	00040008 	.word	0x00040008

08002468 <updateMotors>:
    // GPIOB: Reset M3_INA(PB4), M3_INB(PB5)
    GPIOB->BSRR = (1U << (4 + 16)) | (1U << (5 + 16));
}


void updateMotors(){
 8002468:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800246c:	b088      	sub	sp, #32
 800246e:	af00      	add	r7, sp, #0
    // Calculate velocity errors
	float m1_err = target_wheel_W.front_left - current_wheel_W.front_left;
 8002470:	4ba7      	ldr	r3, [pc, #668]	@ (8002710 <updateMotors+0x2a8>)
 8002472:	ed93 7a00 	vldr	s14, [r3]
 8002476:	4ba7      	ldr	r3, [pc, #668]	@ (8002714 <updateMotors+0x2ac>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002480:	edc7 7a03 	vstr	s15, [r7, #12]
	float m2_err = target_wheel_W.rear_left - current_wheel_W.rear_left;
 8002484:	4ba2      	ldr	r3, [pc, #648]	@ (8002710 <updateMotors+0x2a8>)
 8002486:	ed93 7a01 	vldr	s14, [r3, #4]
 800248a:	4ba2      	ldr	r3, [pc, #648]	@ (8002714 <updateMotors+0x2ac>)
 800248c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002494:	edc7 7a02 	vstr	s15, [r7, #8]
	float m3_err = target_wheel_W.rear_right - current_wheel_W.rear_right;
 8002498:	4b9d      	ldr	r3, [pc, #628]	@ (8002710 <updateMotors+0x2a8>)
 800249a:	ed93 7a02 	vldr	s14, [r3, #8]
 800249e:	4b9d      	ldr	r3, [pc, #628]	@ (8002714 <updateMotors+0x2ac>)
 80024a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80024a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a8:	edc7 7a01 	vstr	s15, [r7, #4]
	float m4_err = target_wheel_W.front_right - current_wheel_W.front_right;
 80024ac:	4b98      	ldr	r3, [pc, #608]	@ (8002710 <updateMotors+0x2a8>)
 80024ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80024b2:	4b98      	ldr	r3, [pc, #608]	@ (8002714 <updateMotors+0x2ac>)
 80024b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80024b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024bc:	edc7 7a00 	vstr	s15, [r7]




    m1_int += m1_err * LOOP_INTERVAL;
 80024c0:	4b95      	ldr	r3, [pc, #596]	@ (8002718 <updateMotors+0x2b0>)
 80024c2:	ed93 7a00 	vldr	s14, [r3]
 80024c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ce:	4b93      	ldr	r3, [pc, #588]	@ (800271c <updateMotors+0x2b4>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d8:	4b90      	ldr	r3, [pc, #576]	@ (800271c <updateMotors+0x2b4>)
 80024da:	edc3 7a00 	vstr	s15, [r3]
    m2_int += m2_err * LOOP_INTERVAL;
 80024de:	4b8e      	ldr	r3, [pc, #568]	@ (8002718 <updateMotors+0x2b0>)
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002720 <updateMotors+0x2b8>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002720 <updateMotors+0x2b8>)
 80024f8:	edc3 7a00 	vstr	s15, [r3]
    m3_int += m3_err * LOOP_INTERVAL;
 80024fc:	4b86      	ldr	r3, [pc, #536]	@ (8002718 <updateMotors+0x2b0>)
 80024fe:	ed93 7a00 	vldr	s14, [r3]
 8002502:	edd7 7a01 	vldr	s15, [r7, #4]
 8002506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250a:	4b86      	ldr	r3, [pc, #536]	@ (8002724 <updateMotors+0x2bc>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	4b83      	ldr	r3, [pc, #524]	@ (8002724 <updateMotors+0x2bc>)
 8002516:	edc3 7a00 	vstr	s15, [r3]
    m4_int += m4_err * LOOP_INTERVAL;
 800251a:	4b7f      	ldr	r3, [pc, #508]	@ (8002718 <updateMotors+0x2b0>)
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	edd7 7a00 	vldr	s15, [r7]
 8002524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002528:	4b7f      	ldr	r3, [pc, #508]	@ (8002728 <updateMotors+0x2c0>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002532:	4b7d      	ldr	r3, [pc, #500]	@ (8002728 <updateMotors+0x2c0>)
 8002534:	edc3 7a00 	vstr	s15, [r3]


    m1_int = clampf(m1_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002538:	4b78      	ldr	r3, [pc, #480]	@ (800271c <updateMotors+0x2b4>)
 800253a:	ed93 7a00 	vldr	s14, [r3]
 800253e:	4b7b      	ldr	r3, [pc, #492]	@ (800272c <updateMotors+0x2c4>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	eef1 7a67 	vneg.f32	s15, s15
 8002548:	4b78      	ldr	r3, [pc, #480]	@ (800272c <updateMotors+0x2c4>)
 800254a:	edd3 6a00 	vldr	s13, [r3]
 800254e:	eeb0 1a66 	vmov.f32	s2, s13
 8002552:	eef0 0a67 	vmov.f32	s1, s15
 8002556:	eeb0 0a47 	vmov.f32	s0, s14
 800255a:	f7fe fd53 	bl	8001004 <clampf>
 800255e:	eef0 7a40 	vmov.f32	s15, s0
 8002562:	4b6e      	ldr	r3, [pc, #440]	@ (800271c <updateMotors+0x2b4>)
 8002564:	edc3 7a00 	vstr	s15, [r3]
    m2_int = clampf(m2_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002568:	4b6d      	ldr	r3, [pc, #436]	@ (8002720 <updateMotors+0x2b8>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	4b6f      	ldr	r3, [pc, #444]	@ (800272c <updateMotors+0x2c4>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	eef1 7a67 	vneg.f32	s15, s15
 8002578:	4b6c      	ldr	r3, [pc, #432]	@ (800272c <updateMotors+0x2c4>)
 800257a:	edd3 6a00 	vldr	s13, [r3]
 800257e:	eeb0 1a66 	vmov.f32	s2, s13
 8002582:	eef0 0a67 	vmov.f32	s1, s15
 8002586:	eeb0 0a47 	vmov.f32	s0, s14
 800258a:	f7fe fd3b 	bl	8001004 <clampf>
 800258e:	eef0 7a40 	vmov.f32	s15, s0
 8002592:	4b63      	ldr	r3, [pc, #396]	@ (8002720 <updateMotors+0x2b8>)
 8002594:	edc3 7a00 	vstr	s15, [r3]
    m3_int = clampf(m3_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002598:	4b62      	ldr	r3, [pc, #392]	@ (8002724 <updateMotors+0x2bc>)
 800259a:	ed93 7a00 	vldr	s14, [r3]
 800259e:	4b63      	ldr	r3, [pc, #396]	@ (800272c <updateMotors+0x2c4>)
 80025a0:	edd3 7a00 	vldr	s15, [r3]
 80025a4:	eef1 7a67 	vneg.f32	s15, s15
 80025a8:	4b60      	ldr	r3, [pc, #384]	@ (800272c <updateMotors+0x2c4>)
 80025aa:	edd3 6a00 	vldr	s13, [r3]
 80025ae:	eeb0 1a66 	vmov.f32	s2, s13
 80025b2:	eef0 0a67 	vmov.f32	s1, s15
 80025b6:	eeb0 0a47 	vmov.f32	s0, s14
 80025ba:	f7fe fd23 	bl	8001004 <clampf>
 80025be:	eef0 7a40 	vmov.f32	s15, s0
 80025c2:	4b58      	ldr	r3, [pc, #352]	@ (8002724 <updateMotors+0x2bc>)
 80025c4:	edc3 7a00 	vstr	s15, [r3]
    m4_int = clampf(m4_int, -MAXINTCLAMP, MAXINTCLAMP);
 80025c8:	4b57      	ldr	r3, [pc, #348]	@ (8002728 <updateMotors+0x2c0>)
 80025ca:	ed93 7a00 	vldr	s14, [r3]
 80025ce:	4b57      	ldr	r3, [pc, #348]	@ (800272c <updateMotors+0x2c4>)
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eef1 7a67 	vneg.f32	s15, s15
 80025d8:	4b54      	ldr	r3, [pc, #336]	@ (800272c <updateMotors+0x2c4>)
 80025da:	edd3 6a00 	vldr	s13, [r3]
 80025de:	eeb0 1a66 	vmov.f32	s2, s13
 80025e2:	eef0 0a67 	vmov.f32	s1, s15
 80025e6:	eeb0 0a47 	vmov.f32	s0, s14
 80025ea:	f7fe fd0b 	bl	8001004 <clampf>
 80025ee:	eef0 7a40 	vmov.f32	s15, s0
 80025f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002728 <updateMotors+0x2c0>)
 80025f4:	edc3 7a00 	vstr	s15, [r3]


    float m1_output = Kp_Vel * m1_err + Ki_Vel * m1_int;
 80025f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002730 <updateMotors+0x2c8>)
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002606:	4b4b      	ldr	r3, [pc, #300]	@ (8002734 <updateMotors+0x2cc>)
 8002608:	edd3 6a00 	vldr	s13, [r3]
 800260c:	4b43      	ldr	r3, [pc, #268]	@ (800271c <updateMotors+0x2b4>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261a:	edc7 7a07 	vstr	s15, [r7, #28]
    float m2_output = Kp_Vel * m2_err + Ki_Vel * m2_int;
 800261e:	4b44      	ldr	r3, [pc, #272]	@ (8002730 <updateMotors+0x2c8>)
 8002620:	ed93 7a00 	vldr	s14, [r3]
 8002624:	edd7 7a02 	vldr	s15, [r7, #8]
 8002628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262c:	4b41      	ldr	r3, [pc, #260]	@ (8002734 <updateMotors+0x2cc>)
 800262e:	edd3 6a00 	vldr	s13, [r3]
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <updateMotors+0x2b8>)
 8002634:	edd3 7a00 	vldr	s15, [r3]
 8002638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002640:	edc7 7a06 	vstr	s15, [r7, #24]
    float m3_output = Kp_Vel * m3_err + Ki_Vel * m3_int;
 8002644:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <updateMotors+0x2c8>)
 8002646:	ed93 7a00 	vldr	s14, [r3]
 800264a:	edd7 7a01 	vldr	s15, [r7, #4]
 800264e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002652:	4b38      	ldr	r3, [pc, #224]	@ (8002734 <updateMotors+0x2cc>)
 8002654:	edd3 6a00 	vldr	s13, [r3]
 8002658:	4b32      	ldr	r3, [pc, #200]	@ (8002724 <updateMotors+0x2bc>)
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002666:	edc7 7a05 	vstr	s15, [r7, #20]
    float m4_output = Kp_Vel * m4_err + Ki_Vel * m4_int;
 800266a:	4b31      	ldr	r3, [pc, #196]	@ (8002730 <updateMotors+0x2c8>)
 800266c:	ed93 7a00 	vldr	s14, [r3]
 8002670:	edd7 7a00 	vldr	s15, [r7]
 8002674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002678:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <updateMotors+0x2cc>)
 800267a:	edd3 6a00 	vldr	s13, [r3]
 800267e:	4b2a      	ldr	r3, [pc, #168]	@ (8002728 <updateMotors+0x2c0>)
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268c:	edc7 7a04 	vstr	s15, [r7, #16]

    //  integral windup prevention
    // If output is saturated, reduce integral term
    if (m1_output > PWM_MAX) {
 8002690:	69f8      	ldr	r0, [r7, #28]
 8002692:	f7fd ff25 	bl	80004e0 <__aeabi_f2d>
 8002696:	a31c      	add	r3, pc, #112	@ (adr r3, 8002708 <updateMotors+0x2a0>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe fa08 	bl	8000ab0 <__aeabi_dcmpgt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d04a      	beq.n	800273c <updateMotors+0x2d4>
        m1_int -= (m1_output - PWM_MAX) / Ki_Vel;
 80026a6:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <updateMotors+0x2b4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff18 	bl	80004e0 <__aeabi_f2d>
 80026b0:	4604      	mov	r4, r0
 80026b2:	460d      	mov	r5, r1
 80026b4:	69f8      	ldr	r0, [r7, #28]
 80026b6:	f7fd ff13 	bl	80004e0 <__aeabi_f2d>
 80026ba:	a313      	add	r3, pc, #76	@ (adr r3, 8002708 <updateMotors+0x2a0>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd fdae 	bl	8000220 <__aeabi_dsub>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4690      	mov	r8, r2
 80026ca:	4699      	mov	r9, r3
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <updateMotors+0x2cc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff05 	bl	80004e0 <__aeabi_f2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4640      	mov	r0, r8
 80026dc:	4649      	mov	r1, r9
 80026de:	f7fe f881 	bl	80007e4 <__aeabi_ddiv>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4620      	mov	r0, r4
 80026e8:	4629      	mov	r1, r5
 80026ea:	f7fd fd99 	bl	8000220 <__aeabi_dsub>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe f9e5 	bl	8000ac4 <__aeabi_d2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a07      	ldr	r2, [pc, #28]	@ (800271c <updateMotors+0x2b4>)
 80026fe:	6013      	str	r3, [r2, #0]
        m1_output = PWM_MAX;
 8002700:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <updateMotors+0x2d0>)
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	e054      	b.n	80027b0 <updateMotors+0x348>
 8002706:	bf00      	nop
 8002708:	7ae147ae 	.word	0x7ae147ae
 800270c:	3fefae14 	.word	0x3fefae14
 8002710:	2000004c 	.word	0x2000004c
 8002714:	2000003c 	.word	0x2000003c
 8002718:	080077f8 	.word	0x080077f8
 800271c:	20000418 	.word	0x20000418
 8002720:	2000041c 	.word	0x2000041c
 8002724:	20000420 	.word	0x20000420
 8002728:	20000424 	.word	0x20000424
 800272c:	08007820 	.word	0x08007820
 8002730:	08007800 	.word	0x08007800
 8002734:	08007804 	.word	0x08007804
 8002738:	3f7d70a4 	.word	0x3f7d70a4
    } else if (m1_output < -PWM_MAX) {
 800273c:	69f8      	ldr	r0, [r7, #28]
 800273e:	f7fd fecf 	bl	80004e0 <__aeabi_f2d>
 8002742:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002a08 <updateMotors+0x5a0>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fe f994 	bl	8000a74 <__aeabi_dcmplt>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d02e      	beq.n	80027b0 <updateMotors+0x348>
        m1_int -= (m1_output + PWM_MAX) / Ki_Vel;
 8002752:	4baf      	ldr	r3, [pc, #700]	@ (8002a10 <updateMotors+0x5a8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fd fec2 	bl	80004e0 <__aeabi_f2d>
 800275c:	4604      	mov	r4, r0
 800275e:	460d      	mov	r5, r1
 8002760:	69f8      	ldr	r0, [r7, #28]
 8002762:	f7fd febd 	bl	80004e0 <__aeabi_f2d>
 8002766:	a3a6      	add	r3, pc, #664	@ (adr r3, 8002a00 <updateMotors+0x598>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fd fd5a 	bl	8000224 <__adddf3>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4690      	mov	r8, r2
 8002776:	4699      	mov	r9, r3
 8002778:	4ba6      	ldr	r3, [pc, #664]	@ (8002a14 <updateMotors+0x5ac>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd feaf 	bl	80004e0 <__aeabi_f2d>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4640      	mov	r0, r8
 8002788:	4649      	mov	r1, r9
 800278a:	f7fe f82b 	bl	80007e4 <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4620      	mov	r0, r4
 8002794:	4629      	mov	r1, r5
 8002796:	f7fd fd43 	bl	8000220 <__aeabi_dsub>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7fe f98f 	bl	8000ac4 <__aeabi_d2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a99      	ldr	r2, [pc, #612]	@ (8002a10 <updateMotors+0x5a8>)
 80027aa:	6013      	str	r3, [r2, #0]
        m1_output = -PWM_MAX;
 80027ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002a18 <updateMotors+0x5b0>)
 80027ae:	61fb      	str	r3, [r7, #28]
    }

    if (m2_output > PWM_MAX) {
 80027b0:	69b8      	ldr	r0, [r7, #24]
 80027b2:	f7fd fe95 	bl	80004e0 <__aeabi_f2d>
 80027b6:	a392      	add	r3, pc, #584	@ (adr r3, 8002a00 <updateMotors+0x598>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fe f978 	bl	8000ab0 <__aeabi_dcmpgt>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d02f      	beq.n	8002826 <updateMotors+0x3be>
        m2_int -= (m2_output - PWM_MAX) / Ki_Vel;
 80027c6:	4b95      	ldr	r3, [pc, #596]	@ (8002a1c <updateMotors+0x5b4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fe88 	bl	80004e0 <__aeabi_f2d>
 80027d0:	4604      	mov	r4, r0
 80027d2:	460d      	mov	r5, r1
 80027d4:	69b8      	ldr	r0, [r7, #24]
 80027d6:	f7fd fe83 	bl	80004e0 <__aeabi_f2d>
 80027da:	a389      	add	r3, pc, #548	@ (adr r3, 8002a00 <updateMotors+0x598>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd fd1e 	bl	8000220 <__aeabi_dsub>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4690      	mov	r8, r2
 80027ea:	4699      	mov	r9, r3
 80027ec:	4b89      	ldr	r3, [pc, #548]	@ (8002a14 <updateMotors+0x5ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fe75 	bl	80004e0 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f7fd fff1 	bl	80007e4 <__aeabi_ddiv>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fd09 	bl	8000220 <__aeabi_dsub>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f955 	bl	8000ac4 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a1c <updateMotors+0x5b4>)
 800281e:	6013      	str	r3, [r2, #0]
        m2_output = PWM_MAX;
 8002820:	4b7f      	ldr	r3, [pc, #508]	@ (8002a20 <updateMotors+0x5b8>)
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	e039      	b.n	800289a <updateMotors+0x432>
    } else if (m2_output < -PWM_MAX) {
 8002826:	69b8      	ldr	r0, [r7, #24]
 8002828:	f7fd fe5a 	bl	80004e0 <__aeabi_f2d>
 800282c:	a376      	add	r3, pc, #472	@ (adr r3, 8002a08 <updateMotors+0x5a0>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fe f91f 	bl	8000a74 <__aeabi_dcmplt>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02e      	beq.n	800289a <updateMotors+0x432>
        m2_int -= (m2_output + PWM_MAX) / Ki_Vel;
 800283c:	4b77      	ldr	r3, [pc, #476]	@ (8002a1c <updateMotors+0x5b4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fe4d 	bl	80004e0 <__aeabi_f2d>
 8002846:	4604      	mov	r4, r0
 8002848:	460d      	mov	r5, r1
 800284a:	69b8      	ldr	r0, [r7, #24]
 800284c:	f7fd fe48 	bl	80004e0 <__aeabi_f2d>
 8002850:	a36b      	add	r3, pc, #428	@ (adr r3, 8002a00 <updateMotors+0x598>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fce5 	bl	8000224 <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4690      	mov	r8, r2
 8002860:	4699      	mov	r9, r3
 8002862:	4b6c      	ldr	r3, [pc, #432]	@ (8002a14 <updateMotors+0x5ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe3a 	bl	80004e0 <__aeabi_f2d>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4640      	mov	r0, r8
 8002872:	4649      	mov	r1, r9
 8002874:	f7fd ffb6 	bl	80007e4 <__aeabi_ddiv>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4620      	mov	r0, r4
 800287e:	4629      	mov	r1, r5
 8002880:	f7fd fcce 	bl	8000220 <__aeabi_dsub>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	f7fe f91a 	bl	8000ac4 <__aeabi_d2f>
 8002890:	4603      	mov	r3, r0
 8002892:	4a62      	ldr	r2, [pc, #392]	@ (8002a1c <updateMotors+0x5b4>)
 8002894:	6013      	str	r3, [r2, #0]
        m2_output = -PWM_MAX;
 8002896:	4b60      	ldr	r3, [pc, #384]	@ (8002a18 <updateMotors+0x5b0>)
 8002898:	61bb      	str	r3, [r7, #24]
    }

    if (m3_output > PWM_MAX) {
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f7fd fe20 	bl	80004e0 <__aeabi_f2d>
 80028a0:	a357      	add	r3, pc, #348	@ (adr r3, 8002a00 <updateMotors+0x598>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fe f903 	bl	8000ab0 <__aeabi_dcmpgt>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d02f      	beq.n	8002910 <updateMotors+0x4a8>
        m3_int -= (m3_output - PWM_MAX) / Ki_Vel;
 80028b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a24 <updateMotors+0x5bc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fe13 	bl	80004e0 <__aeabi_f2d>
 80028ba:	4604      	mov	r4, r0
 80028bc:	460d      	mov	r5, r1
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7fd fe0e 	bl	80004e0 <__aeabi_f2d>
 80028c4:	a34e      	add	r3, pc, #312	@ (adr r3, 8002a00 <updateMotors+0x598>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f7fd fca9 	bl	8000220 <__aeabi_dsub>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4690      	mov	r8, r2
 80028d4:	4699      	mov	r9, r3
 80028d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a14 <updateMotors+0x5ac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fd fe00 	bl	80004e0 <__aeabi_f2d>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4640      	mov	r0, r8
 80028e6:	4649      	mov	r1, r9
 80028e8:	f7fd ff7c 	bl	80007e4 <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fd fc94 	bl	8000220 <__aeabi_dsub>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fe f8e0 	bl	8000ac4 <__aeabi_d2f>
 8002904:	4603      	mov	r3, r0
 8002906:	4a47      	ldr	r2, [pc, #284]	@ (8002a24 <updateMotors+0x5bc>)
 8002908:	6013      	str	r3, [r2, #0]
        m3_output = PWM_MAX;
 800290a:	4b45      	ldr	r3, [pc, #276]	@ (8002a20 <updateMotors+0x5b8>)
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e039      	b.n	8002984 <updateMotors+0x51c>
    } else if (m3_output < -PWM_MAX) {
 8002910:	6978      	ldr	r0, [r7, #20]
 8002912:	f7fd fde5 	bl	80004e0 <__aeabi_f2d>
 8002916:	a33c      	add	r3, pc, #240	@ (adr r3, 8002a08 <updateMotors+0x5a0>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fe f8aa 	bl	8000a74 <__aeabi_dcmplt>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02e      	beq.n	8002984 <updateMotors+0x51c>
        m3_int -= (m3_output + PWM_MAX) / Ki_Vel;
 8002926:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <updateMotors+0x5bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fdd8 	bl	80004e0 <__aeabi_f2d>
 8002930:	4604      	mov	r4, r0
 8002932:	460d      	mov	r5, r1
 8002934:	6978      	ldr	r0, [r7, #20]
 8002936:	f7fd fdd3 	bl	80004e0 <__aeabi_f2d>
 800293a:	a331      	add	r3, pc, #196	@ (adr r3, 8002a00 <updateMotors+0x598>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f7fd fc70 	bl	8000224 <__adddf3>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4690      	mov	r8, r2
 800294a:	4699      	mov	r9, r3
 800294c:	4b31      	ldr	r3, [pc, #196]	@ (8002a14 <updateMotors+0x5ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fdc5 	bl	80004e0 <__aeabi_f2d>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4640      	mov	r0, r8
 800295c:	4649      	mov	r1, r9
 800295e:	f7fd ff41 	bl	80007e4 <__aeabi_ddiv>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4620      	mov	r0, r4
 8002968:	4629      	mov	r1, r5
 800296a:	f7fd fc59 	bl	8000220 <__aeabi_dsub>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	f7fe f8a5 	bl	8000ac4 <__aeabi_d2f>
 800297a:	4603      	mov	r3, r0
 800297c:	4a29      	ldr	r2, [pc, #164]	@ (8002a24 <updateMotors+0x5bc>)
 800297e:	6013      	str	r3, [r2, #0]
        m3_output = -PWM_MAX;
 8002980:	4b25      	ldr	r3, [pc, #148]	@ (8002a18 <updateMotors+0x5b0>)
 8002982:	617b      	str	r3, [r7, #20]
    }

    if (m4_output > PWM_MAX) {
 8002984:	6938      	ldr	r0, [r7, #16]
 8002986:	f7fd fdab 	bl	80004e0 <__aeabi_f2d>
 800298a:	a31d      	add	r3, pc, #116	@ (adr r3, 8002a00 <updateMotors+0x598>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fe f88e 	bl	8000ab0 <__aeabi_dcmpgt>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d048      	beq.n	8002a2c <updateMotors+0x5c4>
        m4_int -= (m4_output - PWM_MAX) / Ki_Vel;
 800299a:	4b23      	ldr	r3, [pc, #140]	@ (8002a28 <updateMotors+0x5c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fd9e 	bl	80004e0 <__aeabi_f2d>
 80029a4:	4604      	mov	r4, r0
 80029a6:	460d      	mov	r5, r1
 80029a8:	6938      	ldr	r0, [r7, #16]
 80029aa:	f7fd fd99 	bl	80004e0 <__aeabi_f2d>
 80029ae:	a314      	add	r3, pc, #80	@ (adr r3, 8002a00 <updateMotors+0x598>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fc34 	bl	8000220 <__aeabi_dsub>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4690      	mov	r8, r2
 80029be:	4699      	mov	r9, r3
 80029c0:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <updateMotors+0x5ac>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fd8b 	bl	80004e0 <__aeabi_f2d>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4640      	mov	r0, r8
 80029d0:	4649      	mov	r1, r9
 80029d2:	f7fd ff07 	bl	80007e4 <__aeabi_ddiv>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	f7fd fc1f 	bl	8000220 <__aeabi_dsub>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f7fe f86b 	bl	8000ac4 <__aeabi_d2f>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <updateMotors+0x5c0>)
 80029f2:	6013      	str	r3, [r2, #0]
        m4_output = PWM_MAX;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <updateMotors+0x5b8>)
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	e052      	b.n	8002aa0 <updateMotors+0x638>
 80029fa:	bf00      	nop
 80029fc:	f3af 8000 	nop.w
 8002a00:	7ae147ae 	.word	0x7ae147ae
 8002a04:	3fefae14 	.word	0x3fefae14
 8002a08:	7ae147ae 	.word	0x7ae147ae
 8002a0c:	bfefae14 	.word	0xbfefae14
 8002a10:	20000418 	.word	0x20000418
 8002a14:	08007804 	.word	0x08007804
 8002a18:	bf7d70a4 	.word	0xbf7d70a4
 8002a1c:	2000041c 	.word	0x2000041c
 8002a20:	3f7d70a4 	.word	0x3f7d70a4
 8002a24:	20000420 	.word	0x20000420
 8002a28:	20000424 	.word	0x20000424
    } else if (m4_output < -PWM_MAX) {
 8002a2c:	6938      	ldr	r0, [r7, #16]
 8002a2e:	f7fd fd57 	bl	80004e0 <__aeabi_f2d>
 8002a32:	a32c      	add	r3, pc, #176	@ (adr r3, 8002ae4 <updateMotors+0x67c>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f7fe f81c 	bl	8000a74 <__aeabi_dcmplt>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d02e      	beq.n	8002aa0 <updateMotors+0x638>
        m4_int -= (m4_output + PWM_MAX) / Ki_Vel;
 8002a42:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <updateMotors+0x670>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd4a 	bl	80004e0 <__aeabi_f2d>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	460d      	mov	r5, r1
 8002a50:	6938      	ldr	r0, [r7, #16]
 8002a52:	f7fd fd45 	bl	80004e0 <__aeabi_f2d>
 8002a56:	a31e      	add	r3, pc, #120	@ (adr r3, 8002ad0 <updateMotors+0x668>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fbe2 	bl	8000224 <__adddf3>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4690      	mov	r8, r2
 8002a66:	4699      	mov	r9, r3
 8002a68:	4b1c      	ldr	r3, [pc, #112]	@ (8002adc <updateMotors+0x674>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd37 	bl	80004e0 <__aeabi_f2d>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4640      	mov	r0, r8
 8002a78:	4649      	mov	r1, r9
 8002a7a:	f7fd feb3 	bl	80007e4 <__aeabi_ddiv>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4620      	mov	r0, r4
 8002a84:	4629      	mov	r1, r5
 8002a86:	f7fd fbcb 	bl	8000220 <__aeabi_dsub>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fe f817 	bl	8000ac4 <__aeabi_d2f>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad8 <updateMotors+0x670>)
 8002a9a:	6013      	str	r3, [r2, #0]
        m4_output = -PWM_MAX;
 8002a9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <updateMotors+0x678>)
 8002a9e:	613b      	str	r3, [r7, #16]
    }


    setForwardLeftMotorPWM(m1_output);
 8002aa0:	ed97 0a07 	vldr	s0, [r7, #28]
 8002aa4:	f7ff fbd8 	bl	8002258 <setForwardLeftMotorPWM>
    setForwardRightMotorPWM(m4_output);
 8002aa8:	ed97 0a04 	vldr	s0, [r7, #16]
 8002aac:	f7ff fc16 	bl	80022dc <setForwardRightMotorPWM>
    setRearLeftMotorPWM(m2_output);
 8002ab0:	ed97 0a06 	vldr	s0, [r7, #24]
 8002ab4:	f7ff fc54 	bl	8002360 <setRearLeftMotorPWM>
    setRearRightMotorPWM(m3_output);
 8002ab8:	ed97 0a05 	vldr	s0, [r7, #20]
 8002abc:	f7ff fc92 	bl	80023e4 <setRearRightMotorPWM>
}
 8002ac0:	bf00      	nop
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002aca:	bf00      	nop
 8002acc:	f3af 8000 	nop.w
 8002ad0:	7ae147ae 	.word	0x7ae147ae
 8002ad4:	3fefae14 	.word	0x3fefae14
 8002ad8:	20000424 	.word	0x20000424
 8002adc:	08007804 	.word	0x08007804
 8002ae0:	bf7d70a4 	.word	0xbf7d70a4
 8002ae4:	7ae147ae 	.word	0x7ae147ae
 8002ae8:	bfefae14 	.word	0xbfefae14

08002aec <setTargetVelocities>:
    m3_int = 0;
    m4_int = 0;
}


void setTargetVelocities(float m1_target, float m2_target, float m3_target, float m4_target) {
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	ed87 0a03 	vstr	s0, [r7, #12]
 8002af6:	edc7 0a02 	vstr	s1, [r7, #8]
 8002afa:	ed87 1a01 	vstr	s2, [r7, #4]
 8002afe:	edc7 1a00 	vstr	s3, [r7]
	target_wheel_W.front_left = m1_target;
 8002b02:	4a09      	ldr	r2, [pc, #36]	@ (8002b28 <setTargetVelocities+0x3c>)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6013      	str	r3, [r2, #0]
	target_wheel_W.rear_left = m2_target;
 8002b08:	4a07      	ldr	r2, [pc, #28]	@ (8002b28 <setTargetVelocities+0x3c>)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6053      	str	r3, [r2, #4]
	target_wheel_W.rear_right = m3_target;
 8002b0e:	4a06      	ldr	r2, [pc, #24]	@ (8002b28 <setTargetVelocities+0x3c>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6093      	str	r3, [r2, #8]
	target_wheel_W.front_right = m4_target;
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <setTargetVelocities+0x3c>)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	60d3      	str	r3, [r2, #12]

}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	2000004c 	.word	0x2000004c

08002b2c <Profile_Reset>:
#include "bluetoothDebug.h"

extern UART_HandleTypeDef huart2;

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6178      	str	r0, [r7, #20]
 8002b66:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b6a:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b6e:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b72:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 8002b76:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b82:	d502      	bpl.n	8002b8a <Profile_Start+0x2c>
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	e000      	b.n	8002b8c <Profile_Start+0x2e>
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 8002b90:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	d505      	bpl.n	8002baa <Profile_Start+0x4c>
 8002b9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ba2:	eef1 7a67 	vneg.f32	s15, s15
 8002ba6:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 8002baa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bba:	d503      	bpl.n	8002bc4 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	701a      	strb	r2, [r3, #0]
        return;
 8002bc2:	e052      	b.n	8002c6a <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 8002bc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	dd01      	ble.n	8002bda <Profile_Start+0x7c>
        final_speed = top_speed;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfa:	eef0 7ae7 	vabs.f32	s15, s15
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c16:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c1a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 8002c28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c2c:	eef0 7ae7 	vabs.f32	s15, s15
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	db07      	blt.n	8002c5a <Profile_Start+0xfc>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c58:	e001      	b.n	8002c5e <Profile_Start+0x100>
 8002c5a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
}
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ca4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ca8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <Profile_Update>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80b5 	beq.w	8002e42 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * CONTROLLER_LOOP_INTERVAL;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cde:	4b5b      	ldr	r3, [pc, #364]	@ (8002e4c <Profile_Update+0x188>)
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce8:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	edd3 7a08 	vldr	s15, [r3, #32]
 8002cf2:	eeb0 7ae7 	vabs.f32	s14, s15
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cfc:	eef0 7ae7 	vabs.f32	s15, s15
 8002d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d04:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d128      	bne.n	8002d64 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffae 	bl	8002c74 <Profile_GetBrakingDistance>
 8002d18:	eeb0 7a40 	vmov.f32	s14, s0
 8002d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	d51c      	bpl.n	8002d64 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3e:	d10b      	bne.n	8002d58 <Profile_Update+0x94>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d56:	e002      	b.n	8002d5e <Profile_Update+0x9a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d78:	d519      	bpl.n	8002dae <Profile_Update+0xea>
        profile->speed += delta_v;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	dd28      	ble.n	8002df6 <Profile_Update+0x132>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	e023      	b.n	8002df6 <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	dd18      	ble.n	8002df6 <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	d503      	bpl.n	8002df6 <Profile_Update+0x132>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * CONTROLLER_LOOP_INTERVAL;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <Profile_Update+0x188>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d011      	beq.n	8002e44 <Profile_Update+0x180>
 8002e20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e24:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	d508      	bpl.n	8002e44 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2203      	movs	r2, #3
 8002e36:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
 8002e40:	e000      	b.n	8002e44 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002e42:	bf00      	nop
    }
    //UART_Transmit_Float(&huart2, ">V", profile->speed, 2);

}
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	080077fc 	.word	0x080077fc

08002e50 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6178      	str	r0, [r7, #20]
 8002e58:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e5c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e60:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e64:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 8002e68:	edd7 1a01 	vldr	s3, [r7, #4]
 8002e6c:	ed97 1a02 	vldr	s2, [r7, #8]
 8002e70:	edd7 0a03 	vldr	s1, [r7, #12]
 8002e74:	ed97 0a04 	vldr	s0, [r7, #16]
 8002e78:	6978      	ldr	r0, [r7, #20]
 8002e7a:	f7ff fe70 	bl	8002b5e <Profile_Start>
    Profile_WaitUntilFinished(profile);
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f000 f804 	bl	8002e8c <Profile_WaitUntilFinished>
}
 8002e84:	bf00      	nop
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <Profile_WaitUntilFinished>:
// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 8002e94:	e002      	b.n	8002e9c <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 8002e96:	2002      	movs	r0, #2
 8002e98:	f000 fc6e 	bl	8003778 <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d1f7      	bne.n	8002e96 <Profile_WaitUntilFinished+0xa>
    }
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <Profile_GetSpeed>:

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	ee07 3a90 	vmov	s15, r3
}
 8002ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <HAL_MspInit+0x4c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	4a0f      	ldr	r2, [pc, #60]	@ (8002f1c <HAL_MspInit+0x4c>)
 8002ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <HAL_MspInit+0x4c>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_MspInit+0x4c>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	4a08      	ldr	r2, [pc, #32]	@ (8002f1c <HAL_MspInit+0x4c>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_MspInit+0x4c>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	@ 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ffc <HAL_ADC_MspInit+0xdc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d157      	bne.n	8002ff2 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	4b2e      	ldr	r3, [pc, #184]	@ (8003000 <HAL_ADC_MspInit+0xe0>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003000 <HAL_ADC_MspInit+0xe0>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f52:	4b2b      	ldr	r3, [pc, #172]	@ (8003000 <HAL_ADC_MspInit+0xe0>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <HAL_ADC_MspInit+0xe0>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	4a26      	ldr	r2, [pc, #152]	@ (8003000 <HAL_ADC_MspInit+0xe0>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6e:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_ADC_MspInit+0xe0>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = M1_CS_Pin|M2_CS_Pin|M3_CS_Pin|M4_CS_Pin;
 8002f7a:	23f0      	movs	r3, #240	@ 0xf0
 8002f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	481d      	ldr	r0, [pc, #116]	@ (8003004 <HAL_ADC_MspInit+0xe4>)
 8002f8e:	f001 fb17 	bl	80045c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002f92:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002f94:	4a1d      	ldr	r2, [pc, #116]	@ (800300c <HAL_ADC_MspInit+0xec>)
 8002f96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002f98:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa4:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002faa:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fb2:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fba:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fc2:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fca:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fd6:	480c      	ldr	r0, [pc, #48]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fd8:	f000 ff76 	bl	8003ec8 <HAL_DMA_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002fe2:	f7ff f8ff 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a07      	ldr	r2, [pc, #28]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fea:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fec:	4a06      	ldr	r2, [pc, #24]	@ (8003008 <HAL_ADC_MspInit+0xe8>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ff2:	bf00      	nop
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40012000 	.word	0x40012000
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000
 8003008:	200000bc 	.word	0x200000bc
 800300c:	40026410 	.word	0x40026410

08003010 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0e      	ldr	r2, [pc, #56]	@ (8003058 <HAL_TIM_PWM_MspInit+0x48>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d115      	bne.n	800304e <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <HAL_TIM_PWM_MspInit+0x4c>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4a0c      	ldr	r2, [pc, #48]	@ (800305c <HAL_TIM_PWM_MspInit+0x4c>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_TIM_PWM_MspInit+0x4c>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	2019      	movs	r0, #25
 8003044:	f000 ff09 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003048:	2019      	movs	r0, #25
 800304a:	f000 ff22 	bl	8003e92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40023800 	.word	0x40023800

08003060 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b090      	sub	sp, #64	@ 0x40
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003080:	d153      	bne.n	800312a <HAL_TIM_Encoder_MspInit+0xca>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003086:	4b81      	ldr	r3, [pc, #516]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	4a80      	ldr	r2, [pc, #512]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6413      	str	r3, [r2, #64]	@ 0x40
 8003092:	4b7e      	ldr	r3, [pc, #504]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a2:	4b7a      	ldr	r3, [pc, #488]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	4a79      	ldr	r2, [pc, #484]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ae:	4b77      	ldr	r3, [pc, #476]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
 80030be:	4b73      	ldr	r3, [pc, #460]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	4a72      	ldr	r2, [pc, #456]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ca:	4b70      	ldr	r3, [pc, #448]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1_EncoderCH1_Pin;
 80030d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030e8:	2301      	movs	r3, #1
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH1_GPIO_Port, &GPIO_InitStruct);
 80030ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030f0:	4619      	mov	r1, r3
 80030f2:	4867      	ldr	r0, [pc, #412]	@ (8003290 <HAL_TIM_Encoder_MspInit+0x230>)
 80030f4:	f001 fa64 	bl	80045c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_EncoderCH2_Pin;
 80030f8:	2308      	movs	r3, #8
 80030fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003108:	2301      	movs	r3, #1
 800310a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH2_GPIO_Port, &GPIO_InitStruct);
 800310c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003110:	4619      	mov	r1, r3
 8003112:	4860      	ldr	r0, [pc, #384]	@ (8003294 <HAL_TIM_Encoder_MspInit+0x234>)
 8003114:	f001 fa54 	bl	80045c0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2100      	movs	r1, #0
 800311c:	201c      	movs	r0, #28
 800311e:	f000 fe9c 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003122:	201c      	movs	r0, #28
 8003124:	f000 feb5 	bl	8003e92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003128:	e0ac      	b.n	8003284 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5a      	ldr	r2, [pc, #360]	@ (8003298 <HAL_TIM_Encoder_MspInit+0x238>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d134      	bne.n	800319e <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	4b54      	ldr	r3, [pc, #336]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	4a53      	ldr	r2, [pc, #332]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 800313e:	f043 0302 	orr.w	r3, r3, #2
 8003142:	6413      	str	r3, [r2, #64]	@ 0x40
 8003144:	4b51      	ldr	r3, [pc, #324]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	4b4d      	ldr	r3, [pc, #308]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	4a4c      	ldr	r2, [pc, #304]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003160:	4b4a      	ldr	r3, [pc, #296]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2_EncoderCH1_Pin|M2_EncoderCH2_Pin;
 800316c:	23c0      	movs	r3, #192	@ 0xc0
 800316e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800317c:	2302      	movs	r3, #2
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003184:	4619      	mov	r1, r3
 8003186:	4845      	ldr	r0, [pc, #276]	@ (800329c <HAL_TIM_Encoder_MspInit+0x23c>)
 8003188:	f001 fa1a 	bl	80045c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2100      	movs	r1, #0
 8003190:	201d      	movs	r0, #29
 8003192:	f000 fe62 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003196:	201d      	movs	r0, #29
 8003198:	f000 fe7b 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 800319c:	e072      	b.n	8003284 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a3f      	ldr	r2, [pc, #252]	@ (80032a0 <HAL_TIM_Encoder_MspInit+0x240>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d134      	bne.n	8003212 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	4b37      	ldr	r3, [pc, #220]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	4a36      	ldr	r2, [pc, #216]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b8:	4b34      	ldr	r3, [pc, #208]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	4b30      	ldr	r3, [pc, #192]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80031ce:	f043 0302 	orr.w	r3, r3, #2
 80031d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d4:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_EncoderCH1_Pin|M3_EncoderCH2_Pin;
 80031e0:	23c0      	movs	r3, #192	@ 0xc0
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031f0:	2302      	movs	r3, #2
 80031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031f8:	4619      	mov	r1, r3
 80031fa:	4826      	ldr	r0, [pc, #152]	@ (8003294 <HAL_TIM_Encoder_MspInit+0x234>)
 80031fc:	f001 f9e0 	bl	80045c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003200:	2200      	movs	r2, #0
 8003202:	2100      	movs	r1, #0
 8003204:	201e      	movs	r0, #30
 8003206:	f000 fe28 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800320a:	201e      	movs	r0, #30
 800320c:	f000 fe41 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 8003210:	e038      	b.n	8003284 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a23      	ldr	r2, [pc, #140]	@ (80032a4 <HAL_TIM_Encoder_MspInit+0x244>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d133      	bne.n	8003284 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	4a19      	ldr	r2, [pc, #100]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 8003226:	f043 0308 	orr.w	r3, r3, #8
 800322a:	6413      	str	r3, [r2, #64]	@ 0x40
 800322c:	4b17      	ldr	r3, [pc, #92]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	4b13      	ldr	r3, [pc, #76]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	4a12      	ldr	r2, [pc, #72]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6313      	str	r3, [r2, #48]	@ 0x30
 8003248:	4b10      	ldr	r3, [pc, #64]	@ (800328c <HAL_TIM_Encoder_MspInit+0x22c>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_EncoderCH1_Pin|M4_EncoderCH2_Pin;
 8003254:	2303      	movs	r3, #3
 8003256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	2302      	movs	r3, #2
 800325a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003260:	2300      	movs	r3, #0
 8003262:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003264:	2302      	movs	r3, #2
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800326c:	4619      	mov	r1, r3
 800326e:	4808      	ldr	r0, [pc, #32]	@ (8003290 <HAL_TIM_Encoder_MspInit+0x230>)
 8003270:	f001 f9a6 	bl	80045c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	2032      	movs	r0, #50	@ 0x32
 800327a:	f000 fdee 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800327e:	2032      	movs	r0, #50	@ 0x32
 8003280:	f000 fe07 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 8003284:	bf00      	nop
 8003286:	3740      	adds	r7, #64	@ 0x40
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	40020000 	.word	0x40020000
 8003294:	40020400 	.word	0x40020400
 8003298:	40000400 	.word	0x40000400
 800329c:	40020800 	.word	0x40020800
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00

080032a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <HAL_TIM_Base_MspInit+0x80>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d116      	bne.n	80032e8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	4a1a      	ldr	r2, [pc, #104]	@ (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ca:	4b18      	ldr	r3, [pc, #96]	@ (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	202c      	movs	r0, #44	@ 0x2c
 80032dc:	f000 fdbd 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80032e0:	202c      	movs	r0, #44	@ 0x2c
 80032e2:	f000 fdd6 	bl	8003e92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 80032e6:	e01a      	b.n	800331e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a10      	ldr	r2, [pc, #64]	@ (8003330 <HAL_TIM_Base_MspInit+0x88>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d115      	bne.n	800331e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	4a0c      	ldr	r2, [pc, #48]	@ (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003300:	6413      	str	r3, [r2, #64]	@ 0x40
 8003302:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <HAL_TIM_Base_MspInit+0x84>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	202d      	movs	r0, #45	@ 0x2d
 8003314:	f000 fda1 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003318:	202d      	movs	r0, #45	@ 0x2d
 800331a:	f000 fdba 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40001c00 	.word	0x40001c00
 800332c:	40023800 	.word	0x40023800
 8003330:	40002000 	.word	0x40002000

08003334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a12      	ldr	r2, [pc, #72]	@ (800339c <HAL_TIM_MspPostInit+0x68>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d11e      	bne.n	8003394 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <HAL_TIM_MspPostInit+0x6c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	4a10      	ldr	r2, [pc, #64]	@ (80033a0 <HAL_TIM_MspPostInit+0x6c>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6313      	str	r3, [r2, #48]	@ 0x30
 8003366:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <HAL_TIM_MspPostInit+0x6c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8003372:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003384:	2301      	movs	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	4619      	mov	r1, r3
 800338e:	4805      	ldr	r0, [pc, #20]	@ (80033a4 <HAL_TIM_MspPostInit+0x70>)
 8003390:	f001 f916 	bl	80045c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003394:	bf00      	nop
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40010000 	.word	0x40010000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020000 	.word	0x40020000

080033a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08c      	sub	sp, #48	@ 0x30
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 031c 	add.w	r3, r7, #28
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a45      	ldr	r2, [pc, #276]	@ (80034dc <HAL_UART_MspInit+0x134>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d12c      	bne.n	8003424 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	4b44      	ldr	r3, [pc, #272]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	4a43      	ldr	r2, [pc, #268]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033da:	4b41      	ldr	r3, [pc, #260]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	4b3d      	ldr	r3, [pc, #244]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	4a3c      	ldr	r2, [pc, #240]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f6:	4b3a      	ldr	r3, [pc, #232]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003402:	230c      	movs	r3, #12
 8003404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340e:	2303      	movs	r3, #3
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003412:	2307      	movs	r3, #7
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	4619      	mov	r1, r3
 800341c:	4831      	ldr	r0, [pc, #196]	@ (80034e4 <HAL_UART_MspInit+0x13c>)
 800341e:	f001 f8cf 	bl	80045c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003422:	e057      	b.n	80034d4 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2f      	ldr	r2, [pc, #188]	@ (80034e8 <HAL_UART_MspInit+0x140>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d152      	bne.n	80034d4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	4a2a      	ldr	r2, [pc, #168]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800343c:	6413      	str	r3, [r2, #64]	@ 0x40
 800343e:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	4a23      	ldr	r2, [pc, #140]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6313      	str	r3, [r2, #48]	@ 0x30
 800345a:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	4b1d      	ldr	r3, [pc, #116]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	4a1c      	ldr	r2, [pc, #112]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	6313      	str	r3, [r2, #48]	@ 0x30
 8003476:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <HAL_UART_MspInit+0x138>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003482:	2320      	movs	r3, #32
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2303      	movs	r3, #3
 8003490:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003492:	2307      	movs	r3, #7
 8003494:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	4619      	mov	r1, r3
 800349c:	4813      	ldr	r0, [pc, #76]	@ (80034ec <HAL_UART_MspInit+0x144>)
 800349e:	f001 f88f 	bl	80045c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034b4:	2307      	movs	r3, #7
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	4619      	mov	r1, r3
 80034be:	480c      	ldr	r0, [pc, #48]	@ (80034f0 <HAL_UART_MspInit+0x148>)
 80034c0:	f001 f87e 	bl	80045c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2100      	movs	r1, #0
 80034c8:	2027      	movs	r0, #39	@ 0x27
 80034ca:	f000 fcc6 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034ce:	2027      	movs	r0, #39	@ 0x27
 80034d0:	f000 fcdf 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 80034d4:	bf00      	nop
 80034d6:	3730      	adds	r7, #48	@ 0x30
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40004400 	.word	0x40004400
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40004800 	.word	0x40004800
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40020400 	.word	0x40020400

080034f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <NMI_Handler+0x4>

080034fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003500:	bf00      	nop
 8003502:	e7fd      	b.n	8003500 <HardFault_Handler+0x4>

08003504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <MemManage_Handler+0x4>

0800350c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <BusFault_Handler+0x4>

08003514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <UsageFault_Handler+0x4>

0800351c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800354a:	f000 f8f5 	bl	8003738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 800354e:	f000 f86f 	bl	8003630 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800355c:	4802      	ldr	r0, [pc, #8]	@ (8003568 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800355e:	f002 fb3b 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000011c 	.word	0x2000011c

0800356c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003570:	4802      	ldr	r0, [pc, #8]	@ (800357c <TIM2_IRQHandler+0x10>)
 8003572:	f002 fb31 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000164 	.word	0x20000164

08003580 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003584:	4802      	ldr	r0, [pc, #8]	@ (8003590 <TIM3_IRQHandler+0x10>)
 8003586:	f002 fb27 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200001ac 	.word	0x200001ac

08003594 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003598:	4802      	ldr	r0, [pc, #8]	@ (80035a4 <TIM4_IRQHandler+0x10>)
 800359a:	f002 fb1d 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001f4 	.word	0x200001f4

080035a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <USART3_IRQHandler+0x10>)
 80035ae:	f003 f951 	bl	8006854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	2000035c 	.word	0x2000035c

080035bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80035c0:	4802      	ldr	r0, [pc, #8]	@ (80035cc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80035c2:	f002 fb09 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000284 	.word	0x20000284

080035d0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80035d4:	4802      	ldr	r0, [pc, #8]	@ (80035e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80035d6:	f002 faff 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200002cc 	.word	0x200002cc

080035e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035e8:	4802      	ldr	r0, [pc, #8]	@ (80035f4 <TIM5_IRQHandler+0x10>)
 80035ea:	f002 faf5 	bl	8005bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2000023c 	.word	0x2000023c

080035f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <DMA2_Stream0_IRQHandler+0x10>)
 80035fe:	f000 fda3 	bl	8004148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200000bc 	.word	0x200000bc

0800360c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003610:	4b06      	ldr	r3, [pc, #24]	@ (800362c <SystemInit+0x20>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	4a05      	ldr	r2, [pc, #20]	@ (800362c <SystemInit+0x20>)
 8003618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800361c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <SysTickFunction>:
        // Reset encoders to prevent overflow
        resetEncodersinSystick();
    }
}

void SysTickFunction(void) {
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
        //        current_robot_velocity.vx,
        //        current_robot_velocity.vy,
        //        current_robot_velocity.wz);
    }
    */
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003644:	f7ff ffe2 	bl	800360c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003648:	480c      	ldr	r0, [pc, #48]	@ (800367c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800364a:	490d      	ldr	r1, [pc, #52]	@ (8003680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800364c:	4a0d      	ldr	r2, [pc, #52]	@ (8003684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800364e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003650:	e002      	b.n	8003658 <LoopCopyDataInit>

08003652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003656:	3304      	adds	r3, #4

08003658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800365a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800365c:	d3f9      	bcc.n	8003652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003660:	4c0a      	ldr	r4, [pc, #40]	@ (800368c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003664:	e001      	b.n	800366a <LoopFillZerobss>

08003666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003668:	3204      	adds	r2, #4

0800366a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800366a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800366c:	d3fb      	bcc.n	8003666 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800366e:	f004 f85f 	bl	8007730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003672:	f7fe f87b 	bl	800176c <main>
  bx  lr    
 8003676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800367c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003680:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003684:	08007854 	.word	0x08007854
  ldr r2, =_sbss
 8003688:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800368c:	2000042c 	.word	0x2000042c

08003690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC_IRQHandler>
	...

08003694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_Init+0x40>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0d      	ldr	r2, [pc, #52]	@ (80036d4 <HAL_Init+0x40>)
 800369e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_Init+0x40>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_Init+0x40>)
 80036aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a07      	ldr	r2, [pc, #28]	@ (80036d4 <HAL_Init+0x40>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036bc:	2003      	movs	r0, #3
 80036be:	f000 fbc1 	bl	8003e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c2:	200f      	movs	r0, #15
 80036c4:	f000 f808 	bl	80036d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c8:	f7ff fc02 	bl	8002ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023c00 	.word	0x40023c00

080036d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e0:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_InitTick+0x54>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <HAL_InitTick+0x58>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fbd9 	bl	8003eae <HAL_SYSTICK_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00e      	b.n	8003724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d80a      	bhi.n	8003722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370c:	2200      	movs	r2, #0
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f000 fba1 	bl	8003e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003718:	4a06      	ldr	r2, [pc, #24]	@ (8003734 <HAL_InitTick+0x5c>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000008 	.word	0x20000008
 8003730:	20000010 	.word	0x20000010
 8003734:	2000000c 	.word	0x2000000c

08003738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	@ (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000010 	.word	0x20000010
 800375c:	20000428 	.word	0x20000428

08003760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;
 8003764:	4b03      	ldr	r3, [pc, #12]	@ (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000428 	.word	0x20000428

08003778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff ffee 	bl	8003760 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffde 	bl	8003760 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000010 	.word	0x20000010

080037c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e033      	b.n	800383e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fb9e 	bl	8002f20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003806:	f023 0302 	bic.w	r3, r3, #2
 800380a:	f043 0202 	orr.w	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f94a 	bl	8003aac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	@ 0x40
 800382e:	e001      	b.n	8003834 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1c>
 8003860:	2302      	movs	r3, #2
 8003862:	e113      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x244>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b09      	cmp	r3, #9
 8003872:	d925      	bls.n	80038c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	3b1e      	subs	r3, #30
 800388a:	2207      	movs	r2, #7
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43da      	mvns	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	400a      	ands	r2, r1
 8003898:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68d9      	ldr	r1, [r3, #12]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4618      	mov	r0, r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4403      	add	r3, r0
 80038b2:	3b1e      	subs	r3, #30
 80038b4:	409a      	lsls	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	e022      	b.n	8003906 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6919      	ldr	r1, [r3, #16]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	2207      	movs	r2, #7
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	400a      	ands	r2, r1
 80038e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6919      	ldr	r1, [r3, #16]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4403      	add	r3, r0
 80038fc:	409a      	lsls	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b06      	cmp	r3, #6
 800390c:	d824      	bhi.n	8003958 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	3b05      	subs	r3, #5
 8003920:	221f      	movs	r2, #31
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	400a      	ands	r2, r1
 800392e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	4618      	mov	r0, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	3b05      	subs	r3, #5
 800394a:	fa00 f203 	lsl.w	r2, r0, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34
 8003956:	e04c      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	d824      	bhi.n	80039aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	3b23      	subs	r3, #35	@ 0x23
 8003972:	221f      	movs	r2, #31
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43da      	mvns	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	400a      	ands	r2, r1
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	4618      	mov	r0, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b23      	subs	r3, #35	@ 0x23
 800399c:	fa00 f203 	lsl.w	r2, r0, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80039a8:	e023      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	3b41      	subs	r3, #65	@ 0x41
 80039bc:	221f      	movs	r2, #31
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	400a      	ands	r2, r1
 80039ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4618      	mov	r0, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	3b41      	subs	r3, #65	@ 0x41
 80039e6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039f2:	4b29      	ldr	r3, [pc, #164]	@ (8003a98 <HAL_ADC_ConfigChannel+0x250>)
 80039f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a28      	ldr	r2, [pc, #160]	@ (8003a9c <HAL_ADC_ConfigChannel+0x254>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10f      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x1d8>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b12      	cmp	r3, #18
 8003a06:	d10b      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <HAL_ADC_ConfigChannel+0x254>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d12b      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x258>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0x1f4>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b11      	cmp	r3, #17
 8003a3a:	d122      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a11      	ldr	r2, [pc, #68]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x258>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d111      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a5e:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x25c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a11      	ldr	r2, [pc, #68]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x260>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	0c9a      	lsrs	r2, r3, #18
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a74:	e002      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f9      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012300 	.word	0x40012300
 8003a9c:	40012000 	.word	0x40012000
 8003aa0:	10000012 	.word	0x10000012
 8003aa4:	20000008 	.word	0x20000008
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ab4:	4b79      	ldr	r3, [pc, #484]	@ (8003c9c <ADC_Init+0x1f0>)
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	4a58      	ldr	r2, [pc, #352]	@ (8003ca0 <ADC_Init+0x1f4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6899      	ldr	r1, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	e00f      	b.n	8003baa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ba8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0202 	bic.w	r2, r2, #2
 8003bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7e1b      	ldrb	r3, [r3, #24]
 8003bc4:	005a      	lsls	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003be6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003bf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	3b01      	subs	r3, #1
 8003c04:	035a      	lsls	r2, r3, #13
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e007      	b.n	8003c20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	051a      	lsls	r2, r3, #20
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6899      	ldr	r1, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c62:	025a      	lsls	r2, r3, #9
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	029a      	lsls	r2, r3, #10
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40012300 	.word	0x40012300
 8003ca0:	0f000001 	.word	0x0f000001

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd6:	4a04      	ldr	r2, [pc, #16]	@ (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	60d3      	str	r3, [r2, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0b      	blt.n	8003d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4907      	ldr	r1, [pc, #28]	@ (8003d40 <__NVIC_EnableIRQ+0x38>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000e100 	.word	0xe000e100

08003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db0a      	blt.n	8003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	490c      	ldr	r1, [pc, #48]	@ (8003d90 <__NVIC_SetPriority+0x4c>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d6c:	e00a      	b.n	8003d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4908      	ldr	r1, [pc, #32]	@ (8003d94 <__NVIC_SetPriority+0x50>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	440b      	add	r3, r1
 8003d82:	761a      	strb	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000e100 	.word	0xe000e100
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	@ 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f1c3 0307 	rsb	r3, r3, #7
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf28      	it	cs
 8003db6:	2304      	movcs	r3, #4
 8003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d902      	bls.n	8003dc8 <NVIC_EncodePriority+0x30>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b03      	subs	r3, #3
 8003dc6:	e000      	b.n	8003dca <NVIC_EncodePriority+0x32>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	4313      	orrs	r3, r2
         );
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	@ 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e10:	d301      	bcc.n	8003e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00f      	b.n	8003e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e16:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <SysTick_Config+0x40>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1e:	210f      	movs	r1, #15
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	f7ff ff8e 	bl	8003d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <SysTick_Config+0x40>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2e:	4b04      	ldr	r3, [pc, #16]	@ (8003e40 <SysTick_Config+0x40>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000e010 	.word	0xe000e010

08003e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff29 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e6c:	f7ff ff3e 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	6978      	ldr	r0, [r7, #20]
 8003e78:	f7ff ff8e 	bl	8003d98 <NVIC_EncodePriority>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff5d 	bl	8003d44 <__NVIC_SetPriority>
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff31 	bl	8003d08 <__NVIC_EnableIRQ>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ffa2 	bl	8003e00 <SysTick_Config>
 8003ebc:	4603      	mov	r3, r0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7ff fc44 	bl	8003760 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e099      	b.n	8004018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f04:	e00f      	b.n	8003f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f06:	f7ff fc2b 	bl	8003760 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	d908      	bls.n	8003f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e078      	b.n	8004018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e8      	bne.n	8003f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4b38      	ldr	r3, [pc, #224]	@ (8004020 <HAL_DMA_Init+0x158>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d107      	bne.n	8003f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d117      	bne.n	8003fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00e      	beq.n	8003fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa7b 	bl	80044c8 <DMA_CheckFifoParam>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2240      	movs	r2, #64	@ 0x40
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e016      	b.n	8004018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa32 	bl	800445c <DMA_CalcBaseAndBitshift>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	223f      	movs	r2, #63	@ 0x3f
 8004002:	409a      	lsls	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	f010803f 	.word	0xf010803f

08004024 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004032:	f7ff fb95 	bl	8003760 <HAL_GetTick>
 8004036:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d008      	beq.n	8004056 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e052      	b.n	80040fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0216 	bic.w	r2, r2, #22
 8004064:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004074:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <HAL_DMA_Abort+0x62>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0208 	bic.w	r2, r2, #8
 8004094:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040a6:	e013      	b.n	80040d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040a8:	f7ff fb5a 	bl	8003760 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d90c      	bls.n	80040d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2203      	movs	r2, #3
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e015      	b.n	80040fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e4      	bne.n	80040a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e2:	223f      	movs	r2, #63	@ 0x3f
 80040e4:	409a      	lsls	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d004      	beq.n	8004122 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2280      	movs	r2, #128	@ 0x80
 800411c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e00c      	b.n	800413c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2205      	movs	r2, #5
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004154:	4b8e      	ldr	r3, [pc, #568]	@ (8004390 <HAL_DMA_IRQHandler+0x248>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a8e      	ldr	r2, [pc, #568]	@ (8004394 <HAL_DMA_IRQHandler+0x24c>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	0a9b      	lsrs	r3, r3, #10
 8004160:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004166:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	2208      	movs	r2, #8
 8004174:	409a      	lsls	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01a      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d013      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0204 	bic.w	r2, r2, #4
 800419a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a0:	2208      	movs	r2, #8
 80041a2:	409a      	lsls	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b8:	2201      	movs	r2, #1
 80041ba:	409a      	lsls	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d012      	beq.n	80041ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d6:	2201      	movs	r2, #1
 80041d8:	409a      	lsls	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e2:	f043 0202 	orr.w	r2, r3, #2
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ee:	2204      	movs	r2, #4
 80041f0:	409a      	lsls	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d012      	beq.n	8004220 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420c:	2204      	movs	r2, #4
 800420e:	409a      	lsls	r2, r3
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004218:	f043 0204 	orr.w	r2, r3, #4
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	2210      	movs	r2, #16
 8004226:	409a      	lsls	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d043      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d03c      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	2210      	movs	r2, #16
 8004244:	409a      	lsls	r2, r3
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d018      	beq.n	800428a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d024      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
 8004276:	e01f      	b.n	80042b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
 8004288:	e016      	b.n	80042b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0208 	bic.w	r2, r2, #8
 80042a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042bc:	2220      	movs	r2, #32
 80042be:	409a      	lsls	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 808f 	beq.w	80043e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8087 	beq.w	80043e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	2220      	movs	r2, #32
 80042e0:	409a      	lsls	r2, r3
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d136      	bne.n	8004360 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0216 	bic.w	r2, r2, #22
 8004300:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004310:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <HAL_DMA_IRQHandler+0x1da>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0208 	bic.w	r2, r2, #8
 8004330:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004336:	223f      	movs	r2, #63	@ 0x3f
 8004338:	409a      	lsls	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004352:	2b00      	cmp	r3, #0
 8004354:	d07e      	beq.n	8004454 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
        }
        return;
 800435e:	e079      	b.n	8004454 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01d      	beq.n	80043aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10d      	bne.n	8004398 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004380:	2b00      	cmp	r3, #0
 8004382:	d031      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
 800438c:	e02c      	b.n	80043e8 <HAL_DMA_IRQHandler+0x2a0>
 800438e:	bf00      	nop
 8004390:	20000008 	.word	0x20000008
 8004394:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d023      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
 80043a8:	e01e      	b.n	80043e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10f      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0210 	bic.w	r2, r2, #16
 80043c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d032      	beq.n	8004456 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d022      	beq.n	8004442 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2205      	movs	r2, #5
 8004400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	3301      	adds	r3, #1
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	429a      	cmp	r2, r3
 800441e:	d307      	bcc.n	8004430 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f2      	bne.n	8004414 <HAL_DMA_IRQHandler+0x2cc>
 800442e:	e000      	b.n	8004432 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004430:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
 8004452:	e000      	b.n	8004456 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004454:	bf00      	nop
    }
  }
}
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	3b10      	subs	r3, #16
 800446c:	4a14      	ldr	r2, [pc, #80]	@ (80044c0 <DMA_CalcBaseAndBitshift+0x64>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004476:	4a13      	ldr	r2, [pc, #76]	@ (80044c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d909      	bls.n	800449e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	659a      	str	r2, [r3, #88]	@ 0x58
 800449c:	e007      	b.n	80044ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	aaaaaaab 	.word	0xaaaaaaab
 80044c4:	0800783c 	.word	0x0800783c

080044c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11f      	bne.n	8004522 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d856      	bhi.n	8004596 <DMA_CheckFifoParam+0xce>
 80044e8:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <DMA_CheckFifoParam+0x28>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004501 	.word	0x08004501
 80044f4:	08004513 	.word	0x08004513
 80044f8:	08004501 	.word	0x08004501
 80044fc:	08004597 	.word	0x08004597
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d046      	beq.n	800459a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004510:	e043      	b.n	800459a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800451a:	d140      	bne.n	800459e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004520:	e03d      	b.n	800459e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800452a:	d121      	bne.n	8004570 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d837      	bhi.n	80045a2 <DMA_CheckFifoParam+0xda>
 8004532:	a201      	add	r2, pc, #4	@ (adr r2, 8004538 <DMA_CheckFifoParam+0x70>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	08004549 	.word	0x08004549
 800453c:	0800454f 	.word	0x0800454f
 8004540:	08004549 	.word	0x08004549
 8004544:	08004561 	.word	0x08004561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
      break;
 800454c:	e030      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d025      	beq.n	80045a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455e:	e022      	b.n	80045a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004568:	d11f      	bne.n	80045aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800456e:	e01c      	b.n	80045aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d903      	bls.n	800457e <DMA_CheckFifoParam+0xb6>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d003      	beq.n	8004584 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800457c:	e018      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
      break;
 8004582:	e015      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e00b      	b.n	80045ae <DMA_CheckFifoParam+0xe6>
      break;
 8004596:	bf00      	nop
 8004598:	e00a      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
      break;
 800459a:	bf00      	nop
 800459c:	e008      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
      break;
 800459e:	bf00      	nop
 80045a0:	e006      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
      break;
 80045a2:	bf00      	nop
 80045a4:	e004      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
      break;
 80045a6:	bf00      	nop
 80045a8:	e002      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80045aa:	bf00      	nop
 80045ac:	e000      	b.n	80045b0 <DMA_CheckFifoParam+0xe8>
      break;
 80045ae:	bf00      	nop
    }
  } 
  
  return status; 
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop

080045c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	@ 0x24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e165      	b.n	80048a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045dc:	2201      	movs	r2, #1
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	f040 8154 	bne.w	80048a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b01      	cmp	r3, #1
 8004604:	d005      	beq.n	8004612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800460e:	2b02      	cmp	r3, #2
 8004610:	d130      	bne.n	8004674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4013      	ands	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004648:	2201      	movs	r2, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 0201 	and.w	r2, r3, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	2b03      	cmp	r3, #3
 800467e:	d017      	beq.n	80046b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	2203      	movs	r2, #3
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d123      	bne.n	8004704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	08da      	lsrs	r2, r3, #3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3208      	adds	r2, #8
 80046c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	220f      	movs	r2, #15
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	08da      	lsrs	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3208      	adds	r2, #8
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	2203      	movs	r2, #3
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0203 	and.w	r2, r3, #3
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80ae 	beq.w	80048a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b5d      	ldr	r3, [pc, #372]	@ (80048c0 <HAL_GPIO_Init+0x300>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	4a5c      	ldr	r2, [pc, #368]	@ (80048c0 <HAL_GPIO_Init+0x300>)
 8004750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004754:	6453      	str	r3, [r2, #68]	@ 0x44
 8004756:	4b5a      	ldr	r3, [pc, #360]	@ (80048c0 <HAL_GPIO_Init+0x300>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004762:	4a58      	ldr	r2, [pc, #352]	@ (80048c4 <HAL_GPIO_Init+0x304>)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	3302      	adds	r3, #2
 800476a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	220f      	movs	r2, #15
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a4f      	ldr	r2, [pc, #316]	@ (80048c8 <HAL_GPIO_Init+0x308>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d025      	beq.n	80047da <HAL_GPIO_Init+0x21a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a4e      	ldr	r2, [pc, #312]	@ (80048cc <HAL_GPIO_Init+0x30c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01f      	beq.n	80047d6 <HAL_GPIO_Init+0x216>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4d      	ldr	r2, [pc, #308]	@ (80048d0 <HAL_GPIO_Init+0x310>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d019      	beq.n	80047d2 <HAL_GPIO_Init+0x212>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4c      	ldr	r2, [pc, #304]	@ (80048d4 <HAL_GPIO_Init+0x314>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <HAL_GPIO_Init+0x20e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a4b      	ldr	r2, [pc, #300]	@ (80048d8 <HAL_GPIO_Init+0x318>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00d      	beq.n	80047ca <HAL_GPIO_Init+0x20a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a4a      	ldr	r2, [pc, #296]	@ (80048dc <HAL_GPIO_Init+0x31c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <HAL_GPIO_Init+0x206>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a49      	ldr	r2, [pc, #292]	@ (80048e0 <HAL_GPIO_Init+0x320>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_GPIO_Init+0x202>
 80047be:	2306      	movs	r3, #6
 80047c0:	e00c      	b.n	80047dc <HAL_GPIO_Init+0x21c>
 80047c2:	2307      	movs	r3, #7
 80047c4:	e00a      	b.n	80047dc <HAL_GPIO_Init+0x21c>
 80047c6:	2305      	movs	r3, #5
 80047c8:	e008      	b.n	80047dc <HAL_GPIO_Init+0x21c>
 80047ca:	2304      	movs	r3, #4
 80047cc:	e006      	b.n	80047dc <HAL_GPIO_Init+0x21c>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e004      	b.n	80047dc <HAL_GPIO_Init+0x21c>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e002      	b.n	80047dc <HAL_GPIO_Init+0x21c>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_GPIO_Init+0x21c>
 80047da:	2300      	movs	r3, #0
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	f002 0203 	and.w	r2, r2, #3
 80047e2:	0092      	lsls	r2, r2, #2
 80047e4:	4093      	lsls	r3, r2
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ec:	4935      	ldr	r1, [pc, #212]	@ (80048c4 <HAL_GPIO_Init+0x304>)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	3302      	adds	r3, #2
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fa:	4b3a      	ldr	r3, [pc, #232]	@ (80048e4 <HAL_GPIO_Init+0x324>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800481e:	4a31      	ldr	r2, [pc, #196]	@ (80048e4 <HAL_GPIO_Init+0x324>)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004824:	4b2f      	ldr	r3, [pc, #188]	@ (80048e4 <HAL_GPIO_Init+0x324>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004848:	4a26      	ldr	r2, [pc, #152]	@ (80048e4 <HAL_GPIO_Init+0x324>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800484e:	4b25      	ldr	r3, [pc, #148]	@ (80048e4 <HAL_GPIO_Init+0x324>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004872:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <HAL_GPIO_Init+0x324>)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004878:	4b1a      	ldr	r3, [pc, #104]	@ (80048e4 <HAL_GPIO_Init+0x324>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800489c:	4a11      	ldr	r2, [pc, #68]	@ (80048e4 <HAL_GPIO_Init+0x324>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3301      	adds	r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	f67f ae96 	bls.w	80045dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3724      	adds	r7, #36	@ 0x24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40013800 	.word	0x40013800
 80048c8:	40020000 	.word	0x40020000
 80048cc:	40020400 	.word	0x40020400
 80048d0:	40020800 	.word	0x40020800
 80048d4:	40020c00 	.word	0x40020c00
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40021400 	.word	0x40021400
 80048e0:	40021800 	.word	0x40021800
 80048e4:	40013c00 	.word	0x40013c00

080048e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	807b      	strh	r3, [r7, #2]
 80048f4:	4613      	mov	r3, r2
 80048f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048f8:	787b      	ldrb	r3, [r7, #1]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004904:	e003      	b.n	800490e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	041a      	lsls	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	619a      	str	r2, [r3, #24]
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800492c:	887a      	ldrh	r2, [r7, #2]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4013      	ands	r3, r2
 8004932:	041a      	lsls	r2, r3, #16
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	43d9      	mvns	r1, r3
 8004938:	887b      	ldrh	r3, [r7, #2]
 800493a:	400b      	ands	r3, r1
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	619a      	str	r2, [r3, #24]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	4b20      	ldr	r3, [pc, #128]	@ (80049e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004962:	4a1f      	ldr	r2, [pc, #124]	@ (80049e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004968:	6413      	str	r3, [r2, #64]	@ 0x40
 800496a:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004976:	4b1b      	ldr	r3, [pc, #108]	@ (80049e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800497c:	f7fe fef0 	bl	8003760 <HAL_GetTick>
 8004980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004982:	e009      	b.n	8004998 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004984:	f7fe feec 	bl	8003760 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004992:	d901      	bls.n	8004998 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e01f      	b.n	80049d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a4:	d1ee      	bne.n	8004984 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049a6:	4b11      	ldr	r3, [pc, #68]	@ (80049ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ac:	f7fe fed8 	bl	8003760 <HAL_GetTick>
 80049b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049b2:	e009      	b.n	80049c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049b4:	f7fe fed4 	bl	8003760 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049c2:	d901      	bls.n	80049c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e007      	b.n	80049d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049c8:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049d4:	d1ee      	bne.n	80049b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40023800 	.word	0x40023800
 80049e4:	420e0040 	.word	0x420e0040
 80049e8:	40007000 	.word	0x40007000
 80049ec:	420e0044 	.word	0x420e0044

080049f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0cc      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b68      	ldr	r3, [pc, #416]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d90c      	bls.n	8004a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b65      	ldr	r3, [pc, #404]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b63      	ldr	r3, [pc, #396]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0b8      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d020      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a44:	4b59      	ldr	r3, [pc, #356]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4a58      	ldr	r2, [pc, #352]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a5c:	4b53      	ldr	r3, [pc, #332]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a52      	ldr	r2, [pc, #328]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a68:	4b50      	ldr	r3, [pc, #320]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	494d      	ldr	r1, [pc, #308]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d044      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8e:	4b47      	ldr	r3, [pc, #284]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d119      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e07f      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aae:	4b3f      	ldr	r3, [pc, #252]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e06f      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abe:	4b3b      	ldr	r3, [pc, #236]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e067      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ace:	4b37      	ldr	r3, [pc, #220]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4934      	ldr	r1, [pc, #208]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae0:	f7fe fe3e 	bl	8003760 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae8:	f7fe fe3a 	bl	8003760 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e04f      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	4b2b      	ldr	r3, [pc, #172]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 020c 	and.w	r2, r3, #12
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1eb      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b10:	4b25      	ldr	r3, [pc, #148]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d20c      	bcs.n	8004b38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b22      	ldr	r3, [pc, #136]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b20      	ldr	r3, [pc, #128]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e032      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b44:	4b19      	ldr	r3, [pc, #100]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4916      	ldr	r1, [pc, #88]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b62:	4b12      	ldr	r3, [pc, #72]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	490e      	ldr	r1, [pc, #56]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b76:	f000 f855 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	490a      	ldr	r1, [pc, #40]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b88:	5ccb      	ldrb	r3, [r1, r3]
 8004b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8e:	4a09      	ldr	r2, [pc, #36]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b92:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fd9e 	bl	80036d8 <HAL_InitTick>

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40023c00 	.word	0x40023c00
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	08007824 	.word	0x08007824
 8004bb4:	20000008 	.word	0x20000008
 8004bb8:	2000000c 	.word	0x2000000c

08004bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	@ (8004bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000008 	.word	0x20000008

08004bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bd8:	f7ff fff0 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0a9b      	lsrs	r3, r3, #10
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4903      	ldr	r1, [pc, #12]	@ (8004bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	08007834 	.word	0x08007834

08004bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c00:	f7ff ffdc 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	0b5b      	lsrs	r3, r3, #13
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4903      	ldr	r1, [pc, #12]	@ (8004c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	08007834 	.word	0x08007834

08004c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c28:	b0ae      	sub	sp, #184	@ 0xb8
 8004c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c4a:	4bcb      	ldr	r3, [pc, #812]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	f200 8206 	bhi.w	8005064 <HAL_RCC_GetSysClockFreq+0x440>
 8004c58:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08005065 	.word	0x08005065
 8004c68:	08005065 	.word	0x08005065
 8004c6c:	08005065 	.word	0x08005065
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08005065 	.word	0x08005065
 8004c78:	08005065 	.word	0x08005065
 8004c7c:	08005065 	.word	0x08005065
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08005065 	.word	0x08005065
 8004c88:	08005065 	.word	0x08005065
 8004c8c:	08005065 	.word	0x08005065
 8004c90:	08004e95 	.word	0x08004e95
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c94:	4bb9      	ldr	r3, [pc, #740]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x358>)
 8004c96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c9a:	e1e7      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c9c:	4bb8      	ldr	r3, [pc, #736]	@ (8004f80 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ca2:	e1e3      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca4:	4bb4      	ldr	r3, [pc, #720]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb0:	4bb1      	ldr	r3, [pc, #708]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d071      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbc:	4bae      	ldr	r3, [pc, #696]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	099b      	lsrs	r3, r3, #6
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cc8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	f04f 0000 	mov.w	r0, #0
 8004cea:	f04f 0100 	mov.w	r1, #0
 8004cee:	0159      	lsls	r1, r3, #5
 8004cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf4:	0150      	lsls	r0, r2, #5
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	1a51      	subs	r1, r2, r1
 8004cfe:	6439      	str	r1, [r7, #64]	@ 0x40
 8004d00:	4629      	mov	r1, r5
 8004d02:	eb63 0301 	sbc.w	r3, r3, r1
 8004d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004d14:	4649      	mov	r1, r9
 8004d16:	018b      	lsls	r3, r1, #6
 8004d18:	4641      	mov	r1, r8
 8004d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d1e:	4641      	mov	r1, r8
 8004d20:	018a      	lsls	r2, r1, #6
 8004d22:	4641      	mov	r1, r8
 8004d24:	1a51      	subs	r1, r2, r1
 8004d26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d28:	4649      	mov	r1, r9
 8004d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	00cb      	lsls	r3, r1, #3
 8004d40:	4641      	mov	r1, r8
 8004d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d46:	4641      	mov	r1, r8
 8004d48:	00ca      	lsls	r2, r1, #3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4622      	mov	r2, r4
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d56:	462b      	mov	r3, r5
 8004d58:	460a      	mov	r2, r1
 8004d5a:	eb42 0303 	adc.w	r3, r2, r3
 8004d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	024b      	lsls	r3, r1, #9
 8004d70:	4621      	mov	r1, r4
 8004d72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d76:	4621      	mov	r1, r4
 8004d78:	024a      	lsls	r2, r1, #9
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d8c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004d90:	f7fb fee8 	bl	8000b64 <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4613      	mov	r3, r2
 8004d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d9e:	e067      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da0:	4b75      	ldr	r3, [pc, #468]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	099b      	lsrs	r3, r3, #6
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dba:	2300      	movs	r3, #0
 8004dbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004dbe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	f04f 0000 	mov.w	r0, #0
 8004dca:	f04f 0100 	mov.w	r1, #0
 8004dce:	0159      	lsls	r1, r3, #5
 8004dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dd4:	0150      	lsls	r0, r2, #5
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4621      	mov	r1, r4
 8004ddc:	1a51      	subs	r1, r2, r1
 8004dde:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004de0:	4629      	mov	r1, r5
 8004de2:	eb63 0301 	sbc.w	r3, r3, r1
 8004de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004df4:	4649      	mov	r1, r9
 8004df6:	018b      	lsls	r3, r1, #6
 8004df8:	4641      	mov	r1, r8
 8004dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dfe:	4641      	mov	r1, r8
 8004e00:	018a      	lsls	r2, r1, #6
 8004e02:	4641      	mov	r1, r8
 8004e04:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e08:	4649      	mov	r1, r9
 8004e0a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e1a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e22:	4692      	mov	sl, r2
 8004e24:	469b      	mov	fp, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	eb1a 0303 	adds.w	r3, sl, r3
 8004e2c:	623b      	str	r3, [r7, #32]
 8004e2e:	462b      	mov	r3, r5
 8004e30:	eb4b 0303 	adc.w	r3, fp, r3
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004e42:	4629      	mov	r1, r5
 8004e44:	028b      	lsls	r3, r1, #10
 8004e46:	4621      	mov	r1, r4
 8004e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	028a      	lsls	r2, r1, #10
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e58:	2200      	movs	r2, #0
 8004e5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e5c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004e62:	f7fb fe7f 	bl	8000b64 <__aeabi_uldivmod>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e70:	4b41      	ldr	r3, [pc, #260]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e92:	e0eb      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e94:	4b38      	ldr	r3, [pc, #224]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ea0:	4b35      	ldr	r3, [pc, #212]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d06b      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eac:	4b32      	ldr	r3, [pc, #200]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	099b      	lsrs	r3, r3, #6
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004eb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ec4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004ec8:	4622      	mov	r2, r4
 8004eca:	462b      	mov	r3, r5
 8004ecc:	f04f 0000 	mov.w	r0, #0
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	0159      	lsls	r1, r3, #5
 8004ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eda:	0150      	lsls	r0, r2, #5
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	1a51      	subs	r1, r2, r1
 8004ee4:	61b9      	str	r1, [r7, #24]
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	eb63 0301 	sbc.w	r3, r3, r1
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004efa:	4659      	mov	r1, fp
 8004efc:	018b      	lsls	r3, r1, #6
 8004efe:	4651      	mov	r1, sl
 8004f00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f04:	4651      	mov	r1, sl
 8004f06:	018a      	lsls	r2, r1, #6
 8004f08:	4651      	mov	r1, sl
 8004f0a:	ebb2 0801 	subs.w	r8, r2, r1
 8004f0e:	4659      	mov	r1, fp
 8004f10:	eb63 0901 	sbc.w	r9, r3, r1
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f28:	4690      	mov	r8, r2
 8004f2a:	4699      	mov	r9, r3
 8004f2c:	4623      	mov	r3, r4
 8004f2e:	eb18 0303 	adds.w	r3, r8, r3
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	462b      	mov	r3, r5
 8004f36:	eb49 0303 	adc.w	r3, r9, r3
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004f48:	4629      	mov	r1, r5
 8004f4a:	024b      	lsls	r3, r1, #9
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f52:	4621      	mov	r1, r4
 8004f54:	024a      	lsls	r2, r1, #9
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f5e:	2200      	movs	r2, #0
 8004f60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f62:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004f64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f68:	f7fb fdfc 	bl	8000b64 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f76:	e065      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x420>
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	00f42400 	.word	0x00f42400
 8004f80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f84:	4b3d      	ldr	r3, [pc, #244]	@ (800507c <HAL_RCC_GetSysClockFreq+0x458>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	4611      	mov	r1, r2
 8004f90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f94:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f96:	2300      	movs	r3, #0
 8004f98:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004f9e:	4642      	mov	r2, r8
 8004fa0:	464b      	mov	r3, r9
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	0159      	lsls	r1, r3, #5
 8004fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb0:	0150      	lsls	r0, r2, #5
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	1a51      	subs	r1, r2, r1
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004fd0:	4659      	mov	r1, fp
 8004fd2:	018b      	lsls	r3, r1, #6
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fda:	4651      	mov	r1, sl
 8004fdc:	018a      	lsls	r2, r1, #6
 8004fde:	4651      	mov	r1, sl
 8004fe0:	1a54      	subs	r4, r2, r1
 8004fe2:	4659      	mov	r1, fp
 8004fe4:	eb63 0501 	sbc.w	r5, r3, r1
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	00eb      	lsls	r3, r5, #3
 8004ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff6:	00e2      	lsls	r2, r4, #3
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	4643      	mov	r3, r8
 8004ffe:	18e3      	adds	r3, r4, r3
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	464b      	mov	r3, r9
 8005004:	eb45 0303 	adc.w	r3, r5, r3
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005016:	4629      	mov	r1, r5
 8005018:	028b      	lsls	r3, r1, #10
 800501a:	4621      	mov	r1, r4
 800501c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005020:	4621      	mov	r1, r4
 8005022:	028a      	lsls	r2, r1, #10
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800502c:	2200      	movs	r2, #0
 800502e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005030:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005032:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005036:	f7fb fd95 	bl	8000b64 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4613      	mov	r3, r2
 8005040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005044:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <HAL_RCC_GetSysClockFreq+0x458>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	0f1b      	lsrs	r3, r3, #28
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005062:	e003      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800506a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005070:	4618      	mov	r0, r3
 8005072:	37b8      	adds	r7, #184	@ 0xb8
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	00f42400 	.word	0x00f42400

08005084 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e28d      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8083 	beq.w	80051aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050a4:	4b94      	ldr	r3, [pc, #592]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d019      	beq.n	80050e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050b0:	4b91      	ldr	r3, [pc, #580]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050bc:	4b8e      	ldr	r3, [pc, #568]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050c8:	d00c      	beq.n	80050e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ca:	4b8b      	ldr	r3, [pc, #556]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d112      	bne.n	80050fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d6:	4b88      	ldr	r3, [pc, #544]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050e2:	d10b      	bne.n	80050fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e4:	4b84      	ldr	r3, [pc, #528]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05b      	beq.n	80051a8 <HAL_RCC_OscConfig+0x124>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d157      	bne.n	80051a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e25a      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005104:	d106      	bne.n	8005114 <HAL_RCC_OscConfig+0x90>
 8005106:	4b7c      	ldr	r3, [pc, #496]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7b      	ldr	r2, [pc, #492]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e01d      	b.n	8005150 <HAL_RCC_OscConfig+0xcc>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0xb4>
 800511e:	4b76      	ldr	r3, [pc, #472]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a75      	ldr	r2, [pc, #468]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4b73      	ldr	r3, [pc, #460]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a72      	ldr	r2, [pc, #456]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e00b      	b.n	8005150 <HAL_RCC_OscConfig+0xcc>
 8005138:	4b6f      	ldr	r3, [pc, #444]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a6e      	ldr	r2, [pc, #440]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800513e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	4b6c      	ldr	r3, [pc, #432]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a6b      	ldr	r2, [pc, #428]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800514a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800514e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fe fb02 	bl	8003760 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fe fafe 	bl	8003760 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	@ 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e21f      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005172:	4b61      	ldr	r3, [pc, #388]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0xdc>
 800517e:	e014      	b.n	80051aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fe faee 	bl	8003760 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005188:	f7fe faea 	bl	8003760 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	@ 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e20b      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519a:	4b57      	ldr	r3, [pc, #348]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x104>
 80051a6:	e000      	b.n	80051aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d06f      	beq.n	8005296 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051b6:	4b50      	ldr	r3, [pc, #320]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d017      	beq.n	80051f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051c2:	4b4d      	ldr	r3, [pc, #308]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d105      	bne.n	80051da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051ce:	4b4a      	ldr	r3, [pc, #296]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051da:	4b47      	ldr	r3, [pc, #284]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051e2:	2b0c      	cmp	r3, #12
 80051e4:	d11c      	bne.n	8005220 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e6:	4b44      	ldr	r3, [pc, #272]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d116      	bne.n	8005220 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	4b41      	ldr	r3, [pc, #260]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_RCC_OscConfig+0x186>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d001      	beq.n	800520a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e1d3      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520a:	4b3b      	ldr	r3, [pc, #236]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4937      	ldr	r1, [pc, #220]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521e:	e03a      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005228:	4b34      	ldr	r3, [pc, #208]	@ (80052fc <HAL_RCC_OscConfig+0x278>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fe fa97 	bl	8003760 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005236:	f7fe fa93 	bl	8003760 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e1b4      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005248:	4b2b      	ldr	r3, [pc, #172]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b28      	ldr	r3, [pc, #160]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4925      	ldr	r1, [pc, #148]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005264:	4313      	orrs	r3, r2
 8005266:	600b      	str	r3, [r1, #0]
 8005268:	e015      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526a:	4b24      	ldr	r3, [pc, #144]	@ (80052fc <HAL_RCC_OscConfig+0x278>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fe fa76 	bl	8003760 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005278:	f7fe fa72 	bl	8003760 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e193      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d036      	beq.n	8005310 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052aa:	4b15      	ldr	r3, [pc, #84]	@ (8005300 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fe fa56 	bl	8003760 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fe fa52 	bl	8003760 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e173      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ca:	4b0b      	ldr	r3, [pc, #44]	@ (80052f8 <HAL_RCC_OscConfig+0x274>)
 80052cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x234>
 80052d6:	e01b      	b.n	8005310 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <HAL_RCC_OscConfig+0x27c>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fe fa3f 	bl	8003760 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e4:	e00e      	b.n	8005304 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e6:	f7fe fa3b 	bl	8003760 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d907      	bls.n	8005304 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e15c      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
 80052f8:	40023800 	.word	0x40023800
 80052fc:	42470000 	.word	0x42470000
 8005300:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	4b8a      	ldr	r3, [pc, #552]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ea      	bne.n	80052e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8097 	beq.w	800544c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005322:	4b83      	ldr	r3, [pc, #524]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10f      	bne.n	800534e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	4b7f      	ldr	r3, [pc, #508]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	4a7e      	ldr	r2, [pc, #504]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800533c:	6413      	str	r3, [r2, #64]	@ 0x40
 800533e:	4b7c      	ldr	r3, [pc, #496]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534a:	2301      	movs	r3, #1
 800534c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534e:	4b79      	ldr	r3, [pc, #484]	@ (8005534 <HAL_RCC_OscConfig+0x4b0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d118      	bne.n	800538c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535a:	4b76      	ldr	r3, [pc, #472]	@ (8005534 <HAL_RCC_OscConfig+0x4b0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a75      	ldr	r2, [pc, #468]	@ (8005534 <HAL_RCC_OscConfig+0x4b0>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005366:	f7fe f9fb 	bl	8003760 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536e:	f7fe f9f7 	bl	8003760 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e118      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005380:	4b6c      	ldr	r3, [pc, #432]	@ (8005534 <HAL_RCC_OscConfig+0x4b0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x31e>
 8005394:	4b66      	ldr	r3, [pc, #408]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005398:	4a65      	ldr	r2, [pc, #404]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a0:	e01c      	b.n	80053dc <HAL_RCC_OscConfig+0x358>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x340>
 80053aa:	4b61      	ldr	r3, [pc, #388]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ae:	4a60      	ldr	r2, [pc, #384]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053b0:	f043 0304 	orr.w	r3, r3, #4
 80053b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ba:	4a5d      	ldr	r2, [pc, #372]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0x358>
 80053c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c8:	4a59      	ldr	r2, [pc, #356]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d0:	4b57      	ldr	r3, [pc, #348]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d4:	4a56      	ldr	r2, [pc, #344]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053d6:	f023 0304 	bic.w	r3, r3, #4
 80053da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d015      	beq.n	8005410 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fe f9bc 	bl	8003760 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fe f9b8 	bl	8003760 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0d7      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005402:	4b4b      	ldr	r3, [pc, #300]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0ee      	beq.n	80053ec <HAL_RCC_OscConfig+0x368>
 800540e:	e014      	b.n	800543a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fe f9a6 	bl	8003760 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005416:	e00a      	b.n	800542e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005418:	f7fe f9a2 	bl	8003760 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e0c1      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	4b40      	ldr	r3, [pc, #256]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ee      	bne.n	8005418 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b3b      	ldr	r3, [pc, #236]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005444:	4a3a      	ldr	r2, [pc, #232]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800544a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80ad 	beq.w	80055b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005456:	4b36      	ldr	r3, [pc, #216]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b08      	cmp	r3, #8
 8005460:	d060      	beq.n	8005524 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d145      	bne.n	80054f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546a:	4b33      	ldr	r3, [pc, #204]	@ (8005538 <HAL_RCC_OscConfig+0x4b4>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fe f976 	bl	8003760 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005478:	f7fe f972 	bl	8003760 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e093      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548a:	4b29      	ldr	r3, [pc, #164]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	019b      	lsls	r3, r3, #6
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	3b01      	subs	r3, #1
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	491b      	ldr	r1, [pc, #108]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <HAL_RCC_OscConfig+0x4b4>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fe f947 	bl	8003760 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fe f943 	bl	8003760 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e064      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e8:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCC_OscConfig+0x452>
 80054f4:	e05c      	b.n	80055b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f6:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <HAL_RCC_OscConfig+0x4b4>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fe f930 	bl	8003760 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7fe f92c 	bl	8003760 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e04d      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005516:	4b06      	ldr	r3, [pc, #24]	@ (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x480>
 8005522:	e045      	b.n	80055b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d107      	bne.n	800553c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e040      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
 8005530:	40023800 	.word	0x40023800
 8005534:	40007000 	.word	0x40007000
 8005538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800553c:	4b1f      	ldr	r3, [pc, #124]	@ (80055bc <HAL_RCC_OscConfig+0x538>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d030      	beq.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005554:	429a      	cmp	r2, r3
 8005556:	d129      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005562:	429a      	cmp	r2, r3
 8005564:	d122      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800556c:	4013      	ands	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005574:	4293      	cmp	r3, r2
 8005576:	d119      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	3b01      	subs	r3, #1
 8005586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d10f      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d107      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e041      	b.n	8005656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fd fe5e 	bl	80032a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 fcc4 	bl	8005f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d001      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e04e      	b.n	8005716 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a23      	ldr	r2, [pc, #140]	@ (8005724 <HAL_TIM_Base_Start_IT+0xc4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d022      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a2:	d01d      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005728 <HAL_TIM_Base_Start_IT+0xc8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d018      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1e      	ldr	r2, [pc, #120]	@ (800572c <HAL_TIM_Base_Start_IT+0xcc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <HAL_TIM_Base_Start_IT+0xd0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005734 <HAL_TIM_Base_Start_IT+0xd4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d009      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a19      	ldr	r2, [pc, #100]	@ (8005738 <HAL_TIM_Base_Start_IT+0xd8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_TIM_Base_Start_IT+0x80>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a18      	ldr	r2, [pc, #96]	@ (800573c <HAL_TIM_Base_Start_IT+0xdc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d111      	bne.n	8005704 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b06      	cmp	r3, #6
 80056f0:	d010      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005702:	e007      	b.n	8005714 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40010400 	.word	0x40010400
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800

08005740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e041      	b.n	80057d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fd fc52 	bl	8003010 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f000 fc04 	bl	8005f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <HAL_TIM_PWM_Start+0x24>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e022      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b04      	cmp	r3, #4
 8005808:	d109      	bne.n	800581e <HAL_TIM_PWM_Start+0x3e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	bf14      	ite	ne
 8005816:	2301      	movne	r3, #1
 8005818:	2300      	moveq	r3, #0
 800581a:	b2db      	uxtb	r3, r3
 800581c:	e015      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d109      	bne.n	8005838 <HAL_TIM_PWM_Start+0x58>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e008      	b.n	800584a <HAL_TIM_PWM_Start+0x6a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e07c      	b.n	800594c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <HAL_TIM_PWM_Start+0x82>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005860:	e013      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b04      	cmp	r3, #4
 8005866:	d104      	bne.n	8005872 <HAL_TIM_PWM_Start+0x92>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005870:	e00b      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d104      	bne.n	8005882 <HAL_TIM_PWM_Start+0xa2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005880:	e003      	b.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2201      	movs	r2, #1
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fdd6 	bl	8006444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a2d      	ldr	r2, [pc, #180]	@ (8005954 <HAL_TIM_PWM_Start+0x174>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIM_PWM_Start+0xcc>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005958 <HAL_TIM_PWM_Start+0x178>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d101      	bne.n	80058b0 <HAL_TIM_PWM_Start+0xd0>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <HAL_TIM_PWM_Start+0xd2>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a22      	ldr	r2, [pc, #136]	@ (8005954 <HAL_TIM_PWM_Start+0x174>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d022      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d8:	d01d      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1f      	ldr	r2, [pc, #124]	@ (800595c <HAL_TIM_PWM_Start+0x17c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d018      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005960 <HAL_TIM_PWM_Start+0x180>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005964 <HAL_TIM_PWM_Start+0x184>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00e      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a16      	ldr	r2, [pc, #88]	@ (8005958 <HAL_TIM_PWM_Start+0x178>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a18      	ldr	r2, [pc, #96]	@ (8005968 <HAL_TIM_PWM_Start+0x188>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d004      	beq.n	8005916 <HAL_TIM_PWM_Start+0x136>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a16      	ldr	r2, [pc, #88]	@ (800596c <HAL_TIM_PWM_Start+0x18c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d111      	bne.n	800593a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b06      	cmp	r3, #6
 8005926:	d010      	beq.n	800594a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005938:	e007      	b.n	800594a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40010000 	.word	0x40010000
 8005958:	40010400 	.word	0x40010400
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40014000 	.word	0x40014000
 800596c:	40001800 	.word	0x40001800

08005970 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e097      	b.n	8005ab4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7fd fb61 	bl	8003060 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059b4:	f023 0307 	bic.w	r3, r3, #7
 80059b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f000 fae1 	bl	8005f8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	4313      	orrs	r3, r2
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a10:	f023 030c 	bic.w	r3, r3, #12
 8005a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	011a      	lsls	r2, r3, #4
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	031b      	lsls	r3, r3, #12
 8005a40:	4313      	orrs	r3, r2
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	4313      	orrs	r3, r2
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005acc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ad4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005adc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ae4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d110      	bne.n	8005b0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d102      	bne.n	8005af8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005af2:	7b7b      	ldrb	r3, [r7, #13]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d001      	beq.n	8005afc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e069      	b.n	8005bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b0c:	e031      	b.n	8005b72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d110      	bne.n	8005b36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d102      	bne.n	8005b20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b1a:	7b3b      	ldrb	r3, [r7, #12]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e055      	b.n	8005bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b34:	e01d      	b.n	8005b72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d108      	bne.n	8005b4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b3c:	7bbb      	ldrb	r3, [r7, #14]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d105      	bne.n	8005b4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b42:	7b7b      	ldrb	r3, [r7, #13]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d102      	bne.n	8005b4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b48:	7b3b      	ldrb	r3, [r7, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d001      	beq.n	8005b52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e03e      	b.n	8005bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_TIM_Encoder_Start+0xc4>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d008      	beq.n	8005b90 <HAL_TIM_Encoder_Start+0xd4>
 8005b7e:	e00f      	b.n	8005ba0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2201      	movs	r2, #1
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fc5b 	bl	8006444 <TIM_CCxChannelCmd>
      break;
 8005b8e:	e016      	b.n	8005bbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2201      	movs	r2, #1
 8005b96:	2104      	movs	r1, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fc53 	bl	8006444 <TIM_CCxChannelCmd>
      break;
 8005b9e:	e00e      	b.n	8005bbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fc4b 	bl	8006444 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fc44 	bl	8006444 <TIM_CCxChannelCmd>
      break;
 8005bbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d020      	beq.n	8005c3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01b      	beq.n	8005c3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0202 	mvn.w	r2, #2
 8005c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f994 	bl	8005f50 <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f986 	bl	8005f3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f997 	bl	8005f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d020      	beq.n	8005c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01b      	beq.n	8005c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0204 	mvn.w	r2, #4
 8005c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f96e 	bl	8005f50 <HAL_TIM_IC_CaptureCallback>
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f960 	bl	8005f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f971 	bl	8005f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d020      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01b      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0208 	mvn.w	r2, #8
 8005ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f948 	bl	8005f50 <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f93a 	bl	8005f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f94b 	bl	8005f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d020      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0210 	mvn.w	r2, #16
 8005cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f922 	bl	8005f50 <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f914 	bl	8005f3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f925 	bl	8005f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00c      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0201 	mvn.w	r2, #1
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc f9ea 	bl	8002118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fc6c 	bl	8006640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f8f6 	bl	8005f78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00c      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0220 	mvn.w	r2, #32
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fc3e 	bl	800662c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e0ae      	b.n	8005f34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b0c      	cmp	r3, #12
 8005de2:	f200 809f 	bhi.w	8005f24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005de6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e21 	.word	0x08005e21
 8005df0:	08005f25 	.word	0x08005f25
 8005df4:	08005f25 	.word	0x08005f25
 8005df8:	08005f25 	.word	0x08005f25
 8005dfc:	08005e61 	.word	0x08005e61
 8005e00:	08005f25 	.word	0x08005f25
 8005e04:	08005f25 	.word	0x08005f25
 8005e08:	08005f25 	.word	0x08005f25
 8005e0c:	08005ea3 	.word	0x08005ea3
 8005e10:	08005f25 	.word	0x08005f25
 8005e14:	08005f25 	.word	0x08005f25
 8005e18:	08005f25 	.word	0x08005f25
 8005e1c:	08005ee3 	.word	0x08005ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f95c 	bl	80060e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0208 	orr.w	r2, r2, #8
 8005e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0204 	bic.w	r2, r2, #4
 8005e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6999      	ldr	r1, [r3, #24]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	691a      	ldr	r2, [r3, #16]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	619a      	str	r2, [r3, #24]
      break;
 8005e5e:	e064      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f9ac 	bl	80061c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6999      	ldr	r1, [r3, #24]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	021a      	lsls	r2, r3, #8
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	619a      	str	r2, [r3, #24]
      break;
 8005ea0:	e043      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fa01 	bl	80062b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0208 	orr.w	r2, r2, #8
 8005ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0204 	bic.w	r2, r2, #4
 8005ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69d9      	ldr	r1, [r3, #28]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	61da      	str	r2, [r3, #28]
      break;
 8005ee0:	e023      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fa55 	bl	8006398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69d9      	ldr	r1, [r3, #28]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	021a      	lsls	r2, r3, #8
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	61da      	str	r2, [r3, #28]
      break;
 8005f22:	e002      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
      break;
 8005f28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a46      	ldr	r2, [pc, #280]	@ (80060b8 <TIM_Base_SetConfig+0x12c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <TIM_Base_SetConfig+0x40>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005faa:	d00f      	beq.n	8005fcc <TIM_Base_SetConfig+0x40>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a43      	ldr	r2, [pc, #268]	@ (80060bc <TIM_Base_SetConfig+0x130>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00b      	beq.n	8005fcc <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a42      	ldr	r2, [pc, #264]	@ (80060c0 <TIM_Base_SetConfig+0x134>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d007      	beq.n	8005fcc <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a41      	ldr	r2, [pc, #260]	@ (80060c4 <TIM_Base_SetConfig+0x138>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a40      	ldr	r2, [pc, #256]	@ (80060c8 <TIM_Base_SetConfig+0x13c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d108      	bne.n	8005fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a35      	ldr	r2, [pc, #212]	@ (80060b8 <TIM_Base_SetConfig+0x12c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d02b      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fec:	d027      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a32      	ldr	r2, [pc, #200]	@ (80060bc <TIM_Base_SetConfig+0x130>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d023      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a31      	ldr	r2, [pc, #196]	@ (80060c0 <TIM_Base_SetConfig+0x134>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01f      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a30      	ldr	r2, [pc, #192]	@ (80060c4 <TIM_Base_SetConfig+0x138>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01b      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2f      	ldr	r2, [pc, #188]	@ (80060c8 <TIM_Base_SetConfig+0x13c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d017      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2e      	ldr	r2, [pc, #184]	@ (80060cc <TIM_Base_SetConfig+0x140>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <TIM_Base_SetConfig+0x144>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00f      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2c      	ldr	r2, [pc, #176]	@ (80060d4 <TIM_Base_SetConfig+0x148>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00b      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2b      	ldr	r2, [pc, #172]	@ (80060d8 <TIM_Base_SetConfig+0x14c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d007      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2a      	ldr	r2, [pc, #168]	@ (80060dc <TIM_Base_SetConfig+0x150>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d003      	beq.n	800603e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a29      	ldr	r2, [pc, #164]	@ (80060e0 <TIM_Base_SetConfig+0x154>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d108      	bne.n	8006050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a10      	ldr	r2, [pc, #64]	@ (80060b8 <TIM_Base_SetConfig+0x12c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_Base_SetConfig+0xf8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a12      	ldr	r2, [pc, #72]	@ (80060c8 <TIM_Base_SetConfig+0x13c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d103      	bne.n	800608c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b01      	cmp	r3, #1
 800609c:	d105      	bne.n	80060aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f023 0201 	bic.w	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]
  }
}
 80060aa:	bf00      	nop
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40010000 	.word	0x40010000
 80060bc:	40000400 	.word	0x40000400
 80060c0:	40000800 	.word	0x40000800
 80060c4:	40000c00 	.word	0x40000c00
 80060c8:	40010400 	.word	0x40010400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800
 80060d8:	40001800 	.word	0x40001800
 80060dc:	40001c00 	.word	0x40001c00
 80060e0:	40002000 	.word	0x40002000

080060e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f023 0201 	bic.w	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 0302 	bic.w	r3, r3, #2
 800612c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a20      	ldr	r2, [pc, #128]	@ (80061bc <TIM_OC1_SetConfig+0xd8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC1_SetConfig+0x64>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a1f      	ldr	r2, [pc, #124]	@ (80061c0 <TIM_OC1_SetConfig+0xdc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d10c      	bne.n	8006162 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0308 	bic.w	r3, r3, #8
 800614e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 0304 	bic.w	r3, r3, #4
 8006160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a15      	ldr	r2, [pc, #84]	@ (80061bc <TIM_OC1_SetConfig+0xd8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_OC1_SetConfig+0x8e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a14      	ldr	r2, [pc, #80]	@ (80061c0 <TIM_OC1_SetConfig+0xdc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d111      	bne.n	8006196 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	621a      	str	r2, [r3, #32]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40010400 	.word	0x40010400

080061c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f023 0210 	bic.w	r2, r3, #16
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0320 	bic.w	r3, r3, #32
 800620e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a22      	ldr	r2, [pc, #136]	@ (80062a8 <TIM_OC2_SetConfig+0xe4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_OC2_SetConfig+0x68>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a21      	ldr	r2, [pc, #132]	@ (80062ac <TIM_OC2_SetConfig+0xe8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d10d      	bne.n	8006248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a17      	ldr	r2, [pc, #92]	@ (80062a8 <TIM_OC2_SetConfig+0xe4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0x94>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <TIM_OC2_SetConfig+0xe8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d113      	bne.n	8006280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800625e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40010400 	.word	0x40010400

080062b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a21      	ldr	r2, [pc, #132]	@ (8006390 <TIM_OC3_SetConfig+0xe0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_OC3_SetConfig+0x66>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a20      	ldr	r2, [pc, #128]	@ (8006394 <TIM_OC3_SetConfig+0xe4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10d      	bne.n	8006332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800631c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a16      	ldr	r2, [pc, #88]	@ (8006390 <TIM_OC3_SetConfig+0xe0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC3_SetConfig+0x92>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a15      	ldr	r2, [pc, #84]	@ (8006394 <TIM_OC3_SetConfig+0xe4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d113      	bne.n	800636a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40010000 	.word	0x40010000
 8006394:	40010400 	.word	0x40010400

08006398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	031b      	lsls	r3, r3, #12
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a12      	ldr	r2, [pc, #72]	@ (800643c <TIM_OC4_SetConfig+0xa4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC4_SetConfig+0x68>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a11      	ldr	r2, [pc, #68]	@ (8006440 <TIM_OC4_SetConfig+0xa8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d109      	bne.n	8006414 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	019b      	lsls	r3, r3, #6
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000
 8006440:	40010400 	.word	0x40010400

08006444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2201      	movs	r2, #1
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	43db      	mvns	r3, r3
 8006466:	401a      	ands	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a1a      	ldr	r2, [r3, #32]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	fa01 f303 	lsl.w	r3, r1, r3
 800647c:	431a      	orrs	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e05a      	b.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a21      	ldr	r2, [pc, #132]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d022      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f4:	d01d      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d018      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1b      	ldr	r2, [pc, #108]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1a      	ldr	r2, [pc, #104]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00e      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a18      	ldr	r2, [pc, #96]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d009      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a17      	ldr	r2, [pc, #92]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d004      	beq.n	8006532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a15      	ldr	r2, [pc, #84]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d10c      	bne.n	800654c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	4313      	orrs	r3, r2
 8006542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40010000 	.word	0x40010000
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40010400 	.word	0x40010400
 8006580:	40014000 	.word	0x40014000
 8006584:	40001800 	.word	0x40001800

08006588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e03d      	b.n	8006620 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e042      	b.n	80066ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fc fe94 	bl	80033a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2224      	movs	r2, #36	@ 0x24
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006696:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fdbd 	bl	8007218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	@ 0x28
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b20      	cmp	r3, #32
 8006712:	d175      	bne.n	8006800 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_UART_Transmit+0x2c>
 800671a:	88fb      	ldrh	r3, [r7, #6]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e06e      	b.n	8006802 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2221      	movs	r2, #33	@ 0x21
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006732:	f7fd f815 	bl	8003760 <HAL_GetTick>
 8006736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	88fa      	ldrh	r2, [r7, #6]
 800673c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	88fa      	ldrh	r2, [r7, #6]
 8006742:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674c:	d108      	bne.n	8006760 <HAL_UART_Transmit+0x6c>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	e003      	b.n	8006768 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006768:	e02e      	b.n	80067c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2200      	movs	r2, #0
 8006772:	2180      	movs	r1, #128	@ 0x80
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fb1f 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e03a      	b.n	8006802 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10b      	bne.n	80067aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	3302      	adds	r3, #2
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e007      	b.n	80067ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	3301      	adds	r3, #1
 80067b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1cb      	bne.n	800676a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2200      	movs	r2, #0
 80067da:	2140      	movs	r1, #64	@ 0x40
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 faeb 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e006      	b.n	8006802 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e000      	b.n	8006802 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006800:	2302      	movs	r3, #2
  }
}
 8006802:	4618      	mov	r0, r3
 8006804:	3720      	adds	r7, #32
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	4613      	mov	r3, r2
 8006816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b20      	cmp	r3, #32
 8006822:	d112      	bne.n	800684a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Receive_IT+0x26>
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e00b      	b.n	800684c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	461a      	mov	r2, r3
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fb12 	bl	8006e6a <UART_Start_Receive_IT>
 8006846:	4603      	mov	r3, r0
 8006848:	e000      	b.n	800684c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800684a:	2302      	movs	r3, #2
  }
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b0ba      	sub	sp, #232	@ 0xe8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800687a:	2300      	movs	r3, #0
 800687c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006880:	2300      	movs	r3, #0
 8006882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10f      	bne.n	80068ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_UART_IRQHandler+0x66>
 80068a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fbf2 	bl	800709c <UART_Receive_IT>
      return;
 80068b8:	e25b      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 80de 	beq.w	8006a80 <HAL_UART_IRQHandler+0x22c>
 80068c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 80d1 	beq.w	8006a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <HAL_UART_IRQHandler+0xae>
 80068ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fa:	f043 0201 	orr.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_UART_IRQHandler+0xd2>
 800690e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691e:	f043 0202 	orr.w	r2, r3, #2
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <HAL_UART_IRQHandler+0xf6>
 8006932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	f043 0204 	orr.w	r2, r3, #4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d011      	beq.n	800697a <HAL_UART_IRQHandler+0x126>
 8006956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d105      	bne.n	800696e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006972:	f043 0208 	orr.w	r2, r3, #8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 81f2 	beq.w	8006d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_UART_IRQHandler+0x14e>
 8006990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fb7d 	bl	800709c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ac:	2b40      	cmp	r3, #64	@ 0x40
 80069ae:	bf0c      	ite	eq
 80069b0:	2301      	moveq	r3, #1
 80069b2:	2300      	movne	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <HAL_UART_IRQHandler+0x17a>
 80069c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d04f      	beq.n	8006a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa85 	bl	8006ede <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069de:	2b40      	cmp	r3, #64	@ 0x40
 80069e0:	d141      	bne.n	8006a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3314      	adds	r3, #20
 80069e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3314      	adds	r3, #20
 8006a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1d9      	bne.n	80069e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d013      	beq.n	8006a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c34 <HAL_UART_IRQHandler+0x3e0>)
 8006a3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd fb5e 	bl	8004104 <HAL_DMA_Abort_IT>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d016      	beq.n	8006a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	e00e      	b.n	8006a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f994 	bl	8006d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	e00a      	b.n	8006a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f990 	bl	8006d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	e006      	b.n	8006a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f98c 	bl	8006d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a7a:	e175      	b.n	8006d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7c:	bf00      	nop
    return;
 8006a7e:	e173      	b.n	8006d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	f040 814f 	bne.w	8006d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8148 	beq.w	8006d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8141 	beq.w	8006d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac6:	2b40      	cmp	r3, #64	@ 0x40
 8006ac8:	f040 80b6 	bne.w	8006c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8145 	beq.w	8006d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aea:	429a      	cmp	r2, r3
 8006aec:	f080 813e 	bcs.w	8006d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006af6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b02:	f000 8088 	beq.w	8006c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	330c      	adds	r3, #12
 8006b0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1d9      	bne.n	8006b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3314      	adds	r3, #20
 8006b58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3314      	adds	r3, #20
 8006b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e1      	bne.n	8006b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3314      	adds	r3, #20
 8006b94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3314      	adds	r3, #20
 8006bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e3      	bne.n	8006b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006be6:	f023 0310 	bic.w	r3, r3, #16
 8006bea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e3      	bne.n	8006bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fd fa07 	bl	8004024 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f8b7 	bl	8006da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c32:	e09b      	b.n	8006d6c <HAL_UART_IRQHandler+0x518>
 8006c34:	08006fa5 	.word	0x08006fa5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 808e 	beq.w	8006d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8089 	beq.w	8006d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c82:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e3      	bne.n	8006c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3314      	adds	r3, #20
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3314      	adds	r3, #20
 8006cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cba:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e3      	bne.n	8006c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	330c      	adds	r3, #12
 8006cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	69b9      	ldr	r1, [r7, #24]
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e3      	bne.n	8006cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f83d 	bl	8006da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d26:	e023      	b.n	8006d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <HAL_UART_IRQHandler+0x4f4>
 8006d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f943 	bl	8006fcc <UART_Transmit_IT>
    return;
 8006d46:	e014      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <HAL_UART_IRQHandler+0x51e>
 8006d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f983 	bl	800706c <UART_EndTransmit_IT>
    return;
 8006d66:	e004      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d68:	bf00      	nop
 8006d6a:	e002      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d70:	bf00      	nop
  }
}
 8006d72:	37e8      	adds	r7, #232	@ 0xe8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc8:	e03b      	b.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d037      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fc fcc5 	bl	8003760 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e03a      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d023      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b80      	cmp	r3, #128	@ 0x80
 8006dfe:	d020      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b40      	cmp	r3, #64	@ 0x40
 8006e04:	d01d      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d116      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 f857 	bl	8006ede <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2208      	movs	r2, #8
 8006e34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e00f      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d0b4      	beq.n	8006dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2222      	movs	r2, #34	@ 0x22
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0220 	orr.w	r2, r2, #32
 8006ece:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b095      	sub	sp, #84	@ 0x54
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	330c      	adds	r3, #12
 8006eec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	330c      	adds	r3, #12
 8006f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f06:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e5      	bne.n	8006ee6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3314      	adds	r3, #20
 8006f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3314      	adds	r3, #20
 8006f38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e5      	bne.n	8006f1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d119      	bne.n	8006f8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f023 0310 	bic.w	r3, r3, #16
 8006f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f76:	61ba      	str	r2, [r7, #24]
 8006f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6979      	ldr	r1, [r7, #20]
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	613b      	str	r3, [r7, #16]
   return(result);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e5      	bne.n	8006f56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f98:	bf00      	nop
 8006f9a:	3754      	adds	r7, #84	@ 0x54
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff fee4 	bl	8006d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc4:	bf00      	nop
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b21      	cmp	r3, #33	@ 0x21
 8006fde:	d13e      	bne.n	800705e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe8:	d114      	bne.n	8007014 <UART_Transmit_IT+0x48>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d110      	bne.n	8007014 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007006:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	1c9a      	adds	r2, r3, #2
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	621a      	str	r2, [r3, #32]
 8007012:	e008      	b.n	8007026 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	1c59      	adds	r1, r3, #1
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6211      	str	r1, [r2, #32]
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29b      	uxth	r3, r3
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	4619      	mov	r1, r3
 8007034:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10f      	bne.n	800705a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007048:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007058:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	e000      	b.n	8007060 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800705e:	2302      	movs	r3, #2
  }
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007082:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fe73 	bl	8006d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08c      	sub	sp, #48	@ 0x30
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b22      	cmp	r3, #34	@ 0x22
 80070ae:	f040 80ae 	bne.w	800720e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ba:	d117      	bne.n	80070ec <UART_Receive_IT+0x50>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d113      	bne.n	80070ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	b29a      	uxth	r2, r3
 80070dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e4:	1c9a      	adds	r2, r3, #2
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80070ea:	e026      	b.n	800713a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070fe:	d007      	beq.n	8007110 <UART_Receive_IT+0x74>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <UART_Receive_IT+0x82>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d106      	bne.n	800711e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	b2da      	uxtb	r2, r3
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	701a      	strb	r2, [r3, #0]
 800711c:	e008      	b.n	8007130 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800712a:	b2da      	uxtb	r2, r3
 800712c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29b      	uxth	r3, r3
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4619      	mov	r1, r3
 8007148:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800714a:	2b00      	cmp	r3, #0
 800714c:	d15d      	bne.n	800720a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0220 	bic.w	r2, r2, #32
 800715c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800716c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007190:	2b01      	cmp	r3, #1
 8007192:	d135      	bne.n	8007200 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	613b      	str	r3, [r7, #16]
   return(result);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f023 0310 	bic.w	r3, r3, #16
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ba:	623a      	str	r2, [r7, #32]
 80071bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	69f9      	ldr	r1, [r7, #28]
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e5      	bne.n	800719a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b10      	cmp	r3, #16
 80071da:	d10a      	bne.n	80071f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fdd1 	bl	8006da0 <HAL_UARTEx_RxEventCallback>
 80071fe:	e002      	b.n	8007206 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7fa ffc9 	bl	8002198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e002      	b.n	8007210 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	e000      	b.n	8007210 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800720e:	2302      	movs	r3, #2
  }
}
 8007210:	4618      	mov	r0, r3
 8007212:	3730      	adds	r7, #48	@ 0x30
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800721c:	b0c0      	sub	sp, #256	@ 0x100
 800721e:	af00      	add	r7, sp, #0
 8007220:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007234:	68d9      	ldr	r1, [r3, #12]
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	ea40 0301 	orr.w	r3, r0, r1
 8007240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	431a      	orrs	r2, r3
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	431a      	orrs	r2, r3
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007270:	f021 010c 	bic.w	r1, r1, #12
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800727e:	430b      	orrs	r3, r1
 8007280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007292:	6999      	ldr	r1, [r3, #24]
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	ea40 0301 	orr.w	r3, r0, r1
 800729e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b8f      	ldr	r3, [pc, #572]	@ (80074e4 <UART_SetConfig+0x2cc>)
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d005      	beq.n	80072b8 <UART_SetConfig+0xa0>
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b8d      	ldr	r3, [pc, #564]	@ (80074e8 <UART_SetConfig+0x2d0>)
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d104      	bne.n	80072c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072b8:	f7fd fca0 	bl	8004bfc <HAL_RCC_GetPCLK2Freq>
 80072bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072c0:	e003      	b.n	80072ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072c2:	f7fd fc87 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 80072c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072d4:	f040 810c 	bne.w	80074f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072ea:	4622      	mov	r2, r4
 80072ec:	462b      	mov	r3, r5
 80072ee:	1891      	adds	r1, r2, r2
 80072f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072f2:	415b      	adcs	r3, r3
 80072f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072fa:	4621      	mov	r1, r4
 80072fc:	eb12 0801 	adds.w	r8, r2, r1
 8007300:	4629      	mov	r1, r5
 8007302:	eb43 0901 	adc.w	r9, r3, r1
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800731a:	4690      	mov	r8, r2
 800731c:	4699      	mov	r9, r3
 800731e:	4623      	mov	r3, r4
 8007320:	eb18 0303 	adds.w	r3, r8, r3
 8007324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007328:	462b      	mov	r3, r5
 800732a:	eb49 0303 	adc.w	r3, r9, r3
 800732e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800733e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007346:	460b      	mov	r3, r1
 8007348:	18db      	adds	r3, r3, r3
 800734a:	653b      	str	r3, [r7, #80]	@ 0x50
 800734c:	4613      	mov	r3, r2
 800734e:	eb42 0303 	adc.w	r3, r2, r3
 8007352:	657b      	str	r3, [r7, #84]	@ 0x54
 8007354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800735c:	f7f9 fc02 	bl	8000b64 <__aeabi_uldivmod>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4b61      	ldr	r3, [pc, #388]	@ (80074ec <UART_SetConfig+0x2d4>)
 8007366:	fba3 2302 	umull	r2, r3, r3, r2
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	011c      	lsls	r4, r3, #4
 800736e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007378:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800737c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007380:	4642      	mov	r2, r8
 8007382:	464b      	mov	r3, r9
 8007384:	1891      	adds	r1, r2, r2
 8007386:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007388:	415b      	adcs	r3, r3
 800738a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800738c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007390:	4641      	mov	r1, r8
 8007392:	eb12 0a01 	adds.w	sl, r2, r1
 8007396:	4649      	mov	r1, r9
 8007398:	eb43 0b01 	adc.w	fp, r3, r1
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073b0:	4692      	mov	sl, r2
 80073b2:	469b      	mov	fp, r3
 80073b4:	4643      	mov	r3, r8
 80073b6:	eb1a 0303 	adds.w	r3, sl, r3
 80073ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073be:	464b      	mov	r3, r9
 80073c0:	eb4b 0303 	adc.w	r3, fp, r3
 80073c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073dc:	460b      	mov	r3, r1
 80073de:	18db      	adds	r3, r3, r3
 80073e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80073e2:	4613      	mov	r3, r2
 80073e4:	eb42 0303 	adc.w	r3, r2, r3
 80073e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073f2:	f7f9 fbb7 	bl	8000b64 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b3b      	ldr	r3, [pc, #236]	@ (80074ec <UART_SetConfig+0x2d4>)
 80073fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	2264      	movs	r2, #100	@ 0x64
 8007406:	fb02 f303 	mul.w	r3, r2, r3
 800740a:	1acb      	subs	r3, r1, r3
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007412:	4b36      	ldr	r3, [pc, #216]	@ (80074ec <UART_SetConfig+0x2d4>)
 8007414:	fba3 2302 	umull	r2, r3, r3, r2
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007420:	441c      	add	r4, r3
 8007422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800742c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007434:	4642      	mov	r2, r8
 8007436:	464b      	mov	r3, r9
 8007438:	1891      	adds	r1, r2, r2
 800743a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800743c:	415b      	adcs	r3, r3
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007444:	4641      	mov	r1, r8
 8007446:	1851      	adds	r1, r2, r1
 8007448:	6339      	str	r1, [r7, #48]	@ 0x30
 800744a:	4649      	mov	r1, r9
 800744c:	414b      	adcs	r3, r1
 800744e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800745c:	4659      	mov	r1, fp
 800745e:	00cb      	lsls	r3, r1, #3
 8007460:	4651      	mov	r1, sl
 8007462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007466:	4651      	mov	r1, sl
 8007468:	00ca      	lsls	r2, r1, #3
 800746a:	4610      	mov	r0, r2
 800746c:	4619      	mov	r1, r3
 800746e:	4603      	mov	r3, r0
 8007470:	4642      	mov	r2, r8
 8007472:	189b      	adds	r3, r3, r2
 8007474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007478:	464b      	mov	r3, r9
 800747a:	460a      	mov	r2, r1
 800747c:	eb42 0303 	adc.w	r3, r2, r3
 8007480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007490:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007498:	460b      	mov	r3, r1
 800749a:	18db      	adds	r3, r3, r3
 800749c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800749e:	4613      	mov	r3, r2
 80074a0:	eb42 0303 	adc.w	r3, r2, r3
 80074a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074ae:	f7f9 fb59 	bl	8000b64 <__aeabi_uldivmod>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <UART_SetConfig+0x2d4>)
 80074b8:	fba3 1302 	umull	r1, r3, r3, r2
 80074bc:	095b      	lsrs	r3, r3, #5
 80074be:	2164      	movs	r1, #100	@ 0x64
 80074c0:	fb01 f303 	mul.w	r3, r1, r3
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	3332      	adds	r3, #50	@ 0x32
 80074ca:	4a08      	ldr	r2, [pc, #32]	@ (80074ec <UART_SetConfig+0x2d4>)
 80074cc:	fba2 2303 	umull	r2, r3, r2, r3
 80074d0:	095b      	lsrs	r3, r3, #5
 80074d2:	f003 0207 	and.w	r2, r3, #7
 80074d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4422      	add	r2, r4
 80074de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074e0:	e106      	b.n	80076f0 <UART_SetConfig+0x4d8>
 80074e2:	bf00      	nop
 80074e4:	40011000 	.word	0x40011000
 80074e8:	40011400 	.word	0x40011400
 80074ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007502:	4642      	mov	r2, r8
 8007504:	464b      	mov	r3, r9
 8007506:	1891      	adds	r1, r2, r2
 8007508:	6239      	str	r1, [r7, #32]
 800750a:	415b      	adcs	r3, r3
 800750c:	627b      	str	r3, [r7, #36]	@ 0x24
 800750e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007512:	4641      	mov	r1, r8
 8007514:	1854      	adds	r4, r2, r1
 8007516:	4649      	mov	r1, r9
 8007518:	eb43 0501 	adc.w	r5, r3, r1
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	00eb      	lsls	r3, r5, #3
 8007526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800752a:	00e2      	lsls	r2, r4, #3
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	4643      	mov	r3, r8
 8007532:	18e3      	adds	r3, r4, r3
 8007534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007538:	464b      	mov	r3, r9
 800753a:	eb45 0303 	adc.w	r3, r5, r3
 800753e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800754e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800755e:	4629      	mov	r1, r5
 8007560:	008b      	lsls	r3, r1, #2
 8007562:	4621      	mov	r1, r4
 8007564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007568:	4621      	mov	r1, r4
 800756a:	008a      	lsls	r2, r1, #2
 800756c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007570:	f7f9 faf8 	bl	8000b64 <__aeabi_uldivmod>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4b60      	ldr	r3, [pc, #384]	@ (80076fc <UART_SetConfig+0x4e4>)
 800757a:	fba3 2302 	umull	r2, r3, r3, r2
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	011c      	lsls	r4, r3, #4
 8007582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007586:	2200      	movs	r2, #0
 8007588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800758c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	1891      	adds	r1, r2, r2
 800759a:	61b9      	str	r1, [r7, #24]
 800759c:	415b      	adcs	r3, r3
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a4:	4641      	mov	r1, r8
 80075a6:	1851      	adds	r1, r2, r1
 80075a8:	6139      	str	r1, [r7, #16]
 80075aa:	4649      	mov	r1, r9
 80075ac:	414b      	adcs	r3, r1
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075bc:	4659      	mov	r1, fp
 80075be:	00cb      	lsls	r3, r1, #3
 80075c0:	4651      	mov	r1, sl
 80075c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c6:	4651      	mov	r1, sl
 80075c8:	00ca      	lsls	r2, r1, #3
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	4642      	mov	r2, r8
 80075d2:	189b      	adds	r3, r3, r2
 80075d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075d8:	464b      	mov	r3, r9
 80075da:	460a      	mov	r2, r1
 80075dc:	eb42 0303 	adc.w	r3, r2, r3
 80075e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075fc:	4649      	mov	r1, r9
 80075fe:	008b      	lsls	r3, r1, #2
 8007600:	4641      	mov	r1, r8
 8007602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007606:	4641      	mov	r1, r8
 8007608:	008a      	lsls	r2, r1, #2
 800760a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800760e:	f7f9 faa9 	bl	8000b64 <__aeabi_uldivmod>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4611      	mov	r1, r2
 8007618:	4b38      	ldr	r3, [pc, #224]	@ (80076fc <UART_SetConfig+0x4e4>)
 800761a:	fba3 2301 	umull	r2, r3, r3, r1
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	2264      	movs	r2, #100	@ 0x64
 8007622:	fb02 f303 	mul.w	r3, r2, r3
 8007626:	1acb      	subs	r3, r1, r3
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	3332      	adds	r3, #50	@ 0x32
 800762c:	4a33      	ldr	r2, [pc, #204]	@ (80076fc <UART_SetConfig+0x4e4>)
 800762e:	fba2 2303 	umull	r2, r3, r2, r3
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007638:	441c      	add	r4, r3
 800763a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800763e:	2200      	movs	r2, #0
 8007640:	673b      	str	r3, [r7, #112]	@ 0x70
 8007642:	677a      	str	r2, [r7, #116]	@ 0x74
 8007644:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	1891      	adds	r1, r2, r2
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	415b      	adcs	r3, r3
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007658:	4641      	mov	r1, r8
 800765a:	1851      	adds	r1, r2, r1
 800765c:	6039      	str	r1, [r7, #0]
 800765e:	4649      	mov	r1, r9
 8007660:	414b      	adcs	r3, r1
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007670:	4659      	mov	r1, fp
 8007672:	00cb      	lsls	r3, r1, #3
 8007674:	4651      	mov	r1, sl
 8007676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800767a:	4651      	mov	r1, sl
 800767c:	00ca      	lsls	r2, r1, #3
 800767e:	4610      	mov	r0, r2
 8007680:	4619      	mov	r1, r3
 8007682:	4603      	mov	r3, r0
 8007684:	4642      	mov	r2, r8
 8007686:	189b      	adds	r3, r3, r2
 8007688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800768a:	464b      	mov	r3, r9
 800768c:	460a      	mov	r2, r1
 800768e:	eb42 0303 	adc.w	r3, r2, r3
 8007692:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	663b      	str	r3, [r7, #96]	@ 0x60
 800769e:	667a      	str	r2, [r7, #100]	@ 0x64
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076ac:	4649      	mov	r1, r9
 80076ae:	008b      	lsls	r3, r1, #2
 80076b0:	4641      	mov	r1, r8
 80076b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076b6:	4641      	mov	r1, r8
 80076b8:	008a      	lsls	r2, r1, #2
 80076ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076be:	f7f9 fa51 	bl	8000b64 <__aeabi_uldivmod>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <UART_SetConfig+0x4e4>)
 80076c8:	fba3 1302 	umull	r1, r3, r3, r2
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	2164      	movs	r1, #100	@ 0x64
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	3332      	adds	r3, #50	@ 0x32
 80076da:	4a08      	ldr	r2, [pc, #32]	@ (80076fc <UART_SetConfig+0x4e4>)
 80076dc:	fba2 2303 	umull	r2, r3, r2, r3
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	f003 020f 	and.w	r2, r3, #15
 80076e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4422      	add	r2, r4
 80076ee:	609a      	str	r2, [r3, #8]
}
 80076f0:	bf00      	nop
 80076f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076f6:	46bd      	mov	sp, r7
 80076f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076fc:	51eb851f 	.word	0x51eb851f

08007700 <memset>:
 8007700:	4402      	add	r2, r0
 8007702:	4603      	mov	r3, r0
 8007704:	4293      	cmp	r3, r2
 8007706:	d100      	bne.n	800770a <memset+0xa>
 8007708:	4770      	bx	lr
 800770a:	f803 1b01 	strb.w	r1, [r3], #1
 800770e:	e7f9      	b.n	8007704 <memset+0x4>

08007710 <strcat>:
 8007710:	b510      	push	{r4, lr}
 8007712:	4602      	mov	r2, r0
 8007714:	7814      	ldrb	r4, [r2, #0]
 8007716:	4613      	mov	r3, r2
 8007718:	3201      	adds	r2, #1
 800771a:	2c00      	cmp	r4, #0
 800771c:	d1fa      	bne.n	8007714 <strcat+0x4>
 800771e:	3b01      	subs	r3, #1
 8007720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007724:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007728:	2a00      	cmp	r2, #0
 800772a:	d1f9      	bne.n	8007720 <strcat+0x10>
 800772c:	bd10      	pop	{r4, pc}
	...

08007730 <__libc_init_array>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	4d0d      	ldr	r5, [pc, #52]	@ (8007768 <__libc_init_array+0x38>)
 8007734:	4c0d      	ldr	r4, [pc, #52]	@ (800776c <__libc_init_array+0x3c>)
 8007736:	1b64      	subs	r4, r4, r5
 8007738:	10a4      	asrs	r4, r4, #2
 800773a:	2600      	movs	r6, #0
 800773c:	42a6      	cmp	r6, r4
 800773e:	d109      	bne.n	8007754 <__libc_init_array+0x24>
 8007740:	4d0b      	ldr	r5, [pc, #44]	@ (8007770 <__libc_init_array+0x40>)
 8007742:	4c0c      	ldr	r4, [pc, #48]	@ (8007774 <__libc_init_array+0x44>)
 8007744:	f000 f820 	bl	8007788 <_init>
 8007748:	1b64      	subs	r4, r4, r5
 800774a:	10a4      	asrs	r4, r4, #2
 800774c:	2600      	movs	r6, #0
 800774e:	42a6      	cmp	r6, r4
 8007750:	d105      	bne.n	800775e <__libc_init_array+0x2e>
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	f855 3b04 	ldr.w	r3, [r5], #4
 8007758:	4798      	blx	r3
 800775a:	3601      	adds	r6, #1
 800775c:	e7ee      	b.n	800773c <__libc_init_array+0xc>
 800775e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007762:	4798      	blx	r3
 8007764:	3601      	adds	r6, #1
 8007766:	e7f2      	b.n	800774e <__libc_init_array+0x1e>
 8007768:	0800784c 	.word	0x0800784c
 800776c:	0800784c 	.word	0x0800784c
 8007770:	0800784c 	.word	0x0800784c
 8007774:	08007850 	.word	0x08007850

08007778 <strcpy>:
 8007778:	4603      	mov	r3, r0
 800777a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800777e:	f803 2b01 	strb.w	r2, [r3], #1
 8007782:	2a00      	cmp	r2, #0
 8007784:	d1f9      	bne.n	800777a <strcpy+0x2>
 8007786:	4770      	bx	lr

08007788 <_init>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	bf00      	nop
 800778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778e:	bc08      	pop	{r3}
 8007790:	469e      	mov	lr, r3
 8007792:	4770      	bx	lr

08007794 <_fini>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	bf00      	nop
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr
