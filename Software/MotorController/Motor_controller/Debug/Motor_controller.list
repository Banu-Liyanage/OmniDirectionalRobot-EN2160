
Motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075fc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080077c4  080077c4  000087c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007868  08007868  00009014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007868  08007868  00008868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007870  08007870  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007870  08007870  00008870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007874  08007874  00008874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007878  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000014  0800788c  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800788c  00009450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125ea  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3f  00000000  00000000  0001b62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1f  00000000  00000000  0001f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d7d  00000000  00000000  00020277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016356  00000000  00000000  00044ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df3da  00000000  00000000  0005b34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  0013a768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0013eea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080077ac 	.word	0x080077ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	080077ac 	.word	0x080077ac

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b988 	b.w	8000e8c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	468e      	mov	lr, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4688      	mov	r8, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d962      	bls.n	8000c70 <__udivmoddi4+0xdc>
 8000baa:	fab2 f682 	clz	r6, r2
 8000bae:	b14e      	cbz	r6, 8000bc4 <__udivmoddi4+0x30>
 8000bb0:	f1c6 0320 	rsb	r3, r6, #32
 8000bb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bbc:	40b7      	lsls	r7, r6
 8000bbe:	ea43 0808 	orr.w	r8, r3, r8
 8000bc2:	40b4      	lsls	r4, r6
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd0:	0c23      	lsrs	r3, r4, #16
 8000bd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fb01 f20c 	mul.w	r2, r1, ip
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be8:	f080 80ea 	bcs.w	8000dc0 <__udivmoddi4+0x22c>
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f240 80e7 	bls.w	8000dc0 <__udivmoddi4+0x22c>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	443b      	add	r3, r7
 8000bf6:	1a9a      	subs	r2, r3, r2
 8000bf8:	b2a3      	uxth	r3, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0a:	459c      	cmp	ip, r3
 8000c0c:	d909      	bls.n	8000c22 <__udivmoddi4+0x8e>
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	f080 80d6 	bcs.w	8000dc4 <__udivmoddi4+0x230>
 8000c18:	459c      	cmp	ip, r3
 8000c1a:	f240 80d3 	bls.w	8000dc4 <__udivmoddi4+0x230>
 8000c1e:	443b      	add	r3, r7
 8000c20:	3802      	subs	r0, #2
 8000c22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c26:	eba3 030c 	sub.w	r3, r3, ip
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11d      	cbz	r5, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40f3      	lsrs	r3, r6
 8000c30:	2200      	movs	r2, #0
 8000c32:	e9c5 3200 	strd	r3, r2, [r5]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d905      	bls.n	8000c4a <__udivmoddi4+0xb6>
 8000c3e:	b10d      	cbz	r5, 8000c44 <__udivmoddi4+0xb0>
 8000c40:	e9c5 0100 	strd	r0, r1, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4608      	mov	r0, r1
 8000c48:	e7f5      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d146      	bne.n	8000ce0 <__udivmoddi4+0x14c>
 8000c52:	4573      	cmp	r3, lr
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xc8>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 8105 	bhi.w	8000e66 <__udivmoddi4+0x2d2>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4690      	mov	r8, r2
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e5      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6e:	e7e2      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f000 8090 	beq.w	8000d96 <__udivmoddi4+0x202>
 8000c76:	fab2 f682 	clz	r6, r2
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f040 80a4 	bne.w	8000dc8 <__udivmoddi4+0x234>
 8000c80:	1a8a      	subs	r2, r1, r2
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	b2bc      	uxth	r4, r7
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x11e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x11c>
 8000caa:	429a      	cmp	r2, r3
 8000cac:	f200 80e0 	bhi.w	8000e70 <__udivmoddi4+0x2dc>
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	1a9b      	subs	r3, r3, r2
 8000cb4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	fb02 f404 	mul.w	r4, r2, r4
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x144>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x142>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f200 80ca 	bhi.w	8000e6a <__udivmoddi4+0x2d6>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	1b1b      	subs	r3, r3, r4
 8000cda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0x98>
 8000ce0:	f1c1 0620 	rsb	r6, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cea:	431f      	orrs	r7, r3
 8000cec:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf0:	fa20 f306 	lsr.w	r3, r0, r6
 8000cf4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	fa1f fc87 	uxth.w	ip, r7
 8000d06:	fbbe f0f9 	udiv	r0, lr, r9
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1a0>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d26:	f080 809c 	bcs.w	8000e62 <__udivmoddi4+0x2ce>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8099 	bls.w	8000e62 <__udivmoddi4+0x2ce>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	fa1f fe83 	uxth.w	lr, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1ce>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d56:	f080 8082 	bcs.w	8000e5e <__udivmoddi4+0x2ca>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d97f      	bls.n	8000e5e <__udivmoddi4+0x2ca>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d66:	eba4 040c 	sub.w	r4, r4, ip
 8000d6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d6e:	4564      	cmp	r4, ip
 8000d70:	4673      	mov	r3, lr
 8000d72:	46e1      	mov	r9, ip
 8000d74:	d362      	bcc.n	8000e3c <__udivmoddi4+0x2a8>
 8000d76:	d05f      	beq.n	8000e38 <__udivmoddi4+0x2a4>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x1fe>
 8000d7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d82:	fa04 f606 	lsl.w	r6, r4, r6
 8000d86:	fa22 f301 	lsr.w	r3, r2, r1
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d92:	2100      	movs	r1, #0
 8000d94:	e74f      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000d96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d9a:	0c01      	lsrs	r1, r0, #16
 8000d9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da0:	b280      	uxth	r0, r0
 8000da2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da6:	463b      	mov	r3, r7
 8000da8:	4638      	mov	r0, r7
 8000daa:	463c      	mov	r4, r7
 8000dac:	46b8      	mov	r8, r7
 8000dae:	46be      	mov	lr, r7
 8000db0:	2620      	movs	r6, #32
 8000db2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000db6:	eba2 0208 	sub.w	r2, r2, r8
 8000dba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbe:	e766      	b.n	8000c8e <__udivmoddi4+0xfa>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	e718      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	e72c      	b.n	8000c22 <__udivmoddi4+0x8e>
 8000dc8:	f1c6 0220 	rsb	r2, r6, #32
 8000dcc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd0:	40b7      	lsls	r7, r6
 8000dd2:	40b1      	lsls	r1, r6
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	fbb3 f8fe 	udiv	r8, r3, lr
 8000de2:	b2bc      	uxth	r4, r7
 8000de4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de8:	0c11      	lsrs	r1, r2, #16
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb08 f904 	mul.w	r9, r8, r4
 8000df2:	40b0      	lsls	r0, r6
 8000df4:	4589      	cmp	r9, r1
 8000df6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfa:	b280      	uxth	r0, r0
 8000dfc:	d93e      	bls.n	8000e7c <__udivmoddi4+0x2e8>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e04:	d201      	bcs.n	8000e0a <__udivmoddi4+0x276>
 8000e06:	4589      	cmp	r9, r1
 8000e08:	d81f      	bhi.n	8000e4a <__udivmoddi4+0x2b6>
 8000e0a:	eba1 0109 	sub.w	r1, r1, r9
 8000e0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e12:	fb09 f804 	mul.w	r8, r9, r4
 8000e16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d229      	bcs.n	8000e78 <__udivmoddi4+0x2e4>
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2a:	d2c4      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e2c:	4542      	cmp	r2, r8
 8000e2e:	d2c2      	bcs.n	8000db6 <__udivmoddi4+0x222>
 8000e30:	f1a9 0102 	sub.w	r1, r9, #2
 8000e34:	443a      	add	r2, r7
 8000e36:	e7be      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e38:	45f0      	cmp	r8, lr
 8000e3a:	d29d      	bcs.n	8000d78 <__udivmoddi4+0x1e4>
 8000e3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e44:	3801      	subs	r0, #1
 8000e46:	46e1      	mov	r9, ip
 8000e48:	e796      	b.n	8000d78 <__udivmoddi4+0x1e4>
 8000e4a:	eba7 0909 	sub.w	r9, r7, r9
 8000e4e:	4449      	add	r1, r9
 8000e50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e58:	fb09 f804 	mul.w	r8, r9, r4
 8000e5c:	e7db      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e5e:	4673      	mov	r3, lr
 8000e60:	e77f      	b.n	8000d62 <__udivmoddi4+0x1ce>
 8000e62:	4650      	mov	r0, sl
 8000e64:	e766      	b.n	8000d34 <__udivmoddi4+0x1a0>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e6fd      	b.n	8000c66 <__udivmoddi4+0xd2>
 8000e6a:	443b      	add	r3, r7
 8000e6c:	3a02      	subs	r2, #2
 8000e6e:	e733      	b.n	8000cd8 <__udivmoddi4+0x144>
 8000e70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	e71c      	b.n	8000cb2 <__udivmoddi4+0x11e>
 8000e78:	4649      	mov	r1, r9
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x222>
 8000e7c:	eba1 0109 	sub.w	r1, r1, r9
 8000e80:	46c4      	mov	ip, r8
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	e7c4      	b.n	8000e16 <__udivmoddi4+0x282>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <int_to_str>:
#include "stdio.h"  // only for strlen
#include "stdlib.h"

// Convert integer to string
void int_to_str(int num, char *str)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
    char temp[12];
    int i = 0, j = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
    int is_negative = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

    if (num < 0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da04      	bge.n	8000eb6 <int_to_str+0x26>
    {
        is_negative = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
        num = -num;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	607b      	str	r3, [r7, #4]
    }

    do {
        temp[i++] = (num % 10) + '0';
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <int_to_str+0xbc>)
 8000eba:	fb83 1302 	smull	r1, r3, r3, r2
 8000ebe:	1099      	asrs	r1, r3, #2
 8000ec0:	17d3      	asrs	r3, r2, #31
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	1ad1      	subs	r1, r2, r3
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	1c59      	adds	r1, r3, #1
 8000ed4:	61f9      	str	r1, [r7, #28]
 8000ed6:	3230      	adds	r2, #48	@ 0x30
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	3320      	adds	r3, #32
 8000edc:	443b      	add	r3, r7
 8000ede:	f803 2c18 	strb.w	r2, [r3, #-24]
        num /= 10;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <int_to_str+0xbc>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	1092      	asrs	r2, r2, #2
 8000eec:	17db      	asrs	r3, r3, #31
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	607b      	str	r3, [r7, #4]
    } while (num != 0);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1de      	bne.n	8000eb6 <int_to_str+0x26>

    if (is_negative)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d017      	beq.n	8000f2e <int_to_str+0x9e>
        temp[i++] = '-';
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	61fa      	str	r2, [r7, #28]
 8000f04:	3320      	adds	r3, #32
 8000f06:	443b      	add	r3, r7
 8000f08:	222d      	movs	r2, #45	@ 0x2d
 8000f0a:	f803 2c18 	strb.w	r2, [r3, #-24]

    // Reverse string
    while (i > 0)
 8000f0e:	e00e      	b.n	8000f2e <int_to_str+0x9e>
        str[j++] = temp[--i];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	61ba      	str	r2, [r7, #24]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	440a      	add	r2, r1
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	701a      	strb	r2, [r3, #0]
    while (i > 0)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dced      	bgt.n	8000f10 <int_to_str+0x80>

    str[j] = '\0';
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	66666667 	.word	0x66666667

08000f50 <UART_Init>:
    str[len] = '\0';
}

// UART Initialization
void UART_Init(UART_HandleTypeDef *huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    HAL_UART_Init(huart);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f005 fb8d 	bl	8006678 <HAL_UART_Init>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <UART_Transmit_Int>:
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}

// Transmit int with header
void UART_Transmit_Int(UART_HandleTypeDef *huart, const char *header, int number)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b096      	sub	sp, #88	@ 0x58
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
    char int_str[12];
    char buffer[60];

    int_to_str(number, int_str);
 8000f74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff88 	bl	8000e90 <int_to_str>

    strcpy(buffer, header);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 fc08 	bl	800779c <strcpy>
    strcat(buffer, ":");
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff f939 	bl	8000208 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4916      	ldr	r1, [pc, #88]	@ (8000ffc <UART_Transmit_Int+0x94>)
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	8013      	strh	r3, [r2, #0]
    strcat(buffer, int_str);
 8000faa:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fbbd 	bl	8007734 <strcat>
    strcat(buffer, "\r\n");
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f922 	bl	8000208 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <UART_Transmit_Int+0x98>)
 8000fd0:	8811      	ldrh	r1, [r2, #0]
 8000fd2:	7892      	ldrb	r2, [r2, #2]
 8000fd4:	8019      	strh	r1, [r3, #0]
 8000fd6:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f913 	bl	8000208 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f107 0110 	add.w	r1, r7, #16
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f005 fb92 	bl	8006718 <HAL_UART_Transmit>
}
 8000ff4:	bf00      	nop
 8000ff6:	3758      	adds	r7, #88	@ 0x58
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	080077c4 	.word	0x080077c4
 8001000:	080077c8 	.word	0x080077c8

08001004 <clampf>:

const float MAXINTCLAMP = 1;


// Clamp float
float clampf(float val, float min, float max) {
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	ed87 0a03 	vstr	s0, [r7, #12]
 800100e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001012:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val < min) return min;
 8001016:	ed97 7a03 	vldr	s14, [r7, #12]
 800101a:	edd7 7a02 	vldr	s15, [r7, #8]
 800101e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	d501      	bpl.n	800102c <clampf+0x28>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	e00b      	b.n	8001044 <clampf+0x40>
    if (val > max) return max;
 800102c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001030:	edd7 7a01 	vldr	s15, [r7, #4]
 8001034:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103c:	dd01      	ble.n	8001042 <clampf+0x3e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	e000      	b.n	8001044 <clampf+0x40>
    return val;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <Controller_Init>:

#include "controller.h"
#include "config.h"
#include "kinematics.h"

void Controller_Init(Controller *controller) {
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->x_error = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
	controller->y_error = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
	controller->w_error = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
	controller->previous_x_error = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
	controller->previous_y_error = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
	controller->previous_w_error = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	615a      	str	r2, [r3, #20]

	controller->x_velocity = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
	controller->y_velocity = 0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
	controller->omega = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]

	controller->controllers_enabled = 1;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <UpdateControllers>:
		controller->previous_y_error = 0;
		controller->previous_w_error = 0;
}


void UpdateControllers(Controller *controller, float x_velocity, float y_velocity,  float omega, float steering_adjustment) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b090      	sub	sp, #64	@ 0x40
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6178      	str	r0, [r7, #20]
 80010c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80010c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80010cc:	ed87 1a02 	vstr	s2, [r7, #8]
 80010d0:	edc7 1a01 	vstr	s3, [r7, #4]
    float forward_output, strafe_output, rotational_output;
//    float left_speed, right_speed;
//
    controller->x_velocity = x_velocity;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	619a      	str	r2, [r3, #24]
    controller->y_velocity = y_velocity;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	61da      	str	r2, [r3, #28]
    controller->omega = omega;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	621a      	str	r2, [r3, #32]
//
    float x_increment = x_velocity * CONTROLLER_LOOP_INTERVAL;
 80010e6:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <UpdateControllers+0x1b8>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    controller->x_error += x_increment - current_robot_velocity.vx * CONTROLLER_LOOP_INTERVAL;
 80010f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001278 <UpdateControllers+0x1bc>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <UpdateControllers+0x1b8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001108:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800110c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	edc3 7a00 	vstr	s15, [r3]
    float x_diff = controller->x_error - controller->previous_x_error;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	ed93 7a00 	vldr	s14, [r3]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	edd3 7a03 	vldr	s15, [r3, #12]
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    controller->previous_x_error = controller->x_error;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	60da      	str	r2, [r3, #12]
    forward_output = FWD_KP * controller->x_error + FWD_KD * x_diff;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	4b4e      	ldr	r3, [pc, #312]	@ (800127c <UpdateControllers+0x1c0>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114c:	4b4c      	ldr	r3, [pc, #304]	@ (8001280 <UpdateControllers+0x1c4>)
 800114e:	edd3 6a00 	vldr	s13, [r3]
 8001152:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    float y_increment = y_velocity * CONTROLLER_LOOP_INTERVAL;
 8001162:	4b44      	ldr	r3, [pc, #272]	@ (8001274 <UpdateControllers+0x1b8>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ed97 7a03 	vldr	s14, [r7, #12]
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	controller->y_error += y_increment - current_robot_velocity.vy * CONTROLLER_LOOP_INTERVAL;
 8001174:	4b40      	ldr	r3, [pc, #256]	@ (8001278 <UpdateControllers+0x1bc>)
 8001176:	ed93 7a01 	vldr	s14, [r3, #4]
 800117a:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <UpdateControllers+0x1b8>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	edc3 7a01 	vstr	s15, [r3, #4]
	float y_diff = controller->y_error - controller->previous_y_error;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	ed93 7a01 	vldr	s14, [r3, #4]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80011a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	controller->previous_y_error = controller->y_error;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	611a      	str	r2, [r3, #16]
	strafe_output = STRAFE_KP * controller->y_error + STRAFE_KD * y_diff;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <UpdateControllers+0x1c8>)
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <UpdateControllers+0x1cc>)
 80011ca:	edd3 6a00 	vldr	s13, [r3]
 80011ce:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011da:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        //x_output = K
	float w_increment = omega * CONTROLLER_LOOP_INTERVAL;
 80011de:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <UpdateControllers+0x1b8>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	controller->w_error += w_increment - current_robot_velocity.omega * CONTROLLER_LOOP_INTERVAL;
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <UpdateControllers+0x1bc>)
 80011f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <UpdateControllers+0x1b8>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001204:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	edd3 7a02 	vldr	s15, [r3, #8]
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	edc3 7a02 	vstr	s15, [r3, #8]
	float w_diff = controller->w_error - controller->previous_w_error;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	ed93 7a02 	vldr	s14, [r3, #8]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	edd3 7a05 	vldr	s15, [r3, #20]
 8001224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001228:	edc7 7a08 	vstr	s15, [r7, #32]
	controller->previous_w_error = controller->w_error;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	615a      	str	r2, [r3, #20]
	rotational_output = ROT_KP * controller->omega + ROT_KD * w_diff;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	ed93 7a08 	vldr	s14, [r3, #32]
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <UpdateControllers+0x1d0>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <UpdateControllers+0x1d4>)
 8001246:	edd3 6a00 	vldr	s13, [r3]
 800124a:	edd7 7a08 	vldr	s15, [r7, #32]
 800124e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	edc7 7a07 	vstr	s15, [r7, #28]


	set_robot_velocity(forward_output, strafe_output, rotational_output);
 800125a:	ed97 1a07 	vldr	s2, [r7, #28]
 800125e:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001262:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8001266:	f000 fa2f 	bl	80016c8 <set_robot_velocity>

}
 800126a:	bf00      	nop
 800126c:	3740      	adds	r7, #64	@ 0x40
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	08007820 	.word	0x08007820
 8001278:	20000030 	.word	0x20000030
 800127c:	0800782c 	.word	0x0800782c
 8001280:	08007830 	.word	0x08007830
 8001284:	08007834 	.word	0x08007834
 8001288:	08007838 	.word	0x08007838
 800128c:	0800783c 	.word	0x0800783c
 8001290:	08007840 	.word	0x08007840

08001294 <getForwardLeftEncoderCounts>:
float m_x_change = 0;
float m_rot_change = 0;



int16_t getForwardLeftEncoderCounts() {
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8001298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	b21b      	sxth	r3, r3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <getForwardRightEncoderCounts>:

int16_t getForwardRightEncoderCounts() {
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	return (int16_t) TIM3->CNT;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <getForwardRightEncoderCounts+0x14>)
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	b21b      	sxth	r3, r3
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40000400 	.word	0x40000400

080012c4 <getRearLeftEncoderCounts>:

int16_t getRearLeftEncoderCounts() {
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	return (int16_t) TIM4->CNT;
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <getRearLeftEncoderCounts+0x14>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012cc:	b21b      	sxth	r3, r3
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40000800 	.word	0x40000800

080012dc <getRearRightEncoderCounts>:

int16_t getRearRightEncoderCounts() {
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	return (int16_t) TIM5->CNT;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <getRearRightEncoderCounts+0x14>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	b21b      	sxth	r3, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40000c00 	.word	0x40000c00

080012f4 <resetEncoders>:

void resetEncoders() {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 80012f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = (int16_t) 0;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <resetEncoders+0x68>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CNT = (int16_t) 0;
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <resetEncoders+0x6c>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->CNT = (int16_t) 0;
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <resetEncoders+0x70>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24

	m_robot_distance = 0;
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <resetEncoders+0x74>)
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <resetEncoders+0x78>)
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

	ForwardLeft_delta = 0;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <resetEncoders+0x7c>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
	ForwardRight_delta = 0;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <resetEncoders+0x80>)
 800132a:	2200      	movs	r2, #0
 800132c:	801a      	strh	r2, [r3, #0]
	RearLeft_delta = 0;
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <resetEncoders+0x84>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
	RearRight_delta = 0;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <resetEncoders+0x88>)
 8001336:	2200      	movs	r2, #0
 8001338:	801a      	strh	r2, [r3, #0]

	previous_ForwardLeft_count = 0;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <resetEncoders+0x8c>)
 800133c:	2200      	movs	r2, #0
 800133e:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = 0;
 8001340:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <resetEncoders+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = 0;
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <resetEncoders+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = 0;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <resetEncoders+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]

}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40000400 	.word	0x40000400
 8001360:	40000800 	.word	0x40000800
 8001364:	40000c00 	.word	0x40000c00
 8001368:	2000005c 	.word	0x2000005c
 800136c:	20000060 	.word	0x20000060
 8001370:	20000064 	.word	0x20000064
 8001374:	20000066 	.word	0x20000066
 8001378:	20000068 	.word	0x20000068
 800137c:	2000006a 	.word	0x2000006a
 8001380:	2000006c 	.word	0x2000006c
 8001384:	2000006e 	.word	0x2000006e
 8001388:	20000070 	.word	0x20000070
 800138c:	20000072 	.word	0x20000072

08001390 <update_Encoder_Data>:
	TIM4->CNT = (int16_t) 0;
	TIM5->CNT = (int16_t) 0;
}


void update_Encoder_Data(){
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
	int16_t ForwardLeft_count= getForwardLeftEncoderCounts();
 8001396:	f7ff ff7d 	bl	8001294 <getForwardLeftEncoderCounts>
 800139a:	4603      	mov	r3, r0
 800139c:	82fb      	strh	r3, [r7, #22]
	int16_t ForwardRight_count = getForwardRightEncoderCounts();
 800139e:	f7ff ff85 	bl	80012ac <getForwardRightEncoderCounts>
 80013a2:	4603      	mov	r3, r0
 80013a4:	82bb      	strh	r3, [r7, #20]
	int16_t RearLeft_count = getRearLeftEncoderCounts();
 80013a6:	f7ff ff8d 	bl	80012c4 <getRearLeftEncoderCounts>
 80013aa:	4603      	mov	r3, r0
 80013ac:	827b      	strh	r3, [r7, #18]
	int16_t RearRight_count = getRearRightEncoderCounts();
 80013ae:	f7ff ff95 	bl	80012dc <getRearRightEncoderCounts>
 80013b2:	4603      	mov	r3, r0
 80013b4:	823b      	strh	r3, [r7, #16]


	ForwardLeft_delta = ForwardLeft_count - previous_ForwardLeft_count;
 80013b6:	8afa      	ldrh	r2, [r7, #22]
 80013b8:	4b4a      	ldr	r3, [pc, #296]	@ (80014e4 <update_Encoder_Data+0x154>)
 80013ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b48      	ldr	r3, [pc, #288]	@ (80014e8 <update_Encoder_Data+0x158>)
 80013c8:	801a      	strh	r2, [r3, #0]
	previous_ForwardLeft_count = ForwardLeft_count;
 80013ca:	4a46      	ldr	r2, [pc, #280]	@ (80014e4 <update_Encoder_Data+0x154>)
 80013cc:	8afb      	ldrh	r3, [r7, #22]
 80013ce:	8013      	strh	r3, [r2, #0]

	ForwardRight_delta = ForwardRight_count - previous_ForwardRight_count;
 80013d0:	8aba      	ldrh	r2, [r7, #20]
 80013d2:	4b46      	ldr	r3, [pc, #280]	@ (80014ec <update_Encoder_Data+0x15c>)
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b21a      	sxth	r2, r3
 80013e0:	4b43      	ldr	r3, [pc, #268]	@ (80014f0 <update_Encoder_Data+0x160>)
 80013e2:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = ForwardRight_count;
 80013e4:	4a41      	ldr	r2, [pc, #260]	@ (80014ec <update_Encoder_Data+0x15c>)
 80013e6:	8abb      	ldrh	r3, [r7, #20]
 80013e8:	8013      	strh	r3, [r2, #0]

	RearLeft_delta = RearLeft_count - previous_RearLeft_count;
 80013ea:	8a7a      	ldrh	r2, [r7, #18]
 80013ec:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <update_Encoder_Data+0x164>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	4b3f      	ldr	r3, [pc, #252]	@ (80014f8 <update_Encoder_Data+0x168>)
 80013fc:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = RearLeft_count;
 80013fe:	4a3d      	ldr	r2, [pc, #244]	@ (80014f4 <update_Encoder_Data+0x164>)
 8001400:	8a7b      	ldrh	r3, [r7, #18]
 8001402:	8013      	strh	r3, [r2, #0]


	RearRight_delta = RearRight_count - previous_RearRight_count;
 8001404:	8a3a      	ldrh	r2, [r7, #16]
 8001406:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <update_Encoder_Data+0x16c>)
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	b29b      	uxth	r3, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <update_Encoder_Data+0x170>)
 8001416:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = RearRight_count;
 8001418:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <update_Encoder_Data+0x16c>)
 800141a:	8a3b      	ldrh	r3, [r7, #16]
 800141c:	8013      	strh	r3, [r2, #0]

	float ForwardLeft = ForwardLeft_delta * RAD_PER_COUNT_FORWARD_LEFT;
 800141e:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <update_Encoder_Data+0x158>)
 8001420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001504 <update_Encoder_Data+0x174>
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001434:	edc7 7a03 	vstr	s15, [r7, #12]
	float ForwardRight = ForwardRight_delta * RAD_PER_COUNT_FORWARD_RIGHT;
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <update_Encoder_Data+0x160>)
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001446:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001504 <update_Encoder_Data+0x174>
 800144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144e:	edc7 7a02 	vstr	s15, [r7, #8]
	float RearLeft = RearLeft_delta * RAD_PER_COUNT_REAR_LEFT;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <update_Encoder_Data+0x168>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001460:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001504 <update_Encoder_Data+0x174>
 8001464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001468:	edc7 7a01 	vstr	s15, [r7, #4]
	float RearRight = RearRight_delta * RAD_PER_COUNT_REAR_RIGHT;
 800146c:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <update_Encoder_Data+0x170>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001504 <update_Encoder_Data+0x174>
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	edc7 7a00 	vstr	s15, [r7]
//	current_wheel_W.front_left = ForwardLeft * LOOP_FREQUENCY;
//	current_wheel_W.rear_left = RearLeft * LOOP_FREQUENCY;
//	current_wheel_W.front_right = ForwardRight * LOOP_FREQUENCY;
//	current_wheel_W.rear_right = RearRight * LOOP_FREQUENCY;

	current_wheel_W.front_left = ForwardLeft * LOOP_FREQUENCY;
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <update_Encoder_Data+0x178>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <update_Encoder_Data+0x17c>)
 8001496:	edc3 7a00 	vstr	s15, [r3]
	current_wheel_W.rear_left = RearLeft * LOOP_FREQUENCY;
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <update_Encoder_Data+0x178>)
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <update_Encoder_Data+0x17c>)
 80014aa:	edc3 7a01 	vstr	s15, [r3, #4]
	current_wheel_W.front_right = ForwardRight * LOOP_FREQUENCY;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <update_Encoder_Data+0x178>)
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <update_Encoder_Data+0x17c>)
 80014be:	edc3 7a03 	vstr	s15, [r3, #12]
	current_wheel_W.rear_right = RearRight * LOOP_FREQUENCY;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <update_Encoder_Data+0x178>)
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	edd7 7a00 	vldr	s15, [r7]
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <update_Encoder_Data+0x17c>)
 80014d2:	edc3 7a02 	vstr	s15, [r3, #8]

	calculate_robot_velocity();
 80014d6:	f000 f92d 	bl	8001734 <calculate_robot_velocity>
	//UART_Transmit_Float(&huart2, ">y", current_robot_velocity.vy, 3);

}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000006c 	.word	0x2000006c
 80014e8:	20000064 	.word	0x20000064
 80014ec:	2000006e 	.word	0x2000006e
 80014f0:	20000066 	.word	0x20000066
 80014f4:	20000070 	.word	0x20000070
 80014f8:	20000068 	.word	0x20000068
 80014fc:	20000072 	.word	0x20000072
 8001500:	2000006a 	.word	0x2000006a
 8001504:	3a723872 	.word	0x3a723872
 8001508:	08007818 	.word	0x08007818
 800150c:	2000003c 	.word	0x2000003c

08001510 <mecanum_inverse_kinematics>:
 * ω1 = (1/R) * (vx - vy - (L+W)*ω)  // Front Left
 * ω2 = (1/R) * (vx + vy - (L+W)*ω)  // Rear Left
 * ω3 = (1/R) * (vx - vy + (L+W)*ω)  // Rear Right
 * ω4 = (1/R) * (vx + vy + (L+W)*ω)  // Front Right
 */
void mecanum_inverse_kinematics(RobotVelocity robot_vel, WheelVelocities* wheel_vel) {
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	eef0 6a40 	vmov.f32	s13, s0
 800151a:	eeb0 7a60 	vmov.f32	s14, s1
 800151e:	eef0 7a41 	vmov.f32	s15, s2
 8001522:	6038      	str	r0, [r7, #0]
 8001524:	edc7 6a01 	vstr	s13, [r7, #4]
 8001528:	ed87 7a02 	vstr	s14, [r7, #8]
 800152c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate wheel angular velocities (rad/s)

	wheel_vel->front_left  = inv_radius * (robot_vel.vx - robot_vel.vy - L_plus_W * robot_vel.omega);
 8001530:	ed97 7a01 	vldr	s14, [r7, #4]
 8001534:	edd7 7a02 	vldr	s15, [r7, #8]
 8001538:	ee37 7a67 	vsub.f32	s14, s14, s15
 800153c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <mecanum_inverse_kinematics+0xe4>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <mecanum_inverse_kinematics+0xe8>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	edc3 7a00 	vstr	s15, [r3]
	wheel_vel->front_right = inv_radius * (robot_vel.vx + robot_vel.vy + L_plus_W * robot_vel.omega);
 800155e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001562:	edd7 7a02 	vldr	s15, [r7, #8]
 8001566:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156a:	edd7 6a03 	vldr	s13, [r7, #12]
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <mecanum_inverse_kinematics+0xe4>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <mecanum_inverse_kinematics+0xe8>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a03 	vstr	s15, [r3, #12]
	wheel_vel->rear_left   = inv_radius * (robot_vel.vx + robot_vel.vy - L_plus_W * robot_vel.omega);
 800158c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001590:	edd7 7a02 	vldr	s15, [r7, #8]
 8001594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001598:	edd7 6a03 	vldr	s13, [r7, #12]
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <mecanum_inverse_kinematics+0xe4>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <mecanum_inverse_kinematics+0xe8>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	edc3 7a01 	vstr	s15, [r3, #4]
	wheel_vel->rear_right  = inv_radius * (robot_vel.vx - robot_vel.vy + L_plus_W * robot_vel.omega);
 80015ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80015be:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c6:	edd7 6a03 	vldr	s13, [r7, #12]
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <mecanum_inverse_kinematics+0xe4>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <mecanum_inverse_kinematics+0xe8>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <mecanum_forward_kinematics>:
//
//    robot_vel->omega = R_over_4 / L_plus_W * (-wheel_vel.front_left - wheel_vel.rear_left +
//                                              wheel_vel.rear_right + wheel_vel.front_right);
//}

void mecanum_forward_kinematics(WheelVelocities wheel_vel, volatile RobotVelocity* robot_vel) {
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	eeb0 6a40 	vmov.f32	s12, s0
 8001606:	eef0 6a60 	vmov.f32	s13, s1
 800160a:	eeb0 7a41 	vmov.f32	s14, s2
 800160e:	eef0 7a61 	vmov.f32	s15, s3
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	ed87 6a02 	vstr	s12, [r7, #8]
 8001618:	edc7 6a03 	vstr	s13, [r7, #12]
 800161c:	ed87 7a04 	vstr	s14, [r7, #16]
 8001620:	edc7 7a05 	vstr	s15, [r7, #20]
    float R_over_4 = WHEEL_RADIUS / 4.0f;
 8001624:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <mecanum_forward_kinematics+0xc4>)
 8001626:	61fb      	str	r3, [r7, #28]
    float L_plus_W = HALF_LENGTH + HALF_WIDTH;
 8001628:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <mecanum_forward_kinematics+0xc8>)
 800162a:	61bb      	str	r3, [r7, #24]

    // Calculate robot velocities
    robot_vel->vx = R_over_4 * (wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left + wheel_vel.rear_right);
 800162c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001630:	edd7 7a05 	vldr	s15, [r7, #20]
 8001634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001638:	edd7 7a03 	vldr	s15, [r7, #12]
 800163c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001640:	edd7 7a04 	vldr	s15, [r7, #16]
 8001644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001648:	edd7 7a07 	vldr	s15, [r7, #28]
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	edc3 7a00 	vstr	s15, [r3]

    robot_vel->vy = R_over_4 * (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right);
 8001656:	ed97 7a05 	vldr	s14, [r7, #20]
 800165a:	edd7 7a02 	vldr	s15, [r7, #8]
 800165e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001662:	edd7 7a03 	vldr	s15, [r7, #12]
 8001666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166a:	edd7 7a04 	vldr	s15, [r7, #16]
 800166e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001672:	edd7 7a07 	vldr	s15, [r7, #28]
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edc3 7a01 	vstr	s15, [r3, #4]

    robot_vel->omega = R_over_4 / L_plus_W * (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right);
 8001680:	edd7 6a07 	vldr	s13, [r7, #28]
 8001684:	edd7 7a06 	vldr	s15, [r7, #24]
 8001688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800168c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001690:	edd7 7a02 	vldr	s15, [r7, #8]
 8001694:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001698:	edd7 7a03 	vldr	s15, [r7, #12]
 800169c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80016b2:	bf00      	nop
 80016b4:	3724      	adds	r7, #36	@ 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	3c1fbe77 	.word	0x3c1fbe77
 80016c4:	3ea8f5c2 	.word	0x3ea8f5c2

080016c8 <set_robot_velocity>:



void set_robot_velocity(float vx, float vy, float omega) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80016d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016d6:	ed87 1a01 	vstr	s2, [r7, #4]
    RobotVelocity desired_vel = {vx, vy, omega};
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    WheelVelocities wheel_targets;

    // Convert robot velocity to wheel velocities
    mecanum_inverse_kinematics(desired_vel, &wheel_targets);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016ee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80016f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016f6:	4618      	mov	r0, r3
 80016f8:	eeb0 0a66 	vmov.f32	s0, s13
 80016fc:	eef0 0a47 	vmov.f32	s1, s14
 8001700:	eeb0 1a67 	vmov.f32	s2, s15
 8001704:	f7ff ff04 	bl	8001510 <mecanum_inverse_kinematics>

    // Set target velocities for the motor controller
    setTargetVelocities(wheel_targets.front_left,  // m1
 8001708:	edd7 7a05 	vldr	s15, [r7, #20]
 800170c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001710:	edd7 6a07 	vldr	s13, [r7, #28]
 8001714:	ed97 6a08 	vldr	s12, [r7, #32]
 8001718:	eef0 1a46 	vmov.f32	s3, s12
 800171c:	eeb0 1a66 	vmov.f32	s2, s13
 8001720:	eef0 0a47 	vmov.f32	s1, s14
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	f001 fa08 	bl	8002b3c <setTargetVelocities>
                       wheel_targets.rear_left,    // m2
                       wheel_targets.rear_right,   // m3
                       wheel_targets.front_right); // m4
}
 800172c:	bf00      	nop
 800172e:	3730      	adds	r7, #48	@ 0x30
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <calculate_robot_velocity>:

void calculate_robot_velocity(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	mecanum_forward_kinematics(current_wheel_W, &current_robot_velocity);
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <calculate_robot_velocity+0x30>)
 800173a:	ed93 6a00 	vldr	s12, [r3]
 800173e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001742:	ed93 7a02 	vldr	s14, [r3, #8]
 8001746:	edd3 7a03 	vldr	s15, [r3, #12]
 800174a:	4807      	ldr	r0, [pc, #28]	@ (8001768 <calculate_robot_velocity+0x34>)
 800174c:	eeb0 0a46 	vmov.f32	s0, s12
 8001750:	eef0 0a66 	vmov.f32	s1, s13
 8001754:	eeb0 1a47 	vmov.f32	s2, s14
 8001758:	eef0 1a67 	vmov.f32	s3, s15
 800175c:	f7ff ff4e 	bl	80015fc <mecanum_forward_kinematics>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000003c 	.word	0x2000003c
 8001768:	20000030 	.word	0x20000030

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001772:	f001 ffa1 	bl	80036b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001776:	f000 f8d7 	bl	8001928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177a:	f000 fc4d 	bl	8002018 <MX_GPIO_Init>
  MX_DMA_Init();
 800177e:	f000 fc2b 	bl	8001fd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001782:	f000 fbd5 	bl	8001f30 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001786:	f000 f941 	bl	8001a0c <MX_ADC1_Init>
  MX_TIM1_Init();
 800178a:	f000 f991 	bl	8001ab0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800178e:	f000 fa37 	bl	8001c00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001792:	f000 fa89 	bl	8001ca8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001796:	f000 fadb 	bl	8001d50 <MX_TIM4_Init>
  MX_TIM5_Init();
 800179a:	f000 fb2d 	bl	8001df8 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800179e:	f000 fbf1 	bl	8001f84 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80017a2:	f000 fba1 	bl	8001ee8 <MX_TIM14_Init>
  MX_TIM13_Init();
 80017a6:	f000 fb7b 	bl	8001ea0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017aa:	2100      	movs	r1, #0
 80017ac:	484b      	ldr	r0, [pc, #300]	@ (80018dc <main+0x170>)
 80017ae:	f004 f829 	bl	8005804 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017b2:	2104      	movs	r1, #4
 80017b4:	4849      	ldr	r0, [pc, #292]	@ (80018dc <main+0x170>)
 80017b6:	f004 f825 	bl	8005804 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017ba:	2108      	movs	r1, #8
 80017bc:	4847      	ldr	r0, [pc, #284]	@ (80018dc <main+0x170>)
 80017be:	f004 f821 	bl	8005804 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80017c2:	210c      	movs	r1, #12
 80017c4:	4845      	ldr	r0, [pc, #276]	@ (80018dc <main+0x170>)
 80017c6:	f004 f81d 	bl	8005804 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80017ca:	213c      	movs	r1, #60	@ 0x3c
 80017cc:	4844      	ldr	r0, [pc, #272]	@ (80018e0 <main+0x174>)
 80017ce:	f004 f987 	bl	8005ae0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017d2:	213c      	movs	r1, #60	@ 0x3c
 80017d4:	4843      	ldr	r0, [pc, #268]	@ (80018e4 <main+0x178>)
 80017d6:	f004 f983 	bl	8005ae0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80017da:	213c      	movs	r1, #60	@ 0x3c
 80017dc:	4842      	ldr	r0, [pc, #264]	@ (80018e8 <main+0x17c>)
 80017de:	f004 f97f 	bl	8005ae0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80017e2:	213c      	movs	r1, #60	@ 0x3c
 80017e4:	4841      	ldr	r0, [pc, #260]	@ (80018ec <main+0x180>)
 80017e6:	f004 f97b 	bl	8005ae0 <HAL_TIM_Encoder_Start>

//  // Initialize kinematics system
//  init_kinematics();

  // Reset encoders
  resetEncoders();
 80017ea:	f7ff fd83 	bl	80012f4 <resetEncoders>

  // Init BLuetooth Debug
  UART_Init(&huart2);
 80017ee:	4840      	ldr	r0, [pc, #256]	@ (80018f0 <main+0x184>)
 80017f0:	f7ff fbae 	bl	8000f50 <UART_Init>

  // Velocity timer
  HAL_TIM_Base_Start_IT(&htim14);
 80017f4:	483f      	ldr	r0, [pc, #252]	@ (80018f4 <main+0x188>)
 80017f6:	f003 ff45 	bl	8005684 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 80017fa:	483f      	ldr	r0, [pc, #252]	@ (80018f8 <main+0x18c>)
 80017fc:	f003 ff42 	bl	8005684 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001806:	483d      	ldr	r0, [pc, #244]	@ (80018fc <main+0x190>)
 8001808:	f003 f880 	bl	800490c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800180c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001810:	f001 ffc4 	bl	800379c <HAL_Delay>
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800181a:	4838      	ldr	r0, [pc, #224]	@ (80018fc <main+0x190>)
 800181c:	f003 f876 	bl	800490c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001820:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001824:	f001 ffba 	bl	800379c <HAL_Delay>

  Controller_Init(&controller);
 8001828:	4835      	ldr	r0, [pc, #212]	@ (8001900 <main+0x194>)
 800182a:	f7ff fc14 	bl	8001056 <Controller_Init>
//  HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 0);
//  HAL_GPIO_WritePin(M1_INA_GPIO_Port, M1_INA_Pin, 1);
//  HAL_GPIO_WritePin(M1_INB_GPIO_Port, M1_INB_Pin, 0);


  setTargetVelocities(0, 0, 0, 0);
 800182e:	eddf 1a35 	vldr	s3, [pc, #212]	@ 8001904 <main+0x198>
 8001832:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8001904 <main+0x198>
 8001836:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8001904 <main+0x198>
 800183a:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001904 <main+0x198>
 800183e:	f001 f97d 	bl	8002b3c <setTargetVelocities>
  Profile_Reset(&x_profile);
 8001842:	4831      	ldr	r0, [pc, #196]	@ (8001908 <main+0x19c>)
 8001844:	f001 f99a 	bl	8002b7c <Profile_Reset>
  Profile_Reset(&y_profile);
 8001848:	4830      	ldr	r0, [pc, #192]	@ (800190c <main+0x1a0>)
 800184a:	f001 f997 	bl	8002b7c <Profile_Reset>
  Profile_Reset(&W_profile);
 800184e:	4830      	ldr	r0, [pc, #192]	@ (8001910 <main+0x1a4>)
 8001850:	f001 f994 	bl	8002b7c <Profile_Reset>

  HAL_Delay(1000);
 8001854:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001858:	f001 ffa0 	bl	800379c <HAL_Delay>

  //Profile_Move(&x_profile, 2, 0.25, 0, 0.05);
  Profile_Move(&x_profile, 0, 0, 0, 0);
 800185c:	eddf 1a29 	vldr	s3, [pc, #164]	@ 8001904 <main+0x198>
 8001860:	ed9f 1a28 	vldr	s2, [pc, #160]	@ 8001904 <main+0x198>
 8001864:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8001904 <main+0x198>
 8001868:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001904 <main+0x198>
 800186c:	4826      	ldr	r0, [pc, #152]	@ (8001908 <main+0x19c>)
 800186e:	f001 fb17 	bl	8002ea0 <Profile_Move>
  //Profile_Move(&y_profile, 2, 0.25, 0, 0.05);
  Profile_Move(&y_profile, 0, 0, 0, 0);
 8001872:	eddf 1a24 	vldr	s3, [pc, #144]	@ 8001904 <main+0x198>
 8001876:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8001904 <main+0x198>
 800187a:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8001904 <main+0x198>
 800187e:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001904 <main+0x198>
 8001882:	4822      	ldr	r0, [pc, #136]	@ (800190c <main+0x1a0>)
 8001884:	f001 fb0c 	bl	8002ea0 <Profile_Move>

  Profile_Move(&W_profile, 1, 0.1, 0, 0.05);
 8001888:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8001914 <main+0x1a8>
 800188c:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 8001904 <main+0x198>
 8001890:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001918 <main+0x1ac>
 8001894:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001898:	481d      	ldr	r0, [pc, #116]	@ (8001910 <main+0x1a4>)
 800189a:	f001 fb01 	bl	8002ea0 <Profile_Move>

  HAL_Delay(1000);
 800189e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a2:	f001 ff7b 	bl	800379c <HAL_Delay>

  HAL_UART_Receive_IT(&huart3, rx_data, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	491c      	ldr	r1, [pc, #112]	@ (800191c <main+0x1b0>)
 80018aa:	481d      	ldr	r0, [pc, #116]	@ (8001920 <main+0x1b4>)
 80018ac:	f004 ffbf 	bl	800682e <HAL_UART_Receive_IT>
//    set_robot_velocity(0.08, 0, 0);
//

// set_robot_velocity(0, 0, 0);
 //resetIntegralTerms();
  int i = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */
	//int cunt = getRearRightEncoderCounts();
	 //float current = 2.434;
	//UART_Transmit_Float(&huart2, "i", current, 2);
    UART_Transmit_Int(&huart2, "S", i);
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	491b      	ldr	r1, [pc, #108]	@ (8001924 <main+0x1b8>)
 80018b8:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <main+0x184>)
 80018ba:	f7ff fb55 	bl	8000f68 <UART_Transmit_Int>
    UART_Transmit_Int(&huart3, "S", i);
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4918      	ldr	r1, [pc, #96]	@ (8001924 <main+0x1b8>)
 80018c2:	4817      	ldr	r0, [pc, #92]	@ (8001920 <main+0x1b4>)
 80018c4:	f7ff fb50 	bl	8000f68 <UART_Transmit_Int>
    i++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3301      	adds	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
    HAL_Delay(1000);
 80018ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018d2:	f001 ff63 	bl	800379c <HAL_Delay>
    UART_Transmit_Int(&huart2, "S", i);
 80018d6:	bf00      	nop
 80018d8:	e7ec      	b.n	80018b4 <main+0x148>
 80018da:	bf00      	nop
 80018dc:	2000011c 	.word	0x2000011c
 80018e0:	20000164 	.word	0x20000164
 80018e4:	200001ac 	.word	0x200001ac
 80018e8:	200001f4 	.word	0x200001f4
 80018ec:	2000023c 	.word	0x2000023c
 80018f0:	20000314 	.word	0x20000314
 80018f4:	200002cc 	.word	0x200002cc
 80018f8:	20000284 	.word	0x20000284
 80018fc:	40020000 	.word	0x40020000
 8001900:	20000414 	.word	0x20000414
 8001904:	00000000 	.word	0x00000000
 8001908:	200003a8 	.word	0x200003a8
 800190c:	200003cc 	.word	0x200003cc
 8001910:	200003f0 	.word	0x200003f0
 8001914:	3d4ccccd 	.word	0x3d4ccccd
 8001918:	3dcccccd 	.word	0x3dcccccd
 800191c:	200003a4 	.word	0x200003a4
 8001920:	2000035c 	.word	0x2000035c
 8001924:	08007814 	.word	0x08007814

08001928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b094      	sub	sp, #80	@ 0x50
 800192c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	2234      	movs	r2, #52	@ 0x34
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f005 fef4 	bl	8007724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <SystemClock_Config+0xdc>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	4a2b      	ldr	r2, [pc, #172]	@ (8001a04 <SystemClock_Config+0xdc>)
 8001956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800195a:	6413      	str	r3, [r2, #64]	@ 0x40
 800195c:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <SystemClock_Config+0xdc>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001968:	2300      	movs	r3, #0
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <SystemClock_Config+0xe0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a25      	ldr	r2, [pc, #148]	@ (8001a08 <SystemClock_Config+0xe0>)
 8001972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <SystemClock_Config+0xe0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001984:	2302      	movs	r3, #2
 8001986:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198c:	2310      	movs	r3, #16
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001990:	2302      	movs	r3, #2
 8001992:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001994:	2300      	movs	r3, #0
 8001996:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001998:	2308      	movs	r3, #8
 800199a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800199c:	23b4      	movs	r3, #180	@ 0xb4
 800199e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019a4:	2302      	movs	r3, #2
 80019a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019a8:	2302      	movs	r3, #2
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fb79 	bl	80050a8 <HAL_RCC_OscConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019bc:	f000 fc38 	bl	8002230 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019c0:	f002 ffd8 	bl	8004974 <HAL_PWREx_EnableOverDrive>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019ca:	f000 fc31 	bl	8002230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	230f      	movs	r3, #15
 80019d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d2:	2302      	movs	r3, #2
 80019d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2105      	movs	r1, #5
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 f811 	bl	8004a14 <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019f8:	f000 fc1a 	bl	8002230 <Error_Handler>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3750      	adds	r7, #80	@ 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000

08001a0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a12:	463b      	mov	r3, r7
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a20:	4a21      	ldr	r2, [pc, #132]	@ (8001aa8 <MX_ADC1_Init+0x9c>)
 8001a22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a24:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a4e:	4a17      	ldr	r2, [pc, #92]	@ (8001aac <MX_ADC1_Init+0xa0>)
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a6c:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a6e:	f001 feb9 	bl	80037e4 <HAL_ADC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a78:	f000 fbda 	bl	8002230 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_ADC1_Init+0x98>)
 8001a8e:	f001 feed 	bl	800386c <HAL_ADC_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a98:	f000 fbca 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000074 	.word	0x20000074
 8001aa8:	40012000 	.word	0x40012000
 8001aac:	0f000001 	.word	0x0f000001

08001ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b092      	sub	sp, #72	@ 0x48
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 fe22 	bl	8007724 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae0:	4b45      	ldr	r3, [pc, #276]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001ae2:	4a46      	ldr	r2, [pc, #280]	@ (8001bfc <MX_TIM1_Init+0x14c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ae6:	4b44      	ldr	r3, [pc, #272]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b42      	ldr	r3, [pc, #264]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001af2:	4b41      	ldr	r3, [pc, #260]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001af4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001af8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b00:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b0c:	483a      	ldr	r0, [pc, #232]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001b0e:	f003 fe29 	bl	8005764 <HAL_TIM_PWM_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b18:	f000 fb8a 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4833      	ldr	r0, [pc, #204]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001b2c:	f004 fcc2 	bl	80064b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b36:	f000 fb7b 	bl	8002230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3a:	2360      	movs	r3, #96	@ 0x60
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b46:	2300      	movs	r3, #0
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4826      	ldr	r0, [pc, #152]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001b60:	f004 f93c 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001b6a:	f000 fb61 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b72:	2204      	movs	r2, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4820      	ldr	r0, [pc, #128]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001b78:	f004 f930 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b82:	f000 fb55 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481a      	ldr	r0, [pc, #104]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001b90:	f004 f924 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001b9a:	f000 fb49 	bl	8002230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4814      	ldr	r0, [pc, #80]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001ba8:	f004 f918 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001bb2:	f000 fb3d 	bl	8002230 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4807      	ldr	r0, [pc, #28]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001bda:	f004 fce7 	bl	80065ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001be4:	f000 fb24 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001be8:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <MX_TIM1_Init+0x148>)
 8001bea:	f001 fbb5 	bl	8003358 <HAL_TIM_MspPostInit>

}
 8001bee:	bf00      	nop
 8001bf0:	3748      	adds	r7, #72	@ 0x48
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000011c 	.word	0x2000011c
 8001bfc:	40010000 	.word	0x40010000

08001c00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 fd88 	bl	8007724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c44:	2303      	movs	r3, #3
 8001c46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480d      	ldr	r0, [pc, #52]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c70:	f003 fe90 	bl	8005994 <HAL_TIM_Encoder_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c7a:	f000 fad9 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	@ (8001ca4 <MX_TIM2_Init+0xa4>)
 8001c8c:	f004 fc12 	bl	80064b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c96:	f000 facb 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	@ 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000164 	.word	0x20000164

08001ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	@ 0x30
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2224      	movs	r2, #36	@ 0x24
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f005 fd34 	bl	8007724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cc4:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <MX_TIM3_Init+0xa0>)
 8001cc6:	4a21      	ldr	r2, [pc, #132]	@ (8001d4c <MX_TIM3_Init+0xa4>)
 8001cc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <MX_TIM3_Init+0xa0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <MX_TIM3_Init+0xa0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <MX_TIM3_Init+0xa0>)
 8001cd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <MX_TIM3_Init+0xa0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <MX_TIM3_Init+0xa0>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cea:	2303      	movs	r3, #3
 8001cec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d02:	2301      	movs	r3, #1
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	4619      	mov	r1, r3
 8001d14:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <MX_TIM3_Init+0xa0>)
 8001d16:	f003 fe3d 	bl	8005994 <HAL_TIM_Encoder_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d20:	f000 fa86 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <MX_TIM3_Init+0xa0>)
 8001d32:	f004 fbbf 	bl	80064b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d3c:	f000 fa78 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	3730      	adds	r7, #48	@ 0x30
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200001ac 	.word	0x200001ac
 8001d4c:	40000400 	.word	0x40000400

08001d50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	@ 0x30
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2224      	movs	r2, #36	@ 0x24
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f005 fce0 	bl	8007724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d6c:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <MX_TIM4_Init+0xa0>)
 8001d6e:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <MX_TIM4_Init+0xa4>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d72:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <MX_TIM4_Init+0xa0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <MX_TIM4_Init+0xa0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <MX_TIM4_Init+0xa0>)
 8001d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <MX_TIM4_Init+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <MX_TIM4_Init+0xa0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d92:	2303      	movs	r3, #3
 8001d94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <MX_TIM4_Init+0xa0>)
 8001dbe:	f003 fde9 	bl	8005994 <HAL_TIM_Encoder_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001dc8:	f000 fa32 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_TIM4_Init+0xa0>)
 8001dda:	f004 fb6b 	bl	80064b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001de4:	f000 fa24 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	3730      	adds	r7, #48	@ 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200001f4 	.word	0x200001f4
 8001df4:	40000800 	.word	0x40000800

08001df8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2224      	movs	r2, #36	@ 0x24
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 fc8c 	bl	8007724 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e14:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <MX_TIM5_Init+0xa0>)
 8001e16:	4a21      	ldr	r2, [pc, #132]	@ (8001e9c <MX_TIM5_Init+0xa4>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <MX_TIM5_Init+0xa0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <MX_TIM5_Init+0xa0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001e26:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <MX_TIM5_Init+0xa0>)
 8001e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <MX_TIM5_Init+0xa0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <MX_TIM5_Init+0xa0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e42:	2301      	movs	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e52:	2301      	movs	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4619      	mov	r1, r3
 8001e64:	480c      	ldr	r0, [pc, #48]	@ (8001e98 <MX_TIM5_Init+0xa0>)
 8001e66:	f003 fd95 	bl	8005994 <HAL_TIM_Encoder_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e70:	f000 f9de 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_TIM5_Init+0xa0>)
 8001e82:	f004 fb17 	bl	80064b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001e8c:	f000 f9d0 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	3730      	adds	r7, #48	@ 0x30
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000023c 	.word	0x2000023c
 8001e9c:	40000c00 	.word	0x40000c00

08001ea0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <MX_TIM13_Init+0x40>)
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee4 <MX_TIM13_Init+0x44>)
 8001ea8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1800-1;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <MX_TIM13_Init+0x40>)
 8001eac:	f240 7207 	movw	r2, #1799	@ 0x707
 8001eb0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <MX_TIM13_Init+0x40>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <MX_TIM13_Init+0x40>)
 8001eba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ebe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <MX_TIM13_Init+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <MX_TIM13_Init+0x40>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ecc:	4804      	ldr	r0, [pc, #16]	@ (8001ee0 <MX_TIM13_Init+0x40>)
 8001ece:	f003 fb89 	bl	80055e4 <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001ed8:	f000 f9aa 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000284 	.word	0x20000284
 8001ee4:	40001c00 	.word	0x40001c00

08001ee8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_TIM14_Init+0x40>)
 8001eee:	4a0f      	ldr	r2, [pc, #60]	@ (8001f2c <MX_TIM14_Init+0x44>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1800-1;
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <MX_TIM14_Init+0x40>)
 8001ef4:	f240 7207 	movw	r2, #1799	@ 0x707
 8001ef8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <MX_TIM14_Init+0x40>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 500-1;
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_TIM14_Init+0x40>)
 8001f02:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001f06:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <MX_TIM14_Init+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_TIM14_Init+0x40>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_TIM14_Init+0x40>)
 8001f16:	f003 fb65 	bl	80055e4 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001f20:	f000 f986 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200002cc 	.word	0x200002cc
 8001f2c:	40002000 	.word	0x40002000

08001f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <MX_USART2_UART_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <MX_USART2_UART_Init+0x4c>)
 8001f68:	f004 fb86 	bl	8006678 <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f72:	f000 f95d 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000314 	.word	0x20000314
 8001f80:	40004400 	.word	0x40004400

08001f84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f88:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	@ (8001fd4 <MX_USART3_UART_Init+0x50>)
 8001f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <MX_USART3_UART_Init+0x4c>)
 8001fbc:	f004 fb5c 	bl	8006678 <HAL_UART_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fc6:	f000 f933 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000035c 	.word	0x2000035c
 8001fd4:	40004800 	.word	0x40004800

08001fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <MX_DMA_Init+0x3c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <MX_DMA_Init+0x3c>)
 8001fe8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <MX_DMA_Init+0x3c>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2038      	movs	r0, #56	@ 0x38
 8002000:	f001 ff3d 	bl	8003e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002004:	2038      	movs	r0, #56	@ 0x38
 8002006:	f001 ff56 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b43      	ldr	r3, [pc, #268]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a42      	ldr	r2, [pc, #264]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b40      	ldr	r3, [pc, #256]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b3c      	ldr	r3, [pc, #240]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a3b      	ldr	r2, [pc, #236]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <MX_GPIO_Init+0x128>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b35      	ldr	r3, [pc, #212]	@ (8002140 <MX_GPIO_Init+0x128>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a34      	ldr	r2, [pc, #208]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b32      	ldr	r3, [pc, #200]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a2d      	ldr	r2, [pc, #180]	@ (8002140 <MX_GPIO_Init+0x128>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <MX_GPIO_Init+0x128>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 800209e:	2200      	movs	r2, #0
 80020a0:	f640 711c 	movw	r1, #3868	@ 0xf1c
 80020a4:	4827      	ldr	r0, [pc, #156]	@ (8002144 <MX_GPIO_Init+0x12c>)
 80020a6:	f002 fc31 	bl	800490c <HAL_GPIO_WritePin>
                          |M2_INB_Pin|M1_INA_Pin|M1_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2136      	movs	r1, #54	@ 0x36
 80020ae:	4826      	ldr	r0, [pc, #152]	@ (8002148 <MX_GPIO_Init+0x130>)
 80020b0:	f002 fc2c 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ba:	4824      	ldr	r0, [pc, #144]	@ (800214c <MX_GPIO_Init+0x134>)
 80020bc:	f002 fc26 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_INA_Pin M4_INB_Pin TX_EN_Pin M2_INA_Pin
                           M1_INA_Pin M1_INB_Pin */
  GPIO_InitStruct.Pin = M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 80020c0:	f640 531c 	movw	r3, #3356	@ 0xd1c
 80020c4:	617b      	str	r3, [r7, #20]
                          |M1_INA_Pin|M1_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	481a      	ldr	r0, [pc, #104]	@ (8002144 <MX_GPIO_Init+0x12c>)
 80020da:	f002 fa83 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RX_Pin LED_TX_Pin M3_INA_Pin M3_INB_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin;
 80020de:	2336      	movs	r3, #54	@ 0x36
 80020e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e2:	2301      	movs	r3, #1
 80020e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4814      	ldr	r0, [pc, #80]	@ (8002148 <MX_GPIO_Init+0x130>)
 80020f6:	f002 fa75 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_INB_Pin */
  GPIO_InitStruct.Pin = M2_INB_Pin;
 80020fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002100:	2301      	movs	r3, #1
 8002102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_INB_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	480c      	ldr	r0, [pc, #48]	@ (8002144 <MX_GPIO_Init+0x12c>)
 8002114:	f002 fa66 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8002118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	4806      	ldr	r0, [pc, #24]	@ (800214c <MX_GPIO_Init+0x134>)
 8002132:	f002 fa57 	bl	80045e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	@ 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40020800 	.word	0x40020800
 8002148:	40020400 	.word	0x40020400
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_TIM_PeriodElapsedCallback>:
{
    return &hadc1;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002150:	b580      	push	{r7, lr}
 8002152:	ed2d 8b02 	vpush	{d8}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a1a      	ldr	r2, [pc, #104]	@ (80021c8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d104      	bne.n	800216e <HAL_TIM_PeriodElapsedCallback+0x1e>
		update_Encoder_Data();
 8002164:	f7ff f914 	bl	8001390 <update_Encoder_Data>
		updateMotors();
 8002168:	f000 f9a6 	bl	80024b8 <updateMotors>
		Profile_Update(&y_profile);
		Profile_Update(&W_profile);
		UpdateControllers(&controller, Profile_GetSpeed(&x_profile), Profile_GetSpeed(&y_profile),  Profile_GetSpeed(&W_profile), 0);

	}
}
 800216c:	e026      	b.n	80021bc <HAL_TIM_PeriodElapsedCallback+0x6c>
	else if(htim == &htim13){
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a16      	ldr	r2, [pc, #88]	@ (80021cc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d122      	bne.n	80021bc <HAL_TIM_PeriodElapsedCallback+0x6c>
		Profile_Update(&x_profile);
 8002176:	4816      	ldr	r0, [pc, #88]	@ (80021d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002178:	f000 fdcc 	bl	8002d14 <Profile_Update>
		Profile_Update(&y_profile);
 800217c:	4815      	ldr	r0, [pc, #84]	@ (80021d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800217e:	f000 fdc9 	bl	8002d14 <Profile_Update>
		Profile_Update(&W_profile);
 8002182:	4815      	ldr	r0, [pc, #84]	@ (80021d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002184:	f000 fdc6 	bl	8002d14 <Profile_Update>
		UpdateControllers(&controller, Profile_GetSpeed(&x_profile), Profile_GetSpeed(&y_profile),  Profile_GetSpeed(&W_profile), 0);
 8002188:	4811      	ldr	r0, [pc, #68]	@ (80021d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800218a:	f000 fea4 	bl	8002ed6 <Profile_GetSpeed>
 800218e:	eeb0 8a40 	vmov.f32	s16, s0
 8002192:	4810      	ldr	r0, [pc, #64]	@ (80021d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002194:	f000 fe9f 	bl	8002ed6 <Profile_GetSpeed>
 8002198:	eef0 8a40 	vmov.f32	s17, s0
 800219c:	480e      	ldr	r0, [pc, #56]	@ (80021d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800219e:	f000 fe9a 	bl	8002ed6 <Profile_GetSpeed>
 80021a2:	eef0 7a40 	vmov.f32	s15, s0
 80021a6:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 80021dc <HAL_TIM_PeriodElapsedCallback+0x8c>
 80021aa:	eeb0 1a67 	vmov.f32	s2, s15
 80021ae:	eef0 0a68 	vmov.f32	s1, s17
 80021b2:	eeb0 0a48 	vmov.f32	s0, s16
 80021b6:	480a      	ldr	r0, [pc, #40]	@ (80021e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80021b8:	f7fe ff80 	bl	80010bc <UpdateControllers>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	ecbd 8b02 	vpop	{d8}
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200002cc 	.word	0x200002cc
 80021cc:	20000284 	.word	0x20000284
 80021d0:	200003a8 	.word	0x200003a8
 80021d4:	200003cc 	.word	0x200003cc
 80021d8:	200003f0 	.word	0x200003f0
 80021dc:	00000000 	.word	0x00000000
 80021e0:	20000414 	.word	0x20000414

080021e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002220 <HAL_UART_RxCpltCallback+0x3c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d110      	bne.n	8002216 <HAL_UART_RxCpltCallback+0x32>
  {
    // Transmit received data via USART2


    HAL_UART_Transmit(&huart2, rx_data, 1, HAL_MAX_DELAY);
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
 80021f8:	2201      	movs	r2, #1
 80021fa:	490a      	ldr	r1, [pc, #40]	@ (8002224 <HAL_UART_RxCpltCallback+0x40>)
 80021fc:	480a      	ldr	r0, [pc, #40]	@ (8002228 <HAL_UART_RxCpltCallback+0x44>)
 80021fe:	f004 fa8b 	bl	8006718 <HAL_UART_Transmit>
	//UART_Transmit_Int(&huart2, "RT", 69);

    HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 8002202:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002206:	4809      	ldr	r0, [pc, #36]	@ (800222c <HAL_UART_RxCpltCallback+0x48>)
 8002208:	f002 fb99 	bl	800493e <HAL_GPIO_TogglePin>

    // Restart reception
    HAL_UART_Receive_IT(&huart3, rx_data, 1);
 800220c:	2201      	movs	r2, #1
 800220e:	4905      	ldr	r1, [pc, #20]	@ (8002224 <HAL_UART_RxCpltCallback+0x40>)
 8002210:	4803      	ldr	r0, [pc, #12]	@ (8002220 <HAL_UART_RxCpltCallback+0x3c>)
 8002212:	f004 fb0c 	bl	800682e <HAL_UART_Receive_IT>
  }
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000035c 	.word	0x2000035c
 8002224:	200003a4 	.word	0x200003a4
 8002228:	20000314 	.word	0x20000314
 800222c:	40020000 	.word	0x40020000

08002230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002234:	b672      	cpsid	i
}
 8002236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <Error_Handler+0x8>
 800223c:	0000      	movs	r0, r0
	...

08002240 <limitPWM>:
volatile float m4_int = 0;




float limitPWM(float pwm) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	ed87 0a01 	vstr	s0, [r7, #4]
    if (pwm > PWM_MAX)
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe f948 	bl	80004e0 <__aeabi_f2d>
 8002250:	a313      	add	r3, pc, #76	@ (adr r3, 80022a0 <limitPWM+0x60>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe fc2b 	bl	8000ab0 <__aeabi_dcmpgt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <limitPWM+0x24>
        return PWM_MAX;
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <limitPWM+0x58>)
 8002262:	e00d      	b.n	8002280 <limitPWM+0x40>
    else if (pwm < -PWM_MAX)
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7fe f93b 	bl	80004e0 <__aeabi_f2d>
 800226a:	a309      	add	r3, pc, #36	@ (adr r3, 8002290 <limitPWM+0x50>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe fc00 	bl	8000a74 <__aeabi_dcmplt>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <limitPWM+0x3e>
        return -PWM_MAX;
 800227a:	4b08      	ldr	r3, [pc, #32]	@ (800229c <limitPWM+0x5c>)
 800227c:	e000      	b.n	8002280 <limitPWM+0x40>
    return pwm;
 800227e:	687b      	ldr	r3, [r7, #4]
}
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eeb0 0a67 	vmov.f32	s0, s15
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	7ae147ae 	.word	0x7ae147ae
 8002294:	bfefae14 	.word	0xbfefae14
 8002298:	3f7d70a4 	.word	0x3f7d70a4
 800229c:	bf7d70a4 	.word	0xbf7d70a4
 80022a0:	7ae147ae 	.word	0x7ae147ae
 80022a4:	3fefae14 	.word	0x3fefae14

080022a8 <setForwardLeftMotorPWM>:

void setForwardLeftMotorPWM(float pwm) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 80022b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80022b6:	f7ff ffc3 	bl	8002240 <limitPWM>
 80022ba:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 80022be:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	db0f      	blt.n	80022ec <setForwardLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M1_INA = PC10, M1_INB = PC11
        // Reset bit 10 and Set bit 11 simultaneously
        GPIOC->BSRR = (1U << (10 + 16)) | (1U << 11);
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <setForwardLeftMotorPWM+0x70>)
 80022ce:	4a13      	ldr	r2, [pc, #76]	@ (800231c <setForwardLeftMotorPWM+0x74>)
 80022d0:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 80022d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002320 <setForwardLeftMotorPWM+0x78>
 80022da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <setForwardLeftMotorPWM+0x7c>)
 80022e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e4:	ee17 2a90 	vmov	r2, s15
 80022e8:	635a      	str	r2, [r3, #52]	@ 0x34
        // Reverse direction: INA=1, INB=0
        // Set bit 10 and Reset bit 11 simultaneously
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80022ea:	e010      	b.n	800230e <setForwardLeftMotorPWM+0x66>
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <setForwardLeftMotorPWM+0x70>)
 80022ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002328 <setForwardLeftMotorPWM+0x80>)
 80022f0:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80022f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f6:	eef1 7a67 	vneg.f32	s15, s15
 80022fa:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002320 <setForwardLeftMotorPWM+0x78>
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <setForwardLeftMotorPWM+0x7c>)
 8002304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002308:	ee17 2a90 	vmov	r2, s15
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40020800 	.word	0x40020800
 800231c:	04000800 	.word	0x04000800
 8002320:	45e0f800 	.word	0x45e0f800
 8002324:	40010000 	.word	0x40010000
 8002328:	08000400 	.word	0x08000400

0800232c <setForwardRightMotorPWM>:

void setForwardRightMotorPWM(float pwm) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8002336:	ed97 0a01 	vldr	s0, [r7, #4]
 800233a:	f7ff ff81 	bl	8002240 <limitPWM>
 800233e:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002342:	edd7 7a01 	vldr	s15, [r7, #4]
 8002346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	db0f      	blt.n	8002370 <setForwardRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M2_INA = PC8, M2_INB = PC9
        // Set bit 8 and Reset bit 9 simultaneously
        GPIOC->BSRR = (1U << 8) | (1U << (9 + 16));
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <setForwardRightMotorPWM+0x70>)
 8002352:	4a13      	ldr	r2, [pc, #76]	@ (80023a0 <setForwardRightMotorPWM+0x74>)
 8002354:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002356:	edd7 7a01 	vldr	s15, [r7, #4]
 800235a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80023a4 <setForwardRightMotorPWM+0x78>
 800235e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <setForwardRightMotorPWM+0x7c>)
 8002364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002368:	ee17 2a90 	vmov	r2, s15
 800236c:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reverse direction: INA=0, INB=1
        // Reset bit 8 and Set bit 9 simultaneously
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 800236e:	e010      	b.n	8002392 <setForwardRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
 8002370:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <setForwardRightMotorPWM+0x70>)
 8002372:	4a0e      	ldr	r2, [pc, #56]	@ (80023ac <setForwardRightMotorPWM+0x80>)
 8002374:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8002376:	edd7 7a01 	vldr	s15, [r7, #4]
 800237a:	eef1 7a67 	vneg.f32	s15, s15
 800237e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80023a4 <setForwardRightMotorPWM+0x78>
 8002382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <setForwardRightMotorPWM+0x7c>)
 8002388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238c:	ee17 2a90 	vmov	r2, s15
 8002390:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40020800 	.word	0x40020800
 80023a0:	02000100 	.word	0x02000100
 80023a4:	45e0f800 	.word	0x45e0f800
 80023a8:	40010000 	.word	0x40010000
 80023ac:	01000200 	.word	0x01000200

080023b0 <setRearLeftMotorPWM>:

void setRearLeftMotorPWM(float pwm) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 80023ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80023be:	f7ff ff3f 	bl	8002240 <limitPWM>
 80023c2:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 80023c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	db0f      	blt.n	80023f4 <setRearLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M3_INA = PB4, M3_INB = PB5
        // Reset bit 4 and Set bit 5 simultaneously
        GPIOB->BSRR = (1U << (4 + 16)) | (1U << 5);
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <setRearLeftMotorPWM+0x70>)
 80023d6:	4a13      	ldr	r2, [pc, #76]	@ (8002424 <setRearLeftMotorPWM+0x74>)
 80023d8:	619a      	str	r2, [r3, #24]
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 0);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);
        TIM1->CCR3 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 80023da:	edd7 7a01 	vldr	s15, [r7, #4]
 80023de:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002428 <setRearLeftMotorPWM+0x78>
 80023e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <setRearLeftMotorPWM+0x7c>)
 80023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ec:	ee17 2a90 	vmov	r2, s15
 80023f0:	63da      	str	r2, [r3, #60]	@ 0x3c
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 1);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 0);
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80023f2:	e010      	b.n	8002416 <setRearLeftMotorPWM+0x66>
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <setRearLeftMotorPWM+0x70>)
 80023f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002430 <setRearLeftMotorPWM+0x80>)
 80023f8:	619a      	str	r2, [r3, #24]
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80023fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80023fe:	eef1 7a67 	vneg.f32	s15, s15
 8002402:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002428 <setRearLeftMotorPWM+0x78>
 8002406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240a:	4b08      	ldr	r3, [pc, #32]	@ (800242c <setRearLeftMotorPWM+0x7c>)
 800240c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002410:	ee17 2a90 	vmov	r2, s15
 8002414:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40020400 	.word	0x40020400
 8002424:	00100020 	.word	0x00100020
 8002428:	45e0f800 	.word	0x45e0f800
 800242c:	40010000 	.word	0x40010000
 8002430:	00200010 	.word	0x00200010

08002434 <setRearRightMotorPWM>:

void setRearRightMotorPWM(float pwm) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 800243e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002442:	f7ff fefd 	bl	8002240 <limitPWM>
 8002446:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 800244a:	edd7 7a01 	vldr	s15, [r7, #4]
 800244e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	db0f      	blt.n	8002478 <setRearRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M4_INA = PC2, M4_INB = PC3
        // Set bit 2 and Reset bit 3 simultaneously
        GPIOC->BSRR = (1U << 2) | (1U << (3 + 16));
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <setRearRightMotorPWM+0x70>)
 800245a:	4a13      	ldr	r2, [pc, #76]	@ (80024a8 <setRearRightMotorPWM+0x74>)
 800245c:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 800245e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002462:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80024ac <setRearRightMotorPWM+0x78>
 8002466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246a:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <setRearRightMotorPWM+0x7c>)
 800246c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002470:	ee17 2a90 	vmov	r2, s15
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40
        // Reverse direction: INA=0, INB=1
        // Reset bit 2 and Set bit 3 simultaneously
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 8002476:	e010      	b.n	800249a <setRearRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
 8002478:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <setRearRightMotorPWM+0x70>)
 800247a:	4a0e      	ldr	r2, [pc, #56]	@ (80024b4 <setRearRightMotorPWM+0x80>)
 800247c:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 800247e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002482:	eef1 7a67 	vneg.f32	s15, s15
 8002486:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80024ac <setRearRightMotorPWM+0x78>
 800248a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <setRearRightMotorPWM+0x7c>)
 8002490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002494:	ee17 2a90 	vmov	r2, s15
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40020800 	.word	0x40020800
 80024a8:	00080004 	.word	0x00080004
 80024ac:	45e0f800 	.word	0x45e0f800
 80024b0:	40010000 	.word	0x40010000
 80024b4:	00040008 	.word	0x00040008

080024b8 <updateMotors>:
    // GPIOB: Reset M3_INA(PB4), M3_INB(PB5)
    GPIOB->BSRR = (1U << (4 + 16)) | (1U << (5 + 16));
}


void updateMotors(){
 80024b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024bc:	b088      	sub	sp, #32
 80024be:	af00      	add	r7, sp, #0
    // Calculate velocity errors
	float m1_err = target_wheel_W.front_left - current_wheel_W.front_left;
 80024c0:	4ba7      	ldr	r3, [pc, #668]	@ (8002760 <updateMotors+0x2a8>)
 80024c2:	ed93 7a00 	vldr	s14, [r3]
 80024c6:	4ba7      	ldr	r3, [pc, #668]	@ (8002764 <updateMotors+0x2ac>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d0:	edc7 7a03 	vstr	s15, [r7, #12]
	float m2_err = target_wheel_W.rear_left - current_wheel_W.rear_left;
 80024d4:	4ba2      	ldr	r3, [pc, #648]	@ (8002760 <updateMotors+0x2a8>)
 80024d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80024da:	4ba2      	ldr	r3, [pc, #648]	@ (8002764 <updateMotors+0x2ac>)
 80024dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80024e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e4:	edc7 7a02 	vstr	s15, [r7, #8]
	float m3_err = target_wheel_W.rear_right - current_wheel_W.rear_right;
 80024e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002760 <updateMotors+0x2a8>)
 80024ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80024ee:	4b9d      	ldr	r3, [pc, #628]	@ (8002764 <updateMotors+0x2ac>)
 80024f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80024f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f8:	edc7 7a01 	vstr	s15, [r7, #4]
	float m4_err = target_wheel_W.front_right - current_wheel_W.front_right;
 80024fc:	4b98      	ldr	r3, [pc, #608]	@ (8002760 <updateMotors+0x2a8>)
 80024fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8002502:	4b98      	ldr	r3, [pc, #608]	@ (8002764 <updateMotors+0x2ac>)
 8002504:	edd3 7a03 	vldr	s15, [r3, #12]
 8002508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250c:	edc7 7a00 	vstr	s15, [r7]




    m1_int += m1_err * LOOP_INTERVAL;
 8002510:	4b95      	ldr	r3, [pc, #596]	@ (8002768 <updateMotors+0x2b0>)
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	edd7 7a03 	vldr	s15, [r7, #12]
 800251a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800251e:	4b93      	ldr	r3, [pc, #588]	@ (800276c <updateMotors+0x2b4>)
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002528:	4b90      	ldr	r3, [pc, #576]	@ (800276c <updateMotors+0x2b4>)
 800252a:	edc3 7a00 	vstr	s15, [r3]
    m2_int += m2_err * LOOP_INTERVAL;
 800252e:	4b8e      	ldr	r3, [pc, #568]	@ (8002768 <updateMotors+0x2b0>)
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	edd7 7a02 	vldr	s15, [r7, #8]
 8002538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800253c:	4b8c      	ldr	r3, [pc, #560]	@ (8002770 <updateMotors+0x2b8>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002546:	4b8a      	ldr	r3, [pc, #552]	@ (8002770 <updateMotors+0x2b8>)
 8002548:	edc3 7a00 	vstr	s15, [r3]
    m3_int += m3_err * LOOP_INTERVAL;
 800254c:	4b86      	ldr	r3, [pc, #536]	@ (8002768 <updateMotors+0x2b0>)
 800254e:	ed93 7a00 	vldr	s14, [r3]
 8002552:	edd7 7a01 	vldr	s15, [r7, #4]
 8002556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255a:	4b86      	ldr	r3, [pc, #536]	@ (8002774 <updateMotors+0x2bc>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002564:	4b83      	ldr	r3, [pc, #524]	@ (8002774 <updateMotors+0x2bc>)
 8002566:	edc3 7a00 	vstr	s15, [r3]
    m4_int += m4_err * LOOP_INTERVAL;
 800256a:	4b7f      	ldr	r3, [pc, #508]	@ (8002768 <updateMotors+0x2b0>)
 800256c:	ed93 7a00 	vldr	s14, [r3]
 8002570:	edd7 7a00 	vldr	s15, [r7]
 8002574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002578:	4b7f      	ldr	r3, [pc, #508]	@ (8002778 <updateMotors+0x2c0>)
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002582:	4b7d      	ldr	r3, [pc, #500]	@ (8002778 <updateMotors+0x2c0>)
 8002584:	edc3 7a00 	vstr	s15, [r3]


    m1_int = clampf(m1_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002588:	4b78      	ldr	r3, [pc, #480]	@ (800276c <updateMotors+0x2b4>)
 800258a:	ed93 7a00 	vldr	s14, [r3]
 800258e:	4b7b      	ldr	r3, [pc, #492]	@ (800277c <updateMotors+0x2c4>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	eef1 7a67 	vneg.f32	s15, s15
 8002598:	4b78      	ldr	r3, [pc, #480]	@ (800277c <updateMotors+0x2c4>)
 800259a:	edd3 6a00 	vldr	s13, [r3]
 800259e:	eeb0 1a66 	vmov.f32	s2, s13
 80025a2:	eef0 0a67 	vmov.f32	s1, s15
 80025a6:	eeb0 0a47 	vmov.f32	s0, s14
 80025aa:	f7fe fd2b 	bl	8001004 <clampf>
 80025ae:	eef0 7a40 	vmov.f32	s15, s0
 80025b2:	4b6e      	ldr	r3, [pc, #440]	@ (800276c <updateMotors+0x2b4>)
 80025b4:	edc3 7a00 	vstr	s15, [r3]
    m2_int = clampf(m2_int, -MAXINTCLAMP, MAXINTCLAMP);
 80025b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002770 <updateMotors+0x2b8>)
 80025ba:	ed93 7a00 	vldr	s14, [r3]
 80025be:	4b6f      	ldr	r3, [pc, #444]	@ (800277c <updateMotors+0x2c4>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	eef1 7a67 	vneg.f32	s15, s15
 80025c8:	4b6c      	ldr	r3, [pc, #432]	@ (800277c <updateMotors+0x2c4>)
 80025ca:	edd3 6a00 	vldr	s13, [r3]
 80025ce:	eeb0 1a66 	vmov.f32	s2, s13
 80025d2:	eef0 0a67 	vmov.f32	s1, s15
 80025d6:	eeb0 0a47 	vmov.f32	s0, s14
 80025da:	f7fe fd13 	bl	8001004 <clampf>
 80025de:	eef0 7a40 	vmov.f32	s15, s0
 80025e2:	4b63      	ldr	r3, [pc, #396]	@ (8002770 <updateMotors+0x2b8>)
 80025e4:	edc3 7a00 	vstr	s15, [r3]
    m3_int = clampf(m3_int, -MAXINTCLAMP, MAXINTCLAMP);
 80025e8:	4b62      	ldr	r3, [pc, #392]	@ (8002774 <updateMotors+0x2bc>)
 80025ea:	ed93 7a00 	vldr	s14, [r3]
 80025ee:	4b63      	ldr	r3, [pc, #396]	@ (800277c <updateMotors+0x2c4>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	eef1 7a67 	vneg.f32	s15, s15
 80025f8:	4b60      	ldr	r3, [pc, #384]	@ (800277c <updateMotors+0x2c4>)
 80025fa:	edd3 6a00 	vldr	s13, [r3]
 80025fe:	eeb0 1a66 	vmov.f32	s2, s13
 8002602:	eef0 0a67 	vmov.f32	s1, s15
 8002606:	eeb0 0a47 	vmov.f32	s0, s14
 800260a:	f7fe fcfb 	bl	8001004 <clampf>
 800260e:	eef0 7a40 	vmov.f32	s15, s0
 8002612:	4b58      	ldr	r3, [pc, #352]	@ (8002774 <updateMotors+0x2bc>)
 8002614:	edc3 7a00 	vstr	s15, [r3]
    m4_int = clampf(m4_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002618:	4b57      	ldr	r3, [pc, #348]	@ (8002778 <updateMotors+0x2c0>)
 800261a:	ed93 7a00 	vldr	s14, [r3]
 800261e:	4b57      	ldr	r3, [pc, #348]	@ (800277c <updateMotors+0x2c4>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eef1 7a67 	vneg.f32	s15, s15
 8002628:	4b54      	ldr	r3, [pc, #336]	@ (800277c <updateMotors+0x2c4>)
 800262a:	edd3 6a00 	vldr	s13, [r3]
 800262e:	eeb0 1a66 	vmov.f32	s2, s13
 8002632:	eef0 0a67 	vmov.f32	s1, s15
 8002636:	eeb0 0a47 	vmov.f32	s0, s14
 800263a:	f7fe fce3 	bl	8001004 <clampf>
 800263e:	eef0 7a40 	vmov.f32	s15, s0
 8002642:	4b4d      	ldr	r3, [pc, #308]	@ (8002778 <updateMotors+0x2c0>)
 8002644:	edc3 7a00 	vstr	s15, [r3]


    float m1_output = Kp_Vel * m1_err + Ki_Vel * m1_int;
 8002648:	4b4d      	ldr	r3, [pc, #308]	@ (8002780 <updateMotors+0x2c8>)
 800264a:	ed93 7a00 	vldr	s14, [r3]
 800264e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002656:	4b4b      	ldr	r3, [pc, #300]	@ (8002784 <updateMotors+0x2cc>)
 8002658:	edd3 6a00 	vldr	s13, [r3]
 800265c:	4b43      	ldr	r3, [pc, #268]	@ (800276c <updateMotors+0x2b4>)
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266a:	edc7 7a07 	vstr	s15, [r7, #28]
    float m2_output = Kp_Vel * m2_err + Ki_Vel * m2_int;
 800266e:	4b44      	ldr	r3, [pc, #272]	@ (8002780 <updateMotors+0x2c8>)
 8002670:	ed93 7a00 	vldr	s14, [r3]
 8002674:	edd7 7a02 	vldr	s15, [r7, #8]
 8002678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800267c:	4b41      	ldr	r3, [pc, #260]	@ (8002784 <updateMotors+0x2cc>)
 800267e:	edd3 6a00 	vldr	s13, [r3]
 8002682:	4b3b      	ldr	r3, [pc, #236]	@ (8002770 <updateMotors+0x2b8>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002690:	edc7 7a06 	vstr	s15, [r7, #24]
    float m3_output = Kp_Vel * m3_err + Ki_Vel * m3_int;
 8002694:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <updateMotors+0x2c8>)
 8002696:	ed93 7a00 	vldr	s14, [r3]
 800269a:	edd7 7a01 	vldr	s15, [r7, #4]
 800269e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a2:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <updateMotors+0x2cc>)
 80026a4:	edd3 6a00 	vldr	s13, [r3]
 80026a8:	4b32      	ldr	r3, [pc, #200]	@ (8002774 <updateMotors+0x2bc>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b6:	edc7 7a05 	vstr	s15, [r7, #20]
    float m4_output = Kp_Vel * m4_err + Ki_Vel * m4_int;
 80026ba:	4b31      	ldr	r3, [pc, #196]	@ (8002780 <updateMotors+0x2c8>)
 80026bc:	ed93 7a00 	vldr	s14, [r3]
 80026c0:	edd7 7a00 	vldr	s15, [r7]
 80026c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <updateMotors+0x2cc>)
 80026ca:	edd3 6a00 	vldr	s13, [r3]
 80026ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <updateMotors+0x2c0>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026dc:	edc7 7a04 	vstr	s15, [r7, #16]

    //  integral windup prevention
    // If output is saturated, reduce integral term
    if (m1_output > PWM_MAX) {
 80026e0:	69f8      	ldr	r0, [r7, #28]
 80026e2:	f7fd fefd 	bl	80004e0 <__aeabi_f2d>
 80026e6:	a31c      	add	r3, pc, #112	@ (adr r3, 8002758 <updateMotors+0x2a0>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fe f9e0 	bl	8000ab0 <__aeabi_dcmpgt>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d04a      	beq.n	800278c <updateMotors+0x2d4>
        m1_int -= (m1_output - PWM_MAX) / Ki_Vel;
 80026f6:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <updateMotors+0x2b4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fef0 	bl	80004e0 <__aeabi_f2d>
 8002700:	4604      	mov	r4, r0
 8002702:	460d      	mov	r5, r1
 8002704:	69f8      	ldr	r0, [r7, #28]
 8002706:	f7fd feeb 	bl	80004e0 <__aeabi_f2d>
 800270a:	a313      	add	r3, pc, #76	@ (adr r3, 8002758 <updateMotors+0x2a0>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fd fd86 	bl	8000220 <__aeabi_dsub>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4690      	mov	r8, r2
 800271a:	4699      	mov	r9, r3
 800271c:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <updateMotors+0x2cc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd fedd 	bl	80004e0 <__aeabi_f2d>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4640      	mov	r0, r8
 800272c:	4649      	mov	r1, r9
 800272e:	f7fe f859 	bl	80007e4 <__aeabi_ddiv>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4620      	mov	r0, r4
 8002738:	4629      	mov	r1, r5
 800273a:	f7fd fd71 	bl	8000220 <__aeabi_dsub>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe f9bd 	bl	8000ac4 <__aeabi_d2f>
 800274a:	4603      	mov	r3, r0
 800274c:	4a07      	ldr	r2, [pc, #28]	@ (800276c <updateMotors+0x2b4>)
 800274e:	6013      	str	r3, [r2, #0]
        m1_output = PWM_MAX;
 8002750:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <updateMotors+0x2d0>)
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	e054      	b.n	8002800 <updateMotors+0x348>
 8002756:	bf00      	nop
 8002758:	7ae147ae 	.word	0x7ae147ae
 800275c:	3fefae14 	.word	0x3fefae14
 8002760:	2000004c 	.word	0x2000004c
 8002764:	2000003c 	.word	0x2000003c
 8002768:	0800781c 	.word	0x0800781c
 800276c:	2000043c 	.word	0x2000043c
 8002770:	20000440 	.word	0x20000440
 8002774:	20000444 	.word	0x20000444
 8002778:	20000448 	.word	0x20000448
 800277c:	08007844 	.word	0x08007844
 8002780:	08007824 	.word	0x08007824
 8002784:	08007828 	.word	0x08007828
 8002788:	3f7d70a4 	.word	0x3f7d70a4
    } else if (m1_output < -PWM_MAX) {
 800278c:	69f8      	ldr	r0, [r7, #28]
 800278e:	f7fd fea7 	bl	80004e0 <__aeabi_f2d>
 8002792:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002a58 <updateMotors+0x5a0>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fe f96c 	bl	8000a74 <__aeabi_dcmplt>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d02e      	beq.n	8002800 <updateMotors+0x348>
        m1_int -= (m1_output + PWM_MAX) / Ki_Vel;
 80027a2:	4baf      	ldr	r3, [pc, #700]	@ (8002a60 <updateMotors+0x5a8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fe9a 	bl	80004e0 <__aeabi_f2d>
 80027ac:	4604      	mov	r4, r0
 80027ae:	460d      	mov	r5, r1
 80027b0:	69f8      	ldr	r0, [r7, #28]
 80027b2:	f7fd fe95 	bl	80004e0 <__aeabi_f2d>
 80027b6:	a3a6      	add	r3, pc, #664	@ (adr r3, 8002a50 <updateMotors+0x598>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd fd32 	bl	8000224 <__adddf3>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4690      	mov	r8, r2
 80027c6:	4699      	mov	r9, r3
 80027c8:	4ba6      	ldr	r3, [pc, #664]	@ (8002a64 <updateMotors+0x5ac>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe87 	bl	80004e0 <__aeabi_f2d>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4640      	mov	r0, r8
 80027d8:	4649      	mov	r1, r9
 80027da:	f7fe f803 	bl	80007e4 <__aeabi_ddiv>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4620      	mov	r0, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	f7fd fd1b 	bl	8000220 <__aeabi_dsub>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe f967 	bl	8000ac4 <__aeabi_d2f>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4a99      	ldr	r2, [pc, #612]	@ (8002a60 <updateMotors+0x5a8>)
 80027fa:	6013      	str	r3, [r2, #0]
        m1_output = -PWM_MAX;
 80027fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002a68 <updateMotors+0x5b0>)
 80027fe:	61fb      	str	r3, [r7, #28]
    }

    if (m2_output > PWM_MAX) {
 8002800:	69b8      	ldr	r0, [r7, #24]
 8002802:	f7fd fe6d 	bl	80004e0 <__aeabi_f2d>
 8002806:	a392      	add	r3, pc, #584	@ (adr r3, 8002a50 <updateMotors+0x598>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fe f950 	bl	8000ab0 <__aeabi_dcmpgt>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d02f      	beq.n	8002876 <updateMotors+0x3be>
        m2_int -= (m2_output - PWM_MAX) / Ki_Vel;
 8002816:	4b95      	ldr	r3, [pc, #596]	@ (8002a6c <updateMotors+0x5b4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe60 	bl	80004e0 <__aeabi_f2d>
 8002820:	4604      	mov	r4, r0
 8002822:	460d      	mov	r5, r1
 8002824:	69b8      	ldr	r0, [r7, #24]
 8002826:	f7fd fe5b 	bl	80004e0 <__aeabi_f2d>
 800282a:	a389      	add	r3, pc, #548	@ (adr r3, 8002a50 <updateMotors+0x598>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fd fcf6 	bl	8000220 <__aeabi_dsub>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4690      	mov	r8, r2
 800283a:	4699      	mov	r9, r3
 800283c:	4b89      	ldr	r3, [pc, #548]	@ (8002a64 <updateMotors+0x5ac>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fe4d 	bl	80004e0 <__aeabi_f2d>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4640      	mov	r0, r8
 800284c:	4649      	mov	r1, r9
 800284e:	f7fd ffc9 	bl	80007e4 <__aeabi_ddiv>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fd fce1 	bl	8000220 <__aeabi_dsub>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe f92d 	bl	8000ac4 <__aeabi_d2f>
 800286a:	4603      	mov	r3, r0
 800286c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a6c <updateMotors+0x5b4>)
 800286e:	6013      	str	r3, [r2, #0]
        m2_output = PWM_MAX;
 8002870:	4b7f      	ldr	r3, [pc, #508]	@ (8002a70 <updateMotors+0x5b8>)
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	e039      	b.n	80028ea <updateMotors+0x432>
    } else if (m2_output < -PWM_MAX) {
 8002876:	69b8      	ldr	r0, [r7, #24]
 8002878:	f7fd fe32 	bl	80004e0 <__aeabi_f2d>
 800287c:	a376      	add	r3, pc, #472	@ (adr r3, 8002a58 <updateMotors+0x5a0>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fe f8f7 	bl	8000a74 <__aeabi_dcmplt>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d02e      	beq.n	80028ea <updateMotors+0x432>
        m2_int -= (m2_output + PWM_MAX) / Ki_Vel;
 800288c:	4b77      	ldr	r3, [pc, #476]	@ (8002a6c <updateMotors+0x5b4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fd fe25 	bl	80004e0 <__aeabi_f2d>
 8002896:	4604      	mov	r4, r0
 8002898:	460d      	mov	r5, r1
 800289a:	69b8      	ldr	r0, [r7, #24]
 800289c:	f7fd fe20 	bl	80004e0 <__aeabi_f2d>
 80028a0:	a36b      	add	r3, pc, #428	@ (adr r3, 8002a50 <updateMotors+0x598>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fd fcbd 	bl	8000224 <__adddf3>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4690      	mov	r8, r2
 80028b0:	4699      	mov	r9, r3
 80028b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a64 <updateMotors+0x5ac>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fe12 	bl	80004e0 <__aeabi_f2d>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4640      	mov	r0, r8
 80028c2:	4649      	mov	r1, r9
 80028c4:	f7fd ff8e 	bl	80007e4 <__aeabi_ddiv>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4620      	mov	r0, r4
 80028ce:	4629      	mov	r1, r5
 80028d0:	f7fd fca6 	bl	8000220 <__aeabi_dsub>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f8f2 	bl	8000ac4 <__aeabi_d2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4a62      	ldr	r2, [pc, #392]	@ (8002a6c <updateMotors+0x5b4>)
 80028e4:	6013      	str	r3, [r2, #0]
        m2_output = -PWM_MAX;
 80028e6:	4b60      	ldr	r3, [pc, #384]	@ (8002a68 <updateMotors+0x5b0>)
 80028e8:	61bb      	str	r3, [r7, #24]
    }

    if (m3_output > PWM_MAX) {
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7fd fdf8 	bl	80004e0 <__aeabi_f2d>
 80028f0:	a357      	add	r3, pc, #348	@ (adr r3, 8002a50 <updateMotors+0x598>)
 80028f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f6:	f7fe f8db 	bl	8000ab0 <__aeabi_dcmpgt>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02f      	beq.n	8002960 <updateMotors+0x4a8>
        m3_int -= (m3_output - PWM_MAX) / Ki_Vel;
 8002900:	4b5c      	ldr	r3, [pc, #368]	@ (8002a74 <updateMotors+0x5bc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fdeb 	bl	80004e0 <__aeabi_f2d>
 800290a:	4604      	mov	r4, r0
 800290c:	460d      	mov	r5, r1
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7fd fde6 	bl	80004e0 <__aeabi_f2d>
 8002914:	a34e      	add	r3, pc, #312	@ (adr r3, 8002a50 <updateMotors+0x598>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fd fc81 	bl	8000220 <__aeabi_dsub>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4690      	mov	r8, r2
 8002924:	4699      	mov	r9, r3
 8002926:	4b4f      	ldr	r3, [pc, #316]	@ (8002a64 <updateMotors+0x5ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fdd8 	bl	80004e0 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4640      	mov	r0, r8
 8002936:	4649      	mov	r1, r9
 8002938:	f7fd ff54 	bl	80007e4 <__aeabi_ddiv>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fc6c 	bl	8000220 <__aeabi_dsub>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f8b8 	bl	8000ac4 <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	4a47      	ldr	r2, [pc, #284]	@ (8002a74 <updateMotors+0x5bc>)
 8002958:	6013      	str	r3, [r2, #0]
        m3_output = PWM_MAX;
 800295a:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <updateMotors+0x5b8>)
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	e039      	b.n	80029d4 <updateMotors+0x51c>
    } else if (m3_output < -PWM_MAX) {
 8002960:	6978      	ldr	r0, [r7, #20]
 8002962:	f7fd fdbd 	bl	80004e0 <__aeabi_f2d>
 8002966:	a33c      	add	r3, pc, #240	@ (adr r3, 8002a58 <updateMotors+0x5a0>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fe f882 	bl	8000a74 <__aeabi_dcmplt>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d02e      	beq.n	80029d4 <updateMotors+0x51c>
        m3_int -= (m3_output + PWM_MAX) / Ki_Vel;
 8002976:	4b3f      	ldr	r3, [pc, #252]	@ (8002a74 <updateMotors+0x5bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fdb0 	bl	80004e0 <__aeabi_f2d>
 8002980:	4604      	mov	r4, r0
 8002982:	460d      	mov	r5, r1
 8002984:	6978      	ldr	r0, [r7, #20]
 8002986:	f7fd fdab 	bl	80004e0 <__aeabi_f2d>
 800298a:	a331      	add	r3, pc, #196	@ (adr r3, 8002a50 <updateMotors+0x598>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fd fc48 	bl	8000224 <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4690      	mov	r8, r2
 800299a:	4699      	mov	r9, r3
 800299c:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <updateMotors+0x5ac>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fd9d 	bl	80004e0 <__aeabi_f2d>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4640      	mov	r0, r8
 80029ac:	4649      	mov	r1, r9
 80029ae:	f7fd ff19 	bl	80007e4 <__aeabi_ddiv>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4620      	mov	r0, r4
 80029b8:	4629      	mov	r1, r5
 80029ba:	f7fd fc31 	bl	8000220 <__aeabi_dsub>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7fe f87d 	bl	8000ac4 <__aeabi_d2f>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4a29      	ldr	r2, [pc, #164]	@ (8002a74 <updateMotors+0x5bc>)
 80029ce:	6013      	str	r3, [r2, #0]
        m3_output = -PWM_MAX;
 80029d0:	4b25      	ldr	r3, [pc, #148]	@ (8002a68 <updateMotors+0x5b0>)
 80029d2:	617b      	str	r3, [r7, #20]
    }

    if (m4_output > PWM_MAX) {
 80029d4:	6938      	ldr	r0, [r7, #16]
 80029d6:	f7fd fd83 	bl	80004e0 <__aeabi_f2d>
 80029da:	a31d      	add	r3, pc, #116	@ (adr r3, 8002a50 <updateMotors+0x598>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fe f866 	bl	8000ab0 <__aeabi_dcmpgt>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d048      	beq.n	8002a7c <updateMotors+0x5c4>
        m4_int -= (m4_output - PWM_MAX) / Ki_Vel;
 80029ea:	4b23      	ldr	r3, [pc, #140]	@ (8002a78 <updateMotors+0x5c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fd76 	bl	80004e0 <__aeabi_f2d>
 80029f4:	4604      	mov	r4, r0
 80029f6:	460d      	mov	r5, r1
 80029f8:	6938      	ldr	r0, [r7, #16]
 80029fa:	f7fd fd71 	bl	80004e0 <__aeabi_f2d>
 80029fe:	a314      	add	r3, pc, #80	@ (adr r3, 8002a50 <updateMotors+0x598>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fd fc0c 	bl	8000220 <__aeabi_dsub>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4690      	mov	r8, r2
 8002a0e:	4699      	mov	r9, r3
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <updateMotors+0x5ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd63 	bl	80004e0 <__aeabi_f2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4640      	mov	r0, r8
 8002a20:	4649      	mov	r1, r9
 8002a22:	f7fd fedf 	bl	80007e4 <__aeabi_ddiv>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	f7fd fbf7 	bl	8000220 <__aeabi_dsub>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f843 	bl	8000ac4 <__aeabi_d2f>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4a0d      	ldr	r2, [pc, #52]	@ (8002a78 <updateMotors+0x5c0>)
 8002a42:	6013      	str	r3, [r2, #0]
        m4_output = PWM_MAX;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <updateMotors+0x5b8>)
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	e052      	b.n	8002af0 <updateMotors+0x638>
 8002a4a:	bf00      	nop
 8002a4c:	f3af 8000 	nop.w
 8002a50:	7ae147ae 	.word	0x7ae147ae
 8002a54:	3fefae14 	.word	0x3fefae14
 8002a58:	7ae147ae 	.word	0x7ae147ae
 8002a5c:	bfefae14 	.word	0xbfefae14
 8002a60:	2000043c 	.word	0x2000043c
 8002a64:	08007828 	.word	0x08007828
 8002a68:	bf7d70a4 	.word	0xbf7d70a4
 8002a6c:	20000440 	.word	0x20000440
 8002a70:	3f7d70a4 	.word	0x3f7d70a4
 8002a74:	20000444 	.word	0x20000444
 8002a78:	20000448 	.word	0x20000448
    } else if (m4_output < -PWM_MAX) {
 8002a7c:	6938      	ldr	r0, [r7, #16]
 8002a7e:	f7fd fd2f 	bl	80004e0 <__aeabi_f2d>
 8002a82:	a32c      	add	r3, pc, #176	@ (adr r3, 8002b34 <updateMotors+0x67c>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fff4 	bl	8000a74 <__aeabi_dcmplt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d02e      	beq.n	8002af0 <updateMotors+0x638>
        m4_int -= (m4_output + PWM_MAX) / Ki_Vel;
 8002a92:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <updateMotors+0x670>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fd22 	bl	80004e0 <__aeabi_f2d>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	460d      	mov	r5, r1
 8002aa0:	6938      	ldr	r0, [r7, #16]
 8002aa2:	f7fd fd1d 	bl	80004e0 <__aeabi_f2d>
 8002aa6:	a31e      	add	r3, pc, #120	@ (adr r3, 8002b20 <updateMotors+0x668>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fbba 	bl	8000224 <__adddf3>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4690      	mov	r8, r2
 8002ab6:	4699      	mov	r9, r3
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <updateMotors+0x674>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fd0f 	bl	80004e0 <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	4649      	mov	r1, r9
 8002aca:	f7fd fe8b 	bl	80007e4 <__aeabi_ddiv>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7fd fba3 	bl	8000220 <__aeabi_dsub>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f7fd ffef 	bl	8000ac4 <__aeabi_d2f>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b28 <updateMotors+0x670>)
 8002aea:	6013      	str	r3, [r2, #0]
        m4_output = -PWM_MAX;
 8002aec:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <updateMotors+0x678>)
 8002aee:	613b      	str	r3, [r7, #16]
    }


    setForwardLeftMotorPWM(m1_output);
 8002af0:	ed97 0a07 	vldr	s0, [r7, #28]
 8002af4:	f7ff fbd8 	bl	80022a8 <setForwardLeftMotorPWM>
    setForwardRightMotorPWM(m4_output);
 8002af8:	ed97 0a04 	vldr	s0, [r7, #16]
 8002afc:	f7ff fc16 	bl	800232c <setForwardRightMotorPWM>
    setRearLeftMotorPWM(m2_output);
 8002b00:	ed97 0a06 	vldr	s0, [r7, #24]
 8002b04:	f7ff fc54 	bl	80023b0 <setRearLeftMotorPWM>
    setRearRightMotorPWM(m3_output);
 8002b08:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b0c:	f7ff fc92 	bl	8002434 <setRearRightMotorPWM>
}
 8002b10:	bf00      	nop
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b1a:	bf00      	nop
 8002b1c:	f3af 8000 	nop.w
 8002b20:	7ae147ae 	.word	0x7ae147ae
 8002b24:	3fefae14 	.word	0x3fefae14
 8002b28:	20000448 	.word	0x20000448
 8002b2c:	08007828 	.word	0x08007828
 8002b30:	bf7d70a4 	.word	0xbf7d70a4
 8002b34:	7ae147ae 	.word	0x7ae147ae
 8002b38:	bfefae14 	.word	0xbfefae14

08002b3c <setTargetVelocities>:
    m3_int = 0;
    m4_int = 0;
}


void setTargetVelocities(float m1_target, float m2_target, float m3_target, float m4_target) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b46:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b4a:	ed87 1a01 	vstr	s2, [r7, #4]
 8002b4e:	edc7 1a00 	vstr	s3, [r7]
	target_wheel_W.front_left = m1_target;
 8002b52:	4a09      	ldr	r2, [pc, #36]	@ (8002b78 <setTargetVelocities+0x3c>)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6013      	str	r3, [r2, #0]
	target_wheel_W.rear_left = m2_target;
 8002b58:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <setTargetVelocities+0x3c>)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6053      	str	r3, [r2, #4]
	target_wheel_W.rear_right = m3_target;
 8002b5e:	4a06      	ldr	r2, [pc, #24]	@ (8002b78 <setTargetVelocities+0x3c>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6093      	str	r3, [r2, #8]
	target_wheel_W.front_right = m4_target;
 8002b64:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <setTargetVelocities+0x3c>)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	60d3      	str	r3, [r2, #12]

}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	2000004c 	.word	0x2000004c

08002b7c <Profile_Reset>:
#include "bluetoothDebug.h"

extern UART_HandleTypeDef huart2;

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002bae:	b480      	push	{r7}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6178      	str	r0, [r7, #20]
 8002bb6:	ed87 0a04 	vstr	s0, [r7, #16]
 8002bba:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bbe:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bc2:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 8002bc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd2:	d502      	bpl.n	8002bda <Profile_Start+0x2c>
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	e000      	b.n	8002bdc <Profile_Start+0x2e>
 8002bda:	2201      	movs	r2, #1
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 8002be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002be4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bec:	d505      	bpl.n	8002bfa <Profile_Start+0x4c>
 8002bee:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bf2:	eef1 7a67 	vneg.f32	s15, s15
 8002bf6:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 8002bfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d503      	bpl.n	8002c14 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	701a      	strb	r2, [r3, #0]
        return;
 8002c12:	e052      	b.n	8002cba <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 8002c14:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	dd01      	ble.n	8002c2a <Profile_Start+0x7c>
        final_speed = top_speed;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c6a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 8002c78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c7c:	eef0 7ae7 	vabs.f32	s15, s15
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c98:	db07      	blt.n	8002caa <Profile_Start+0xfc>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca8:	e001      	b.n	8002cae <Profile_Start+0x100>
 8002caa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]
}
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	edd3 6a07 	vldr	s13, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf0:	eef0 7ae7 	vabs.f32	s15, s15
 8002cf4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d02:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <Profile_Update>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80b5 	beq.w	8002e92 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * CONTROLLER_LOOP_INTERVAL;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e9c <Profile_Update+0x188>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d38:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d42:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d4c:	eef0 7ae7 	vabs.f32	s15, s15
 8002d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d54:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d128      	bne.n	8002db4 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffae 	bl	8002cc4 <Profile_GetBrakingDistance>
 8002d68:	eeb0 7a40 	vmov.f32	s14, s0
 8002d6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d78:	d51c      	bpl.n	8002db4 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d10b      	bne.n	8002da8 <Profile_Update+0x94>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da6:	e002      	b.n	8002dae <Profile_Update+0x9a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	d519      	bpl.n	8002dfe <Profile_Update+0xea>
        profile->speed += delta_v;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df2:	dd28      	ble.n	8002e46 <Profile_Update+0x132>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	e023      	b.n	8002e46 <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	dd18      	ble.n	8002e46 <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3c:	d503      	bpl.n	8002e46 <Profile_Update+0x132>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * CONTROLLER_LOOP_INTERVAL;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <Profile_Update+0x188>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d011      	beq.n	8002e94 <Profile_Update+0x180>
 8002e70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e74:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e80:	d508      	bpl.n	8002e94 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	619a      	str	r2, [r3, #24]
 8002e90:	e000      	b.n	8002e94 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002e92:	bf00      	nop
    }
    //UART_Transmit_Float(&huart2, ">V", profile->speed, 2);

}
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	08007820 	.word	0x08007820

08002ea0 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6178      	str	r0, [r7, #20]
 8002ea8:	ed87 0a04 	vstr	s0, [r7, #16]
 8002eac:	edc7 0a03 	vstr	s1, [r7, #12]
 8002eb0:	ed87 1a02 	vstr	s2, [r7, #8]
 8002eb4:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 8002eb8:	edd7 1a01 	vldr	s3, [r7, #4]
 8002ebc:	ed97 1a02 	vldr	s2, [r7, #8]
 8002ec0:	edd7 0a03 	vldr	s1, [r7, #12]
 8002ec4:	ed97 0a04 	vldr	s0, [r7, #16]
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f7ff fe70 	bl	8002bae <Profile_Start>
    //Profile_WaitUntilFinished(profile);
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <Profile_GetSpeed>:
        HAL_Delay(2);
    }
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	ee07 3a90 	vmov	s15, r3
}
 8002ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <HAL_MspInit+0x4c>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	4a0f      	ldr	r2, [pc, #60]	@ (8002f40 <HAL_MspInit+0x4c>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <HAL_MspInit+0x4c>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <HAL_MspInit+0x4c>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	4a08      	ldr	r2, [pc, #32]	@ (8002f40 <HAL_MspInit+0x4c>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f26:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_MspInit+0x4c>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800

08002f44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	@ 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2f      	ldr	r2, [pc, #188]	@ (8003020 <HAL_ADC_MspInit+0xdc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d157      	bne.n	8003016 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <HAL_ADC_MspInit+0xe0>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003024 <HAL_ADC_MspInit+0xe0>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f76:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <HAL_ADC_MspInit+0xe0>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <HAL_ADC_MspInit+0xe0>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	4a26      	ldr	r2, [pc, #152]	@ (8003024 <HAL_ADC_MspInit+0xe0>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f92:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <HAL_ADC_MspInit+0xe0>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = M1_CS_Pin|M2_CS_Pin|M3_CS_Pin|M4_CS_Pin;
 8002f9e:	23f0      	movs	r3, #240	@ 0xf0
 8002fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	481d      	ldr	r0, [pc, #116]	@ (8003028 <HAL_ADC_MspInit+0xe4>)
 8002fb2:	f001 fb17 	bl	80045e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003030 <HAL_ADC_MspInit+0xec>)
 8002fba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fce:	4b17      	ldr	r3, [pc, #92]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002fd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002fd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fdc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fde:	4b13      	ldr	r3, [pc, #76]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fe4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fee:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ffa:	480c      	ldr	r0, [pc, #48]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8002ffc:	f000 ff76 	bl	8003eec <HAL_DMA_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003006:	f7ff f913 	bl	8002230 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a07      	ldr	r2, [pc, #28]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 800300e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003010:	4a06      	ldr	r2, [pc, #24]	@ (800302c <HAL_ADC_MspInit+0xe8>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	@ 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40012000 	.word	0x40012000
 8003024:	40023800 	.word	0x40023800
 8003028:	40020000 	.word	0x40020000
 800302c:	200000bc 	.word	0x200000bc
 8003030:	40026410 	.word	0x40026410

08003034 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0e      	ldr	r2, [pc, #56]	@ (800307c <HAL_TIM_PWM_MspInit+0x48>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d115      	bne.n	8003072 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b0d      	ldr	r3, [pc, #52]	@ (8003080 <HAL_TIM_PWM_MspInit+0x4c>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	4a0c      	ldr	r2, [pc, #48]	@ (8003080 <HAL_TIM_PWM_MspInit+0x4c>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6453      	str	r3, [r2, #68]	@ 0x44
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <HAL_TIM_PWM_MspInit+0x4c>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2019      	movs	r0, #25
 8003068:	f000 ff09 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800306c:	2019      	movs	r0, #25
 800306e:	f000 ff22 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40010000 	.word	0x40010000
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b090      	sub	sp, #64	@ 0x40
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a4:	d153      	bne.n	800314e <HAL_TIM_Encoder_MspInit+0xca>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030aa:	4b81      	ldr	r3, [pc, #516]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a80      	ldr	r2, [pc, #512]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b7e      	ldr	r3, [pc, #504]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c6:	4b7a      	ldr	r3, [pc, #488]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	4a79      	ldr	r2, [pc, #484]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d2:	4b77      	ldr	r3, [pc, #476]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	627b      	str	r3, [r7, #36]	@ 0x24
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
 80030e2:	4b73      	ldr	r3, [pc, #460]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	4a72      	ldr	r2, [pc, #456]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ee:	4b70      	ldr	r3, [pc, #448]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1_EncoderCH1_Pin;
 80030fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800310c:	2301      	movs	r3, #1
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH1_GPIO_Port, &GPIO_InitStruct);
 8003110:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003114:	4619      	mov	r1, r3
 8003116:	4867      	ldr	r0, [pc, #412]	@ (80032b4 <HAL_TIM_Encoder_MspInit+0x230>)
 8003118:	f001 fa64 	bl	80045e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_EncoderCH2_Pin;
 800311c:	2308      	movs	r3, #8
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800312c:	2301      	movs	r3, #1
 800312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH2_GPIO_Port, &GPIO_InitStruct);
 8003130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003134:	4619      	mov	r1, r3
 8003136:	4860      	ldr	r0, [pc, #384]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x234>)
 8003138:	f001 fa54 	bl	80045e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	201c      	movs	r0, #28
 8003142:	f000 fe9c 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003146:	201c      	movs	r0, #28
 8003148:	f000 feb5 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800314c:	e0ac      	b.n	80032a8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5a      	ldr	r2, [pc, #360]	@ (80032bc <HAL_TIM_Encoder_MspInit+0x238>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d134      	bne.n	80031c2 <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	4b54      	ldr	r3, [pc, #336]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	4a53      	ldr	r2, [pc, #332]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6413      	str	r3, [r2, #64]	@ 0x40
 8003168:	4b51      	ldr	r3, [pc, #324]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	4b4d      	ldr	r3, [pc, #308]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	4a4c      	ldr	r2, [pc, #304]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	6313      	str	r3, [r2, #48]	@ 0x30
 8003184:	4b4a      	ldr	r3, [pc, #296]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2_EncoderCH1_Pin|M2_EncoderCH2_Pin;
 8003190:	23c0      	movs	r3, #192	@ 0xc0
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031a0:	2302      	movs	r3, #2
 80031a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031a8:	4619      	mov	r1, r3
 80031aa:	4845      	ldr	r0, [pc, #276]	@ (80032c0 <HAL_TIM_Encoder_MspInit+0x23c>)
 80031ac:	f001 fa1a 	bl	80045e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031b0:	2200      	movs	r2, #0
 80031b2:	2100      	movs	r1, #0
 80031b4:	201d      	movs	r0, #29
 80031b6:	f000 fe62 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031ba:	201d      	movs	r0, #29
 80031bc:	f000 fe7b 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
}
 80031c0:	e072      	b.n	80032a8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3f      	ldr	r2, [pc, #252]	@ (80032c4 <HAL_TIM_Encoder_MspInit+0x240>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d134      	bne.n	8003236 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	4b37      	ldr	r3, [pc, #220]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	4a36      	ldr	r2, [pc, #216]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6413      	str	r3, [r2, #64]	@ 0x40
 80031dc:	4b34      	ldr	r3, [pc, #208]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	4b30      	ldr	r3, [pc, #192]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f0:	4a2f      	ldr	r2, [pc, #188]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f8:	4b2d      	ldr	r3, [pc, #180]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_EncoderCH1_Pin|M3_EncoderCH2_Pin;
 8003204:	23c0      	movs	r3, #192	@ 0xc0
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003214:	2302      	movs	r3, #2
 8003216:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003218:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800321c:	4619      	mov	r1, r3
 800321e:	4826      	ldr	r0, [pc, #152]	@ (80032b8 <HAL_TIM_Encoder_MspInit+0x234>)
 8003220:	f001 f9e0 	bl	80045e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	201e      	movs	r0, #30
 800322a:	f000 fe28 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800322e:	201e      	movs	r0, #30
 8003230:	f000 fe41 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
}
 8003234:	e038      	b.n	80032a8 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a23      	ldr	r2, [pc, #140]	@ (80032c8 <HAL_TIM_Encoder_MspInit+0x244>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d133      	bne.n	80032a8 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	4b1a      	ldr	r3, [pc, #104]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	4a19      	ldr	r2, [pc, #100]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003250:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	4b13      	ldr	r3, [pc, #76]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	4a12      	ldr	r2, [pc, #72]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6313      	str	r3, [r2, #48]	@ 0x30
 800326c:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <HAL_TIM_Encoder_MspInit+0x22c>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_EncoderCH1_Pin|M4_EncoderCH2_Pin;
 8003278:	2303      	movs	r3, #3
 800327a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003288:	2302      	movs	r3, #2
 800328a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003290:	4619      	mov	r1, r3
 8003292:	4808      	ldr	r0, [pc, #32]	@ (80032b4 <HAL_TIM_Encoder_MspInit+0x230>)
 8003294:	f001 f9a6 	bl	80045e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	2032      	movs	r0, #50	@ 0x32
 800329e:	f000 fdee 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032a2:	2032      	movs	r0, #50	@ 0x32
 80032a4:	f000 fe07 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
}
 80032a8:	bf00      	nop
 80032aa:	3740      	adds	r7, #64	@ 0x40
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40000c00 	.word	0x40000c00

080032cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	@ (800334c <HAL_TIM_Base_MspInit+0x80>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d116      	bne.n	800330c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HAL_TIM_Base_MspInit+0x84>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003350 <HAL_TIM_Base_MspInit+0x84>)
 80032e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ee:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <HAL_TIM_Base_MspInit+0x84>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2100      	movs	r1, #0
 80032fe:	202c      	movs	r0, #44	@ 0x2c
 8003300:	f000 fdbd 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003304:	202c      	movs	r0, #44	@ 0x2c
 8003306:	f000 fdd6 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800330a:	e01a      	b.n	8003342 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a10      	ldr	r2, [pc, #64]	@ (8003354 <HAL_TIM_Base_MspInit+0x88>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d115      	bne.n	8003342 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HAL_TIM_Base_MspInit+0x84>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	4a0c      	ldr	r2, [pc, #48]	@ (8003350 <HAL_TIM_Base_MspInit+0x84>)
 8003320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003324:	6413      	str	r3, [r2, #64]	@ 0x40
 8003326:	4b0a      	ldr	r3, [pc, #40]	@ (8003350 <HAL_TIM_Base_MspInit+0x84>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	202d      	movs	r0, #45	@ 0x2d
 8003338:	f000 fda1 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800333c:	202d      	movs	r0, #45	@ 0x2d
 800333e:	f000 fdba 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40001c00 	.word	0x40001c00
 8003350:	40023800 	.word	0x40023800
 8003354:	40002000 	.word	0x40002000

08003358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a12      	ldr	r2, [pc, #72]	@ (80033c0 <HAL_TIM_MspPostInit+0x68>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d11e      	bne.n	80033b8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <HAL_TIM_MspPostInit+0x6c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a10      	ldr	r2, [pc, #64]	@ (80033c4 <HAL_TIM_MspPostInit+0x6c>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <HAL_TIM_MspPostInit+0x6c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8003396:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800339a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033a8:	2301      	movs	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	4619      	mov	r1, r3
 80033b2:	4805      	ldr	r0, [pc, #20]	@ (80033c8 <HAL_TIM_MspPostInit+0x70>)
 80033b4:	f001 f916 	bl	80045e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80033b8:	bf00      	nop
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020000 	.word	0x40020000

080033cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08c      	sub	sp, #48	@ 0x30
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	f107 031c 	add.w	r3, r7, #28
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a45      	ldr	r2, [pc, #276]	@ (8003500 <HAL_UART_MspInit+0x134>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d12c      	bne.n	8003448 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	4b44      	ldr	r3, [pc, #272]	@ (8003504 <HAL_UART_MspInit+0x138>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	4a43      	ldr	r2, [pc, #268]	@ (8003504 <HAL_UART_MspInit+0x138>)
 80033f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fe:	4b41      	ldr	r3, [pc, #260]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	4b3d      	ldr	r3, [pc, #244]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	4a3c      	ldr	r2, [pc, #240]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6313      	str	r3, [r2, #48]	@ 0x30
 800341a:	4b3a      	ldr	r3, [pc, #232]	@ (8003504 <HAL_UART_MspInit+0x138>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003426:	230c      	movs	r3, #12
 8003428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003432:	2303      	movs	r3, #3
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003436:	2307      	movs	r3, #7
 8003438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 031c 	add.w	r3, r7, #28
 800343e:	4619      	mov	r1, r3
 8003440:	4831      	ldr	r0, [pc, #196]	@ (8003508 <HAL_UART_MspInit+0x13c>)
 8003442:	f001 f8cf 	bl	80045e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003446:	e057      	b.n	80034f8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2f      	ldr	r2, [pc, #188]	@ (800350c <HAL_UART_MspInit+0x140>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d152      	bne.n	80034f8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	4a2a      	ldr	r2, [pc, #168]	@ (8003504 <HAL_UART_MspInit+0x138>)
 800345c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003460:	6413      	str	r3, [r2, #64]	@ 0x40
 8003462:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b24      	ldr	r3, [pc, #144]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	4a23      	ldr	r2, [pc, #140]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	6313      	str	r3, [r2, #48]	@ 0x30
 800347e:	4b21      	ldr	r3, [pc, #132]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	4b1d      	ldr	r3, [pc, #116]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	4a1c      	ldr	r2, [pc, #112]	@ (8003504 <HAL_UART_MspInit+0x138>)
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	6313      	str	r3, [r2, #48]	@ 0x30
 800349a:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <HAL_UART_MspInit+0x138>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034a6:	2320      	movs	r3, #32
 80034a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b2:	2303      	movs	r3, #3
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034b6:	2307      	movs	r3, #7
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ba:	f107 031c 	add.w	r3, r7, #28
 80034be:	4619      	mov	r1, r3
 80034c0:	4813      	ldr	r0, [pc, #76]	@ (8003510 <HAL_UART_MspInit+0x144>)
 80034c2:	f001 f88f 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d4:	2303      	movs	r3, #3
 80034d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034d8:	2307      	movs	r3, #7
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	4619      	mov	r1, r3
 80034e2:	480c      	ldr	r0, [pc, #48]	@ (8003514 <HAL_UART_MspInit+0x148>)
 80034e4:	f001 f87e 	bl	80045e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	2027      	movs	r0, #39	@ 0x27
 80034ee:	f000 fcc6 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034f2:	2027      	movs	r0, #39	@ 0x27
 80034f4:	f000 fcdf 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
}
 80034f8:	bf00      	nop
 80034fa:	3730      	adds	r7, #48	@ 0x30
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40004400 	.word	0x40004400
 8003504:	40023800 	.word	0x40023800
 8003508:	40020000 	.word	0x40020000
 800350c:	40004800 	.word	0x40004800
 8003510:	40020800 	.word	0x40020800
 8003514:	40020400 	.word	0x40020400

08003518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <NMI_Handler+0x4>

08003520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <HardFault_Handler+0x4>

08003528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <MemManage_Handler+0x4>

08003530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <BusFault_Handler+0x4>

08003538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <UsageFault_Handler+0x4>

08003540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800354e:	b480      	push	{r7}
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800356e:	f000 f8f5 	bl	800375c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8003572:	f000 f86f 	bl	8003654 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003580:	4802      	ldr	r0, [pc, #8]	@ (800358c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003582:	f002 fb3b 	bl	8005bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000011c 	.word	0x2000011c

08003590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003594:	4802      	ldr	r0, [pc, #8]	@ (80035a0 <TIM2_IRQHandler+0x10>)
 8003596:	f002 fb31 	bl	8005bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000164 	.word	0x20000164

080035a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035a8:	4802      	ldr	r0, [pc, #8]	@ (80035b4 <TIM3_IRQHandler+0x10>)
 80035aa:	f002 fb27 	bl	8005bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200001ac 	.word	0x200001ac

080035b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035bc:	4802      	ldr	r0, [pc, #8]	@ (80035c8 <TIM4_IRQHandler+0x10>)
 80035be:	f002 fb1d 	bl	8005bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200001f4 	.word	0x200001f4

080035cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035d0:	4802      	ldr	r0, [pc, #8]	@ (80035dc <USART3_IRQHandler+0x10>)
 80035d2:	f003 f951 	bl	8006878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000035c 	.word	0x2000035c

080035e0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80035e4:	4802      	ldr	r0, [pc, #8]	@ (80035f0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80035e6:	f002 fb09 	bl	8005bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000284 	.word	0x20000284

080035f4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80035f8:	4802      	ldr	r0, [pc, #8]	@ (8003604 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80035fa:	f002 faff 	bl	8005bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	200002cc 	.word	0x200002cc

08003608 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800360c:	4802      	ldr	r0, [pc, #8]	@ (8003618 <TIM5_IRQHandler+0x10>)
 800360e:	f002 faf5 	bl	8005bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	2000023c 	.word	0x2000023c

0800361c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003620:	4802      	ldr	r0, [pc, #8]	@ (800362c <DMA2_Stream0_IRQHandler+0x10>)
 8003622:	f000 fda3 	bl	800416c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200000bc 	.word	0x200000bc

08003630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003634:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <SystemInit+0x20>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363a:	4a05      	ldr	r2, [pc, #20]	@ (8003650 <SystemInit+0x20>)
 800363c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <SysTickFunction>:
        // Reset encoders to prevent overflow
        resetEncodersinSystick();
    }
}

void SysTickFunction(void) {
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
        //        current_robot_velocity.vx,
        //        current_robot_velocity.vy,
        //        current_robot_velocity.wz);
    }
    */
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800369c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003668:	f7ff ffe2 	bl	8003630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800366c:	480c      	ldr	r0, [pc, #48]	@ (80036a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800366e:	490d      	ldr	r1, [pc, #52]	@ (80036a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003670:	4a0d      	ldr	r2, [pc, #52]	@ (80036a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003674:	e002      	b.n	800367c <LoopCopyDataInit>

08003676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367a:	3304      	adds	r3, #4

0800367c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800367c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003680:	d3f9      	bcc.n	8003676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003684:	4c0a      	ldr	r4, [pc, #40]	@ (80036b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003688:	e001      	b.n	800368e <LoopFillZerobss>

0800368a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800368c:	3204      	adds	r2, #4

0800368e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003690:	d3fb      	bcc.n	800368a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003692:	f004 f85f 	bl	8007754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003696:	f7fe f869 	bl	800176c <main>
  bx  lr    
 800369a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800369c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80036a8:	08007878 	.word	0x08007878
  ldr r2, =_sbss
 80036ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80036b0:	20000450 	.word	0x20000450

080036b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b4:	e7fe      	b.n	80036b4 <ADC_IRQHandler>
	...

080036b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036bc:	4b0e      	ldr	r3, [pc, #56]	@ (80036f8 <HAL_Init+0x40>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0d      	ldr	r2, [pc, #52]	@ (80036f8 <HAL_Init+0x40>)
 80036c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_Init+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0a      	ldr	r2, [pc, #40]	@ (80036f8 <HAL_Init+0x40>)
 80036ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d4:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a07      	ldr	r2, [pc, #28]	@ (80036f8 <HAL_Init+0x40>)
 80036da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e0:	2003      	movs	r0, #3
 80036e2:	f000 fbc1 	bl	8003e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e6:	200f      	movs	r0, #15
 80036e8:	f000 f808 	bl	80036fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036ec:	f7ff fc02 	bl	8002ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00

080036fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003704:	4b12      	ldr	r3, [pc, #72]	@ (8003750 <HAL_InitTick+0x54>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <HAL_InitTick+0x58>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003712:	fbb3 f3f1 	udiv	r3, r3, r1
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fbd9 	bl	8003ed2 <HAL_SYSTICK_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e00e      	b.n	8003748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d80a      	bhi.n	8003746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003730:	2200      	movs	r2, #0
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	f000 fba1 	bl	8003e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800373c:	4a06      	ldr	r2, [pc, #24]	@ (8003758 <HAL_InitTick+0x5c>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000008 	.word	0x20000008
 8003754:	20000010 	.word	0x20000010
 8003758:	2000000c 	.word	0x2000000c

0800375c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <HAL_IncTick+0x20>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <HAL_IncTick+0x24>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4413      	add	r3, r2
 800376c:	4a04      	ldr	r2, [pc, #16]	@ (8003780 <HAL_IncTick+0x24>)
 800376e:	6013      	str	r3, [r2, #0]
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000010 	.word	0x20000010
 8003780:	2000044c 	.word	0x2000044c

08003784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return uwTick;
 8003788:	4b03      	ldr	r3, [pc, #12]	@ (8003798 <HAL_GetTick+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	2000044c 	.word	0x2000044c

0800379c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a4:	f7ff ffee 	bl	8003784 <HAL_GetTick>
 80037a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d005      	beq.n	80037c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <HAL_Delay+0x44>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037c2:	bf00      	nop
 80037c4:	f7ff ffde 	bl	8003784 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d8f7      	bhi.n	80037c4 <HAL_Delay+0x28>
  {
  }
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000010 	.word	0x20000010

080037e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e033      	b.n	8003862 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fb9e 	bl	8002f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800382a:	f023 0302 	bic.w	r3, r3, #2
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f94a 	bl	8003ad0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	@ 0x40
 8003852:	e001      	b.n	8003858 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x1c>
 8003884:	2302      	movs	r3, #2
 8003886:	e113      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x244>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b09      	cmp	r3, #9
 8003896:	d925      	bls.n	80038e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68d9      	ldr	r1, [r3, #12]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	3b1e      	subs	r3, #30
 80038ae:	2207      	movs	r2, #7
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43da      	mvns	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	400a      	ands	r2, r1
 80038bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68d9      	ldr	r1, [r3, #12]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4618      	mov	r0, r3
 80038d0:	4603      	mov	r3, r0
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4403      	add	r3, r0
 80038d6:	3b1e      	subs	r3, #30
 80038d8:	409a      	lsls	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	e022      	b.n	800392a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6919      	ldr	r1, [r3, #16]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	2207      	movs	r2, #7
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	400a      	ands	r2, r1
 8003906:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6919      	ldr	r1, [r3, #16]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	4618      	mov	r0, r3
 800391a:	4603      	mov	r3, r0
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4403      	add	r3, r0
 8003920:	409a      	lsls	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b06      	cmp	r3, #6
 8003930:	d824      	bhi.n	800397c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	3b05      	subs	r3, #5
 8003944:	221f      	movs	r2, #31
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	400a      	ands	r2, r1
 8003952:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	4618      	mov	r0, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	3b05      	subs	r3, #5
 800396e:	fa00 f203 	lsl.w	r2, r0, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	635a      	str	r2, [r3, #52]	@ 0x34
 800397a:	e04c      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b0c      	cmp	r3, #12
 8003982:	d824      	bhi.n	80039ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	3b23      	subs	r3, #35	@ 0x23
 8003996:	221f      	movs	r2, #31
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43da      	mvns	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	400a      	ands	r2, r1
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	3b23      	subs	r3, #35	@ 0x23
 80039c0:	fa00 f203 	lsl.w	r2, r0, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80039cc:	e023      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	3b41      	subs	r3, #65	@ 0x41
 80039e0:	221f      	movs	r2, #31
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	400a      	ands	r2, r1
 80039ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	3b41      	subs	r3, #65	@ 0x41
 8003a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a16:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <HAL_ADC_ConfigChannel+0x250>)
 8003a18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ac0 <HAL_ADC_ConfigChannel+0x254>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10f      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x1d8>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b12      	cmp	r3, #18
 8003a2a:	d10b      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <HAL_ADC_ConfigChannel+0x254>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d12b      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x23a>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x258>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <HAL_ADC_ConfigChannel+0x1f4>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b11      	cmp	r3, #17
 8003a5e:	d122      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a11      	ldr	r2, [pc, #68]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x258>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d111      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <HAL_ADC_ConfigChannel+0x25c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a11      	ldr	r2, [pc, #68]	@ (8003acc <HAL_ADC_ConfigChannel+0x260>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	0c9a      	lsrs	r2, r3, #18
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a98:	e002      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f9      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	40012300 	.word	0x40012300
 8003ac0:	40012000 	.word	0x40012000
 8003ac4:	10000012 	.word	0x10000012
 8003ac8:	20000008 	.word	0x20000008
 8003acc:	431bde83 	.word	0x431bde83

08003ad0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ad8:	4b79      	ldr	r3, [pc, #484]	@ (8003cc0 <ADC_Init+0x1f0>)
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	4a58      	ldr	r2, [pc, #352]	@ (8003cc4 <ADC_Init+0x1f4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d022      	beq.n	8003bae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6899      	ldr	r1, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	e00f      	b.n	8003bce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003bcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0202 	bic.w	r2, r2, #2
 8003bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6899      	ldr	r1, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	7e1b      	ldrb	r3, [r3, #24]
 8003be8:	005a      	lsls	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01b      	beq.n	8003c34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	3b01      	subs	r3, #1
 8003c28:	035a      	lsls	r2, r3, #13
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	e007      	b.n	8003c44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	051a      	lsls	r2, r3, #20
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c86:	025a      	lsls	r2, r3, #9
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	029a      	lsls	r2, r3, #10
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40012300 	.word	0x40012300
 8003cc4:	0f000001 	.word	0x0f000001

08003cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d14:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <__NVIC_GetPriorityGrouping+0x18>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0307 	and.w	r3, r3, #7
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db0b      	blt.n	8003d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4907      	ldr	r1, [pc, #28]	@ (8003d64 <__NVIC_EnableIRQ+0x38>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	db0a      	blt.n	8003d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	490c      	ldr	r1, [pc, #48]	@ (8003db4 <__NVIC_SetPriority+0x4c>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	0112      	lsls	r2, r2, #4
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d90:	e00a      	b.n	8003da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4908      	ldr	r1, [pc, #32]	@ (8003db8 <__NVIC_SetPriority+0x50>)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	440b      	add	r3, r1
 8003da6:	761a      	strb	r2, [r3, #24]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000e100 	.word	0xe000e100
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	@ 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f1c3 0307 	rsb	r3, r3, #7
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	bf28      	it	cs
 8003dda:	2304      	movcs	r3, #4
 8003ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d902      	bls.n	8003dec <NVIC_EncodePriority+0x30>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3b03      	subs	r3, #3
 8003dea:	e000      	b.n	8003dee <NVIC_EncodePriority+0x32>
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	401a      	ands	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	4313      	orrs	r3, r2
         );
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3724      	adds	r7, #36	@ 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e34:	d301      	bcc.n	8003e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e36:	2301      	movs	r3, #1
 8003e38:	e00f      	b.n	8003e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e64 <SysTick_Config+0x40>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e42:	210f      	movs	r1, #15
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	f7ff ff8e 	bl	8003d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <SysTick_Config+0x40>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e52:	4b04      	ldr	r3, [pc, #16]	@ (8003e64 <SysTick_Config+0x40>)
 8003e54:	2207      	movs	r2, #7
 8003e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	e000e010 	.word	0xe000e010

08003e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff29 	bl	8003cc8 <__NVIC_SetPriorityGrouping>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e90:	f7ff ff3e 	bl	8003d10 <__NVIC_GetPriorityGrouping>
 8003e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff8e 	bl	8003dbc <NVIC_EncodePriority>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff5d 	bl	8003d68 <__NVIC_SetPriority>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff31 	bl	8003d2c <__NVIC_EnableIRQ>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ffa2 	bl	8003e24 <SysTick_Config>
 8003ee0:	4603      	mov	r3, r0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ef8:	f7ff fc44 	bl	8003784 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e099      	b.n	800403c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f28:	e00f      	b.n	8003f4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f2a:	f7ff fc2b 	bl	8003784 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b05      	cmp	r3, #5
 8003f36:	d908      	bls.n	8003f4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2203      	movs	r2, #3
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e078      	b.n	800403c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e8      	bne.n	8003f2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4b38      	ldr	r3, [pc, #224]	@ (8004044 <HAL_DMA_Init+0x158>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d107      	bne.n	8003fb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	4313      	orrs	r3, r2
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0307 	bic.w	r3, r3, #7
 8003fca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d117      	bne.n	800400e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fa7b 	bl	80044ec <DMA_CheckFifoParam>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2240      	movs	r2, #64	@ 0x40
 8004000:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800400a:	2301      	movs	r3, #1
 800400c:	e016      	b.n	800403c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa32 	bl	8004480 <DMA_CalcBaseAndBitshift>
 800401c:	4603      	mov	r3, r0
 800401e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	223f      	movs	r2, #63	@ 0x3f
 8004026:	409a      	lsls	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	f010803f 	.word	0xf010803f

08004048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004056:	f7ff fb95 	bl	8003784 <HAL_GetTick>
 800405a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d008      	beq.n	800407a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	@ 0x80
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e052      	b.n	8004120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0216 	bic.w	r2, r2, #22
 8004088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <HAL_DMA_Abort+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ca:	e013      	b.n	80040f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040cc:	f7ff fb5a 	bl	8003784 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d90c      	bls.n	80040f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2203      	movs	r2, #3
 80040e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e015      	b.n	8004120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e4      	bne.n	80040cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004106:	223f      	movs	r2, #63	@ 0x3f
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2280      	movs	r2, #128	@ 0x80
 8004140:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00c      	b.n	8004160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2205      	movs	r2, #5
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004178:	4b8e      	ldr	r3, [pc, #568]	@ (80043b4 <HAL_DMA_IRQHandler+0x248>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a8e      	ldr	r2, [pc, #568]	@ (80043b8 <HAL_DMA_IRQHandler+0x24c>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	2208      	movs	r2, #8
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01a      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	2208      	movs	r2, #8
 80041c6:	409a      	lsls	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fa:	2201      	movs	r2, #1
 80041fc:	409a      	lsls	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	f043 0202 	orr.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	2204      	movs	r2, #4
 8004214:	409a      	lsls	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004230:	2204      	movs	r2, #4
 8004232:	409a      	lsls	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004248:	2210      	movs	r2, #16
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d043      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03c      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004266:	2210      	movs	r2, #16
 8004268:	409a      	lsls	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d018      	beq.n	80042ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d108      	bne.n	800429c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d024      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
 800429a:	e01f      	b.n	80042dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
 80042ac:	e016      	b.n	80042dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0208 	bic.w	r2, r2, #8
 80042ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e0:	2220      	movs	r2, #32
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808f 	beq.w	800440c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8087 	beq.w	800440c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004302:	2220      	movs	r2, #32
 8004304:	409a      	lsls	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b05      	cmp	r3, #5
 8004314:	d136      	bne.n	8004384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0216 	bic.w	r2, r2, #22
 8004324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <HAL_DMA_IRQHandler+0x1da>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0208 	bic.w	r2, r2, #8
 8004354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435a:	223f      	movs	r2, #63	@ 0x3f
 800435c:	409a      	lsls	r2, r3
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	d07e      	beq.n	8004478 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
        }
        return;
 8004382:	e079      	b.n	8004478 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01d      	beq.n	80043ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d031      	beq.n	800440c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
 80043b0:	e02c      	b.n	800440c <HAL_DMA_IRQHandler+0x2a0>
 80043b2:	bf00      	nop
 80043b4:	20000008 	.word	0x20000008
 80043b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d023      	beq.n	800440c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	e01e      	b.n	800440c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10f      	bne.n	80043fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0210 	bic.w	r2, r2, #16
 80043ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	2b00      	cmp	r3, #0
 8004412:	d032      	beq.n	800447a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d022      	beq.n	8004466 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2205      	movs	r2, #5
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3301      	adds	r3, #1
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	429a      	cmp	r2, r3
 8004442:	d307      	bcc.n	8004454 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f2      	bne.n	8004438 <HAL_DMA_IRQHandler+0x2cc>
 8004452:	e000      	b.n	8004456 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004454:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
 8004476:	e000      	b.n	800447a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004478:	bf00      	nop
    }
  }
}
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3b10      	subs	r3, #16
 8004490:	4a14      	ldr	r2, [pc, #80]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x64>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800449a:	4a13      	ldr	r2, [pc, #76]	@ (80044e8 <DMA_CalcBaseAndBitshift+0x68>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d909      	bls.n	80044c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	659a      	str	r2, [r3, #88]	@ 0x58
 80044c0:	e007      	b.n	80044d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	aaaaaaab 	.word	0xaaaaaaab
 80044e8:	08007860 	.word	0x08007860

080044ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11f      	bne.n	8004546 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d856      	bhi.n	80045ba <DMA_CheckFifoParam+0xce>
 800450c:	a201      	add	r2, pc, #4	@ (adr r2, 8004514 <DMA_CheckFifoParam+0x28>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004525 	.word	0x08004525
 8004518:	08004537 	.word	0x08004537
 800451c:	08004525 	.word	0x08004525
 8004520:	080045bb 	.word	0x080045bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d046      	beq.n	80045be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004534:	e043      	b.n	80045be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800453e:	d140      	bne.n	80045c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004544:	e03d      	b.n	80045c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454e:	d121      	bne.n	8004594 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d837      	bhi.n	80045c6 <DMA_CheckFifoParam+0xda>
 8004556:	a201      	add	r2, pc, #4	@ (adr r2, 800455c <DMA_CheckFifoParam+0x70>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	0800456d 	.word	0x0800456d
 8004560:	08004573 	.word	0x08004573
 8004564:	0800456d 	.word	0x0800456d
 8004568:	08004585 	.word	0x08004585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      break;
 8004570:	e030      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d025      	beq.n	80045ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004582:	e022      	b.n	80045ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800458c:	d11f      	bne.n	80045ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004592:	e01c      	b.n	80045ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d903      	bls.n	80045a2 <DMA_CheckFifoParam+0xb6>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d003      	beq.n	80045a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045a0:	e018      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      break;
 80045a6:	e015      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      break;
 80045b8:	e00b      	b.n	80045d2 <DMA_CheckFifoParam+0xe6>
      break;
 80045ba:	bf00      	nop
 80045bc:	e00a      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
 80045c0:	e008      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045c2:	bf00      	nop
 80045c4:	e006      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045c6:	bf00      	nop
 80045c8:	e004      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045ca:	bf00      	nop
 80045cc:	e002      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ce:	bf00      	nop
 80045d0:	e000      	b.n	80045d4 <DMA_CheckFifoParam+0xe8>
      break;
 80045d2:	bf00      	nop
    }
  } 
  
  return status; 
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop

080045e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	@ 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e165      	b.n	80048cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004600:	2201      	movs	r2, #1
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	429a      	cmp	r2, r3
 800461a:	f040 8154 	bne.w	80048c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d005      	beq.n	8004636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004632:	2b02      	cmp	r3, #2
 8004634:	d130      	bne.n	8004698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	2203      	movs	r2, #3
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800466c:	2201      	movs	r2, #1
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 0201 	and.w	r2, r3, #1
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d017      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d123      	bne.n	8004728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	08da      	lsrs	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3208      	adds	r2, #8
 80046e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	220f      	movs	r2, #15
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	08da      	lsrs	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3208      	adds	r2, #8
 8004722:	69b9      	ldr	r1, [r7, #24]
 8004724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2203      	movs	r2, #3
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0203 	and.w	r2, r3, #3
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80ae 	beq.w	80048c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	4b5d      	ldr	r3, [pc, #372]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 8004770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004772:	4a5c      	ldr	r2, [pc, #368]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 8004774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004778:	6453      	str	r3, [r2, #68]	@ 0x44
 800477a:	4b5a      	ldr	r3, [pc, #360]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004786:	4a58      	ldr	r2, [pc, #352]	@ (80048e8 <HAL_GPIO_Init+0x304>)
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	3302      	adds	r3, #2
 800478e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	220f      	movs	r2, #15
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4013      	ands	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a4f      	ldr	r2, [pc, #316]	@ (80048ec <HAL_GPIO_Init+0x308>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d025      	beq.n	80047fe <HAL_GPIO_Init+0x21a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a4e      	ldr	r2, [pc, #312]	@ (80048f0 <HAL_GPIO_Init+0x30c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01f      	beq.n	80047fa <HAL_GPIO_Init+0x216>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a4d      	ldr	r2, [pc, #308]	@ (80048f4 <HAL_GPIO_Init+0x310>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d019      	beq.n	80047f6 <HAL_GPIO_Init+0x212>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a4c      	ldr	r2, [pc, #304]	@ (80048f8 <HAL_GPIO_Init+0x314>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_GPIO_Init+0x20e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4b      	ldr	r2, [pc, #300]	@ (80048fc <HAL_GPIO_Init+0x318>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00d      	beq.n	80047ee <HAL_GPIO_Init+0x20a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004900 <HAL_GPIO_Init+0x31c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <HAL_GPIO_Init+0x206>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a49      	ldr	r2, [pc, #292]	@ (8004904 <HAL_GPIO_Init+0x320>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_GPIO_Init+0x202>
 80047e2:	2306      	movs	r3, #6
 80047e4:	e00c      	b.n	8004800 <HAL_GPIO_Init+0x21c>
 80047e6:	2307      	movs	r3, #7
 80047e8:	e00a      	b.n	8004800 <HAL_GPIO_Init+0x21c>
 80047ea:	2305      	movs	r3, #5
 80047ec:	e008      	b.n	8004800 <HAL_GPIO_Init+0x21c>
 80047ee:	2304      	movs	r3, #4
 80047f0:	e006      	b.n	8004800 <HAL_GPIO_Init+0x21c>
 80047f2:	2303      	movs	r3, #3
 80047f4:	e004      	b.n	8004800 <HAL_GPIO_Init+0x21c>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e002      	b.n	8004800 <HAL_GPIO_Init+0x21c>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_GPIO_Init+0x21c>
 80047fe:	2300      	movs	r3, #0
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	f002 0203 	and.w	r2, r2, #3
 8004806:	0092      	lsls	r2, r2, #2
 8004808:	4093      	lsls	r3, r2
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4313      	orrs	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004810:	4935      	ldr	r1, [pc, #212]	@ (80048e8 <HAL_GPIO_Init+0x304>)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	089b      	lsrs	r3, r3, #2
 8004816:	3302      	adds	r3, #2
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800481e:	4b3a      	ldr	r3, [pc, #232]	@ (8004908 <HAL_GPIO_Init+0x324>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004842:	4a31      	ldr	r2, [pc, #196]	@ (8004908 <HAL_GPIO_Init+0x324>)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004848:	4b2f      	ldr	r3, [pc, #188]	@ (8004908 <HAL_GPIO_Init+0x324>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800486c:	4a26      	ldr	r2, [pc, #152]	@ (8004908 <HAL_GPIO_Init+0x324>)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004872:	4b25      	ldr	r3, [pc, #148]	@ (8004908 <HAL_GPIO_Init+0x324>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004896:	4a1c      	ldr	r2, [pc, #112]	@ (8004908 <HAL_GPIO_Init+0x324>)
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800489c:	4b1a      	ldr	r3, [pc, #104]	@ (8004908 <HAL_GPIO_Init+0x324>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048c0:	4a11      	ldr	r2, [pc, #68]	@ (8004908 <HAL_GPIO_Init+0x324>)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3301      	adds	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	f67f ae96 	bls.w	8004600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	3724      	adds	r7, #36	@ 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40013800 	.word	0x40013800
 80048ec:	40020000 	.word	0x40020000
 80048f0:	40020400 	.word	0x40020400
 80048f4:	40020800 	.word	0x40020800
 80048f8:	40020c00 	.word	0x40020c00
 80048fc:	40021000 	.word	0x40021000
 8004900:	40021400 	.word	0x40021400
 8004904:	40021800 	.word	0x40021800
 8004908:	40013c00 	.word	0x40013c00

0800490c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
 8004918:	4613      	mov	r3, r2
 800491a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800491c:	787b      	ldrb	r3, [r7, #1]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004928:	e003      	b.n	8004932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	041a      	lsls	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	619a      	str	r2, [r3, #24]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004950:	887a      	ldrh	r2, [r7, #2]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4013      	ands	r3, r2
 8004956:	041a      	lsls	r2, r3, #16
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	43d9      	mvns	r1, r3
 800495c:	887b      	ldrh	r3, [r7, #2]
 800495e:	400b      	ands	r3, r1
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	619a      	str	r2, [r3, #24]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4b20      	ldr	r3, [pc, #128]	@ (8004a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	4a1f      	ldr	r2, [pc, #124]	@ (8004a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498c:	6413      	str	r3, [r2, #64]	@ 0x40
 800498e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800499a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <HAL_PWREx_EnableOverDrive+0x94>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049a0:	f7fe fef0 	bl	8003784 <HAL_GetTick>
 80049a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049a6:	e009      	b.n	80049bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049a8:	f7fe feec 	bl	8003784 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049b6:	d901      	bls.n	80049bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e01f      	b.n	80049fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049bc:	4b13      	ldr	r3, [pc, #76]	@ (8004a0c <HAL_PWREx_EnableOverDrive+0x98>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049c8:	d1ee      	bne.n	80049a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049ca:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049d0:	f7fe fed8 	bl	8003784 <HAL_GetTick>
 80049d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049d6:	e009      	b.n	80049ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049d8:	f7fe fed4 	bl	8003784 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049e6:	d901      	bls.n	80049ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e007      	b.n	80049fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049ec:	4b07      	ldr	r3, [pc, #28]	@ (8004a0c <HAL_PWREx_EnableOverDrive+0x98>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049f8:	d1ee      	bne.n	80049d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40023800 	.word	0x40023800
 8004a08:	420e0040 	.word	0x420e0040
 8004a0c:	40007000 	.word	0x40007000
 8004a10:	420e0044 	.word	0x420e0044

08004a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0cc      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a28:	4b68      	ldr	r3, [pc, #416]	@ (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d90c      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b65      	ldr	r3, [pc, #404]	@ (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b63      	ldr	r3, [pc, #396]	@ (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0b8      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a68:	4b59      	ldr	r3, [pc, #356]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a58      	ldr	r2, [pc, #352]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a80:	4b53      	ldr	r3, [pc, #332]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a52      	ldr	r2, [pc, #328]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a8c:	4b50      	ldr	r3, [pc, #320]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	494d      	ldr	r1, [pc, #308]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d044      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b47      	ldr	r3, [pc, #284]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d119      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e07f      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e06f      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e067      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af2:	4b37      	ldr	r3, [pc, #220]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 0203 	bic.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4934      	ldr	r1, [pc, #208]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b04:	f7fe fe3e 	bl	8003784 <HAL_GetTick>
 8004b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fe fe3a 	bl	8003784 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e04f      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 020c 	and.w	r2, r3, #12
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d1eb      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b34:	4b25      	ldr	r3, [pc, #148]	@ (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d20c      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b22      	ldr	r3, [pc, #136]	@ (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b20      	ldr	r3, [pc, #128]	@ (8004bcc <HAL_RCC_ClockConfig+0x1b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e032      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b68:	4b19      	ldr	r3, [pc, #100]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4916      	ldr	r1, [pc, #88]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b86:	4b12      	ldr	r3, [pc, #72]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	490e      	ldr	r1, [pc, #56]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b9a:	f000 f855 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	490a      	ldr	r1, [pc, #40]	@ (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	5ccb      	ldrb	r3, [r1, r3]
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	4a09      	ldr	r2, [pc, #36]	@ (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bb6:	4b09      	ldr	r3, [pc, #36]	@ (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fd9e 	bl	80036fc <HAL_InitTick>

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023c00 	.word	0x40023c00
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	08007848 	.word	0x08007848
 8004bd8:	20000008 	.word	0x20000008
 8004bdc:	2000000c 	.word	0x2000000c

08004be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be4:	4b03      	ldr	r3, [pc, #12]	@ (8004bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000008 	.word	0x20000008

08004bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bfc:	f7ff fff0 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	0a9b      	lsrs	r3, r3, #10
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4903      	ldr	r1, [pc, #12]	@ (8004c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	08007858 	.word	0x08007858

08004c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c24:	f7ff ffdc 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	0b5b      	lsrs	r3, r3, #13
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4903      	ldr	r1, [pc, #12]	@ (8004c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40023800 	.word	0x40023800
 8004c44:	08007858 	.word	0x08007858

08004c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c4c:	b0ae      	sub	sp, #184	@ 0xb8
 8004c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c6e:	4bcb      	ldr	r3, [pc, #812]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	f200 8206 	bhi.w	8005088 <HAL_RCC_GetSysClockFreq+0x440>
 8004c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004cb9 	.word	0x08004cb9
 8004c88:	08005089 	.word	0x08005089
 8004c8c:	08005089 	.word	0x08005089
 8004c90:	08005089 	.word	0x08005089
 8004c94:	08004cc1 	.word	0x08004cc1
 8004c98:	08005089 	.word	0x08005089
 8004c9c:	08005089 	.word	0x08005089
 8004ca0:	08005089 	.word	0x08005089
 8004ca4:	08004cc9 	.word	0x08004cc9
 8004ca8:	08005089 	.word	0x08005089
 8004cac:	08005089 	.word	0x08005089
 8004cb0:	08005089 	.word	0x08005089
 8004cb4:	08004eb9 	.word	0x08004eb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb8:	4bb9      	ldr	r3, [pc, #740]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cbe:	e1e7      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cc0:	4bb8      	ldr	r3, [pc, #736]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cc6:	e1e3      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cc8:	4bb4      	ldr	r3, [pc, #720]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd4:	4bb1      	ldr	r3, [pc, #708]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d071      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce0:	4bae      	ldr	r3, [pc, #696]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d06:	4622      	mov	r2, r4
 8004d08:	462b      	mov	r3, r5
 8004d0a:	f04f 0000 	mov.w	r0, #0
 8004d0e:	f04f 0100 	mov.w	r1, #0
 8004d12:	0159      	lsls	r1, r3, #5
 8004d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d18:	0150      	lsls	r0, r2, #5
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4621      	mov	r1, r4
 8004d20:	1a51      	subs	r1, r2, r1
 8004d22:	6439      	str	r1, [r7, #64]	@ 0x40
 8004d24:	4629      	mov	r1, r5
 8004d26:	eb63 0301 	sbc.w	r3, r3, r1
 8004d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004d38:	4649      	mov	r1, r9
 8004d3a:	018b      	lsls	r3, r1, #6
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d42:	4641      	mov	r1, r8
 8004d44:	018a      	lsls	r2, r1, #6
 8004d46:	4641      	mov	r1, r8
 8004d48:	1a51      	subs	r1, r2, r1
 8004d4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004d60:	4649      	mov	r1, r9
 8004d62:	00cb      	lsls	r3, r1, #3
 8004d64:	4641      	mov	r1, r8
 8004d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	00ca      	lsls	r2, r1, #3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	4622      	mov	r2, r4
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	460a      	mov	r2, r1
 8004d7e:	eb42 0303 	adc.w	r3, r2, r3
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d90:	4629      	mov	r1, r5
 8004d92:	024b      	lsls	r3, r1, #9
 8004d94:	4621      	mov	r1, r4
 8004d96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	024a      	lsls	r2, r1, #9
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004db0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004db4:	f7fb fed6 	bl	8000b64 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc2:	e067      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc4:	4b75      	ldr	r3, [pc, #468]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004dd0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ddc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dde:	2300      	movs	r3, #0
 8004de0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004de2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004de6:	4622      	mov	r2, r4
 8004de8:	462b      	mov	r3, r5
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df8:	0150      	lsls	r0, r2, #5
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4621      	mov	r1, r4
 8004e00:	1a51      	subs	r1, r2, r1
 8004e02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e04:	4629      	mov	r1, r5
 8004e06:	eb63 0301 	sbc.w	r3, r3, r1
 8004e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004e18:	4649      	mov	r1, r9
 8004e1a:	018b      	lsls	r3, r1, #6
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e22:	4641      	mov	r1, r8
 8004e24:	018a      	lsls	r2, r1, #6
 8004e26:	4641      	mov	r1, r8
 8004e28:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e46:	4692      	mov	sl, r2
 8004e48:	469b      	mov	fp, r3
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	eb1a 0303 	adds.w	r3, sl, r3
 8004e50:	623b      	str	r3, [r7, #32]
 8004e52:	462b      	mov	r3, r5
 8004e54:	eb4b 0303 	adc.w	r3, fp, r3
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004e66:	4629      	mov	r1, r5
 8004e68:	028b      	lsls	r3, r1, #10
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e70:	4621      	mov	r1, r4
 8004e72:	028a      	lsls	r2, r1, #10
 8004e74:	4610      	mov	r0, r2
 8004e76:	4619      	mov	r1, r3
 8004e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e80:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004e86:	f7fb fe6d 	bl	8000b64 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4613      	mov	r3, r2
 8004e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e94:	4b41      	ldr	r3, [pc, #260]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	0c1b      	lsrs	r3, r3, #16
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004eaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004eb6:	e0eb      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb8:	4b38      	ldr	r3, [pc, #224]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec4:	4b35      	ldr	r3, [pc, #212]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d06b      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed0:	4b32      	ldr	r3, [pc, #200]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	099b      	lsrs	r3, r3, #6
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004edc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ee8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004eec:	4622      	mov	r2, r4
 8004eee:	462b      	mov	r3, r5
 8004ef0:	f04f 0000 	mov.w	r0, #0
 8004ef4:	f04f 0100 	mov.w	r1, #0
 8004ef8:	0159      	lsls	r1, r3, #5
 8004efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004efe:	0150      	lsls	r0, r2, #5
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4621      	mov	r1, r4
 8004f06:	1a51      	subs	r1, r2, r1
 8004f08:	61b9      	str	r1, [r7, #24]
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004f1e:	4659      	mov	r1, fp
 8004f20:	018b      	lsls	r3, r1, #6
 8004f22:	4651      	mov	r1, sl
 8004f24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f28:	4651      	mov	r1, sl
 8004f2a:	018a      	lsls	r2, r1, #6
 8004f2c:	4651      	mov	r1, sl
 8004f2e:	ebb2 0801 	subs.w	r8, r2, r1
 8004f32:	4659      	mov	r1, fp
 8004f34:	eb63 0901 	sbc.w	r9, r3, r1
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f4c:	4690      	mov	r8, r2
 8004f4e:	4699      	mov	r9, r3
 8004f50:	4623      	mov	r3, r4
 8004f52:	eb18 0303 	adds.w	r3, r8, r3
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	462b      	mov	r3, r5
 8004f5a:	eb49 0303 	adc.w	r3, r9, r3
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	024b      	lsls	r3, r1, #9
 8004f70:	4621      	mov	r1, r4
 8004f72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f76:	4621      	mov	r1, r4
 8004f78:	024a      	lsls	r2, r1, #9
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f82:	2200      	movs	r2, #0
 8004f84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004f88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f8c:	f7fb fdea 	bl	8000b64 <__aeabi_uldivmod>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4613      	mov	r3, r2
 8004f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f9a:	e065      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x420>
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	099b      	lsrs	r3, r3, #6
 8004fae:	2200      	movs	r2, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fba:	2300      	movs	r3, #0
 8004fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004fc2:	4642      	mov	r2, r8
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	f04f 0000 	mov.w	r0, #0
 8004fca:	f04f 0100 	mov.w	r1, #0
 8004fce:	0159      	lsls	r1, r3, #5
 8004fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fd4:	0150      	lsls	r0, r2, #5
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4641      	mov	r1, r8
 8004fdc:	1a51      	subs	r1, r2, r1
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	018b      	lsls	r3, r1, #6
 8004ff8:	4651      	mov	r1, sl
 8004ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ffe:	4651      	mov	r1, sl
 8005000:	018a      	lsls	r2, r1, #6
 8005002:	4651      	mov	r1, sl
 8005004:	1a54      	subs	r4, r2, r1
 8005006:	4659      	mov	r1, fp
 8005008:	eb63 0501 	sbc.w	r5, r3, r1
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	00eb      	lsls	r3, r5, #3
 8005016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800501a:	00e2      	lsls	r2, r4, #3
 800501c:	4614      	mov	r4, r2
 800501e:	461d      	mov	r5, r3
 8005020:	4643      	mov	r3, r8
 8005022:	18e3      	adds	r3, r4, r3
 8005024:	603b      	str	r3, [r7, #0]
 8005026:	464b      	mov	r3, r9
 8005028:	eb45 0303 	adc.w	r3, r5, r3
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800503a:	4629      	mov	r1, r5
 800503c:	028b      	lsls	r3, r1, #10
 800503e:	4621      	mov	r1, r4
 8005040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005044:	4621      	mov	r1, r4
 8005046:	028a      	lsls	r2, r1, #10
 8005048:	4610      	mov	r0, r2
 800504a:	4619      	mov	r1, r3
 800504c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005050:	2200      	movs	r2, #0
 8005052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005054:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005056:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800505a:	f7fb fd83 	bl	8000b64 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4613      	mov	r3, r2
 8005064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005068:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	0f1b      	lsrs	r3, r3, #28
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800507a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005086:	e003      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800508a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800508e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005094:	4618      	mov	r0, r3
 8005096:	37b8      	adds	r7, #184	@ 0xb8
 8005098:	46bd      	mov	sp, r7
 800509a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509e:	bf00      	nop
 80050a0:	40023800 	.word	0x40023800
 80050a4:	00f42400 	.word	0x00f42400

080050a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e28d      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8083 	beq.w	80051ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050c8:	4b94      	ldr	r3, [pc, #592]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d019      	beq.n	8005108 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050d4:	4b91      	ldr	r3, [pc, #580]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d106      	bne.n	80050ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050e0:	4b8e      	ldr	r3, [pc, #568]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ec:	d00c      	beq.n	8005108 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ee:	4b8b      	ldr	r3, [pc, #556]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d112      	bne.n	8005120 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050fa:	4b88      	ldr	r3, [pc, #544]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005106:	d10b      	bne.n	8005120 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	4b84      	ldr	r3, [pc, #528]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d05b      	beq.n	80051cc <HAL_RCC_OscConfig+0x124>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d157      	bne.n	80051cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e25a      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005128:	d106      	bne.n	8005138 <HAL_RCC_OscConfig+0x90>
 800512a:	4b7c      	ldr	r3, [pc, #496]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a7b      	ldr	r2, [pc, #492]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e01d      	b.n	8005174 <HAL_RCC_OscConfig+0xcc>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005140:	d10c      	bne.n	800515c <HAL_RCC_OscConfig+0xb4>
 8005142:	4b76      	ldr	r3, [pc, #472]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a75      	ldr	r2, [pc, #468]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	4b73      	ldr	r3, [pc, #460]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a72      	ldr	r2, [pc, #456]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e00b      	b.n	8005174 <HAL_RCC_OscConfig+0xcc>
 800515c:	4b6f      	ldr	r3, [pc, #444]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a6e      	ldr	r2, [pc, #440]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b6c      	ldr	r3, [pc, #432]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a6b      	ldr	r2, [pc, #428]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800516e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d013      	beq.n	80051a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fe fb02 	bl	8003784 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fe fafe 	bl	8003784 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	@ 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e21f      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005196:	4b61      	ldr	r3, [pc, #388]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0xdc>
 80051a2:	e014      	b.n	80051ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fe faee 	bl	8003784 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ac:	f7fe faea 	bl	8003784 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	@ 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e20b      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051be:	4b57      	ldr	r3, [pc, #348]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x104>
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06f      	beq.n	80052ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051da:	4b50      	ldr	r3, [pc, #320]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d017      	beq.n	8005216 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051e6:	4b4d      	ldr	r3, [pc, #308]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d105      	bne.n	80051fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80051f2:	4b4a      	ldr	r3, [pc, #296]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fe:	4b47      	ldr	r3, [pc, #284]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d11c      	bne.n	8005244 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520a:	4b44      	ldr	r3, [pc, #272]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d116      	bne.n	8005244 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005216:	4b41      	ldr	r3, [pc, #260]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_RCC_OscConfig+0x186>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d001      	beq.n	800522e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e1d3      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522e:	4b3b      	ldr	r3, [pc, #236]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4937      	ldr	r1, [pc, #220]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800523e:	4313      	orrs	r3, r2
 8005240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005242:	e03a      	b.n	80052ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d020      	beq.n	800528e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800524c:	4b34      	ldr	r3, [pc, #208]	@ (8005320 <HAL_RCC_OscConfig+0x278>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7fe fa97 	bl	8003784 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525a:	f7fe fa93 	bl	8003784 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e1b4      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526c:	4b2b      	ldr	r3, [pc, #172]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005278:	4b28      	ldr	r3, [pc, #160]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4925      	ldr	r1, [pc, #148]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]
 800528c:	e015      	b.n	80052ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528e:	4b24      	ldr	r3, [pc, #144]	@ (8005320 <HAL_RCC_OscConfig+0x278>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fe fa76 	bl	8003784 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529c:	f7fe fa72 	bl	8003784 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e193      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ae:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d036      	beq.n	8005334 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ce:	4b15      	ldr	r3, [pc, #84]	@ (8005324 <HAL_RCC_OscConfig+0x27c>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fe fa56 	bl	8003784 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052dc:	f7fe fa52 	bl	8003784 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e173      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ee:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <HAL_RCC_OscConfig+0x274>)
 80052f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x234>
 80052fa:	e01b      	b.n	8005334 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052fc:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_RCC_OscConfig+0x27c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005302:	f7fe fa3f 	bl	8003784 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005308:	e00e      	b.n	8005328 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800530a:	f7fe fa3b 	bl	8003784 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d907      	bls.n	8005328 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e15c      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
 800531c:	40023800 	.word	0x40023800
 8005320:	42470000 	.word	0x42470000
 8005324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005328:	4b8a      	ldr	r3, [pc, #552]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 800532a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ea      	bne.n	800530a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8097 	beq.w	8005470 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005346:	4b83      	ldr	r3, [pc, #524]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10f      	bne.n	8005372 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	4b7f      	ldr	r3, [pc, #508]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	4a7e      	ldr	r2, [pc, #504]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005360:	6413      	str	r3, [r2, #64]	@ 0x40
 8005362:	4b7c      	ldr	r3, [pc, #496]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005372:	4b79      	ldr	r3, [pc, #484]	@ (8005558 <HAL_RCC_OscConfig+0x4b0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d118      	bne.n	80053b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800537e:	4b76      	ldr	r3, [pc, #472]	@ (8005558 <HAL_RCC_OscConfig+0x4b0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a75      	ldr	r2, [pc, #468]	@ (8005558 <HAL_RCC_OscConfig+0x4b0>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538a:	f7fe f9fb 	bl	8003784 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005392:	f7fe f9f7 	bl	8003784 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e118      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a4:	4b6c      	ldr	r3, [pc, #432]	@ (8005558 <HAL_RCC_OscConfig+0x4b0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d106      	bne.n	80053c6 <HAL_RCC_OscConfig+0x31e>
 80053b8:	4b66      	ldr	r3, [pc, #408]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053bc:	4a65      	ldr	r2, [pc, #404]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c4:	e01c      	b.n	8005400 <HAL_RCC_OscConfig+0x358>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x340>
 80053ce:	4b61      	ldr	r3, [pc, #388]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	4a60      	ldr	r2, [pc, #384]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053d4:	f043 0304 	orr.w	r3, r3, #4
 80053d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053da:	4b5e      	ldr	r3, [pc, #376]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	4a5d      	ldr	r2, [pc, #372]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0x358>
 80053e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ec:	4a59      	ldr	r2, [pc, #356]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f4:	4b57      	ldr	r3, [pc, #348]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f8:	4a56      	ldr	r2, [pc, #344]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80053fa:	f023 0304 	bic.w	r3, r3, #4
 80053fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fe f9bc 	bl	8003784 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fe f9b8 	bl	8003784 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0d7      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005426:	4b4b      	ldr	r3, [pc, #300]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ee      	beq.n	8005410 <HAL_RCC_OscConfig+0x368>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005434:	f7fe f9a6 	bl	8003784 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543a:	e00a      	b.n	8005452 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f7fe f9a2 	bl	8003784 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e0c1      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005452:	4b40      	ldr	r3, [pc, #256]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1ee      	bne.n	800543c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d105      	bne.n	8005470 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005464:	4b3b      	ldr	r3, [pc, #236]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	4a3a      	ldr	r2, [pc, #232]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 800546a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800546e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80ad 	beq.w	80055d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800547a:	4b36      	ldr	r3, [pc, #216]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b08      	cmp	r3, #8
 8005484:	d060      	beq.n	8005548 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d145      	bne.n	800551a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548e:	4b33      	ldr	r3, [pc, #204]	@ (800555c <HAL_RCC_OscConfig+0x4b4>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fe f976 	bl	8003784 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fe f972 	bl	8003784 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e093      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ae:	4b29      	ldr	r3, [pc, #164]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	3b01      	subs	r3, #1
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e4:	071b      	lsls	r3, r3, #28
 80054e6:	491b      	ldr	r1, [pc, #108]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ec:	4b1b      	ldr	r3, [pc, #108]	@ (800555c <HAL_RCC_OscConfig+0x4b4>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f2:	f7fe f947 	bl	8003784 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fa:	f7fe f943 	bl	8003784 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e064      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550c:	4b11      	ldr	r3, [pc, #68]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCC_OscConfig+0x452>
 8005518:	e05c      	b.n	80055d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551a:	4b10      	ldr	r3, [pc, #64]	@ (800555c <HAL_RCC_OscConfig+0x4b4>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fe f930 	bl	8003784 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fe f92c 	bl	8003784 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e04d      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553a:	4b06      	ldr	r3, [pc, #24]	@ (8005554 <HAL_RCC_OscConfig+0x4ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x480>
 8005546:	e045      	b.n	80055d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d107      	bne.n	8005560 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e040      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
 8005554:	40023800 	.word	0x40023800
 8005558:	40007000 	.word	0x40007000
 800555c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005560:	4b1f      	ldr	r3, [pc, #124]	@ (80055e0 <HAL_RCC_OscConfig+0x538>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d030      	beq.n	80055d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d129      	bne.n	80055d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d122      	bne.n	80055d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005590:	4013      	ands	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005598:	4293      	cmp	r3, r2
 800559a:	d119      	bne.n	80055d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	3b01      	subs	r3, #1
 80055aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d10f      	bne.n	80055d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40023800 	.word	0x40023800

080055e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e041      	b.n	800567a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fd fe5e 	bl	80032cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f000 fcc4 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d001      	beq.n	800569c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e04e      	b.n	800573a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a23      	ldr	r2, [pc, #140]	@ (8005748 <HAL_TIM_Base_Start_IT+0xc4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d022      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x80>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c6:	d01d      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x80>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1f      	ldr	r2, [pc, #124]	@ (800574c <HAL_TIM_Base_Start_IT+0xc8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d018      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x80>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005750 <HAL_TIM_Base_Start_IT+0xcc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d013      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x80>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005754 <HAL_TIM_Base_Start_IT+0xd0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00e      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x80>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005758 <HAL_TIM_Base_Start_IT+0xd4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d009      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x80>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a19      	ldr	r2, [pc, #100]	@ (800575c <HAL_TIM_Base_Start_IT+0xd8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d004      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x80>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a18      	ldr	r2, [pc, #96]	@ (8005760 <HAL_TIM_Base_Start_IT+0xdc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d111      	bne.n	8005728 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b06      	cmp	r3, #6
 8005714:	d010      	beq.n	8005738 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0201 	orr.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005726:	e007      	b.n	8005738 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40000c00 	.word	0x40000c00
 8005758:	40010400 	.word	0x40010400
 800575c:	40014000 	.word	0x40014000
 8005760:	40001800 	.word	0x40001800

08005764 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e041      	b.n	80057fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fd fc52 	bl	8003034 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 fc04 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_TIM_PWM_Start+0x24>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	bf14      	ite	ne
 8005820:	2301      	movne	r3, #1
 8005822:	2300      	moveq	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	e022      	b.n	800586e <HAL_TIM_PWM_Start+0x6a>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d109      	bne.n	8005842 <HAL_TIM_PWM_Start+0x3e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	e015      	b.n	800586e <HAL_TIM_PWM_Start+0x6a>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d109      	bne.n	800585c <HAL_TIM_PWM_Start+0x58>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e008      	b.n	800586e <HAL_TIM_PWM_Start+0x6a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e07c      	b.n	8005970 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <HAL_TIM_PWM_Start+0x82>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005884:	e013      	b.n	80058ae <HAL_TIM_PWM_Start+0xaa>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b04      	cmp	r3, #4
 800588a:	d104      	bne.n	8005896 <HAL_TIM_PWM_Start+0x92>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005894:	e00b      	b.n	80058ae <HAL_TIM_PWM_Start+0xaa>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_PWM_Start+0xa2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a4:	e003      	b.n	80058ae <HAL_TIM_PWM_Start+0xaa>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2201      	movs	r2, #1
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fdd6 	bl	8006468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005978 <HAL_TIM_PWM_Start+0x174>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIM_PWM_Start+0xcc>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2c      	ldr	r2, [pc, #176]	@ (800597c <HAL_TIM_PWM_Start+0x178>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <HAL_TIM_PWM_Start+0xd0>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <HAL_TIM_PWM_Start+0xd2>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a22      	ldr	r2, [pc, #136]	@ (8005978 <HAL_TIM_PWM_Start+0x174>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_TIM_PWM_Start+0x136>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fc:	d01d      	beq.n	800593a <HAL_TIM_PWM_Start+0x136>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1f      	ldr	r2, [pc, #124]	@ (8005980 <HAL_TIM_PWM_Start+0x17c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_TIM_PWM_Start+0x136>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1d      	ldr	r2, [pc, #116]	@ (8005984 <HAL_TIM_PWM_Start+0x180>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_TIM_PWM_Start+0x136>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1c      	ldr	r2, [pc, #112]	@ (8005988 <HAL_TIM_PWM_Start+0x184>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_TIM_PWM_Start+0x136>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a16      	ldr	r2, [pc, #88]	@ (800597c <HAL_TIM_PWM_Start+0x178>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_TIM_PWM_Start+0x136>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a18      	ldr	r2, [pc, #96]	@ (800598c <HAL_TIM_PWM_Start+0x188>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIM_PWM_Start+0x136>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <HAL_TIM_PWM_Start+0x18c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d111      	bne.n	800595e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d010      	beq.n	800596e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	e007      	b.n	800596e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0201 	orr.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40010000 	.word	0x40010000
 800597c:	40010400 	.word	0x40010400
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40000c00 	.word	0x40000c00
 800598c:	40014000 	.word	0x40014000
 8005990:	40001800 	.word	0x40001800

08005994 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e097      	b.n	8005ad8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7fd fb61 	bl	8003084 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059d8:	f023 0307 	bic.w	r3, r3, #7
 80059dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 fae1 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	4313      	orrs	r3, r2
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a34:	f023 030c 	bic.w	r3, r3, #12
 8005a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	4313      	orrs	r3, r2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	011a      	lsls	r2, r3, #4
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	031b      	lsls	r3, r3, #12
 8005a64:	4313      	orrs	r3, r2
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	4313      	orrs	r3, r2
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005af0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005af8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d110      	bne.n	8005b32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d102      	bne.n	8005b1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b16:	7b7b      	ldrb	r3, [r7, #13]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e069      	b.n	8005bf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b30:	e031      	b.n	8005b96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d110      	bne.n	8005b5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d102      	bne.n	8005b44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b3e:	7b3b      	ldrb	r3, [r7, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d001      	beq.n	8005b48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e055      	b.n	8005bf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b58:	e01d      	b.n	8005b96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d108      	bne.n	8005b72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d105      	bne.n	8005b72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b66:	7b7b      	ldrb	r3, [r7, #13]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d102      	bne.n	8005b72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b6c:	7b3b      	ldrb	r3, [r7, #12]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d001      	beq.n	8005b76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e03e      	b.n	8005bf4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_TIM_Encoder_Start+0xc4>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d008      	beq.n	8005bb4 <HAL_TIM_Encoder_Start+0xd4>
 8005ba2:	e00f      	b.n	8005bc4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	2100      	movs	r1, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fc5b 	bl	8006468 <TIM_CCxChannelCmd>
      break;
 8005bb2:	e016      	b.n	8005be2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2104      	movs	r1, #4
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fc53 	bl	8006468 <TIM_CCxChannelCmd>
      break;
 8005bc2:	e00e      	b.n	8005be2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fc4b 	bl	8006468 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	2104      	movs	r1, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fc44 	bl	8006468 <TIM_CCxChannelCmd>
      break;
 8005be0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d020      	beq.n	8005c60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01b      	beq.n	8005c60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0202 	mvn.w	r2, #2
 8005c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f994 	bl	8005f74 <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f986 	bl	8005f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f997 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d020      	beq.n	8005cac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0204 	mvn.w	r2, #4
 8005c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f96e 	bl	8005f74 <HAL_TIM_IC_CaptureCallback>
 8005c98:	e005      	b.n	8005ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f960 	bl	8005f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f971 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d020      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0208 	mvn.w	r2, #8
 8005cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2204      	movs	r2, #4
 8005cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f948 	bl	8005f74 <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f93a 	bl	8005f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f94b 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d020      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0210 	mvn.w	r2, #16
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f922 	bl	8005f74 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f914 	bl	8005f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f925 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0201 	mvn.w	r2, #1
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc f9f4 	bl	8002150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fc6c 	bl	8006664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00c      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f8f6 	bl	8005f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0220 	mvn.w	r2, #32
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fc3e 	bl	8006650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e0ae      	b.n	8005f58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	f200 809f 	bhi.w	8005f48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e45 	.word	0x08005e45
 8005e14:	08005f49 	.word	0x08005f49
 8005e18:	08005f49 	.word	0x08005f49
 8005e1c:	08005f49 	.word	0x08005f49
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	08005f49 	.word	0x08005f49
 8005e28:	08005f49 	.word	0x08005f49
 8005e2c:	08005f49 	.word	0x08005f49
 8005e30:	08005ec7 	.word	0x08005ec7
 8005e34:	08005f49 	.word	0x08005f49
 8005e38:	08005f49 	.word	0x08005f49
 8005e3c:	08005f49 	.word	0x08005f49
 8005e40:	08005f07 	.word	0x08005f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 f95c 	bl	8006108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0208 	orr.w	r2, r2, #8
 8005e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0204 	bic.w	r2, r2, #4
 8005e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6999      	ldr	r1, [r3, #24]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	619a      	str	r2, [r3, #24]
      break;
 8005e82:	e064      	b.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f9ac 	bl	80061e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6999      	ldr	r1, [r3, #24]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	021a      	lsls	r2, r3, #8
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	619a      	str	r2, [r3, #24]
      break;
 8005ec4:	e043      	b.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fa01 	bl	80062d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0208 	orr.w	r2, r2, #8
 8005ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0204 	bic.w	r2, r2, #4
 8005ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69d9      	ldr	r1, [r3, #28]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	61da      	str	r2, [r3, #28]
      break;
 8005f04:	e023      	b.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fa55 	bl	80063bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69da      	ldr	r2, [r3, #28]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69d9      	ldr	r1, [r3, #28]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	021a      	lsls	r2, r3, #8
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	61da      	str	r2, [r3, #28]
      break;
 8005f46:	e002      	b.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a46      	ldr	r2, [pc, #280]	@ (80060dc <TIM_Base_SetConfig+0x12c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fce:	d00f      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a43      	ldr	r2, [pc, #268]	@ (80060e0 <TIM_Base_SetConfig+0x130>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a42      	ldr	r2, [pc, #264]	@ (80060e4 <TIM_Base_SetConfig+0x134>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a41      	ldr	r2, [pc, #260]	@ (80060e8 <TIM_Base_SetConfig+0x138>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <TIM_Base_SetConfig+0x13c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a35      	ldr	r2, [pc, #212]	@ (80060dc <TIM_Base_SetConfig+0x12c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02b      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006010:	d027      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a32      	ldr	r2, [pc, #200]	@ (80060e0 <TIM_Base_SetConfig+0x130>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d023      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a31      	ldr	r2, [pc, #196]	@ (80060e4 <TIM_Base_SetConfig+0x134>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d01f      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a30      	ldr	r2, [pc, #192]	@ (80060e8 <TIM_Base_SetConfig+0x138>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01b      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2f      	ldr	r2, [pc, #188]	@ (80060ec <TIM_Base_SetConfig+0x13c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d017      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2e      	ldr	r2, [pc, #184]	@ (80060f0 <TIM_Base_SetConfig+0x140>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2d      	ldr	r2, [pc, #180]	@ (80060f4 <TIM_Base_SetConfig+0x144>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00f      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2c      	ldr	r2, [pc, #176]	@ (80060f8 <TIM_Base_SetConfig+0x148>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00b      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2b      	ldr	r2, [pc, #172]	@ (80060fc <TIM_Base_SetConfig+0x14c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2a      	ldr	r2, [pc, #168]	@ (8006100 <TIM_Base_SetConfig+0x150>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a29      	ldr	r2, [pc, #164]	@ (8006104 <TIM_Base_SetConfig+0x154>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d108      	bne.n	8006074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a10      	ldr	r2, [pc, #64]	@ (80060dc <TIM_Base_SetConfig+0x12c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_Base_SetConfig+0xf8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a12      	ldr	r2, [pc, #72]	@ (80060ec <TIM_Base_SetConfig+0x13c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d103      	bne.n	80060b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d105      	bne.n	80060ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	611a      	str	r2, [r3, #16]
  }
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40010400 	.word	0x40010400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800
 80060fc:	40001800 	.word	0x40001800
 8006100:	40001c00 	.word	0x40001c00
 8006104:	40002000 	.word	0x40002000

08006108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	f023 0201 	bic.w	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0303 	bic.w	r3, r3, #3
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 0302 	bic.w	r3, r3, #2
 8006150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a20      	ldr	r2, [pc, #128]	@ (80061e0 <TIM_OC1_SetConfig+0xd8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC1_SetConfig+0x64>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1f      	ldr	r2, [pc, #124]	@ (80061e4 <TIM_OC1_SetConfig+0xdc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d10c      	bne.n	8006186 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0308 	bic.w	r3, r3, #8
 8006172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a15      	ldr	r2, [pc, #84]	@ (80061e0 <TIM_OC1_SetConfig+0xd8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_OC1_SetConfig+0x8e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a14      	ldr	r2, [pc, #80]	@ (80061e4 <TIM_OC1_SetConfig+0xdc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d111      	bne.n	80061ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800619c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	621a      	str	r2, [r3, #32]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40010400 	.word	0x40010400

080061e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f023 0210 	bic.w	r2, r3, #16
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0320 	bic.w	r3, r3, #32
 8006232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a22      	ldr	r2, [pc, #136]	@ (80062cc <TIM_OC2_SetConfig+0xe4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC2_SetConfig+0x68>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a21      	ldr	r2, [pc, #132]	@ (80062d0 <TIM_OC2_SetConfig+0xe8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d10d      	bne.n	800626c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800626a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a17      	ldr	r2, [pc, #92]	@ (80062cc <TIM_OC2_SetConfig+0xe4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x94>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <TIM_OC2_SetConfig+0xe8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d113      	bne.n	80062a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800628a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40010400 	.word	0x40010400

080062d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a21      	ldr	r2, [pc, #132]	@ (80063b4 <TIM_OC3_SetConfig+0xe0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_OC3_SetConfig+0x66>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a20      	ldr	r2, [pc, #128]	@ (80063b8 <TIM_OC3_SetConfig+0xe4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d10d      	bne.n	8006356 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a16      	ldr	r2, [pc, #88]	@ (80063b4 <TIM_OC3_SetConfig+0xe0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC3_SetConfig+0x92>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a15      	ldr	r2, [pc, #84]	@ (80063b8 <TIM_OC3_SetConfig+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d113      	bne.n	800638e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800636c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40010400 	.word	0x40010400

080063bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	021b      	lsls	r3, r3, #8
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	031b      	lsls	r3, r3, #12
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a12      	ldr	r2, [pc, #72]	@ (8006460 <TIM_OC4_SetConfig+0xa4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d003      	beq.n	8006424 <TIM_OC4_SetConfig+0x68>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a11      	ldr	r2, [pc, #68]	@ (8006464 <TIM_OC4_SetConfig+0xa8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d109      	bne.n	8006438 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800642a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	019b      	lsls	r3, r3, #6
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40010000 	.word	0x40010000
 8006464:	40010400 	.word	0x40010400

08006468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f003 031f 	and.w	r3, r3, #31
 800647a:	2201      	movs	r2, #1
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	43db      	mvns	r3, r3
 800648a:	401a      	ands	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a1a      	ldr	r2, [r3, #32]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	fa01 f303 	lsl.w	r3, r1, r3
 80064a0:	431a      	orrs	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	621a      	str	r2, [r3, #32]
}
 80064a6:	bf00      	nop
 80064a8:	371c      	adds	r7, #28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
	...

080064b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e05a      	b.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a21      	ldr	r2, [pc, #132]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d022      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006518:	d01d      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1d      	ldr	r2, [pc, #116]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d018      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1a      	ldr	r2, [pc, #104]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a18      	ldr	r2, [pc, #96]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a17      	ldr	r2, [pc, #92]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d10c      	bne.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800655c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	4313      	orrs	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40010000 	.word	0x40010000
 8006594:	40000400 	.word	0x40000400
 8006598:	40000800 	.word	0x40000800
 800659c:	40000c00 	.word	0x40000c00
 80065a0:	40010400 	.word	0x40010400
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40001800 	.word	0x40001800

080065ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e03d      	b.n	8006644 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e042      	b.n	8006710 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fc fe94 	bl	80033cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2224      	movs	r2, #36	@ 0x24
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fdbd 	bl	800723c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	@ 0x28
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b20      	cmp	r3, #32
 8006736:	d175      	bne.n	8006824 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_UART_Transmit+0x2c>
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e06e      	b.n	8006826 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2221      	movs	r2, #33	@ 0x21
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006756:	f7fd f815 	bl	8003784 <HAL_GetTick>
 800675a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006770:	d108      	bne.n	8006784 <HAL_UART_Transmit+0x6c>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e003      	b.n	800678c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800678c:	e02e      	b.n	80067ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2200      	movs	r2, #0
 8006796:	2180      	movs	r1, #128	@ 0x80
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fb1f 	bl	8006ddc <UART_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e03a      	b.n	8006826 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	3302      	adds	r3, #2
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	e007      	b.n	80067de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	3301      	adds	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1cb      	bne.n	800678e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2200      	movs	r2, #0
 80067fe:	2140      	movs	r1, #64	@ 0x40
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 faeb 	bl	8006ddc <UART_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e006      	b.n	8006826 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006824:	2302      	movs	r3, #2
  }
}
 8006826:	4618      	mov	r0, r3
 8006828:	3720      	adds	r7, #32
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	4613      	mov	r3, r2
 800683a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b20      	cmp	r3, #32
 8006846:	d112      	bne.n	800686e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_UART_Receive_IT+0x26>
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e00b      	b.n	8006870 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	461a      	mov	r2, r3
 8006862:	68b9      	ldr	r1, [r7, #8]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fb12 	bl	8006e8e <UART_Start_Receive_IT>
 800686a:	4603      	mov	r3, r0
 800686c:	e000      	b.n	8006870 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800686e:	2302      	movs	r3, #2
  }
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b0ba      	sub	sp, #232	@ 0xe8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800689e:	2300      	movs	r3, #0
 80068a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10f      	bne.n	80068de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_UART_IRQHandler+0x66>
 80068ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fbf2 	bl	80070c0 <UART_Receive_IT>
      return;
 80068dc:	e25b      	b.n	8006d96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80de 	beq.w	8006aa4 <HAL_UART_IRQHandler+0x22c>
 80068e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80d1 	beq.w	8006aa4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_UART_IRQHandler+0xae>
 800690e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691e:	f043 0201 	orr.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <HAL_UART_IRQHandler+0xd2>
 8006932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	f043 0202 	orr.w	r2, r3, #2
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_UART_IRQHandler+0xf6>
 8006956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	f043 0204 	orr.w	r2, r3, #4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d011      	beq.n	800699e <HAL_UART_IRQHandler+0x126>
 800697a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006996:	f043 0208 	orr.w	r2, r3, #8
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 81f2 	beq.w	8006d8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_UART_IRQHandler+0x14e>
 80069b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fb7d 	bl	80070c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d0:	2b40      	cmp	r3, #64	@ 0x40
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <HAL_UART_IRQHandler+0x17a>
 80069ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d04f      	beq.n	8006a92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa85 	bl	8006f02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a02:	2b40      	cmp	r3, #64	@ 0x40
 8006a04:	d141      	bne.n	8006a8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3314      	adds	r3, #20
 8006a0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1d9      	bne.n	8006a06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d013      	beq.n	8006a82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c58 <HAL_UART_IRQHandler+0x3e0>)
 8006a60:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fd fb5e 	bl	8004128 <HAL_DMA_Abort_IT>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d016      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a80:	e00e      	b.n	8006aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f994 	bl	8006db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	e00a      	b.n	8006aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f990 	bl	8006db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	e006      	b.n	8006aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f98c 	bl	8006db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a9e:	e175      	b.n	8006d8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	bf00      	nop
    return;
 8006aa2:	e173      	b.n	8006d8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	f040 814f 	bne.w	8006d4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 8148 	beq.w	8006d4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8141 	beq.w	8006d4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	f040 80b6 	bne.w	8006c5c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8145 	beq.w	8006d90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	f080 813e 	bcs.w	8006d90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b26:	f000 8088 	beq.w	8006c3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1d9      	bne.n	8006b2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e1      	bne.n	8006b76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006bc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3314      	adds	r3, #20
 8006bd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e3      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c0a:	f023 0310 	bic.w	r3, r3, #16
 8006c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e3      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fd fa07 	bl	8004048 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f8b7 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c56:	e09b      	b.n	8006d90 <HAL_UART_IRQHandler+0x518>
 8006c58:	08006fc9 	.word	0x08006fc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 808e 	beq.w	8006d94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8089 	beq.w	8006d94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ca6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ca8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e3      	bne.n	8006c82 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3314      	adds	r3, #20
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3314      	adds	r3, #20
 8006cda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cde:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0310 	bic.w	r3, r3, #16
 8006d16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d24:	61fa      	str	r2, [r7, #28]
 8006d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	69b9      	ldr	r1, [r7, #24]
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	617b      	str	r3, [r7, #20]
   return(result);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e3      	bne.n	8006d00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f83d 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d4a:	e023      	b.n	8006d94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d009      	beq.n	8006d6c <HAL_UART_IRQHandler+0x4f4>
 8006d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f943 	bl	8006ff0 <UART_Transmit_IT>
    return;
 8006d6a:	e014      	b.n	8006d96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00e      	beq.n	8006d96 <HAL_UART_IRQHandler+0x51e>
 8006d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f983 	bl	8007090 <UART_EndTransmit_IT>
    return;
 8006d8a:	e004      	b.n	8006d96 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d94:	bf00      	nop
  }
}
 8006d96:	37e8      	adds	r7, #232	@ 0xe8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	4613      	mov	r3, r2
 8006dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dec:	e03b      	b.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d037      	beq.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df6:	f7fc fcc5 	bl	8003784 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	6a3a      	ldr	r2, [r7, #32]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d302      	bcc.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e03a      	b.n	8006e86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d023      	beq.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b80      	cmp	r3, #128	@ 0x80
 8006e22:	d020      	beq.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b40      	cmp	r3, #64	@ 0x40
 8006e28:	d01d      	beq.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d116      	bne.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f857 	bl	8006f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2208      	movs	r2, #8
 8006e58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e00f      	b.n	8006e86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	bf0c      	ite	eq
 8006e76:	2301      	moveq	r3, #1
 8006e78:	2300      	movne	r3, #0
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	79fb      	ldrb	r3, [r7, #7]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d0b4      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	88fa      	ldrh	r2, [r7, #6]
 8006ea6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2222      	movs	r2, #34	@ 0x22
 8006eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ed2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0220 	orr.w	r2, r2, #32
 8006ef2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b095      	sub	sp, #84	@ 0x54
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	330c      	adds	r3, #12
 8006f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3314      	adds	r3, #20
 8006f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3314      	adds	r3, #20
 8006f5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d119      	bne.n	8006fae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f023 0310 	bic.w	r3, r3, #16
 8006f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	330c      	adds	r3, #12
 8006f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f9a:	61ba      	str	r2, [r7, #24]
 8006f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6979      	ldr	r1, [r7, #20]
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e5      	bne.n	8006f7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fbc:	bf00      	nop
 8006fbe:	3754      	adds	r7, #84	@ 0x54
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fee4 	bl	8006db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b21      	cmp	r3, #33	@ 0x21
 8007002:	d13e      	bne.n	8007082 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800700c:	d114      	bne.n	8007038 <UART_Transmit_IT+0x48>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d110      	bne.n	8007038 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800702a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	1c9a      	adds	r2, r3, #2
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]
 8007036:	e008      	b.n	800704a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	1c59      	adds	r1, r3, #1
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6211      	str	r1, [r2, #32]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29b      	uxth	r3, r3
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4619      	mov	r1, r3
 8007058:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10f      	bne.n	800707e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800706c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800707c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff fe73 	bl	8006d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08c      	sub	sp, #48	@ 0x30
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b22      	cmp	r3, #34	@ 0x22
 80070d2:	f040 80ae 	bne.w	8007232 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070de:	d117      	bne.n	8007110 <UART_Receive_IT+0x50>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d113      	bne.n	8007110 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fe:	b29a      	uxth	r2, r3
 8007100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007108:	1c9a      	adds	r2, r3, #2
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	629a      	str	r2, [r3, #40]	@ 0x28
 800710e:	e026      	b.n	800715e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007122:	d007      	beq.n	8007134 <UART_Receive_IT+0x74>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <UART_Receive_IT+0x82>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d106      	bne.n	8007142 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e008      	b.n	8007154 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800714e:	b2da      	uxtb	r2, r3
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4619      	mov	r1, r3
 800716c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800716e:	2b00      	cmp	r3, #0
 8007170:	d15d      	bne.n	800722e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0220 	bic.w	r2, r2, #32
 8007180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d135      	bne.n	8007224 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	613b      	str	r3, [r7, #16]
   return(result);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f023 0310 	bic.w	r3, r3, #16
 80071d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	330c      	adds	r3, #12
 80071dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071de:	623a      	str	r2, [r7, #32]
 80071e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	69f9      	ldr	r1, [r7, #28]
 80071e4:	6a3a      	ldr	r2, [r7, #32]
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d10a      	bne.n	8007216 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fdd1 	bl	8006dc4 <HAL_UARTEx_RxEventCallback>
 8007222:	e002      	b.n	800722a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fa ffdd 	bl	80021e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	e002      	b.n	8007234 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	e000      	b.n	8007234 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007232:	2302      	movs	r3, #2
  }
}
 8007234:	4618      	mov	r0, r3
 8007236:	3730      	adds	r7, #48	@ 0x30
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800723c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007240:	b0c0      	sub	sp, #256	@ 0x100
 8007242:	af00      	add	r7, sp, #0
 8007244:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007258:	68d9      	ldr	r1, [r3, #12]
 800725a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	ea40 0301 	orr.w	r3, r0, r1
 8007264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	431a      	orrs	r2, r3
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	431a      	orrs	r2, r3
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007294:	f021 010c 	bic.w	r1, r1, #12
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072a2:	430b      	orrs	r3, r1
 80072a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b6:	6999      	ldr	r1, [r3, #24]
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	ea40 0301 	orr.w	r3, r0, r1
 80072c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	4b8f      	ldr	r3, [pc, #572]	@ (8007508 <UART_SetConfig+0x2cc>)
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d005      	beq.n	80072dc <UART_SetConfig+0xa0>
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b8d      	ldr	r3, [pc, #564]	@ (800750c <UART_SetConfig+0x2d0>)
 80072d8:	429a      	cmp	r2, r3
 80072da:	d104      	bne.n	80072e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072dc:	f7fd fca0 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 80072e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072e4:	e003      	b.n	80072ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072e6:	f7fd fc87 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 80072ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072f8:	f040 810c 	bne.w	8007514 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007300:	2200      	movs	r2, #0
 8007302:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007306:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800730a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800730e:	4622      	mov	r2, r4
 8007310:	462b      	mov	r3, r5
 8007312:	1891      	adds	r1, r2, r2
 8007314:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007316:	415b      	adcs	r3, r3
 8007318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800731a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800731e:	4621      	mov	r1, r4
 8007320:	eb12 0801 	adds.w	r8, r2, r1
 8007324:	4629      	mov	r1, r5
 8007326:	eb43 0901 	adc.w	r9, r3, r1
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800733a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800733e:	4690      	mov	r8, r2
 8007340:	4699      	mov	r9, r3
 8007342:	4623      	mov	r3, r4
 8007344:	eb18 0303 	adds.w	r3, r8, r3
 8007348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800734c:	462b      	mov	r3, r5
 800734e:	eb49 0303 	adc.w	r3, r9, r3
 8007352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007362:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800736a:	460b      	mov	r3, r1
 800736c:	18db      	adds	r3, r3, r3
 800736e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007370:	4613      	mov	r3, r2
 8007372:	eb42 0303 	adc.w	r3, r2, r3
 8007376:	657b      	str	r3, [r7, #84]	@ 0x54
 8007378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800737c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007380:	f7f9 fbf0 	bl	8000b64 <__aeabi_uldivmod>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4b61      	ldr	r3, [pc, #388]	@ (8007510 <UART_SetConfig+0x2d4>)
 800738a:	fba3 2302 	umull	r2, r3, r3, r2
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	011c      	lsls	r4, r3, #4
 8007392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007396:	2200      	movs	r2, #0
 8007398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800739c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	1891      	adds	r1, r2, r2
 80073aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073ac:	415b      	adcs	r3, r3
 80073ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073b4:	4641      	mov	r1, r8
 80073b6:	eb12 0a01 	adds.w	sl, r2, r1
 80073ba:	4649      	mov	r1, r9
 80073bc:	eb43 0b01 	adc.w	fp, r3, r1
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073d4:	4692      	mov	sl, r2
 80073d6:	469b      	mov	fp, r3
 80073d8:	4643      	mov	r3, r8
 80073da:	eb1a 0303 	adds.w	r3, sl, r3
 80073de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073e2:	464b      	mov	r3, r9
 80073e4:	eb4b 0303 	adc.w	r3, fp, r3
 80073e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007400:	460b      	mov	r3, r1
 8007402:	18db      	adds	r3, r3, r3
 8007404:	643b      	str	r3, [r7, #64]	@ 0x40
 8007406:	4613      	mov	r3, r2
 8007408:	eb42 0303 	adc.w	r3, r2, r3
 800740c:	647b      	str	r3, [r7, #68]	@ 0x44
 800740e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007416:	f7f9 fba5 	bl	8000b64 <__aeabi_uldivmod>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4611      	mov	r1, r2
 8007420:	4b3b      	ldr	r3, [pc, #236]	@ (8007510 <UART_SetConfig+0x2d4>)
 8007422:	fba3 2301 	umull	r2, r3, r3, r1
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	2264      	movs	r2, #100	@ 0x64
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	1acb      	subs	r3, r1, r3
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007436:	4b36      	ldr	r3, [pc, #216]	@ (8007510 <UART_SetConfig+0x2d4>)
 8007438:	fba3 2302 	umull	r2, r3, r3, r2
 800743c:	095b      	lsrs	r3, r3, #5
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007444:	441c      	add	r4, r3
 8007446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800744a:	2200      	movs	r2, #0
 800744c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007450:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007454:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	1891      	adds	r1, r2, r2
 800745e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007460:	415b      	adcs	r3, r3
 8007462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007468:	4641      	mov	r1, r8
 800746a:	1851      	adds	r1, r2, r1
 800746c:	6339      	str	r1, [r7, #48]	@ 0x30
 800746e:	4649      	mov	r1, r9
 8007470:	414b      	adcs	r3, r1
 8007472:	637b      	str	r3, [r7, #52]	@ 0x34
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007480:	4659      	mov	r1, fp
 8007482:	00cb      	lsls	r3, r1, #3
 8007484:	4651      	mov	r1, sl
 8007486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800748a:	4651      	mov	r1, sl
 800748c:	00ca      	lsls	r2, r1, #3
 800748e:	4610      	mov	r0, r2
 8007490:	4619      	mov	r1, r3
 8007492:	4603      	mov	r3, r0
 8007494:	4642      	mov	r2, r8
 8007496:	189b      	adds	r3, r3, r2
 8007498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800749c:	464b      	mov	r3, r9
 800749e:	460a      	mov	r2, r1
 80074a0:	eb42 0303 	adc.w	r3, r2, r3
 80074a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074bc:	460b      	mov	r3, r1
 80074be:	18db      	adds	r3, r3, r3
 80074c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074c2:	4613      	mov	r3, r2
 80074c4:	eb42 0303 	adc.w	r3, r2, r3
 80074c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074d2:	f7f9 fb47 	bl	8000b64 <__aeabi_uldivmod>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4b0d      	ldr	r3, [pc, #52]	@ (8007510 <UART_SetConfig+0x2d4>)
 80074dc:	fba3 1302 	umull	r1, r3, r3, r2
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	2164      	movs	r1, #100	@ 0x64
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	3332      	adds	r3, #50	@ 0x32
 80074ee:	4a08      	ldr	r2, [pc, #32]	@ (8007510 <UART_SetConfig+0x2d4>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	f003 0207 	and.w	r2, r3, #7
 80074fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4422      	add	r2, r4
 8007502:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007504:	e106      	b.n	8007714 <UART_SetConfig+0x4d8>
 8007506:	bf00      	nop
 8007508:	40011000 	.word	0x40011000
 800750c:	40011400 	.word	0x40011400
 8007510:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007518:	2200      	movs	r2, #0
 800751a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800751e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007522:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007526:	4642      	mov	r2, r8
 8007528:	464b      	mov	r3, r9
 800752a:	1891      	adds	r1, r2, r2
 800752c:	6239      	str	r1, [r7, #32]
 800752e:	415b      	adcs	r3, r3
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
 8007532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007536:	4641      	mov	r1, r8
 8007538:	1854      	adds	r4, r2, r1
 800753a:	4649      	mov	r1, r9
 800753c:	eb43 0501 	adc.w	r5, r3, r1
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	00eb      	lsls	r3, r5, #3
 800754a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800754e:	00e2      	lsls	r2, r4, #3
 8007550:	4614      	mov	r4, r2
 8007552:	461d      	mov	r5, r3
 8007554:	4643      	mov	r3, r8
 8007556:	18e3      	adds	r3, r4, r3
 8007558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800755c:	464b      	mov	r3, r9
 800755e:	eb45 0303 	adc.w	r3, r5, r3
 8007562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007572:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007582:	4629      	mov	r1, r5
 8007584:	008b      	lsls	r3, r1, #2
 8007586:	4621      	mov	r1, r4
 8007588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800758c:	4621      	mov	r1, r4
 800758e:	008a      	lsls	r2, r1, #2
 8007590:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007594:	f7f9 fae6 	bl	8000b64 <__aeabi_uldivmod>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4b60      	ldr	r3, [pc, #384]	@ (8007720 <UART_SetConfig+0x4e4>)
 800759e:	fba3 2302 	umull	r2, r3, r3, r2
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	011c      	lsls	r4, r3, #4
 80075a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075b8:	4642      	mov	r2, r8
 80075ba:	464b      	mov	r3, r9
 80075bc:	1891      	adds	r1, r2, r2
 80075be:	61b9      	str	r1, [r7, #24]
 80075c0:	415b      	adcs	r3, r3
 80075c2:	61fb      	str	r3, [r7, #28]
 80075c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075c8:	4641      	mov	r1, r8
 80075ca:	1851      	adds	r1, r2, r1
 80075cc:	6139      	str	r1, [r7, #16]
 80075ce:	4649      	mov	r1, r9
 80075d0:	414b      	adcs	r3, r1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075e0:	4659      	mov	r1, fp
 80075e2:	00cb      	lsls	r3, r1, #3
 80075e4:	4651      	mov	r1, sl
 80075e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ea:	4651      	mov	r1, sl
 80075ec:	00ca      	lsls	r2, r1, #3
 80075ee:	4610      	mov	r0, r2
 80075f0:	4619      	mov	r1, r3
 80075f2:	4603      	mov	r3, r0
 80075f4:	4642      	mov	r2, r8
 80075f6:	189b      	adds	r3, r3, r2
 80075f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075fc:	464b      	mov	r3, r9
 80075fe:	460a      	mov	r2, r1
 8007600:	eb42 0303 	adc.w	r3, r2, r3
 8007604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007612:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007620:	4649      	mov	r1, r9
 8007622:	008b      	lsls	r3, r1, #2
 8007624:	4641      	mov	r1, r8
 8007626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800762a:	4641      	mov	r1, r8
 800762c:	008a      	lsls	r2, r1, #2
 800762e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007632:	f7f9 fa97 	bl	8000b64 <__aeabi_uldivmod>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4611      	mov	r1, r2
 800763c:	4b38      	ldr	r3, [pc, #224]	@ (8007720 <UART_SetConfig+0x4e4>)
 800763e:	fba3 2301 	umull	r2, r3, r3, r1
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	2264      	movs	r2, #100	@ 0x64
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	1acb      	subs	r3, r1, r3
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	3332      	adds	r3, #50	@ 0x32
 8007650:	4a33      	ldr	r2, [pc, #204]	@ (8007720 <UART_SetConfig+0x4e4>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800765c:	441c      	add	r4, r3
 800765e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007662:	2200      	movs	r2, #0
 8007664:	673b      	str	r3, [r7, #112]	@ 0x70
 8007666:	677a      	str	r2, [r7, #116]	@ 0x74
 8007668:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800766c:	4642      	mov	r2, r8
 800766e:	464b      	mov	r3, r9
 8007670:	1891      	adds	r1, r2, r2
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	415b      	adcs	r3, r3
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800767c:	4641      	mov	r1, r8
 800767e:	1851      	adds	r1, r2, r1
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	4649      	mov	r1, r9
 8007684:	414b      	adcs	r3, r1
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007694:	4659      	mov	r1, fp
 8007696:	00cb      	lsls	r3, r1, #3
 8007698:	4651      	mov	r1, sl
 800769a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800769e:	4651      	mov	r1, sl
 80076a0:	00ca      	lsls	r2, r1, #3
 80076a2:	4610      	mov	r0, r2
 80076a4:	4619      	mov	r1, r3
 80076a6:	4603      	mov	r3, r0
 80076a8:	4642      	mov	r2, r8
 80076aa:	189b      	adds	r3, r3, r2
 80076ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ae:	464b      	mov	r3, r9
 80076b0:	460a      	mov	r2, r1
 80076b2:	eb42 0303 	adc.w	r3, r2, r3
 80076b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80076c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80076c4:	f04f 0200 	mov.w	r2, #0
 80076c8:	f04f 0300 	mov.w	r3, #0
 80076cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076d0:	4649      	mov	r1, r9
 80076d2:	008b      	lsls	r3, r1, #2
 80076d4:	4641      	mov	r1, r8
 80076d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076da:	4641      	mov	r1, r8
 80076dc:	008a      	lsls	r2, r1, #2
 80076de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076e2:	f7f9 fa3f 	bl	8000b64 <__aeabi_uldivmod>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <UART_SetConfig+0x4e4>)
 80076ec:	fba3 1302 	umull	r1, r3, r3, r2
 80076f0:	095b      	lsrs	r3, r3, #5
 80076f2:	2164      	movs	r1, #100	@ 0x64
 80076f4:	fb01 f303 	mul.w	r3, r1, r3
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	3332      	adds	r3, #50	@ 0x32
 80076fe:	4a08      	ldr	r2, [pc, #32]	@ (8007720 <UART_SetConfig+0x4e4>)
 8007700:	fba2 2303 	umull	r2, r3, r2, r3
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	f003 020f 	and.w	r2, r3, #15
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4422      	add	r2, r4
 8007712:	609a      	str	r2, [r3, #8]
}
 8007714:	bf00      	nop
 8007716:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800771a:	46bd      	mov	sp, r7
 800771c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007720:	51eb851f 	.word	0x51eb851f

08007724 <memset>:
 8007724:	4402      	add	r2, r0
 8007726:	4603      	mov	r3, r0
 8007728:	4293      	cmp	r3, r2
 800772a:	d100      	bne.n	800772e <memset+0xa>
 800772c:	4770      	bx	lr
 800772e:	f803 1b01 	strb.w	r1, [r3], #1
 8007732:	e7f9      	b.n	8007728 <memset+0x4>

08007734 <strcat>:
 8007734:	b510      	push	{r4, lr}
 8007736:	4602      	mov	r2, r0
 8007738:	7814      	ldrb	r4, [r2, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	3201      	adds	r2, #1
 800773e:	2c00      	cmp	r4, #0
 8007740:	d1fa      	bne.n	8007738 <strcat+0x4>
 8007742:	3b01      	subs	r3, #1
 8007744:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007748:	f803 2f01 	strb.w	r2, [r3, #1]!
 800774c:	2a00      	cmp	r2, #0
 800774e:	d1f9      	bne.n	8007744 <strcat+0x10>
 8007750:	bd10      	pop	{r4, pc}
	...

08007754 <__libc_init_array>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	4d0d      	ldr	r5, [pc, #52]	@ (800778c <__libc_init_array+0x38>)
 8007758:	4c0d      	ldr	r4, [pc, #52]	@ (8007790 <__libc_init_array+0x3c>)
 800775a:	1b64      	subs	r4, r4, r5
 800775c:	10a4      	asrs	r4, r4, #2
 800775e:	2600      	movs	r6, #0
 8007760:	42a6      	cmp	r6, r4
 8007762:	d109      	bne.n	8007778 <__libc_init_array+0x24>
 8007764:	4d0b      	ldr	r5, [pc, #44]	@ (8007794 <__libc_init_array+0x40>)
 8007766:	4c0c      	ldr	r4, [pc, #48]	@ (8007798 <__libc_init_array+0x44>)
 8007768:	f000 f820 	bl	80077ac <_init>
 800776c:	1b64      	subs	r4, r4, r5
 800776e:	10a4      	asrs	r4, r4, #2
 8007770:	2600      	movs	r6, #0
 8007772:	42a6      	cmp	r6, r4
 8007774:	d105      	bne.n	8007782 <__libc_init_array+0x2e>
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	f855 3b04 	ldr.w	r3, [r5], #4
 800777c:	4798      	blx	r3
 800777e:	3601      	adds	r6, #1
 8007780:	e7ee      	b.n	8007760 <__libc_init_array+0xc>
 8007782:	f855 3b04 	ldr.w	r3, [r5], #4
 8007786:	4798      	blx	r3
 8007788:	3601      	adds	r6, #1
 800778a:	e7f2      	b.n	8007772 <__libc_init_array+0x1e>
 800778c:	08007870 	.word	0x08007870
 8007790:	08007870 	.word	0x08007870
 8007794:	08007870 	.word	0x08007870
 8007798:	08007874 	.word	0x08007874

0800779c <strcpy>:
 800779c:	4603      	mov	r3, r0
 800779e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077a2:	f803 2b01 	strb.w	r2, [r3], #1
 80077a6:	2a00      	cmp	r2, #0
 80077a8:	d1f9      	bne.n	800779e <strcpy+0x2>
 80077aa:	4770      	bx	lr

080077ac <_init>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	bf00      	nop
 80077b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b2:	bc08      	pop	{r3}
 80077b4:	469e      	mov	lr, r3
 80077b6:	4770      	bx	lr

080077b8 <_fini>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	bf00      	nop
 80077bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077be:	bc08      	pop	{r3}
 80077c0:	469e      	mov	lr, r3
 80077c2:	4770      	bx	lr
