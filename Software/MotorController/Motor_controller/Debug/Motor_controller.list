
Motor_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c3c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007e04  08007e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  0000902c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e54  08007e54  00008e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e5c  08007e5c  0000902c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e5c  08007e5c  00008e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e60  08007e60  00008e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08007e64  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  2000002c  08007e90  0000902c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08007e90  0000954c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a9f  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317f  00000000  00000000  0001cafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0001fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1a  00000000  00000000  00020ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248cc  00000000  00000000  00021cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a8e  00000000  00000000  000465a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df927  00000000  00000000  0005e034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d95b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c4c  00000000  00000000  0013d9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  001425ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007dec 	.word	0x08007dec

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000030 	.word	0x20000030
 8000204:	08007dec 	.word	0x08007dec

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b988 	b.w	8000e7c <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	468e      	mov	lr, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	4688      	mov	r8, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14a      	bne.n	8000c2a <__udivmoddi4+0xa6>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4617      	mov	r7, r2
 8000b98:	d962      	bls.n	8000c60 <__udivmoddi4+0xdc>
 8000b9a:	fab2 f682 	clz	r6, r2
 8000b9e:	b14e      	cbz	r6, 8000bb4 <__udivmoddi4+0x30>
 8000ba0:	f1c6 0320 	rsb	r3, r6, #32
 8000ba4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	40b7      	lsls	r7, r6
 8000bae:	ea43 0808 	orr.w	r8, r3, r8
 8000bb2:	40b4      	lsls	r4, r6
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	fa1f fc87 	uxth.w	ip, r7
 8000bbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc0:	0c23      	lsrs	r3, r4, #16
 8000bc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fb01 f20c 	mul.w	r2, r1, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d909      	bls.n	8000be6 <__udivmoddi4+0x62>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bd8:	f080 80ea 	bcs.w	8000db0 <__udivmoddi4+0x22c>
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f240 80e7 	bls.w	8000db0 <__udivmoddi4+0x22c>
 8000be2:	3902      	subs	r1, #2
 8000be4:	443b      	add	r3, r7
 8000be6:	1a9a      	subs	r2, r3, r2
 8000be8:	b2a3      	uxth	r3, r4
 8000bea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfa:	459c      	cmp	ip, r3
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0x8e>
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c04:	f080 80d6 	bcs.w	8000db4 <__udivmoddi4+0x230>
 8000c08:	459c      	cmp	ip, r3
 8000c0a:	f240 80d3 	bls.w	8000db4 <__udivmoddi4+0x230>
 8000c0e:	443b      	add	r3, r7
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c16:	eba3 030c 	sub.w	r3, r3, ip
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa2>
 8000c1e:	40f3      	lsrs	r3, r6
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xb6>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb0>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x14c>
 8000c42:	4573      	cmp	r3, lr
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xc8>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 8105 	bhi.w	8000e56 <__udivmoddi4+0x2d2>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	4690      	mov	r8, r2
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e5      	beq.n	8000c26 <__udivmoddi4+0xa2>
 8000c5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c5e:	e7e2      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f000 8090 	beq.w	8000d86 <__udivmoddi4+0x202>
 8000c66:	fab2 f682 	clz	r6, r2
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f040 80a4 	bne.w	8000db8 <__udivmoddi4+0x234>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	0c03      	lsrs	r3, r0, #16
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	b280      	uxth	r0, r0
 8000c7a:	b2bc      	uxth	r4, r7
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x11e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x11c>
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	f200 80e0 	bhi.w	8000e60 <__udivmoddi4+0x2dc>
 8000ca0:	46c4      	mov	ip, r8
 8000ca2:	1a9b      	subs	r3, r3, r2
 8000ca4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ca8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb0:	fb02 f404 	mul.w	r4, r2, r4
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x144>
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x142>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f200 80ca 	bhi.w	8000e5a <__udivmoddi4+0x2d6>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	1b1b      	subs	r3, r3, r4
 8000cca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x98>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ce8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	fa1f fc87 	uxth.w	ip, r7
 8000cf6:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x1a0>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d16:	f080 809c 	bcs.w	8000e52 <__udivmoddi4+0x2ce>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8099 	bls.w	8000e52 <__udivmoddi4+0x2ce>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	eba4 040e 	sub.w	r4, r4, lr
 8000d28:	fa1f fe83 	uxth.w	lr, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1ce>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d46:	f080 8082 	bcs.w	8000e4e <__udivmoddi4+0x2ca>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d97f      	bls.n	8000e4e <__udivmoddi4+0x2ca>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d56:	eba4 040c 	sub.w	r4, r4, ip
 8000d5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d5e:	4564      	cmp	r4, ip
 8000d60:	4673      	mov	r3, lr
 8000d62:	46e1      	mov	r9, ip
 8000d64:	d362      	bcc.n	8000e2c <__udivmoddi4+0x2a8>
 8000d66:	d05f      	beq.n	8000e28 <__udivmoddi4+0x2a4>
 8000d68:	b15d      	cbz	r5, 8000d82 <__udivmoddi4+0x1fe>
 8000d6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7a:	431e      	orrs	r6, r3
 8000d7c:	40cc      	lsrs	r4, r1
 8000d7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d82:	2100      	movs	r1, #0
 8000d84:	e74f      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000d86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8a:	0c01      	lsrs	r1, r0, #16
 8000d8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d90:	b280      	uxth	r0, r0
 8000d92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d96:	463b      	mov	r3, r7
 8000d98:	4638      	mov	r0, r7
 8000d9a:	463c      	mov	r4, r7
 8000d9c:	46b8      	mov	r8, r7
 8000d9e:	46be      	mov	lr, r7
 8000da0:	2620      	movs	r6, #32
 8000da2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000da6:	eba2 0208 	sub.w	r2, r2, r8
 8000daa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dae:	e766      	b.n	8000c7e <__udivmoddi4+0xfa>
 8000db0:	4601      	mov	r1, r0
 8000db2:	e718      	b.n	8000be6 <__udivmoddi4+0x62>
 8000db4:	4610      	mov	r0, r2
 8000db6:	e72c      	b.n	8000c12 <__udivmoddi4+0x8e>
 8000db8:	f1c6 0220 	rsb	r2, r6, #32
 8000dbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc0:	40b7      	lsls	r7, r6
 8000dc2:	40b1      	lsls	r1, r6
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd2:	b2bc      	uxth	r4, r7
 8000dd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dd8:	0c11      	lsrs	r1, r2, #16
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb08 f904 	mul.w	r9, r8, r4
 8000de2:	40b0      	lsls	r0, r6
 8000de4:	4589      	cmp	r9, r1
 8000de6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dea:	b280      	uxth	r0, r0
 8000dec:	d93e      	bls.n	8000e6c <__udivmoddi4+0x2e8>
 8000dee:	1879      	adds	r1, r7, r1
 8000df0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df4:	d201      	bcs.n	8000dfa <__udivmoddi4+0x276>
 8000df6:	4589      	cmp	r9, r1
 8000df8:	d81f      	bhi.n	8000e3a <__udivmoddi4+0x2b6>
 8000dfa:	eba1 0109 	sub.w	r1, r1, r9
 8000dfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e02:	fb09 f804 	mul.w	r8, r9, r4
 8000e06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e10:	4542      	cmp	r2, r8
 8000e12:	d229      	bcs.n	8000e68 <__udivmoddi4+0x2e4>
 8000e14:	18ba      	adds	r2, r7, r2
 8000e16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1a:	d2c4      	bcs.n	8000da6 <__udivmoddi4+0x222>
 8000e1c:	4542      	cmp	r2, r8
 8000e1e:	d2c2      	bcs.n	8000da6 <__udivmoddi4+0x222>
 8000e20:	f1a9 0102 	sub.w	r1, r9, #2
 8000e24:	443a      	add	r2, r7
 8000e26:	e7be      	b.n	8000da6 <__udivmoddi4+0x222>
 8000e28:	45f0      	cmp	r8, lr
 8000e2a:	d29d      	bcs.n	8000d68 <__udivmoddi4+0x1e4>
 8000e2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e34:	3801      	subs	r0, #1
 8000e36:	46e1      	mov	r9, ip
 8000e38:	e796      	b.n	8000d68 <__udivmoddi4+0x1e4>
 8000e3a:	eba7 0909 	sub.w	r9, r7, r9
 8000e3e:	4449      	add	r1, r9
 8000e40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e48:	fb09 f804 	mul.w	r8, r9, r4
 8000e4c:	e7db      	b.n	8000e06 <__udivmoddi4+0x282>
 8000e4e:	4673      	mov	r3, lr
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1ce>
 8000e52:	4650      	mov	r0, sl
 8000e54:	e766      	b.n	8000d24 <__udivmoddi4+0x1a0>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e6fd      	b.n	8000c56 <__udivmoddi4+0xd2>
 8000e5a:	443b      	add	r3, r7
 8000e5c:	3a02      	subs	r2, #2
 8000e5e:	e733      	b.n	8000cc8 <__udivmoddi4+0x144>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	443b      	add	r3, r7
 8000e66:	e71c      	b.n	8000ca2 <__udivmoddi4+0x11e>
 8000e68:	4649      	mov	r1, r9
 8000e6a:	e79c      	b.n	8000da6 <__udivmoddi4+0x222>
 8000e6c:	eba1 0109 	sub.w	r1, r1, r9
 8000e70:	46c4      	mov	ip, r8
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	e7c4      	b.n	8000e06 <__udivmoddi4+0x282>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <ExecuteCommand>:
//#define CMD_ROTATE_CCW		0x0A


// Execute received command
void ExecuteCommand(uint8_t command, uint8_t value)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]

//    // Clamp velocity value
//    if (value > MAX_VELOCITY) value = MAX_VELOCITY;
//    if (value < MIN_VELOCITY) value = MIN_VELOCITY;

    switch (command)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	2b0a      	cmp	r3, #10
 8000e96:	f200 808a 	bhi.w	8000fae <ExecuteCommand+0x12e>
 8000e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea0 <ExecuteCommand+0x20>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000ecd 	.word	0x08000ecd
 8000ea4:	08000ee3 	.word	0x08000ee3
 8000ea8:	08000efb 	.word	0x08000efb
 8000eac:	08000f11 	.word	0x08000f11
 8000eb0:	08000f29 	.word	0x08000f29
 8000eb4:	08000f3f 	.word	0x08000f3f
 8000eb8:	08000f55 	.word	0x08000f55
 8000ebc:	08000f6b 	.word	0x08000f6b
 8000ec0:	08000f83 	.word	0x08000f83
 8000ec4:	08000f99 	.word	0x08000f99
 8000ec8:	08000faf 	.word	0x08000faf
    {
        case CMD_FORWARD:
        	Motion_X(&motion, value);
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eda:	4839      	ldr	r0, [pc, #228]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000edc:	f001 fb26 	bl	800252c <Motion_X>
        	//Motion_X(&motion, -1 * (float)value / 50.0f);
            break;
 8000ee0:	e066      	b.n	8000fb0 <ExecuteCommand+0x130>
        case CMD_BACKWARD:
            // All motors backward
        	Motion_X(&motion, -value);
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef2:	4833      	ldr	r0, [pc, #204]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000ef4:	f001 fb1a 	bl	800252c <Motion_X>
        	//Motion_X(&motion, (float)value / 50.0f);
            break;
 8000ef8:	e05a      	b.n	8000fb0 <ExecuteCommand+0x130>

        case CMD_LEFT:
        	Motion_Y(&motion, value);
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f04:	eeb0 0a67 	vmov.f32	s0, s15
 8000f08:	482d      	ldr	r0, [pc, #180]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000f0a:	f001 fb3b 	bl	8002584 <Motion_Y>
            break;
 8000f0e:	e04f      	b.n	8000fb0 <ExecuteCommand+0x130>

        case CMD_RIGHT:
        	Motion_Y(&motion, -value);
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	425b      	negs	r3, r3
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f20:	4827      	ldr	r0, [pc, #156]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000f22:	f001 fb2f 	bl	8002584 <Motion_Y>
            break;
 8000f26:	e043      	b.n	8000fb0 <ExecuteCommand+0x130>

        case CMD_FORWARD_LEFT:
            // Diagonal forward-left
        	Motion_Diagonal_l(&motion, value);
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	4822      	ldr	r0, [pc, #136]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000f38:	f001 fb58 	bl	80025ec <Motion_Diagonal_l>
            break;
 8000f3c:	e038      	b.n	8000fb0 <ExecuteCommand+0x130>

        case CMD_FORWARD_RIGHT:
        	Motion_Diagonal_r(&motion, value);
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	481c      	ldr	r0, [pc, #112]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000f4e:	f001 fba9 	bl	80026a4 <Motion_Diagonal_r>
            break;
 8000f52:	e02d      	b.n	8000fb0 <ExecuteCommand+0x130>

        case CMD_BACKWARD_LEFT:
            Motion_Diagonal_r(&motion, value);
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	4817      	ldr	r0, [pc, #92]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000f64:	f001 fb9e 	bl	80026a4 <Motion_Diagonal_r>
            break;
 8000f68:	e022      	b.n	8000fb0 <ExecuteCommand+0x130>

        case CMD_BACKWARD_RIGHT:
        	Motion_Diagonal_l(&motion, -value);
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	425b      	negs	r3, r3
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f76:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7a:	4811      	ldr	r0, [pc, #68]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000f7c:	f001 fb36 	bl	80025ec <Motion_Diagonal_l>
            break;
 8000f80:	e016      	b.n	8000fb0 <ExecuteCommand+0x130>

        case CMD_ROTATE_CW:
        	Motion_Rotate_CW(&motion, value);
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f90:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000f92:	f001 fbe7 	bl	8002764 <Motion_Rotate_CW>
        	break;
 8000f96:	e00b      	b.n	8000fb0 <ExecuteCommand+0x130>

        case CMD_ROTATE_CCW:
        	Motion_Rotate_CCW(&motion, value);
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <ExecuteCommand+0x140>)
 8000fa8:	f001 fc04 	bl	80027b4 <Motion_Rotate_CCW>
        	break;
 8000fac:	e000      	b.n	8000fb0 <ExecuteCommand+0x130>
        case CMD_VELOCITY:
            // Set current velocity for future commands
            //currentVelocity = value;
            break; // Don't update motors, just store velocity
        default:
            break;
 8000fae:	bf00      	nop
    }
    SendTelemetryPacket(TELEM_MOTION_COMPLETED, 1);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	20a1      	movs	r0, #161	@ 0xa1
 8000fb4:	f000 f806 	bl	8000fc4 <SendTelemetryPacket>

}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200004a0 	.word	0x200004a0

08000fc4 <SendTelemetryPacket>:


// Send individual telemetry packet
void SendTelemetryPacket(uint8_t dataType, uint16_t value)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	80bb      	strh	r3, [r7, #4]
    uint8_t packet[2];
    packet[0] = dataType;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	733b      	strb	r3, [r7, #12]
    packet[1] = value;  // High byte
 8000fd8:	88bb      	ldrh	r3, [r7, #4]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	737b      	strb	r3, [r7, #13]
//	packet[1] = (value >> 8) & 0xFF;  // High byte
//	packet[2] = value & 0xFF;         // Low byte
//	packet[3] = 0xFF;                 // End marker


    HAL_UART_Transmit(&huart3, packet, 2, 100);
 8000fde:	f107 010c 	add.w	r1, r7, #12
 8000fe2:	2364      	movs	r3, #100	@ 0x64
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <SendTelemetryPacket+0x30>)
 8000fe8:	f005 fece 	bl	8006d88 <HAL_UART_Transmit>
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200003c4 	.word	0x200003c4

08000ff8 <SendDistanceTelemetry>:

void SendDistanceTelemetry(float x_distance, float y_distance){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001002:	edc7 0a02 	vstr	s1, [r7, #8]
	SendTelemetryPacket(TELEM_X_DISTANCE, (uint8_t)x_distance * 50);
 8001006:	edd7 7a03 	vldr	s15, [r7, #12]
 800100a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800100e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001012:	793b      	ldrb	r3, [r7, #4]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4413      	add	r3, r2
 800101c:	461a      	mov	r2, r3
 800101e:	0091      	lsls	r1, r2, #2
 8001020:	461a      	mov	r2, r3
 8001022:	460b      	mov	r3, r1
 8001024:	4413      	add	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	b29b      	uxth	r3, r3
 800102a:	4619      	mov	r1, r3
 800102c:	20a2      	movs	r0, #162	@ 0xa2
 800102e:	f7ff ffc9 	bl	8000fc4 <SendTelemetryPacket>
	SendTelemetryPacket(TELEM_Y_DISTANCE, (uint8_t)y_distance * 50);
 8001032:	edd7 7a02 	vldr	s15, [r7, #8]
 8001036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103a:	edc7 7a01 	vstr	s15, [r7, #4]
 800103e:	793b      	ldrb	r3, [r7, #4]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4413      	add	r3, r2
 8001048:	461a      	mov	r2, r3
 800104a:	0091      	lsls	r1, r2, #2
 800104c:	461a      	mov	r2, r3
 800104e:	460b      	mov	r3, r1
 8001050:	4413      	add	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	4619      	mov	r1, r3
 8001058:	20a3      	movs	r0, #163	@ 0xa3
 800105a:	f7ff ffb3 	bl	8000fc4 <SendTelemetryPacket>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <UART_Init>:
    str[len] = '\0';
}

// UART Initialization
void UART_Init(UART_HandleTypeDef *huart)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
    HAL_UART_Init(huart);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f005 fe3a 	bl	8006ce8 <HAL_UART_Init>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <clampf>:

const float MAXINTCLAMP = 1;


// Clamp float
float clampf(float val, float min, float max) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	ed87 0a03 	vstr	s0, [r7, #12]
 8001086:	edc7 0a02 	vstr	s1, [r7, #8]
 800108a:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val < min) return min;
 800108e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001092:	edd7 7a02 	vldr	s15, [r7, #8]
 8001096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	d501      	bpl.n	80010a4 <clampf+0x28>
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	e00b      	b.n	80010bc <clampf+0x40>
    if (val > max) return max;
 80010a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	dd01      	ble.n	80010ba <clampf+0x3e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	e000      	b.n	80010bc <clampf+0x40>
    return val;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <Controller_Init>:
#include "controller.h"
#include "config.h"
#include "kinematics.h"
#include "motors.h"

void Controller_Init(Controller *controller) {
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->x_error = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
	controller->y_error = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
	controller->w_error = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
	controller->previous_x_error = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
	controller->previous_y_error = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
	controller->previous_w_error = 0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	615a      	str	r2, [r3, #20]

	controller->x_velocity = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
	controller->y_velocity = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
	controller->omega = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	621a      	str	r2, [r3, #32]

	controller->controllers_enabled = 1;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <Controller_ResetControllers>:


void Controller_ResetControllers(Controller *controller) {
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	controller->x_error = 0;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
	controller->y_error = 0;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
	controller->w_error = 0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
	controller->previous_x_error = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
	controller->previous_y_error = 0;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
	controller->previous_w_error = 0;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <UpdateControllers>:


void UpdateControllers(Controller *controller, float x_velocity, float y_velocity,  float omega, float steering_adjustment) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b090      	sub	sp, #64	@ 0x40
 800117c:	af00      	add	r7, sp, #0
 800117e:	6178      	str	r0, [r7, #20]
 8001180:	ed87 0a04 	vstr	s0, [r7, #16]
 8001184:	edc7 0a03 	vstr	s1, [r7, #12]
 8001188:	ed87 1a02 	vstr	s2, [r7, #8]
 800118c:	edc7 1a01 	vstr	s3, [r7, #4]
    float forward_output, strafe_output, rotational_output;
//    float left_speed, right_speed;
//
    controller->x_velocity = x_velocity;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	619a      	str	r2, [r3, #24]
    controller->y_velocity = y_velocity;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	61da      	str	r2, [r3, #28]
    controller->omega = omega;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	621a      	str	r2, [r3, #32]
//
    float x_increment = x_velocity * CONTROLLER_LOOP_INTERVAL;
 80011a2:	4b65      	ldr	r3, [pc, #404]	@ (8001338 <UpdateControllers+0x1c0>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    controller->x_error += x_increment - current_robot_velocity.vx * CONTROLLER_LOOP_INTERVAL;
 80011b4:	4b61      	ldr	r3, [pc, #388]	@ (800133c <UpdateControllers+0x1c4>)
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001338 <UpdateControllers+0x1c0>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80011c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	edc3 7a00 	vstr	s15, [r3]
    float x_diff = controller->x_error - controller->previous_x_error;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    controller->previous_x_error = controller->x_error;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	60da      	str	r2, [r3, #12]
    forward_output = FWD_KP * controller->x_error + FWD_KD * x_diff;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	4b50      	ldr	r3, [pc, #320]	@ (8001340 <UpdateControllers+0x1c8>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001208:	4b4e      	ldr	r3, [pc, #312]	@ (8001344 <UpdateControllers+0x1cc>)
 800120a:	edd3 6a00 	vldr	s13, [r3]
 800120e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    float y_increment = y_velocity * CONTROLLER_LOOP_INTERVAL;
 800121e:	4b46      	ldr	r3, [pc, #280]	@ (8001338 <UpdateControllers+0x1c0>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ed97 7a03 	vldr	s14, [r7, #12]
 8001228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	controller->y_error += y_increment - current_robot_velocity.vy * CONTROLLER_LOOP_INTERVAL;
 8001230:	4b42      	ldr	r3, [pc, #264]	@ (800133c <UpdateControllers+0x1c4>)
 8001232:	ed93 7a01 	vldr	s14, [r3, #4]
 8001236:	4b40      	ldr	r3, [pc, #256]	@ (8001338 <UpdateControllers+0x1c0>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001240:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001244:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	edd3 7a01 	vldr	s15, [r3, #4]
 800124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	edc3 7a01 	vstr	s15, [r3, #4]
	float y_diff = controller->y_error - controller->previous_y_error;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	ed93 7a01 	vldr	s14, [r3, #4]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	edd3 7a04 	vldr	s15, [r3, #16]
 8001264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001268:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	controller->previous_y_error = controller->y_error;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	611a      	str	r2, [r3, #16]
	strafe_output = STRAFE_KP * controller->y_error + STRAFE_KD * y_diff;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	ed93 7a01 	vldr	s14, [r3, #4]
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <UpdateControllers+0x1d0>)
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001284:	4b31      	ldr	r3, [pc, #196]	@ (800134c <UpdateControllers+0x1d4>)
 8001286:	edd3 6a00 	vldr	s13, [r3]
 800128a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800128e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        //x_output = K
	float w_increment = omega * CONTROLLER_LOOP_INTERVAL;
 800129a:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <UpdateControllers+0x1c0>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	controller->w_error += w_increment - current_robot_velocity.omega * CONTROLLER_LOOP_INTERVAL;
 80012ac:	4b23      	ldr	r3, [pc, #140]	@ (800133c <UpdateControllers+0x1c4>)
 80012ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80012b2:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <UpdateControllers+0x1c0>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80012c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	edc3 7a02 	vstr	s15, [r3, #8]
	float w_diff = controller->w_error - controller->previous_w_error;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80012e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e4:	edc7 7a08 	vstr	s15, [r7, #32]
	controller->previous_w_error = controller->w_error;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	615a      	str	r2, [r3, #20]
	rotational_output = ROT_KP * controller->omega + ROT_KD * w_diff;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <UpdateControllers+0x1d8>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <UpdateControllers+0x1dc>)
 8001302:	edd3 6a00 	vldr	s13, [r3]
 8001306:	edd7 7a08 	vldr	s15, [r7, #32]
 800130a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	edc7 7a07 	vstr	s15, [r7, #28]

	if (controller->controllers_enabled) {
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <UpdateControllers+0x1b8>
		set_robot_velocity(forward_output, strafe_output, rotational_output);
 8001320:	ed97 1a07 	vldr	s2, [r7, #28]
 8001324:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001328:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800132c:	f000 fa50 	bl	80017d0 <set_robot_velocity>
	}
}
 8001330:	bf00      	nop
 8001332:	3740      	adds	r7, #64	@ 0x40
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08007e0c 	.word	0x08007e0c
 800133c:	20000050 	.word	0x20000050
 8001340:	08007e18 	.word	0x08007e18
 8001344:	08007e1c 	.word	0x08007e1c
 8001348:	08007e20 	.word	0x08007e20
 800134c:	08007e24 	.word	0x08007e24
 8001350:	08007e28 	.word	0x08007e28
 8001354:	08007e2c 	.word	0x08007e2c

08001358 <Controller_Stop>:


void Controller_Stop(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	resetMotors();
 800135c:	f001 fb94 	bl	8002a88 <resetMotors>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <Controller_EnableControllers>:

/**
 * Enable motor controllers.
 */
void Controller_EnableControllers(Controller *controller) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <Controller_DisableControllers>:

/**
 * Disable motor controllers.
 */
void Controller_DisableControllers(Controller *controller) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <getForwardLeftEncoderCounts>:
float m_x_change = 0;
float m_rot_change = 0;



int16_t getForwardLeftEncoderCounts() {
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 80013a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	b21b      	sxth	r3, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <getForwardRightEncoderCounts>:

int16_t getForwardRightEncoderCounts() {
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	return (int16_t) TIM3->CNT;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <getForwardRightEncoderCounts+0x14>)
 80013ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013bc:	b21b      	sxth	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40000400 	.word	0x40000400

080013cc <getRearLeftEncoderCounts>:

int16_t getRearLeftEncoderCounts() {
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	return (int16_t) TIM4->CNT;
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <getRearLeftEncoderCounts+0x14>)
 80013d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d4:	b21b      	sxth	r3, r3
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40000800 	.word	0x40000800

080013e4 <getRearRightEncoderCounts>:

int16_t getRearRightEncoderCounts() {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	return (int16_t) TIM5->CNT;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <getRearRightEncoderCounts+0x14>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	b21b      	sxth	r3, r3
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40000c00 	.word	0x40000c00

080013fc <resetEncoders>:

void resetEncoders() {
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
	TIM2->CNT = (int16_t) 0;
 8001400:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CNT = (int16_t) 0;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <resetEncoders+0x68>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CNT = (int16_t) 0;
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <resetEncoders+0x6c>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->CNT = (int16_t) 0;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <resetEncoders+0x70>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24

	m_robot_distance = 0;
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <resetEncoders+0x74>)
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <resetEncoders+0x78>)
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

	ForwardLeft_delta = 0;
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <resetEncoders+0x7c>)
 800142c:	2200      	movs	r2, #0
 800142e:	801a      	strh	r2, [r3, #0]
	ForwardRight_delta = 0;
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <resetEncoders+0x80>)
 8001432:	2200      	movs	r2, #0
 8001434:	801a      	strh	r2, [r3, #0]
	RearLeft_delta = 0;
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <resetEncoders+0x84>)
 8001438:	2200      	movs	r2, #0
 800143a:	801a      	strh	r2, [r3, #0]
	RearRight_delta = 0;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <resetEncoders+0x88>)
 800143e:	2200      	movs	r2, #0
 8001440:	801a      	strh	r2, [r3, #0]

	previous_ForwardLeft_count = 0;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <resetEncoders+0x8c>)
 8001444:	2200      	movs	r2, #0
 8001446:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = 0;
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <resetEncoders+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = 0;
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <resetEncoders+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = 0;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <resetEncoders+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	801a      	strh	r2, [r3, #0]

}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40000400 	.word	0x40000400
 8001468:	40000800 	.word	0x40000800
 800146c:	40000c00 	.word	0x40000c00
 8001470:	2000007c 	.word	0x2000007c
 8001474:	20000080 	.word	0x20000080
 8001478:	20000084 	.word	0x20000084
 800147c:	20000086 	.word	0x20000086
 8001480:	20000088 	.word	0x20000088
 8001484:	2000008a 	.word	0x2000008a
 8001488:	2000008c 	.word	0x2000008c
 800148c:	2000008e 	.word	0x2000008e
 8001490:	20000090 	.word	0x20000090
 8001494:	20000092 	.word	0x20000092

08001498 <update_Encoder_Data>:
	TIM4->CNT = (int16_t) 0;
	TIM5->CNT = (int16_t) 0;
}


void update_Encoder_Data(){
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
	int16_t ForwardLeft_count= getForwardLeftEncoderCounts();
 800149e:	f7ff ff7d 	bl	800139c <getForwardLeftEncoderCounts>
 80014a2:	4603      	mov	r3, r0
 80014a4:	82fb      	strh	r3, [r7, #22]
	int16_t ForwardRight_count = getForwardRightEncoderCounts();
 80014a6:	f7ff ff85 	bl	80013b4 <getForwardRightEncoderCounts>
 80014aa:	4603      	mov	r3, r0
 80014ac:	82bb      	strh	r3, [r7, #20]
	int16_t RearLeft_count = getRearLeftEncoderCounts();
 80014ae:	f7ff ff8d 	bl	80013cc <getRearLeftEncoderCounts>
 80014b2:	4603      	mov	r3, r0
 80014b4:	827b      	strh	r3, [r7, #18]
	int16_t RearRight_count = getRearRightEncoderCounts();
 80014b6:	f7ff ff95 	bl	80013e4 <getRearRightEncoderCounts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	823b      	strh	r3, [r7, #16]


	ForwardLeft_delta = ForwardLeft_count - previous_ForwardLeft_count;
 80014be:	8afa      	ldrh	r2, [r7, #22]
 80014c0:	4b4a      	ldr	r3, [pc, #296]	@ (80015ec <update_Encoder_Data+0x154>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	4b48      	ldr	r3, [pc, #288]	@ (80015f0 <update_Encoder_Data+0x158>)
 80014d0:	801a      	strh	r2, [r3, #0]
	previous_ForwardLeft_count = ForwardLeft_count;
 80014d2:	4a46      	ldr	r2, [pc, #280]	@ (80015ec <update_Encoder_Data+0x154>)
 80014d4:	8afb      	ldrh	r3, [r7, #22]
 80014d6:	8013      	strh	r3, [r2, #0]

	ForwardRight_delta = ForwardRight_count - previous_ForwardRight_count;
 80014d8:	8aba      	ldrh	r2, [r7, #20]
 80014da:	4b46      	ldr	r3, [pc, #280]	@ (80015f4 <update_Encoder_Data+0x15c>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <update_Encoder_Data+0x160>)
 80014ea:	801a      	strh	r2, [r3, #0]
	previous_ForwardRight_count = ForwardRight_count;
 80014ec:	4a41      	ldr	r2, [pc, #260]	@ (80015f4 <update_Encoder_Data+0x15c>)
 80014ee:	8abb      	ldrh	r3, [r7, #20]
 80014f0:	8013      	strh	r3, [r2, #0]

	RearLeft_delta = RearLeft_count - previous_RearLeft_count;
 80014f2:	8a7a      	ldrh	r2, [r7, #18]
 80014f4:	4b41      	ldr	r3, [pc, #260]	@ (80015fc <update_Encoder_Data+0x164>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b3f      	ldr	r3, [pc, #252]	@ (8001600 <update_Encoder_Data+0x168>)
 8001504:	801a      	strh	r2, [r3, #0]
	previous_RearLeft_count = RearLeft_count;
 8001506:	4a3d      	ldr	r2, [pc, #244]	@ (80015fc <update_Encoder_Data+0x164>)
 8001508:	8a7b      	ldrh	r3, [r7, #18]
 800150a:	8013      	strh	r3, [r2, #0]


	RearRight_delta = RearRight_count - previous_RearRight_count;
 800150c:	8a3a      	ldrh	r2, [r7, #16]
 800150e:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <update_Encoder_Data+0x16c>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	b29b      	uxth	r3, r3
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21a      	sxth	r2, r3
 800151c:	4b3a      	ldr	r3, [pc, #232]	@ (8001608 <update_Encoder_Data+0x170>)
 800151e:	801a      	strh	r2, [r3, #0]
	previous_RearRight_count = RearRight_count;
 8001520:	4a38      	ldr	r2, [pc, #224]	@ (8001604 <update_Encoder_Data+0x16c>)
 8001522:	8a3b      	ldrh	r3, [r7, #16]
 8001524:	8013      	strh	r3, [r2, #0]

	float ForwardLeft = ForwardLeft_delta * RAD_PER_COUNT_FORWARD_LEFT;
 8001526:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <update_Encoder_Data+0x158>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001534:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800160c <update_Encoder_Data+0x174>
 8001538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153c:	edc7 7a03 	vstr	s15, [r7, #12]
	float ForwardRight = ForwardRight_delta * RAD_PER_COUNT_FORWARD_RIGHT;
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <update_Encoder_Data+0x160>)
 8001542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800160c <update_Encoder_Data+0x174>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	edc7 7a02 	vstr	s15, [r7, #8]
	float RearLeft = RearLeft_delta * RAD_PER_COUNT_REAR_LEFT;
 800155a:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <update_Encoder_Data+0x168>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800160c <update_Encoder_Data+0x174>
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	edc7 7a01 	vstr	s15, [r7, #4]
	float RearRight = RearRight_delta * RAD_PER_COUNT_REAR_RIGHT;
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <update_Encoder_Data+0x170>)
 8001576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001582:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800160c <update_Encoder_Data+0x174>
 8001586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158a:	edc7 7a00 	vstr	s15, [r7]
//	current_wheel_W.front_left = ForwardLeft * LOOP_FREQUENCY;
//	current_wheel_W.rear_left = RearLeft * LOOP_FREQUENCY;
//	current_wheel_W.front_right = ForwardRight * LOOP_FREQUENCY;
//	current_wheel_W.rear_right = RearRight * LOOP_FREQUENCY;

	current_wheel_W.front_left = ForwardLeft * LOOP_FREQUENCY;
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <update_Encoder_Data+0x178>)
 8001590:	ed93 7a00 	vldr	s14, [r3]
 8001594:	edd7 7a03 	vldr	s15, [r7, #12]
 8001598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <update_Encoder_Data+0x17c>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
	current_wheel_W.rear_left = RearLeft * LOOP_FREQUENCY;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <update_Encoder_Data+0x178>)
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <update_Encoder_Data+0x17c>)
 80015b2:	edc3 7a01 	vstr	s15, [r3, #4]
	current_wheel_W.front_right = ForwardRight * LOOP_FREQUENCY;
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <update_Encoder_Data+0x178>)
 80015b8:	ed93 7a00 	vldr	s14, [r3]
 80015bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <update_Encoder_Data+0x17c>)
 80015c6:	edc3 7a03 	vstr	s15, [r3, #12]
	current_wheel_W.rear_right = RearRight * LOOP_FREQUENCY;
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <update_Encoder_Data+0x178>)
 80015cc:	ed93 7a00 	vldr	s14, [r3]
 80015d0:	edd7 7a00 	vldr	s15, [r7]
 80015d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <update_Encoder_Data+0x17c>)
 80015da:	edc3 7a02 	vstr	s15, [r3, #8]

	calculate_robot_velocity();
 80015de:	f000 f92d 	bl	800183c <calculate_robot_velocity>
	//UART_Transmit_Float(&huart2, ">z", current_robot_velocity.omega, 3);

}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000008c 	.word	0x2000008c
 80015f0:	20000084 	.word	0x20000084
 80015f4:	2000008e 	.word	0x2000008e
 80015f8:	20000086 	.word	0x20000086
 80015fc:	20000090 	.word	0x20000090
 8001600:	20000088 	.word	0x20000088
 8001604:	20000092 	.word	0x20000092
 8001608:	2000008a 	.word	0x2000008a
 800160c:	3a723872 	.word	0x3a723872
 8001610:	08007e04 	.word	0x08007e04
 8001614:	2000005c 	.word	0x2000005c

08001618 <mecanum_inverse_kinematics>:
 * ω1 = (1/R) * (vx - vy - (L+W)*ω)  // Front Left
 * ω2 = (1/R) * (vx + vy - (L+W)*ω)  // Rear Left
 * ω3 = (1/R) * (vx - vy + (L+W)*ω)  // Rear Right
 * ω4 = (1/R) * (vx + vy + (L+W)*ω)  // Front Right
 */
void mecanum_inverse_kinematics(RobotVelocity robot_vel, WheelVelocities* wheel_vel) {
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	eef0 6a40 	vmov.f32	s13, s0
 8001622:	eeb0 7a60 	vmov.f32	s14, s1
 8001626:	eef0 7a41 	vmov.f32	s15, s2
 800162a:	6038      	str	r0, [r7, #0]
 800162c:	edc7 6a01 	vstr	s13, [r7, #4]
 8001630:	ed87 7a02 	vstr	s14, [r7, #8]
 8001634:	edc7 7a03 	vstr	s15, [r7, #12]

    // Calculate wheel angular velocities (rad/s)

	wheel_vel->front_left  = inv_radius * (robot_vel.vx - robot_vel.vy - L_plus_W * robot_vel.omega);
 8001638:	ed97 7a01 	vldr	s14, [r7, #4]
 800163c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001640:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001644:	edd7 6a03 	vldr	s13, [r7, #12]
 8001648:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <mecanum_inverse_kinematics+0xe4>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <mecanum_inverse_kinematics+0xe8>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	edc3 7a00 	vstr	s15, [r3]
	wheel_vel->front_right = inv_radius * (robot_vel.vx + robot_vel.vy + L_plus_W * robot_vel.omega);
 8001666:	ed97 7a01 	vldr	s14, [r7, #4]
 800166a:	edd7 7a02 	vldr	s15, [r7, #8]
 800166e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001672:	edd7 6a03 	vldr	s13, [r7, #12]
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <mecanum_inverse_kinematics+0xe4>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <mecanum_inverse_kinematics+0xe8>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	edc3 7a03 	vstr	s15, [r3, #12]
	wheel_vel->rear_left   = inv_radius * (robot_vel.vx + robot_vel.vy - L_plus_W * robot_vel.omega);
 8001694:	ed97 7a01 	vldr	s14, [r7, #4]
 8001698:	edd7 7a02 	vldr	s15, [r7, #8]
 800169c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a0:	edd7 6a03 	vldr	s13, [r7, #12]
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <mecanum_inverse_kinematics+0xe4>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b2:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <mecanum_inverse_kinematics+0xe8>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	edc3 7a01 	vstr	s15, [r3, #4]
	wheel_vel->rear_right  = inv_radius * (robot_vel.vx - robot_vel.vy + L_plus_W * robot_vel.omega);
 80016c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80016c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ce:	edd7 6a03 	vldr	s13, [r7, #12]
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <mecanum_inverse_kinematics+0xe4>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <mecanum_inverse_kinematics+0xe8>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	20000018 	.word	0x20000018
 8001700:	2000001c 	.word	0x2000001c

08001704 <mecanum_forward_kinematics>:
//
//    robot_vel->omega = R_over_4 / L_plus_W * (-wheel_vel.front_left - wheel_vel.rear_left +
//                                              wheel_vel.rear_right + wheel_vel.front_right);
//}

void mecanum_forward_kinematics(WheelVelocities wheel_vel, volatile RobotVelocity* robot_vel) {
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	@ 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	eeb0 6a40 	vmov.f32	s12, s0
 800170e:	eef0 6a60 	vmov.f32	s13, s1
 8001712:	eeb0 7a41 	vmov.f32	s14, s2
 8001716:	eef0 7a61 	vmov.f32	s15, s3
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	ed87 6a02 	vstr	s12, [r7, #8]
 8001720:	edc7 6a03 	vstr	s13, [r7, #12]
 8001724:	ed87 7a04 	vstr	s14, [r7, #16]
 8001728:	edc7 7a05 	vstr	s15, [r7, #20]
    float R_over_4 = WHEEL_RADIUS / 4.0f;
 800172c:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <mecanum_forward_kinematics+0xc4>)
 800172e:	61fb      	str	r3, [r7, #28]
    float L_plus_W = HALF_LENGTH + HALF_WIDTH;
 8001730:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <mecanum_forward_kinematics+0xc8>)
 8001732:	61bb      	str	r3, [r7, #24]

    // Calculate robot velocities
    robot_vel->vx = R_over_4 * (wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left + wheel_vel.rear_right);
 8001734:	ed97 7a02 	vldr	s14, [r7, #8]
 8001738:	edd7 7a05 	vldr	s15, [r7, #20]
 800173c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001740:	edd7 7a03 	vldr	s15, [r7, #12]
 8001744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001748:	edd7 7a04 	vldr	s15, [r7, #16]
 800174c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001750:	edd7 7a07 	vldr	s15, [r7, #28]
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	edc3 7a00 	vstr	s15, [r3]

    robot_vel->vy = R_over_4 * (-wheel_vel.front_left + wheel_vel.front_right + wheel_vel.rear_left - wheel_vel.rear_right);
 800175e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001762:	edd7 7a02 	vldr	s15, [r7, #8]
 8001766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800176a:	edd7 7a03 	vldr	s15, [r7, #12]
 800176e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001772:	edd7 7a04 	vldr	s15, [r7, #16]
 8001776:	ee37 7a67 	vsub.f32	s14, s14, s15
 800177a:	edd7 7a07 	vldr	s15, [r7, #28]
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	edc3 7a01 	vstr	s15, [r3, #4]

    robot_vel->omega = R_over_4 / L_plus_W * (-wheel_vel.front_left + wheel_vel.front_right - wheel_vel.rear_left + wheel_vel.rear_right);
 8001788:	edd7 6a07 	vldr	s13, [r7, #28]
 800178c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001794:	edd7 6a05 	vldr	s13, [r7, #20]
 8001798:	edd7 7a02 	vldr	s15, [r7, #8]
 800179c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80017ba:	bf00      	nop
 80017bc:	3724      	adds	r7, #36	@ 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	3c1fbe77 	.word	0x3c1fbe77
 80017cc:	3ea8f5c2 	.word	0x3ea8f5c2

080017d0 <set_robot_velocity>:



void set_robot_velocity(float vx, float vy, float omega) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	@ 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80017da:	edc7 0a02 	vstr	s1, [r7, #8]
 80017de:	ed87 1a01 	vstr	s2, [r7, #4]
    RobotVelocity desired_vel = {vx, vy, omega};
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    WheelVelocities wheel_targets;

    // Convert robot velocity to wheel velocities
    mecanum_inverse_kinematics(desired_vel, &wheel_targets);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80017f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80017fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017fe:	4618      	mov	r0, r3
 8001800:	eeb0 0a66 	vmov.f32	s0, s13
 8001804:	eef0 0a47 	vmov.f32	s1, s14
 8001808:	eeb0 1a67 	vmov.f32	s2, s15
 800180c:	f7ff ff04 	bl	8001618 <mecanum_inverse_kinematics>

    // Set target velocities for the motor controller
    setTargetVelocities(wheel_targets.front_left,  // m1
 8001810:	edd7 7a05 	vldr	s15, [r7, #20]
 8001814:	ed97 7a06 	vldr	s14, [r7, #24]
 8001818:	edd7 6a07 	vldr	s13, [r7, #28]
 800181c:	ed97 6a08 	vldr	s12, [r7, #32]
 8001820:	eef0 1a46 	vmov.f32	s3, s12
 8001824:	eeb0 1a66 	vmov.f32	s2, s13
 8001828:	eef0 0a47 	vmov.f32	s1, s14
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	f001 fc90 	bl	8003154 <setTargetVelocities>
                       wheel_targets.rear_left,    // m2
                       wheel_targets.rear_right,   // m3
                       wheel_targets.front_right); // m4
}
 8001834:	bf00      	nop
 8001836:	3730      	adds	r7, #48	@ 0x30
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <calculate_robot_velocity>:

void calculate_robot_velocity(){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	mecanum_forward_kinematics(current_wheel_W, &current_robot_velocity);
 8001840:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <calculate_robot_velocity+0x30>)
 8001842:	ed93 6a00 	vldr	s12, [r3]
 8001846:	edd3 6a01 	vldr	s13, [r3, #4]
 800184a:	ed93 7a02 	vldr	s14, [r3, #8]
 800184e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001852:	4807      	ldr	r0, [pc, #28]	@ (8001870 <calculate_robot_velocity+0x34>)
 8001854:	eeb0 0a46 	vmov.f32	s0, s12
 8001858:	eef0 0a66 	vmov.f32	s1, s13
 800185c:	eeb0 1a47 	vmov.f32	s2, s14
 8001860:	eef0 1a67 	vmov.f32	s3, s15
 8001864:	f7ff ff4e 	bl	8001704 <mecanum_forward_kinematics>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000005c 	.word	0x2000005c
 8001870:	20000050 	.word	0x20000050

08001874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187a:	f002 fa6f 	bl	8003d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187e:	f000 f8c3 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001882:	f000 fc5d 	bl	8002140 <MX_GPIO_Init>
  MX_DMA_Init();
 8001886:	f000 fc3b 	bl	8002100 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800188a:	f000 fbe5 	bl	8002058 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800188e:	f000 f92d 	bl	8001aec <MX_ADC1_Init>
  MX_TIM1_Init();
 8001892:	f000 f97d 	bl	8001b90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001896:	f000 fa23 	bl	8001ce0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800189a:	f000 fa75 	bl	8001d88 <MX_TIM3_Init>
  MX_TIM4_Init();
 800189e:	f000 fac7 	bl	8001e30 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018a2:	f000 fb19 	bl	8001ed8 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80018a6:	f000 fc01 	bl	80020ac <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80018aa:	f000 fbb1 	bl	8002010 <MX_TIM14_Init>
  MX_TIM13_Init();
 80018ae:	f000 fb8b 	bl	8001fc8 <MX_TIM13_Init>
  MX_TIM11_Init();
 80018b2:	f000 fb65 	bl	8001f80 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018b6:	2100      	movs	r1, #0
 80018b8:	483f      	ldr	r0, [pc, #252]	@ (80019b8 <main+0x144>)
 80018ba:	f004 fadb 	bl	8005e74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018be:	2104      	movs	r1, #4
 80018c0:	483d      	ldr	r0, [pc, #244]	@ (80019b8 <main+0x144>)
 80018c2:	f004 fad7 	bl	8005e74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018c6:	2108      	movs	r1, #8
 80018c8:	483b      	ldr	r0, [pc, #236]	@ (80019b8 <main+0x144>)
 80018ca:	f004 fad3 	bl	8005e74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80018ce:	210c      	movs	r1, #12
 80018d0:	4839      	ldr	r0, [pc, #228]	@ (80019b8 <main+0x144>)
 80018d2:	f004 facf 	bl	8005e74 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80018d6:	213c      	movs	r1, #60	@ 0x3c
 80018d8:	4838      	ldr	r0, [pc, #224]	@ (80019bc <main+0x148>)
 80018da:	f004 fc39 	bl	8006150 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80018de:	213c      	movs	r1, #60	@ 0x3c
 80018e0:	4837      	ldr	r0, [pc, #220]	@ (80019c0 <main+0x14c>)
 80018e2:	f004 fc35 	bl	8006150 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80018e6:	213c      	movs	r1, #60	@ 0x3c
 80018e8:	4836      	ldr	r0, [pc, #216]	@ (80019c4 <main+0x150>)
 80018ea:	f004 fc31 	bl	8006150 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80018ee:	213c      	movs	r1, #60	@ 0x3c
 80018f0:	4835      	ldr	r0, [pc, #212]	@ (80019c8 <main+0x154>)
 80018f2:	f004 fc2d 	bl	8006150 <HAL_TIM_Encoder_Start>

//  // Initialize kinematics system
//  init_kinematics();

  // Reset encoders
  resetEncoders();
 80018f6:	f7ff fd81 	bl	80013fc <resetEncoders>

  // Init BLuetooth Debug
  UART_Init(&huart2);
 80018fa:	4834      	ldr	r0, [pc, #208]	@ (80019cc <main+0x158>)
 80018fc:	f7ff fbb3 	bl	8001066 <UART_Init>

  // Start UART receive interrupt
  HAL_UART_Receive_IT(&huart3, &rxBuffer[rxIndex], 1);
 8001900:	4b33      	ldr	r3, [pc, #204]	@ (80019d0 <main+0x15c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <main+0x160>)
 8001908:	4413      	add	r3, r2
 800190a:	2201      	movs	r2, #1
 800190c:	4619      	mov	r1, r3
 800190e:	4832      	ldr	r0, [pc, #200]	@ (80019d8 <main+0x164>)
 8001910:	f005 fac5 	bl	8006e9e <HAL_UART_Receive_IT>

  // Velocity timer
  HAL_TIM_Base_Start_IT(&htim14);
 8001914:	4831      	ldr	r0, [pc, #196]	@ (80019dc <main+0x168>)
 8001916:	f004 f9ed 	bl	8005cf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 800191a:	4831      	ldr	r0, [pc, #196]	@ (80019e0 <main+0x16c>)
 800191c:	f004 f9ea 	bl	8005cf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001920:	4830      	ldr	r0, [pc, #192]	@ (80019e4 <main+0x170>)
 8001922:	f004 f9e7 	bl	8005cf4 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800192c:	482e      	ldr	r0, [pc, #184]	@ (80019e8 <main+0x174>)
 800192e:	f003 fb3f 	bl	8004fb0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001932:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001936:	f002 fa83 	bl	8003e40 <HAL_Delay>
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001940:	4829      	ldr	r0, [pc, #164]	@ (80019e8 <main+0x174>)
 8001942:	f003 fb35 	bl	8004fb0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001946:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800194a:	f002 fa79 	bl	8003e40 <HAL_Delay>

  Controller_Init(&controller);
 800194e:	4827      	ldr	r0, [pc, #156]	@ (80019ec <main+0x178>)
 8001950:	f7ff fbbd 	bl	80010ce <Controller_Init>
  setTargetVelocities(0, 0, 0, 0);
 8001954:	eddf 1a26 	vldr	s3, [pc, #152]	@ 80019f0 <main+0x17c>
 8001958:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 80019f0 <main+0x17c>
 800195c:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80019f0 <main+0x17c>
 8001960:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80019f0 <main+0x17c>
 8001964:	f001 fbf6 	bl	8003154 <setTargetVelocities>
  Profile_Reset(&x_profile);
 8001968:	4822      	ldr	r0, [pc, #136]	@ (80019f4 <main+0x180>)
 800196a:	f001 fc13 	bl	8003194 <Profile_Reset>
  Profile_Reset(&y_profile);
 800196e:	4822      	ldr	r0, [pc, #136]	@ (80019f8 <main+0x184>)
 8001970:	f001 fc10 	bl	8003194 <Profile_Reset>
  Profile_Reset(&W_profile);
 8001974:	4821      	ldr	r0, [pc, #132]	@ (80019fc <main+0x188>)
 8001976:	f001 fc0d 	bl	8003194 <Profile_Reset>

  Motion_Init(&motion, &controller, &x_profile, &y_profile, &W_profile);
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <main+0x188>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4b1e      	ldr	r3, [pc, #120]	@ (80019f8 <main+0x184>)
 8001980:	4a1c      	ldr	r2, [pc, #112]	@ (80019f4 <main+0x180>)
 8001982:	491a      	ldr	r1, [pc, #104]	@ (80019ec <main+0x178>)
 8001984:	481e      	ldr	r0, [pc, #120]	@ (8001a00 <main+0x18c>)
 8001986:	f000 fd13 	bl	80023b0 <Motion_Init>
  Controller_ResetControllers(&controller);
 800198a:	4818      	ldr	r0, [pc, #96]	@ (80019ec <main+0x178>)
 800198c:	f7ff fbd1 	bl	8001132 <Controller_ResetControllers>
  Motion_ResetDriveSystem(&motion);
 8001990:	481b      	ldr	r0, [pc, #108]	@ (8001a00 <main+0x18c>)
 8001992:	f000 fd46 	bl	8002422 <Motion_ResetDriveSystem>
//    UART_Transmit_Int(&huart2, "S", i);
//    UART_Transmit_Int(&huart3, "S", i);
//    i++;
//    HAL_Delay(1000);
//	  SendTelemetryData();
	  if (commandReceived)
 8001996:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <main+0x190>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0fb      	beq.n	8001996 <main+0x122>
		{
			//UART_Transmit_Int(&huart2, "R", rxBuffer[0]);
			ExecuteCommand(rxBuffer[0], rxBuffer[1]);
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <main+0x160>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4a0c      	ldr	r2, [pc, #48]	@ (80019d4 <main+0x160>)
 80019a4:	7852      	ldrb	r2, [r2, #1]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fa69 	bl	8000e80 <ExecuteCommand>
		  //ExecuteCommand(1, 50);
			commandReceived = 0;
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <main+0x190>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
	  if (commandReceived)
 80019b4:	e7ef      	b.n	8001996 <main+0x122>
 80019b6:	bf00      	nop
 80019b8:	2000013c 	.word	0x2000013c
 80019bc:	20000184 	.word	0x20000184
 80019c0:	200001cc 	.word	0x200001cc
 80019c4:	20000214 	.word	0x20000214
 80019c8:	2000025c 	.word	0x2000025c
 80019cc:	2000037c 	.word	0x2000037c
 80019d0:	20000536 	.word	0x20000536
 80019d4:	20000534 	.word	0x20000534
 80019d8:	200003c4 	.word	0x200003c4
 80019dc:	20000334 	.word	0x20000334
 80019e0:	200002ec 	.word	0x200002ec
 80019e4:	200002a4 	.word	0x200002a4
 80019e8:	40020000 	.word	0x40020000
 80019ec:	20000478 	.word	0x20000478
 80019f0:	00000000 	.word	0x00000000
 80019f4:	2000040c 	.word	0x2000040c
 80019f8:	20000430 	.word	0x20000430
 80019fc:	20000454 	.word	0x20000454
 8001a00:	200004a0 	.word	0x200004a0
 8001a04:	20000537 	.word	0x20000537

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	@ 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2234      	movs	r2, #52	@ 0x34
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 f9bc 	bl	8007d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <SystemClock_Config+0xdc>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae4 <SystemClock_Config+0xdc>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <SystemClock_Config+0xdc>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <SystemClock_Config+0xe0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a25      	ldr	r2, [pc, #148]	@ (8001ae8 <SystemClock_Config+0xe0>)
 8001a52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <SystemClock_Config+0xe0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a70:	2302      	movs	r3, #2
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a74:	2300      	movs	r3, #0
 8001a76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a7c:	23b4      	movs	r3, #180	@ 0xb4
 8001a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 fe41 	bl	8005718 <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a9c:	f000 fc82 	bl	80023a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001aa0:	f003 faa0 	bl	8004fe4 <HAL_PWREx_EnableOverDrive>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001aaa:	f000 fc7b 	bl	80023a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aae:	230f      	movs	r3, #15
 8001ab0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	2105      	movs	r1, #5
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fad9 	bl	8005084 <HAL_RCC_ClockConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ad8:	f000 fc64 	bl	80023a4 <Error_Handler>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3750      	adds	r7, #80	@ 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000

08001aec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b00:	4a21      	ldr	r2, [pc, #132]	@ (8001b88 <MX_ADC1_Init+0x9c>)
 8001b02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b26:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b2e:	4a17      	ldr	r2, [pc, #92]	@ (8001b8c <MX_ADC1_Init+0xa0>)
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b4c:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b4e:	f002 f99b 	bl	8003e88 <HAL_ADC_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b58:	f000 fc24 	bl	80023a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_ADC1_Init+0x98>)
 8001b6e:	f002 f9cf 	bl	8003f10 <HAL_ADC_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b78:	f000 fc14 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000094 	.word	0x20000094
 8001b88:	40012000 	.word	0x40012000
 8001b8c:	0f000001 	.word	0x0f000001

08001b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b092      	sub	sp, #72	@ 0x48
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	615a      	str	r2, [r3, #20]
 8001bb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f006 f8ea 	bl	8007d94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bc0:	4b45      	ldr	r3, [pc, #276]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001bc2:	4a46      	ldr	r2, [pc, #280]	@ (8001cdc <MX_TIM1_Init+0x14c>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bc6:	4b44      	ldr	r3, [pc, #272]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b42      	ldr	r3, [pc, #264]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001bd2:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001bd4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001bd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bda:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001be0:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bec:	483a      	ldr	r0, [pc, #232]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001bee:	f004 f8f1 	bl	8005dd4 <HAL_TIM_PWM_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001bf8:	f000 fbd4 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4833      	ldr	r0, [pc, #204]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001c0c:	f004 ff8a 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c16:	f000 fbc5 	bl	80023a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1a:	2360      	movs	r3, #96	@ 0x60
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4826      	ldr	r0, [pc, #152]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001c40:	f004 fc04 	bl	800644c <HAL_TIM_PWM_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c4a:	f000 fbab 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c52:	2204      	movs	r2, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4820      	ldr	r0, [pc, #128]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001c58:	f004 fbf8 	bl	800644c <HAL_TIM_PWM_ConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c62:	f000 fb9f 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	481a      	ldr	r0, [pc, #104]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001c70:	f004 fbec 	bl	800644c <HAL_TIM_PWM_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001c7a:	f000 fb93 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c82:	220c      	movs	r2, #12
 8001c84:	4619      	mov	r1, r3
 8001c86:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001c88:	f004 fbe0 	bl	800644c <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001c92:	f000 fb87 	bl	80023a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001cba:	f004 ffaf 	bl	8006c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001cc4:	f000 fb6e 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <MX_TIM1_Init+0x148>)
 8001cca:	f001 fe89 	bl	80039e0 <HAL_TIM_MspPostInit>

}
 8001cce:	bf00      	nop
 8001cd0:	3748      	adds	r7, #72	@ 0x48
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000013c 	.word	0x2000013c
 8001cdc:	40010000 	.word	0x40010000

08001ce0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	@ 0x30
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	2224      	movs	r2, #36	@ 0x24
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 f850 	bl	8007d94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001cfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d24:	2303      	movs	r3, #3
 8001d26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d50:	f004 f958 	bl	8006004 <HAL_TIM_Encoder_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d5a:	f000 fb23 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <MX_TIM2_Init+0xa4>)
 8001d6c:	f004 feda 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d76:	f000 fb15 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3730      	adds	r7, #48	@ 0x30
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000184 	.word	0x20000184

08001d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	@ 0x30
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	2224      	movs	r2, #36	@ 0x24
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 fffc 	bl	8007d94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da4:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <MX_TIM3_Init+0xa0>)
 8001da6:	4a21      	ldr	r2, [pc, #132]	@ (8001e2c <MX_TIM3_Init+0xa4>)
 8001da8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001daa:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <MX_TIM3_Init+0xa0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <MX_TIM3_Init+0xa0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <MX_TIM3_Init+0xa0>)
 8001db8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <MX_TIM3_Init+0xa0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <MX_TIM3_Init+0xa0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001de2:	2301      	movs	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4619      	mov	r1, r3
 8001df4:	480c      	ldr	r0, [pc, #48]	@ (8001e28 <MX_TIM3_Init+0xa0>)
 8001df6:	f004 f905 	bl	8006004 <HAL_TIM_Encoder_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e00:	f000 fad0 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <MX_TIM3_Init+0xa0>)
 8001e12:	f004 fe87 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e1c:	f000 fac2 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	3730      	adds	r7, #48	@ 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	200001cc 	.word	0x200001cc
 8001e2c:	40000400 	.word	0x40000400

08001e30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	2224      	movs	r2, #36	@ 0x24
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f005 ffa8 	bl	8007d94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <MX_TIM4_Init+0xa0>)
 8001e4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <MX_TIM4_Init+0xa4>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <MX_TIM4_Init+0xa0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <MX_TIM4_Init+0xa0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <MX_TIM4_Init+0xa0>)
 8001e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <MX_TIM4_Init+0xa0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <MX_TIM4_Init+0xa0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e72:	2303      	movs	r3, #3
 8001e74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <MX_TIM4_Init+0xa0>)
 8001e9e:	f004 f8b1 	bl	8006004 <HAL_TIM_Encoder_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ea8:	f000 fa7c 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_TIM4_Init+0xa0>)
 8001eba:	f004 fe33 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ec4:	f000 fa6e 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3730      	adds	r7, #48	@ 0x30
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000214 	.word	0x20000214
 8001ed4:	40000800 	.word	0x40000800

08001ed8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	@ 0x30
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2224      	movs	r2, #36	@ 0x24
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f005 ff54 	bl	8007d94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ef4:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <MX_TIM5_Init+0xa0>)
 8001ef6:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <MX_TIM5_Init+0xa4>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <MX_TIM5_Init+0xa0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <MX_TIM5_Init+0xa0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <MX_TIM5_Init+0xa0>)
 8001f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f0c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <MX_TIM5_Init+0xa0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <MX_TIM5_Init+0xa0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f32:	2301      	movs	r3, #1
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	4619      	mov	r1, r3
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <MX_TIM5_Init+0xa0>)
 8001f46:	f004 f85d 	bl	8006004 <HAL_TIM_Encoder_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001f50:	f000 fa28 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <MX_TIM5_Init+0xa0>)
 8001f62:	f004 fddf 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001f6c:	f000 fa1a 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	3730      	adds	r7, #48	@ 0x30
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000025c 	.word	0x2000025c
 8001f7c:	40000c00 	.word	0x40000c00

08001f80 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f84:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <MX_TIM11_Init+0x40>)
 8001f86:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc4 <MX_TIM11_Init+0x44>)
 8001f88:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1800-1;
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <MX_TIM11_Init+0x40>)
 8001f8c:	f240 7207 	movw	r2, #1799	@ 0x707
 8001f90:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <MX_TIM11_Init+0x40>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8001f98:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <MX_TIM11_Init+0x40>)
 8001f9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f9e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <MX_TIM11_Init+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <MX_TIM11_Init+0x40>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <MX_TIM11_Init+0x40>)
 8001fae:	f003 fe51 	bl	8005c54 <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001fb8:	f000 f9f4 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200002a4 	.word	0x200002a4
 8001fc4:	40014800 	.word	0x40014800

08001fc8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_TIM13_Init+0x40>)
 8001fce:	4a0f      	ldr	r2, [pc, #60]	@ (800200c <MX_TIM13_Init+0x44>)
 8001fd0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 1800-1;
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <MX_TIM13_Init+0x40>)
 8001fd4:	f240 7207 	movw	r2, #1799	@ 0x707
 8001fd8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_TIM13_Init+0x40>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_TIM13_Init+0x40>)
 8001fe2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fe6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <MX_TIM13_Init+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_TIM13_Init+0x40>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <MX_TIM13_Init+0x40>)
 8001ff6:	f003 fe2d 	bl	8005c54 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002000:	f000 f9d0 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200002ec 	.word	0x200002ec
 800200c:	40001c00 	.word	0x40001c00

08002010 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <MX_TIM14_Init+0x40>)
 8002016:	4a0f      	ldr	r2, [pc, #60]	@ (8002054 <MX_TIM14_Init+0x44>)
 8002018:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1800-1;
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <MX_TIM14_Init+0x40>)
 800201c:	f240 7207 	movw	r2, #1799	@ 0x707
 8002020:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <MX_TIM14_Init+0x40>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 500-1;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MX_TIM14_Init+0x40>)
 800202a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800202e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <MX_TIM14_Init+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <MX_TIM14_Init+0x40>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	@ (8002050 <MX_TIM14_Init+0x40>)
 800203e:	f003 fe09 	bl	8005c54 <HAL_TIM_Base_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8002048:	f000 f9ac 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000334 	.word	0x20000334
 8002054:	40002000 	.word	0x40002000

08002058 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 800205e:	4a12      	ldr	r2, [pc, #72]	@ (80020a8 <MX_USART2_UART_Init+0x50>)
 8002060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002062:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 8002064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <MX_USART2_UART_Init+0x4c>)
 8002090:	f004 fe2a 	bl	8006ce8 <HAL_UART_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800209a:	f000 f983 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000037c 	.word	0x2000037c
 80020a8:	40004400 	.word	0x40004400

080020ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <MX_USART3_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <MX_USART3_UART_Init+0x4c>)
 80020e4:	f004 fe00 	bl	8006ce8 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020ee:	f000 f959 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003c4 	.word	0x200003c4
 80020fc:	40004800 	.word	0x40004800

08002100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <MX_DMA_Init+0x3c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a0b      	ldr	r2, [pc, #44]	@ (800213c <MX_DMA_Init+0x3c>)
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <MX_DMA_Init+0x3c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	2038      	movs	r0, #56	@ 0x38
 8002128:	f002 f9fb 	bl	8004522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800212c:	2038      	movs	r0, #56	@ 0x38
 800212e:	f002 fa14 	bl	800455a <HAL_NVIC_EnableIRQ>

}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800

08002140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	@ 0x28
 8002144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
 8002154:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b43      	ldr	r3, [pc, #268]	@ (8002268 <MX_GPIO_Init+0x128>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a42      	ldr	r2, [pc, #264]	@ (8002268 <MX_GPIO_Init+0x128>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b40      	ldr	r3, [pc, #256]	@ (8002268 <MX_GPIO_Init+0x128>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b3c      	ldr	r3, [pc, #240]	@ (8002268 <MX_GPIO_Init+0x128>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a3b      	ldr	r2, [pc, #236]	@ (8002268 <MX_GPIO_Init+0x128>)
 800217c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b39      	ldr	r3, [pc, #228]	@ (8002268 <MX_GPIO_Init+0x128>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	4b35      	ldr	r3, [pc, #212]	@ (8002268 <MX_GPIO_Init+0x128>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a34      	ldr	r2, [pc, #208]	@ (8002268 <MX_GPIO_Init+0x128>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b32      	ldr	r3, [pc, #200]	@ (8002268 <MX_GPIO_Init+0x128>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002268 <MX_GPIO_Init+0x128>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002268 <MX_GPIO_Init+0x128>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002268 <MX_GPIO_Init+0x128>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 80021c6:	2200      	movs	r2, #0
 80021c8:	f640 711c 	movw	r1, #3868	@ 0xf1c
 80021cc:	4827      	ldr	r0, [pc, #156]	@ (800226c <MX_GPIO_Init+0x12c>)
 80021ce:	f002 feef 	bl	8004fb0 <HAL_GPIO_WritePin>
                          |M2_INB_Pin|M1_INA_Pin|M1_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2136      	movs	r1, #54	@ 0x36
 80021d6:	4826      	ldr	r0, [pc, #152]	@ (8002270 <MX_GPIO_Init+0x130>)
 80021d8:	f002 feea 	bl	8004fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021e2:	4824      	ldr	r0, [pc, #144]	@ (8002274 <MX_GPIO_Init+0x134>)
 80021e4:	f002 fee4 	bl	8004fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_INA_Pin M4_INB_Pin TX_EN_Pin M2_INA_Pin
                           M1_INA_Pin M1_INB_Pin */
  GPIO_InitStruct.Pin = M4_INA_Pin|M4_INB_Pin|TX_EN_Pin|M2_INA_Pin
 80021e8:	f640 531c 	movw	r3, #3356	@ 0xd1c
 80021ec:	617b      	str	r3, [r7, #20]
                          |M1_INA_Pin|M1_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	481a      	ldr	r0, [pc, #104]	@ (800226c <MX_GPIO_Init+0x12c>)
 8002202:	f002 fd41 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RX_Pin LED_TX_Pin M3_INA_Pin M3_INB_Pin */
  GPIO_InitStruct.Pin = LED_RX_Pin|LED_TX_Pin|M3_INA_Pin|M3_INB_Pin;
 8002206:	2336      	movs	r3, #54	@ 0x36
 8002208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220a:	2301      	movs	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	4814      	ldr	r0, [pc, #80]	@ (8002270 <MX_GPIO_Init+0x130>)
 800221e:	f002 fd33 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_INB_Pin */
  GPIO_InitStruct.Pin = M2_INB_Pin;
 8002222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_INB_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	480c      	ldr	r0, [pc, #48]	@ (800226c <MX_GPIO_Init+0x12c>)
 800223c:	f002 fd24 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8002240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002246:	2301      	movs	r3, #1
 8002248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4806      	ldr	r0, [pc, #24]	@ (8002274 <MX_GPIO_Init+0x134>)
 800225a:	f002 fd15 	bl	8004c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	@ 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40020800 	.word	0x40020800
 8002270:	40020400 	.word	0x40020400
 8002274:	40020000 	.word	0x40020000

08002278 <HAL_TIM_PeriodElapsedCallback>:
{
    return &hadc1;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002278:	b580      	push	{r7, lr}
 800227a:	ed2d 8b02 	vpush	{d8}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	if(htim == &htim14){
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a20      	ldr	r2, [pc, #128]	@ (8002308 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d104      	bne.n	8002296 <HAL_TIM_PeriodElapsedCallback+0x1e>
		update_Encoder_Data();
 800228c:	f7ff f904 	bl	8001498 <update_Encoder_Data>
		updateMotors();
 8002290:	f000 fc1e 	bl	8002ad0 <updateMotors>
	else if(htim == &htim11){
		//Transmit Telemetry data
		//UART_Transmit_Int(&huart2, "T", HAL_GetTick());
		SendDistanceTelemetry(x_distance, y_distance);
	}
}
 8002294:	e031      	b.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(htim == &htim13){
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a1c      	ldr	r2, [pc, #112]	@ (800230c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11d      	bne.n	80022da <HAL_TIM_PeriodElapsedCallback+0x62>
		Motion_Update(&motion);
 800229e:	481c      	ldr	r0, [pc, #112]	@ (8002310 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80022a0:	f000 f8e6 	bl	8002470 <Motion_Update>
		UpdateControllers(&controller, Motion_XVelocity(&motion), Motion_YVelocity(&motion),  Motion_Omega(&motion), 0);
 80022a4:	481a      	ldr	r0, [pc, #104]	@ (8002310 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80022a6:	f000 f910 	bl	80024ca <Motion_XVelocity>
 80022aa:	eeb0 8a40 	vmov.f32	s16, s0
 80022ae:	4818      	ldr	r0, [pc, #96]	@ (8002310 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80022b0:	f000 f91b 	bl	80024ea <Motion_YVelocity>
 80022b4:	eef0 8a40 	vmov.f32	s17, s0
 80022b8:	4815      	ldr	r0, [pc, #84]	@ (8002310 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80022ba:	f000 f926 	bl	800250a <Motion_Omega>
 80022be:	eef0 7a40 	vmov.f32	s15, s0
 80022c2:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8002314 <HAL_TIM_PeriodElapsedCallback+0x9c>
 80022c6:	eeb0 1a67 	vmov.f32	s2, s15
 80022ca:	eef0 0a68 	vmov.f32	s1, s17
 80022ce:	eeb0 0a48 	vmov.f32	s0, s16
 80022d2:	4811      	ldr	r0, [pc, #68]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022d4:	f7fe ff50 	bl	8001178 <UpdateControllers>
}
 80022d8:	e00f      	b.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(htim == &htim11){
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0f      	ldr	r2, [pc, #60]	@ (800231c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10b      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x82>
		SendDistanceTelemetry(x_distance, y_distance);
 80022e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	eef0 0a47 	vmov.f32	s1, s14
 80022f2:	eeb0 0a67 	vmov.f32	s0, s15
 80022f6:	f7fe fe7f 	bl	8000ff8 <SendDistanceTelemetry>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	ecbd 8b02 	vpop	{d8}
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000334 	.word	0x20000334
 800230c:	200002ec 	.word	0x200002ec
 8002310:	200004a0 	.word	0x200004a0
 8002314:	00000000 	.word	0x00000000
 8002318:	20000478 	.word	0x20000478
 800231c:	200002a4 	.word	0x200002a4
 8002320:	20000048 	.word	0x20000048
 8002324:	2000004c 	.word	0x2000004c

08002328 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a15      	ldr	r2, [pc, #84]	@ (800238c <HAL_UART_RxCpltCallback+0x64>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d123      	bne.n	8002382 <HAL_UART_RxCpltCallback+0x5a>
	    {
//		HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
	        rxIndex++;
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <HAL_UART_RxCpltCallback+0x68>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <HAL_UART_RxCpltCallback+0x68>)
 8002344:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, 1);
 8002346:	2201      	movs	r2, #1
 8002348:	2102      	movs	r1, #2
 800234a:	4812      	ldr	r0, [pc, #72]	@ (8002394 <HAL_UART_RxCpltCallback+0x6c>)
 800234c:	f002 fe30 	bl	8004fb0 <HAL_GPIO_WritePin>

	        if (rxIndex >= 2)
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <HAL_UART_RxCpltCallback+0x68>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d90a      	bls.n	800236e <HAL_UART_RxCpltCallback+0x46>
	        {
	        	HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	2102      	movs	r1, #2
 800235c:	480d      	ldr	r0, [pc, #52]	@ (8002394 <HAL_UART_RxCpltCallback+0x6c>)
 800235e:	f002 fe27 	bl	8004fb0 <HAL_GPIO_WritePin>
	            // Complete command received
	            commandReceived = 1;
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_UART_RxCpltCallback+0x70>)
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
	            rxIndex = 0;
 8002368:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_UART_RxCpltCallback+0x68>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
	            //HAL_UART_Transmit(&huart2, rxBuffer, 2, 100);

	        }

	        // Continue receiving
	        HAL_UART_Receive_IT(&huart3, &rxBuffer[rxIndex], 1);
 800236e:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_UART_RxCpltCallback+0x68>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_UART_RxCpltCallback+0x74>)
 8002376:	4413      	add	r3, r2
 8002378:	2201      	movs	r2, #1
 800237a:	4619      	mov	r1, r3
 800237c:	4808      	ldr	r0, [pc, #32]	@ (80023a0 <HAL_UART_RxCpltCallback+0x78>)
 800237e:	f004 fd8e 	bl	8006e9e <HAL_UART_Receive_IT>
//    HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
//
//    // Restart reception
//    HAL_UART_Receive_IT(&huart3, rx_data, 1);
//  }
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40004800 	.word	0x40004800
 8002390:	20000536 	.word	0x20000536
 8002394:	40020400 	.word	0x40020400
 8002398:	20000537 	.word	0x20000537
 800239c:	20000534 	.word	0x20000534
 80023a0:	200003c4 	.word	0x200003c4

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <Error_Handler+0x8>

080023b0 <Motion_Init>:
#include "config.h"

extern float x_distance;
extern float y_distance;

void Motion_Init(Motion *motion, Controller *controller, Profile *x_profile, Profile *y_profile, Profile *W_profile) {
 80023b0:	b4b0      	push	{r4, r5, r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4614      	mov	r4, r2
 80023c4:	461d      	mov	r5, r3
 80023c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023d2:	e884 0003 	stmia.w	r4, {r0, r1}
    motion->x_profile = *x_profile;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80023de:	4615      	mov	r5, r2
 80023e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	6023      	str	r3, [r4, #0]
    motion->y_profile = *y_profile;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 80023f4:	4615      	mov	r5, r2
 80023f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fe:	682b      	ldr	r3, [r5, #0]
 8002400:	6023      	str	r3, [r4, #0]
    motion->W_profile = *W_profile;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a3a      	ldr	r2, [r7, #32]
 8002406:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 800240a:	4615      	mov	r5, r2
 800240c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	6023      	str	r3, [r4, #0]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bcb0      	pop	{r4, r5, r7}
 8002420:	4770      	bx	lr

08002422 <Motion_ResetDriveSystem>:


void Motion_ResetDriveSystem(Motion *motion) {
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
	Motion_Stop(motion);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f837 	bl	800249e <Motion_Stop>
	Motion_DisableDrive(motion);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f83e 	bl	80024b2 <Motion_DisableDrive>
    resetEncoders();
 8002436:	f7fe ffe1 	bl	80013fc <resetEncoders>
    Profile_Reset(&(motion->x_profile));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3328      	adds	r3, #40	@ 0x28
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fea8 	bl	8003194 <Profile_Reset>
    Profile_Reset(&(motion->y_profile));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	334c      	adds	r3, #76	@ 0x4c
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fea3 	bl	8003194 <Profile_Reset>
    Profile_Reset(&(motion->W_profile));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3370      	adds	r3, #112	@ 0x70
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fe9e 	bl	8003194 <Profile_Reset>
    Controller_ResetControllers(&(motion->controller));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fe69 	bl	8001132 <Controller_ResetControllers>
    Controller_EnableControllers(&(motion->controller));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe ff7e 	bl	8001364 <Controller_EnableControllers>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <Motion_Update>:


void Motion_Update(Motion *motion) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->x_profile));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3328      	adds	r3, #40	@ 0x28
 800247c:	4618      	mov	r0, r3
 800247e:	f000 ff55 	bl	800332c <Profile_Update>
    Profile_Update(&(motion->y_profile));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	334c      	adds	r3, #76	@ 0x4c
 8002486:	4618      	mov	r0, r3
 8002488:	f000 ff50 	bl	800332c <Profile_Update>
    Profile_Update(&(motion->W_profile));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3370      	adds	r3, #112	@ 0x70
 8002490:	4618      	mov	r0, r3
 8002492:	f000 ff4b 	bl	800332c <Profile_Update>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <Motion_Stop>:

void Motion_Stop(Motion *motion) {
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	Controller_Stop();
 80024a6:	f7fe ff57 	bl	8001358 <Controller_Stop>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <Motion_DisableDrive>:

void Motion_DisableDrive(Motion *motion) {
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	Controller_DisableControllers(&(motion->controller));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe ff5f 	bl	8001380 <Controller_DisableControllers>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <Motion_XVelocity>:

float Motion_YPosition(Motion *motion) {
    return Profile_GetPosition(&(motion->y_profile));
}

float Motion_XVelocity(Motion *motion) {
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->x_profile));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3328      	adds	r3, #40	@ 0x28
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 f81b 	bl	8003512 <Profile_GetSpeed>
 80024dc:	eef0 7a40 	vmov.f32	s15, s0
}
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <Motion_YVelocity>:

float Motion_YVelocity(Motion *motion) {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->y_profile));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	334c      	adds	r3, #76	@ 0x4c
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 f80b 	bl	8003512 <Profile_GetSpeed>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
}
 8002500:	eeb0 0a67 	vmov.f32	s0, s15
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->W_profile));
}

float Motion_Omega(Motion *motion) {
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->W_profile));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3370      	adds	r3, #112	@ 0x70
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fffb 	bl	8003512 <Profile_GetSpeed>
 800251c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002520:	eeb0 0a67 	vmov.f32	s0, s15
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <Motion_X>:
uint8_t Motion_YMoveFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->y_profile));
}


void Motion_X(Motion *motion, float distance) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	ed87 0a00 	vstr	s0, [r7]
    Profile_Move(&(motion->x_profile), distance, 0.25, 0, 0.05);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3328      	adds	r3, #40	@ 0x28
 800253c:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 8002578 <Motion_X+0x4c>
 8002540:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 800257c <Motion_X+0x50>
 8002544:	eef5 0a00 	vmov.f32	s1, #80	@ 0x3e800000  0.250
 8002548:	ed97 0a00 	vldr	s0, [r7]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 ffb3 	bl	80034b8 <Profile_Move>
    Profile_WaitUntilFinished(&(motion->x_profile));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3328      	adds	r3, #40	@ 0x28
 8002556:	4618      	mov	r0, r3
 8002558:	f000 ffc9 	bl	80034ee <Profile_WaitUntilFinished>
    x_distance += distance;
 800255c:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <Motion_X+0x54>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	edd7 7a00 	vldr	s15, [r7]
 8002566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <Motion_X+0x54>)
 800256c:	edc3 7a00 	vstr	s15, [r3]
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	3d4ccccd 	.word	0x3d4ccccd
 800257c:	00000000 	.word	0x00000000
 8002580:	20000048 	.word	0x20000048

08002584 <Motion_Y>:

void Motion_Y(Motion *motion, float distance) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	ed87 0a00 	vstr	s0, [r7]
    Profile_Start(&(motion->y_profile), distance, vmax_Y, 0, amax_Y);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	334c      	adds	r3, #76	@ 0x4c
 8002594:	4a11      	ldr	r2, [pc, #68]	@ (80025dc <Motion_Y+0x58>)
 8002596:	edd2 7a00 	vldr	s15, [r2]
 800259a:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <Motion_Y+0x5c>)
 800259c:	ed92 7a00 	vldr	s14, [r2]
 80025a0:	eef0 1a47 	vmov.f32	s3, s14
 80025a4:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 80025e4 <Motion_Y+0x60>
 80025a8:	eef0 0a67 	vmov.f32	s1, s15
 80025ac:	ed97 0a00 	vldr	s0, [r7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fe08 	bl	80031c6 <Profile_Start>
    Profile_WaitUntilFinished(&(motion->x_profile));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3328      	adds	r3, #40	@ 0x28
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 ff97 	bl	80034ee <Profile_WaitUntilFinished>
    y_distance += distance;
 80025c0:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <Motion_Y+0x64>)
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	edd7 7a00 	vldr	s15, [r7]
 80025ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <Motion_Y+0x64>)
 80025d0:	edc3 7a00 	vstr	s15, [r3]
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000004 	.word	0x20000004
 80025e0:	20000010 	.word	0x20000010
 80025e4:	00000000 	.word	0x00000000
 80025e8:	2000004c 	.word	0x2000004c

080025ec <Motion_Diagonal_l>:

void Motion_Diagonal_l(Motion *motion, float distance) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	ed87 0a00 	vstr	s0, [r7]
	Profile_Start(&(motion->x_profile), distance, vmax_X, 0, amax_X);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3328      	adds	r3, #40	@ 0x28
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <Motion_Diagonal_l+0x9c>)
 80025fe:	edd2 7a00 	vldr	s15, [r2]
 8002602:	4a22      	ldr	r2, [pc, #136]	@ (800268c <Motion_Diagonal_l+0xa0>)
 8002604:	ed92 7a00 	vldr	s14, [r2]
 8002608:	eef0 1a47 	vmov.f32	s3, s14
 800260c:	ed9f 1a20 	vldr	s2, [pc, #128]	@ 8002690 <Motion_Diagonal_l+0xa4>
 8002610:	eef0 0a67 	vmov.f32	s1, s15
 8002614:	ed97 0a00 	vldr	s0, [r7]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fdd4 	bl	80031c6 <Profile_Start>
    Profile_Start(&(motion->y_profile), distance, vmax_Y, 0, amax_Y);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	334c      	adds	r3, #76	@ 0x4c
 8002622:	4a1c      	ldr	r2, [pc, #112]	@ (8002694 <Motion_Diagonal_l+0xa8>)
 8002624:	edd2 7a00 	vldr	s15, [r2]
 8002628:	4a1b      	ldr	r2, [pc, #108]	@ (8002698 <Motion_Diagonal_l+0xac>)
 800262a:	ed92 7a00 	vldr	s14, [r2]
 800262e:	eef0 1a47 	vmov.f32	s3, s14
 8002632:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8002690 <Motion_Diagonal_l+0xa4>
 8002636:	eef0 0a67 	vmov.f32	s1, s15
 800263a:	ed97 0a00 	vldr	s0, [r7]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fdc1 	bl	80031c6 <Profile_Start>
    Profile_WaitUntilFinished(&(motion->x_profile));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3328      	adds	r3, #40	@ 0x28
 8002648:	4618      	mov	r0, r3
 800264a:	f000 ff50 	bl	80034ee <Profile_WaitUntilFinished>
    Profile_WaitUntilFinished(&(motion->y_profile));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	334c      	adds	r3, #76	@ 0x4c
 8002652:	4618      	mov	r0, r3
 8002654:	f000 ff4b 	bl	80034ee <Profile_WaitUntilFinished>
    x_distance += distance;
 8002658:	4b10      	ldr	r3, [pc, #64]	@ (800269c <Motion_Diagonal_l+0xb0>)
 800265a:	ed93 7a00 	vldr	s14, [r3]
 800265e:	edd7 7a00 	vldr	s15, [r7]
 8002662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <Motion_Diagonal_l+0xb0>)
 8002668:	edc3 7a00 	vstr	s15, [r3]
    y_distance += distance;
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <Motion_Diagonal_l+0xb4>)
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	edd7 7a00 	vldr	s15, [r7]
 8002676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <Motion_Diagonal_l+0xb4>)
 800267c:	edc3 7a00 	vstr	s15, [r3]


}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000000 	.word	0x20000000
 800268c:	2000000c 	.word	0x2000000c
 8002690:	00000000 	.word	0x00000000
 8002694:	20000004 	.word	0x20000004
 8002698:	20000010 	.word	0x20000010
 800269c:	20000048 	.word	0x20000048
 80026a0:	2000004c 	.word	0x2000004c

080026a4 <Motion_Diagonal_r>:

void Motion_Diagonal_r(Motion *motion, float distance) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	ed87 0a00 	vstr	s0, [r7]
	Profile_Start(&(motion->x_profile), distance, vmax_X, 0, amax_X);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3328      	adds	r3, #40	@ 0x28
 80026b4:	4a24      	ldr	r2, [pc, #144]	@ (8002748 <Motion_Diagonal_r+0xa4>)
 80026b6:	edd2 7a00 	vldr	s15, [r2]
 80026ba:	4a24      	ldr	r2, [pc, #144]	@ (800274c <Motion_Diagonal_r+0xa8>)
 80026bc:	ed92 7a00 	vldr	s14, [r2]
 80026c0:	eef0 1a47 	vmov.f32	s3, s14
 80026c4:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8002750 <Motion_Diagonal_r+0xac>
 80026c8:	eef0 0a67 	vmov.f32	s1, s15
 80026cc:	ed97 0a00 	vldr	s0, [r7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fd78 	bl	80031c6 <Profile_Start>
    Profile_Start(&(motion->y_profile), -1 * distance, vmax_Y, 0, amax_Y);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	334c      	adds	r3, #76	@ 0x4c
 80026da:	edd7 7a00 	vldr	s15, [r7]
 80026de:	eef1 7a67 	vneg.f32	s15, s15
 80026e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002754 <Motion_Diagonal_r+0xb0>)
 80026e4:	ed92 7a00 	vldr	s14, [r2]
 80026e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002758 <Motion_Diagonal_r+0xb4>)
 80026ea:	edd2 6a00 	vldr	s13, [r2]
 80026ee:	eef0 1a66 	vmov.f32	s3, s13
 80026f2:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8002750 <Motion_Diagonal_r+0xac>
 80026f6:	eef0 0a47 	vmov.f32	s1, s14
 80026fa:	eeb0 0a67 	vmov.f32	s0, s15
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fd61 	bl	80031c6 <Profile_Start>
    Profile_WaitUntilFinished(&(motion->x_profile));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3328      	adds	r3, #40	@ 0x28
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fef0 	bl	80034ee <Profile_WaitUntilFinished>
    Profile_WaitUntilFinished(&(motion->y_profile));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	334c      	adds	r3, #76	@ 0x4c
 8002712:	4618      	mov	r0, r3
 8002714:	f000 feeb 	bl	80034ee <Profile_WaitUntilFinished>
    x_distance += distance;
 8002718:	4b10      	ldr	r3, [pc, #64]	@ (800275c <Motion_Diagonal_r+0xb8>)
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	edd7 7a00 	vldr	s15, [r7]
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <Motion_Diagonal_r+0xb8>)
 8002728:	edc3 7a00 	vstr	s15, [r3]
	y_distance += distance;
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <Motion_Diagonal_r+0xbc>)
 800272e:	ed93 7a00 	vldr	s14, [r3]
 8002732:	edd7 7a00 	vldr	s15, [r7]
 8002736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273a:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <Motion_Diagonal_r+0xbc>)
 800273c:	edc3 7a00 	vstr	s15, [r3]
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000000 	.word	0x20000000
 800274c:	2000000c 	.word	0x2000000c
 8002750:	00000000 	.word	0x00000000
 8002754:	20000004 	.word	0x20000004
 8002758:	20000010 	.word	0x20000010
 800275c:	20000048 	.word	0x20000048
 8002760:	2000004c 	.word	0x2000004c

08002764 <Motion_Rotate_CW>:



void Motion_Rotate_CW(Motion *motion, float angle){
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	ed87 0a00 	vstr	s0, [r7]
	Profile_Start(&(motion->W_profile), angle, wmax_Z, 0, amax_Z);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3370      	adds	r3, #112	@ 0x70
 8002774:	4a0c      	ldr	r2, [pc, #48]	@ (80027a8 <Motion_Rotate_CW+0x44>)
 8002776:	edd2 7a00 	vldr	s15, [r2]
 800277a:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <Motion_Rotate_CW+0x48>)
 800277c:	ed92 7a00 	vldr	s14, [r2]
 8002780:	eef0 1a47 	vmov.f32	s3, s14
 8002784:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80027b0 <Motion_Rotate_CW+0x4c>
 8002788:	eef0 0a67 	vmov.f32	s1, s15
 800278c:	ed97 0a00 	vldr	s0, [r7]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fd18 	bl	80031c6 <Profile_Start>
	Profile_WaitUntilFinished(&(motion->W_profile));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3370      	adds	r3, #112	@ 0x70
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fea7 	bl	80034ee <Profile_WaitUntilFinished>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000008 	.word	0x20000008
 80027ac:	20000014 	.word	0x20000014
 80027b0:	00000000 	.word	0x00000000

080027b4 <Motion_Rotate_CCW>:

void Motion_Rotate_CCW(Motion *motion, float angle){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	ed87 0a00 	vstr	s0, [r7]
	Profile_Start(&(motion->W_profile), -1 * angle, wmax_Z, 0, amax_Z);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3370      	adds	r3, #112	@ 0x70
 80027c4:	edd7 7a00 	vldr	s15, [r7]
 80027c8:	eef1 7a67 	vneg.f32	s15, s15
 80027cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002800 <Motion_Rotate_CCW+0x4c>)
 80027ce:	ed92 7a00 	vldr	s14, [r2]
 80027d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002804 <Motion_Rotate_CCW+0x50>)
 80027d4:	edd2 6a00 	vldr	s13, [r2]
 80027d8:	eef0 1a66 	vmov.f32	s3, s13
 80027dc:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8002808 <Motion_Rotate_CCW+0x54>
 80027e0:	eef0 0a47 	vmov.f32	s1, s14
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fcec 	bl	80031c6 <Profile_Start>
	Profile_WaitUntilFinished(&(motion->W_profile));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3370      	adds	r3, #112	@ 0x70
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fe7b 	bl	80034ee <Profile_WaitUntilFinished>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000008 	.word	0x20000008
 8002804:	20000014 	.word	0x20000014
	...

08002810 <limitPWM>:
volatile float m4_int = 0;




float limitPWM(float pwm) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	ed87 0a01 	vstr	s0, [r7, #4]
    if (pwm > PWM_MAX)
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fd fe58 	bl	80004d0 <__aeabi_f2d>
 8002820:	a313      	add	r3, pc, #76	@ (adr r3, 8002870 <limitPWM+0x60>)
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	f7fe f93b 	bl	8000aa0 <__aeabi_dcmpgt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <limitPWM+0x24>
        return PWM_MAX;
 8002830:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <limitPWM+0x58>)
 8002832:	e00d      	b.n	8002850 <limitPWM+0x40>
    else if (pwm < -PWM_MAX)
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fd fe4b 	bl	80004d0 <__aeabi_f2d>
 800283a:	a309      	add	r3, pc, #36	@ (adr r3, 8002860 <limitPWM+0x50>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fe f910 	bl	8000a64 <__aeabi_dcmplt>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <limitPWM+0x3e>
        return -PWM_MAX;
 800284a:	4b08      	ldr	r3, [pc, #32]	@ (800286c <limitPWM+0x5c>)
 800284c:	e000      	b.n	8002850 <limitPWM+0x40>
    return pwm;
 800284e:	687b      	ldr	r3, [r7, #4]
}
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eeb0 0a67 	vmov.f32	s0, s15
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	7ae147ae 	.word	0x7ae147ae
 8002864:	bfefae14 	.word	0xbfefae14
 8002868:	3f7d70a4 	.word	0x3f7d70a4
 800286c:	bf7d70a4 	.word	0xbf7d70a4
 8002870:	7ae147ae 	.word	0x7ae147ae
 8002874:	3fefae14 	.word	0x3fefae14

08002878 <setForwardLeftMotorPWM>:

void setForwardLeftMotorPWM(float pwm) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8002882:	ed97 0a01 	vldr	s0, [r7, #4]
 8002886:	f7ff ffc3 	bl	8002810 <limitPWM>
 800288a:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 800288e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	db0f      	blt.n	80028bc <setForwardLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M1_INA = PC10, M1_INB = PC11
        // Reset bit 10 and Set bit 11 simultaneously
        GPIOC->BSRR = (1U << (10 + 16)) | (1U << 11);
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <setForwardLeftMotorPWM+0x70>)
 800289e:	4a13      	ldr	r2, [pc, #76]	@ (80028ec <setForwardLeftMotorPWM+0x74>)
 80028a0:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 80028a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028a6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80028f0 <setForwardLeftMotorPWM+0x78>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <setForwardLeftMotorPWM+0x7c>)
 80028b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b4:	ee17 2a90 	vmov	r2, s15
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34
        // Reverse direction: INA=1, INB=0
        // Set bit 10 and Reset bit 11 simultaneously
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80028ba:	e010      	b.n	80028de <setForwardLeftMotorPWM+0x66>
        GPIOC->BSRR = (1U << 10) | (1U << (11 + 16));
 80028bc:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <setForwardLeftMotorPWM+0x70>)
 80028be:	4a0e      	ldr	r2, [pc, #56]	@ (80028f8 <setForwardLeftMotorPWM+0x80>)
 80028c0:	619a      	str	r2, [r3, #24]
        TIM1->CCR1 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80028c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028c6:	eef1 7a67 	vneg.f32	s15, s15
 80028ca:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80028f0 <setForwardLeftMotorPWM+0x78>
 80028ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <setForwardLeftMotorPWM+0x7c>)
 80028d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d8:	ee17 2a90 	vmov	r2, s15
 80028dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40020800 	.word	0x40020800
 80028ec:	04000800 	.word	0x04000800
 80028f0:	45e0f800 	.word	0x45e0f800
 80028f4:	40010000 	.word	0x40010000
 80028f8:	08000400 	.word	0x08000400

080028fc <setForwardRightMotorPWM>:

void setForwardRightMotorPWM(float pwm) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8002906:	ed97 0a01 	vldr	s0, [r7, #4]
 800290a:	f7ff ff81 	bl	8002810 <limitPWM>
 800290e:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002912:	edd7 7a01 	vldr	s15, [r7, #4]
 8002916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291e:	db0f      	blt.n	8002940 <setForwardRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M2_INA = PC8, M2_INB = PC9
        // Set bit 8 and Reset bit 9 simultaneously
        GPIOC->BSRR = (1U << 8) | (1U << (9 + 16));
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <setForwardRightMotorPWM+0x70>)
 8002922:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <setForwardRightMotorPWM+0x74>)
 8002924:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002926:	edd7 7a01 	vldr	s15, [r7, #4]
 800292a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002974 <setForwardRightMotorPWM+0x78>
 800292e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002932:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <setForwardRightMotorPWM+0x7c>)
 8002934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002938:	ee17 2a90 	vmov	r2, s15
 800293c:	639a      	str	r2, [r3, #56]	@ 0x38
        // Reverse direction: INA=0, INB=1
        // Reset bit 8 and Set bit 9 simultaneously
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 800293e:	e010      	b.n	8002962 <setForwardRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (8 + 16)) | (1U << 9);
 8002940:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <setForwardRightMotorPWM+0x70>)
 8002942:	4a0e      	ldr	r2, [pc, #56]	@ (800297c <setForwardRightMotorPWM+0x80>)
 8002944:	619a      	str	r2, [r3, #24]
        TIM1->CCR2 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8002946:	edd7 7a01 	vldr	s15, [r7, #4]
 800294a:	eef1 7a67 	vneg.f32	s15, s15
 800294e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002974 <setForwardRightMotorPWM+0x78>
 8002952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <setForwardRightMotorPWM+0x7c>)
 8002958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800295c:	ee17 2a90 	vmov	r2, s15
 8002960:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40020800 	.word	0x40020800
 8002970:	02000100 	.word	0x02000100
 8002974:	45e0f800 	.word	0x45e0f800
 8002978:	40010000 	.word	0x40010000
 800297c:	01000200 	.word	0x01000200

08002980 <setRearLeftMotorPWM>:

void setRearLeftMotorPWM(float pwm) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 800298a:	ed97 0a01 	vldr	s0, [r7, #4]
 800298e:	f7ff ff3f 	bl	8002810 <limitPWM>
 8002992:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002996:	edd7 7a01 	vldr	s15, [r7, #4]
 800299a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	db0f      	blt.n	80029c4 <setRearLeftMotorPWM+0x44>
        // Forward direction: INA=0, INB=1
        // M3_INA = PB4, M3_INB = PB5
        // Reset bit 4 and Set bit 5 simultaneously
        GPIOB->BSRR = (1U << (4 + 16)) | (1U << 5);
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <setRearLeftMotorPWM+0x70>)
 80029a6:	4a13      	ldr	r2, [pc, #76]	@ (80029f4 <setRearLeftMotorPWM+0x74>)
 80029a8:	619a      	str	r2, [r3, #24]
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 0);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 1);
        TIM1->CCR3 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 80029aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ae:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80029f8 <setRearLeftMotorPWM+0x78>
 80029b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <setRearLeftMotorPWM+0x7c>)
 80029b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029bc:	ee17 2a90 	vmov	r2, s15
 80029c0:	63da      	str	r2, [r3, #60]	@ 0x3c
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
    	//HAL_GPIO_WritePin(M3_INA_GPIO_Port, M3_INA_Pin, 1);
    	//HAL_GPIO_WritePin(M3_INB_GPIO_Port, M3_INB_Pin, 0);
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 80029c2:	e010      	b.n	80029e6 <setRearLeftMotorPWM+0x66>
        GPIOB->BSRR = (1U << 4) | (1U << (5 + 16));
 80029c4:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <setRearLeftMotorPWM+0x70>)
 80029c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a00 <setRearLeftMotorPWM+0x80>)
 80029c8:	619a      	str	r2, [r3, #24]
        TIM1->CCR3 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 80029ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ce:	eef1 7a67 	vneg.f32	s15, s15
 80029d2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80029f8 <setRearLeftMotorPWM+0x78>
 80029d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029da:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <setRearLeftMotorPWM+0x7c>)
 80029dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e0:	ee17 2a90 	vmov	r2, s15
 80029e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40020400 	.word	0x40020400
 80029f4:	00100020 	.word	0x00100020
 80029f8:	45e0f800 	.word	0x45e0f800
 80029fc:	40010000 	.word	0x40010000
 8002a00:	00200010 	.word	0x00200010

08002a04 <setRearRightMotorPWM>:

void setRearRightMotorPWM(float pwm) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Limit PWM value
    pwm = limitPWM(pwm);
 8002a0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a12:	f7ff fefd 	bl	8002810 <limitPWM>
 8002a16:	ed87 0a01 	vstr	s0, [r7, #4]

    if (pwm >= 0) {
 8002a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	db0f      	blt.n	8002a48 <setRearRightMotorPWM+0x44>
        // Forward direction: INA=1, INB=0
        // M4_INA = PC2, M4_INB = PC3
        // Set bit 2 and Reset bit 3 simultaneously
        GPIOC->BSRR = (1U << 2) | (1U << (3 + 16));
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <setRearRightMotorPWM+0x70>)
 8002a2a:	4a13      	ldr	r2, [pc, #76]	@ (8002a78 <setRearRightMotorPWM+0x74>)
 8002a2c:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(pwm * MAX_TIMER_COUNTS);
 8002a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a32:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002a7c <setRearRightMotorPWM+0x78>
 8002a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <setRearRightMotorPWM+0x7c>)
 8002a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a40:	ee17 2a90 	vmov	r2, s15
 8002a44:	641a      	str	r2, [r3, #64]	@ 0x40
        // Reverse direction: INA=0, INB=1
        // Reset bit 2 and Set bit 3 simultaneously
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
    }
}
 8002a46:	e010      	b.n	8002a6a <setRearRightMotorPWM+0x66>
        GPIOC->BSRR = (1U << (2 + 16)) | (1U << 3);
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <setRearRightMotorPWM+0x70>)
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <setRearRightMotorPWM+0x80>)
 8002a4c:	619a      	str	r2, [r3, #24]
        TIM1->CCR4 = (uint32_t)(-pwm * MAX_TIMER_COUNTS);
 8002a4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a52:	eef1 7a67 	vneg.f32	s15, s15
 8002a56:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002a7c <setRearRightMotorPWM+0x78>
 8002a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <setRearRightMotorPWM+0x7c>)
 8002a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a64:	ee17 2a90 	vmov	r2, s15
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40020800 	.word	0x40020800
 8002a78:	00080004 	.word	0x00080004
 8002a7c:	45e0f800 	.word	0x45e0f800
 8002a80:	40010000 	.word	0x40010000
 8002a84:	00040008 	.word	0x00040008

08002a88 <resetMotors>:

void resetMotors(void) {
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
    // Stop all motors by setting PWM to 0
    TIM1->CCR1 = 0;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <resetMotors+0x34>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <resetMotors+0x34>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR3 = 0;
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <resetMotors+0x34>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM1->CCR4 = 0;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <resetMotors+0x34>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Set all control pins low simultaneously for each port
    // GPIOC: Reset M1_INA(PC10), M1_INB(PC11), M2_INA(PC8), M2_INB(PC9), M4_INA(PC2), M4_INB(PC3)
    GPIOC->BSRR = (1U << (10 + 16)) | (1U << (11 + 16)) |
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <resetMotors+0x38>)
 8002aa6:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <resetMotors+0x3c>)
 8002aa8:	619a      	str	r2, [r3, #24]
                  (1U << (8 + 16)) | (1U << (9 + 16)) |
                  (1U << (2 + 16)) | (1U << (3 + 16));

    // GPIOB: Reset M3_INA(PB4), M3_INB(PB5)
    GPIOB->BSRR = (1U << (4 + 16)) | (1U << (5 + 16));
 8002aaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <resetMotors+0x40>)
 8002aac:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	0f0c0000 	.word	0x0f0c0000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	00000000 	.word	0x00000000

08002ad0 <updateMotors>:


void updateMotors(){
 8002ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ad4:	b088      	sub	sp, #32
 8002ad6:	af00      	add	r7, sp, #0
    // Calculate velocity errors
	float m1_err = target_wheel_W.front_left - current_wheel_W.front_left;
 8002ad8:	4ba7      	ldr	r3, [pc, #668]	@ (8002d78 <updateMotors+0x2a8>)
 8002ada:	ed93 7a00 	vldr	s14, [r3]
 8002ade:	4ba7      	ldr	r3, [pc, #668]	@ (8002d7c <updateMotors+0x2ac>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae8:	edc7 7a03 	vstr	s15, [r7, #12]
	float m2_err = target_wheel_W.rear_left - current_wheel_W.rear_left;
 8002aec:	4ba2      	ldr	r3, [pc, #648]	@ (8002d78 <updateMotors+0x2a8>)
 8002aee:	ed93 7a01 	vldr	s14, [r3, #4]
 8002af2:	4ba2      	ldr	r3, [pc, #648]	@ (8002d7c <updateMotors+0x2ac>)
 8002af4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afc:	edc7 7a02 	vstr	s15, [r7, #8]
	float m3_err = target_wheel_W.rear_right - current_wheel_W.rear_right;
 8002b00:	4b9d      	ldr	r3, [pc, #628]	@ (8002d78 <updateMotors+0x2a8>)
 8002b02:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b06:	4b9d      	ldr	r3, [pc, #628]	@ (8002d7c <updateMotors+0x2ac>)
 8002b08:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b10:	edc7 7a01 	vstr	s15, [r7, #4]
	float m4_err = target_wheel_W.front_right - current_wheel_W.front_right;
 8002b14:	4b98      	ldr	r3, [pc, #608]	@ (8002d78 <updateMotors+0x2a8>)
 8002b16:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b1a:	4b98      	ldr	r3, [pc, #608]	@ (8002d7c <updateMotors+0x2ac>)
 8002b1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b24:	edc7 7a00 	vstr	s15, [r7]




    m1_int += m1_err * LOOP_INTERVAL;
 8002b28:	4b95      	ldr	r3, [pc, #596]	@ (8002d80 <updateMotors+0x2b0>)
 8002b2a:	ed93 7a00 	vldr	s14, [r3]
 8002b2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b36:	4b93      	ldr	r3, [pc, #588]	@ (8002d84 <updateMotors+0x2b4>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b40:	4b90      	ldr	r3, [pc, #576]	@ (8002d84 <updateMotors+0x2b4>)
 8002b42:	edc3 7a00 	vstr	s15, [r3]
    m2_int += m2_err * LOOP_INTERVAL;
 8002b46:	4b8e      	ldr	r3, [pc, #568]	@ (8002d80 <updateMotors+0x2b0>)
 8002b48:	ed93 7a00 	vldr	s14, [r3]
 8002b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b54:	4b8c      	ldr	r3, [pc, #560]	@ (8002d88 <updateMotors+0x2b8>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5e:	4b8a      	ldr	r3, [pc, #552]	@ (8002d88 <updateMotors+0x2b8>)
 8002b60:	edc3 7a00 	vstr	s15, [r3]
    m3_int += m3_err * LOOP_INTERVAL;
 8002b64:	4b86      	ldr	r3, [pc, #536]	@ (8002d80 <updateMotors+0x2b0>)
 8002b66:	ed93 7a00 	vldr	s14, [r3]
 8002b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b72:	4b86      	ldr	r3, [pc, #536]	@ (8002d8c <updateMotors+0x2bc>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7c:	4b83      	ldr	r3, [pc, #524]	@ (8002d8c <updateMotors+0x2bc>)
 8002b7e:	edc3 7a00 	vstr	s15, [r3]
    m4_int += m4_err * LOOP_INTERVAL;
 8002b82:	4b7f      	ldr	r3, [pc, #508]	@ (8002d80 <updateMotors+0x2b0>)
 8002b84:	ed93 7a00 	vldr	s14, [r3]
 8002b88:	edd7 7a00 	vldr	s15, [r7]
 8002b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b90:	4b7f      	ldr	r3, [pc, #508]	@ (8002d90 <updateMotors+0x2c0>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d90 <updateMotors+0x2c0>)
 8002b9c:	edc3 7a00 	vstr	s15, [r3]


    m1_int = clampf(m1_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002ba0:	4b78      	ldr	r3, [pc, #480]	@ (8002d84 <updateMotors+0x2b4>)
 8002ba2:	ed93 7a00 	vldr	s14, [r3]
 8002ba6:	4b7b      	ldr	r3, [pc, #492]	@ (8002d94 <updateMotors+0x2c4>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eef1 7a67 	vneg.f32	s15, s15
 8002bb0:	4b78      	ldr	r3, [pc, #480]	@ (8002d94 <updateMotors+0x2c4>)
 8002bb2:	edd3 6a00 	vldr	s13, [r3]
 8002bb6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bba:	eef0 0a67 	vmov.f32	s1, s15
 8002bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8002bc2:	f7fe fa5b 	bl	800107c <clampf>
 8002bc6:	eef0 7a40 	vmov.f32	s15, s0
 8002bca:	4b6e      	ldr	r3, [pc, #440]	@ (8002d84 <updateMotors+0x2b4>)
 8002bcc:	edc3 7a00 	vstr	s15, [r3]
    m2_int = clampf(m2_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d88 <updateMotors+0x2b8>)
 8002bd2:	ed93 7a00 	vldr	s14, [r3]
 8002bd6:	4b6f      	ldr	r3, [pc, #444]	@ (8002d94 <updateMotors+0x2c4>)
 8002bd8:	edd3 7a00 	vldr	s15, [r3]
 8002bdc:	eef1 7a67 	vneg.f32	s15, s15
 8002be0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d94 <updateMotors+0x2c4>)
 8002be2:	edd3 6a00 	vldr	s13, [r3]
 8002be6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bea:	eef0 0a67 	vmov.f32	s1, s15
 8002bee:	eeb0 0a47 	vmov.f32	s0, s14
 8002bf2:	f7fe fa43 	bl	800107c <clampf>
 8002bf6:	eef0 7a40 	vmov.f32	s15, s0
 8002bfa:	4b63      	ldr	r3, [pc, #396]	@ (8002d88 <updateMotors+0x2b8>)
 8002bfc:	edc3 7a00 	vstr	s15, [r3]
    m3_int = clampf(m3_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002c00:	4b62      	ldr	r3, [pc, #392]	@ (8002d8c <updateMotors+0x2bc>)
 8002c02:	ed93 7a00 	vldr	s14, [r3]
 8002c06:	4b63      	ldr	r3, [pc, #396]	@ (8002d94 <updateMotors+0x2c4>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eef1 7a67 	vneg.f32	s15, s15
 8002c10:	4b60      	ldr	r3, [pc, #384]	@ (8002d94 <updateMotors+0x2c4>)
 8002c12:	edd3 6a00 	vldr	s13, [r3]
 8002c16:	eeb0 1a66 	vmov.f32	s2, s13
 8002c1a:	eef0 0a67 	vmov.f32	s1, s15
 8002c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c22:	f7fe fa2b 	bl	800107c <clampf>
 8002c26:	eef0 7a40 	vmov.f32	s15, s0
 8002c2a:	4b58      	ldr	r3, [pc, #352]	@ (8002d8c <updateMotors+0x2bc>)
 8002c2c:	edc3 7a00 	vstr	s15, [r3]
    m4_int = clampf(m4_int, -MAXINTCLAMP, MAXINTCLAMP);
 8002c30:	4b57      	ldr	r3, [pc, #348]	@ (8002d90 <updateMotors+0x2c0>)
 8002c32:	ed93 7a00 	vldr	s14, [r3]
 8002c36:	4b57      	ldr	r3, [pc, #348]	@ (8002d94 <updateMotors+0x2c4>)
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	eef1 7a67 	vneg.f32	s15, s15
 8002c40:	4b54      	ldr	r3, [pc, #336]	@ (8002d94 <updateMotors+0x2c4>)
 8002c42:	edd3 6a00 	vldr	s13, [r3]
 8002c46:	eeb0 1a66 	vmov.f32	s2, s13
 8002c4a:	eef0 0a67 	vmov.f32	s1, s15
 8002c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002c52:	f7fe fa13 	bl	800107c <clampf>
 8002c56:	eef0 7a40 	vmov.f32	s15, s0
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002d90 <updateMotors+0x2c0>)
 8002c5c:	edc3 7a00 	vstr	s15, [r3]


    float m1_output = Kp_Vel * m1_err + Ki_Vel * m1_int;
 8002c60:	4b4d      	ldr	r3, [pc, #308]	@ (8002d98 <updateMotors+0x2c8>)
 8002c62:	ed93 7a00 	vldr	s14, [r3]
 8002c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d9c <updateMotors+0x2cc>)
 8002c70:	edd3 6a00 	vldr	s13, [r3]
 8002c74:	4b43      	ldr	r3, [pc, #268]	@ (8002d84 <updateMotors+0x2b4>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c82:	edc7 7a07 	vstr	s15, [r7, #28]
    float m2_output = Kp_Vel * m2_err + Ki_Vel * m2_int;
 8002c86:	4b44      	ldr	r3, [pc, #272]	@ (8002d98 <updateMotors+0x2c8>)
 8002c88:	ed93 7a00 	vldr	s14, [r3]
 8002c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c94:	4b41      	ldr	r3, [pc, #260]	@ (8002d9c <updateMotors+0x2cc>)
 8002c96:	edd3 6a00 	vldr	s13, [r3]
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d88 <updateMotors+0x2b8>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc7 7a06 	vstr	s15, [r7, #24]
    float m3_output = Kp_Vel * m3_err + Ki_Vel * m3_int;
 8002cac:	4b3a      	ldr	r3, [pc, #232]	@ (8002d98 <updateMotors+0x2c8>)
 8002cae:	ed93 7a00 	vldr	s14, [r3]
 8002cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cba:	4b38      	ldr	r3, [pc, #224]	@ (8002d9c <updateMotors+0x2cc>)
 8002cbc:	edd3 6a00 	vldr	s13, [r3]
 8002cc0:	4b32      	ldr	r3, [pc, #200]	@ (8002d8c <updateMotors+0x2bc>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cce:	edc7 7a05 	vstr	s15, [r7, #20]
    float m4_output = Kp_Vel * m4_err + Ki_Vel * m4_int;
 8002cd2:	4b31      	ldr	r3, [pc, #196]	@ (8002d98 <updateMotors+0x2c8>)
 8002cd4:	ed93 7a00 	vldr	s14, [r3]
 8002cd8:	edd7 7a00 	vldr	s15, [r7]
 8002cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d9c <updateMotors+0x2cc>)
 8002ce2:	edd3 6a00 	vldr	s13, [r3]
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <updateMotors+0x2c0>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf4:	edc7 7a04 	vstr	s15, [r7, #16]

    //  integral windup prevention
    // If output is saturated, reduce integral term
    if (m1_output > PWM_MAX) {
 8002cf8:	69f8      	ldr	r0, [r7, #28]
 8002cfa:	f7fd fbe9 	bl	80004d0 <__aeabi_f2d>
 8002cfe:	a31c      	add	r3, pc, #112	@ (adr r3, 8002d70 <updateMotors+0x2a0>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fecc 	bl	8000aa0 <__aeabi_dcmpgt>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d04a      	beq.n	8002da4 <updateMotors+0x2d4>
        m1_int -= (m1_output - PWM_MAX) / Ki_Vel;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <updateMotors+0x2b4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fbdc 	bl	80004d0 <__aeabi_f2d>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	69f8      	ldr	r0, [r7, #28]
 8002d1e:	f7fd fbd7 	bl	80004d0 <__aeabi_f2d>
 8002d22:	a313      	add	r3, pc, #76	@ (adr r3, 8002d70 <updateMotors+0x2a0>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fa72 	bl	8000210 <__aeabi_dsub>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4690      	mov	r8, r2
 8002d32:	4699      	mov	r9, r3
 8002d34:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <updateMotors+0x2cc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fbc9 	bl	80004d0 <__aeabi_f2d>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4640      	mov	r0, r8
 8002d44:	4649      	mov	r1, r9
 8002d46:	f7fd fd45 	bl	80007d4 <__aeabi_ddiv>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4620      	mov	r0, r4
 8002d50:	4629      	mov	r1, r5
 8002d52:	f7fd fa5d 	bl	8000210 <__aeabi_dsub>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f7fd fea9 	bl	8000ab4 <__aeabi_d2f>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4a07      	ldr	r2, [pc, #28]	@ (8002d84 <updateMotors+0x2b4>)
 8002d66:	6013      	str	r3, [r2, #0]
        m1_output = PWM_MAX;
 8002d68:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <updateMotors+0x2d0>)
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	e054      	b.n	8002e18 <updateMotors+0x348>
 8002d6e:	bf00      	nop
 8002d70:	7ae147ae 	.word	0x7ae147ae
 8002d74:	3fefae14 	.word	0x3fefae14
 8002d78:	2000006c 	.word	0x2000006c
 8002d7c:	2000005c 	.word	0x2000005c
 8002d80:	08007e08 	.word	0x08007e08
 8002d84:	20000538 	.word	0x20000538
 8002d88:	2000053c 	.word	0x2000053c
 8002d8c:	20000540 	.word	0x20000540
 8002d90:	20000544 	.word	0x20000544
 8002d94:	08007e30 	.word	0x08007e30
 8002d98:	08007e10 	.word	0x08007e10
 8002d9c:	08007e14 	.word	0x08007e14
 8002da0:	3f7d70a4 	.word	0x3f7d70a4
    } else if (m1_output < -PWM_MAX) {
 8002da4:	69f8      	ldr	r0, [r7, #28]
 8002da6:	f7fd fb93 	bl	80004d0 <__aeabi_f2d>
 8002daa:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003070 <updateMotors+0x5a0>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fe58 	bl	8000a64 <__aeabi_dcmplt>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d02e      	beq.n	8002e18 <updateMotors+0x348>
        m1_int -= (m1_output + PWM_MAX) / Ki_Vel;
 8002dba:	4baf      	ldr	r3, [pc, #700]	@ (8003078 <updateMotors+0x5a8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fb86 	bl	80004d0 <__aeabi_f2d>
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	460d      	mov	r5, r1
 8002dc8:	69f8      	ldr	r0, [r7, #28]
 8002dca:	f7fd fb81 	bl	80004d0 <__aeabi_f2d>
 8002dce:	a3a6      	add	r3, pc, #664	@ (adr r3, 8003068 <updateMotors+0x598>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fa1e 	bl	8000214 <__adddf3>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4690      	mov	r8, r2
 8002dde:	4699      	mov	r9, r3
 8002de0:	4ba6      	ldr	r3, [pc, #664]	@ (800307c <updateMotors+0x5ac>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fb73 	bl	80004d0 <__aeabi_f2d>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4640      	mov	r0, r8
 8002df0:	4649      	mov	r1, r9
 8002df2:	f7fd fcef 	bl	80007d4 <__aeabi_ddiv>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	f7fd fa07 	bl	8000210 <__aeabi_dsub>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fd fe53 	bl	8000ab4 <__aeabi_d2f>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4a99      	ldr	r2, [pc, #612]	@ (8003078 <updateMotors+0x5a8>)
 8002e12:	6013      	str	r3, [r2, #0]
        m1_output = -PWM_MAX;
 8002e14:	4b9a      	ldr	r3, [pc, #616]	@ (8003080 <updateMotors+0x5b0>)
 8002e16:	61fb      	str	r3, [r7, #28]
    }

    if (m2_output > PWM_MAX) {
 8002e18:	69b8      	ldr	r0, [r7, #24]
 8002e1a:	f7fd fb59 	bl	80004d0 <__aeabi_f2d>
 8002e1e:	a392      	add	r3, pc, #584	@ (adr r3, 8003068 <updateMotors+0x598>)
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f7fd fe3c 	bl	8000aa0 <__aeabi_dcmpgt>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d02f      	beq.n	8002e8e <updateMotors+0x3be>
        m2_int -= (m2_output - PWM_MAX) / Ki_Vel;
 8002e2e:	4b95      	ldr	r3, [pc, #596]	@ (8003084 <updateMotors+0x5b4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fb4c 	bl	80004d0 <__aeabi_f2d>
 8002e38:	4604      	mov	r4, r0
 8002e3a:	460d      	mov	r5, r1
 8002e3c:	69b8      	ldr	r0, [r7, #24]
 8002e3e:	f7fd fb47 	bl	80004d0 <__aeabi_f2d>
 8002e42:	a389      	add	r3, pc, #548	@ (adr r3, 8003068 <updateMotors+0x598>)
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f7fd f9e2 	bl	8000210 <__aeabi_dsub>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4690      	mov	r8, r2
 8002e52:	4699      	mov	r9, r3
 8002e54:	4b89      	ldr	r3, [pc, #548]	@ (800307c <updateMotors+0x5ac>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb39 	bl	80004d0 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4640      	mov	r0, r8
 8002e64:	4649      	mov	r1, r9
 8002e66:	f7fd fcb5 	bl	80007d4 <__aeabi_ddiv>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f7fd f9cd 	bl	8000210 <__aeabi_dsub>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd fe19 	bl	8000ab4 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a7f      	ldr	r2, [pc, #508]	@ (8003084 <updateMotors+0x5b4>)
 8002e86:	6013      	str	r3, [r2, #0]
        m2_output = PWM_MAX;
 8002e88:	4b7f      	ldr	r3, [pc, #508]	@ (8003088 <updateMotors+0x5b8>)
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	e039      	b.n	8002f02 <updateMotors+0x432>
    } else if (m2_output < -PWM_MAX) {
 8002e8e:	69b8      	ldr	r0, [r7, #24]
 8002e90:	f7fd fb1e 	bl	80004d0 <__aeabi_f2d>
 8002e94:	a376      	add	r3, pc, #472	@ (adr r3, 8003070 <updateMotors+0x5a0>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd fde3 	bl	8000a64 <__aeabi_dcmplt>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02e      	beq.n	8002f02 <updateMotors+0x432>
        m2_int -= (m2_output + PWM_MAX) / Ki_Vel;
 8002ea4:	4b77      	ldr	r3, [pc, #476]	@ (8003084 <updateMotors+0x5b4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb11 	bl	80004d0 <__aeabi_f2d>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	460d      	mov	r5, r1
 8002eb2:	69b8      	ldr	r0, [r7, #24]
 8002eb4:	f7fd fb0c 	bl	80004d0 <__aeabi_f2d>
 8002eb8:	a36b      	add	r3, pc, #428	@ (adr r3, 8003068 <updateMotors+0x598>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd f9a9 	bl	8000214 <__adddf3>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4690      	mov	r8, r2
 8002ec8:	4699      	mov	r9, r3
 8002eca:	4b6c      	ldr	r3, [pc, #432]	@ (800307c <updateMotors+0x5ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fafe 	bl	80004d0 <__aeabi_f2d>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4640      	mov	r0, r8
 8002eda:	4649      	mov	r1, r9
 8002edc:	f7fd fc7a 	bl	80007d4 <__aeabi_ddiv>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f7fd f992 	bl	8000210 <__aeabi_dsub>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f7fd fdde 	bl	8000ab4 <__aeabi_d2f>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4a62      	ldr	r2, [pc, #392]	@ (8003084 <updateMotors+0x5b4>)
 8002efc:	6013      	str	r3, [r2, #0]
        m2_output = -PWM_MAX;
 8002efe:	4b60      	ldr	r3, [pc, #384]	@ (8003080 <updateMotors+0x5b0>)
 8002f00:	61bb      	str	r3, [r7, #24]
    }

    if (m3_output > PWM_MAX) {
 8002f02:	6978      	ldr	r0, [r7, #20]
 8002f04:	f7fd fae4 	bl	80004d0 <__aeabi_f2d>
 8002f08:	a357      	add	r3, pc, #348	@ (adr r3, 8003068 <updateMotors+0x598>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f7fd fdc7 	bl	8000aa0 <__aeabi_dcmpgt>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d02f      	beq.n	8002f78 <updateMotors+0x4a8>
        m3_int -= (m3_output - PWM_MAX) / Ki_Vel;
 8002f18:	4b5c      	ldr	r3, [pc, #368]	@ (800308c <updateMotors+0x5bc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fad7 	bl	80004d0 <__aeabi_f2d>
 8002f22:	4604      	mov	r4, r0
 8002f24:	460d      	mov	r5, r1
 8002f26:	6978      	ldr	r0, [r7, #20]
 8002f28:	f7fd fad2 	bl	80004d0 <__aeabi_f2d>
 8002f2c:	a34e      	add	r3, pc, #312	@ (adr r3, 8003068 <updateMotors+0x598>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	f7fd f96d 	bl	8000210 <__aeabi_dsub>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4690      	mov	r8, r2
 8002f3c:	4699      	mov	r9, r3
 8002f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800307c <updateMotors+0x5ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fac4 	bl	80004d0 <__aeabi_f2d>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4640      	mov	r0, r8
 8002f4e:	4649      	mov	r1, r9
 8002f50:	f7fd fc40 	bl	80007d4 <__aeabi_ddiv>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4620      	mov	r0, r4
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	f7fd f958 	bl	8000210 <__aeabi_dsub>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7fd fda4 	bl	8000ab4 <__aeabi_d2f>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4a47      	ldr	r2, [pc, #284]	@ (800308c <updateMotors+0x5bc>)
 8002f70:	6013      	str	r3, [r2, #0]
        m3_output = PWM_MAX;
 8002f72:	4b45      	ldr	r3, [pc, #276]	@ (8003088 <updateMotors+0x5b8>)
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e039      	b.n	8002fec <updateMotors+0x51c>
    } else if (m3_output < -PWM_MAX) {
 8002f78:	6978      	ldr	r0, [r7, #20]
 8002f7a:	f7fd faa9 	bl	80004d0 <__aeabi_f2d>
 8002f7e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003070 <updateMotors+0x5a0>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f7fd fd6e 	bl	8000a64 <__aeabi_dcmplt>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02e      	beq.n	8002fec <updateMotors+0x51c>
        m3_int -= (m3_output + PWM_MAX) / Ki_Vel;
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800308c <updateMotors+0x5bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fa9c 	bl	80004d0 <__aeabi_f2d>
 8002f98:	4604      	mov	r4, r0
 8002f9a:	460d      	mov	r5, r1
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7fd fa97 	bl	80004d0 <__aeabi_f2d>
 8002fa2:	a331      	add	r3, pc, #196	@ (adr r3, 8003068 <updateMotors+0x598>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd f934 	bl	8000214 <__adddf3>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4690      	mov	r8, r2
 8002fb2:	4699      	mov	r9, r3
 8002fb4:	4b31      	ldr	r3, [pc, #196]	@ (800307c <updateMotors+0x5ac>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd fa89 	bl	80004d0 <__aeabi_f2d>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	f7fd fc05 	bl	80007d4 <__aeabi_ddiv>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4620      	mov	r0, r4
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	f7fd f91d 	bl	8000210 <__aeabi_dsub>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7fd fd69 	bl	8000ab4 <__aeabi_d2f>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4a29      	ldr	r2, [pc, #164]	@ (800308c <updateMotors+0x5bc>)
 8002fe6:	6013      	str	r3, [r2, #0]
        m3_output = -PWM_MAX;
 8002fe8:	4b25      	ldr	r3, [pc, #148]	@ (8003080 <updateMotors+0x5b0>)
 8002fea:	617b      	str	r3, [r7, #20]
    }

    if (m4_output > PWM_MAX) {
 8002fec:	6938      	ldr	r0, [r7, #16]
 8002fee:	f7fd fa6f 	bl	80004d0 <__aeabi_f2d>
 8002ff2:	a31d      	add	r3, pc, #116	@ (adr r3, 8003068 <updateMotors+0x598>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f7fd fd52 	bl	8000aa0 <__aeabi_dcmpgt>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d048      	beq.n	8003094 <updateMotors+0x5c4>
        m4_int -= (m4_output - PWM_MAX) / Ki_Vel;
 8003002:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <updateMotors+0x5c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa62 	bl	80004d0 <__aeabi_f2d>
 800300c:	4604      	mov	r4, r0
 800300e:	460d      	mov	r5, r1
 8003010:	6938      	ldr	r0, [r7, #16]
 8003012:	f7fd fa5d 	bl	80004d0 <__aeabi_f2d>
 8003016:	a314      	add	r3, pc, #80	@ (adr r3, 8003068 <updateMotors+0x598>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd f8f8 	bl	8000210 <__aeabi_dsub>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4690      	mov	r8, r2
 8003026:	4699      	mov	r9, r3
 8003028:	4b14      	ldr	r3, [pc, #80]	@ (800307c <updateMotors+0x5ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fa4f 	bl	80004d0 <__aeabi_f2d>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4640      	mov	r0, r8
 8003038:	4649      	mov	r1, r9
 800303a:	f7fd fbcb 	bl	80007d4 <__aeabi_ddiv>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4620      	mov	r0, r4
 8003044:	4629      	mov	r1, r5
 8003046:	f7fd f8e3 	bl	8000210 <__aeabi_dsub>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fd2f 	bl	8000ab4 <__aeabi_d2f>
 8003056:	4603      	mov	r3, r0
 8003058:	4a0d      	ldr	r2, [pc, #52]	@ (8003090 <updateMotors+0x5c0>)
 800305a:	6013      	str	r3, [r2, #0]
        m4_output = PWM_MAX;
 800305c:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <updateMotors+0x5b8>)
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e052      	b.n	8003108 <updateMotors+0x638>
 8003062:	bf00      	nop
 8003064:	f3af 8000 	nop.w
 8003068:	7ae147ae 	.word	0x7ae147ae
 800306c:	3fefae14 	.word	0x3fefae14
 8003070:	7ae147ae 	.word	0x7ae147ae
 8003074:	bfefae14 	.word	0xbfefae14
 8003078:	20000538 	.word	0x20000538
 800307c:	08007e14 	.word	0x08007e14
 8003080:	bf7d70a4 	.word	0xbf7d70a4
 8003084:	2000053c 	.word	0x2000053c
 8003088:	3f7d70a4 	.word	0x3f7d70a4
 800308c:	20000540 	.word	0x20000540
 8003090:	20000544 	.word	0x20000544
    } else if (m4_output < -PWM_MAX) {
 8003094:	6938      	ldr	r0, [r7, #16]
 8003096:	f7fd fa1b 	bl	80004d0 <__aeabi_f2d>
 800309a:	a32c      	add	r3, pc, #176	@ (adr r3, 800314c <updateMotors+0x67c>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd fce0 	bl	8000a64 <__aeabi_dcmplt>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02e      	beq.n	8003108 <updateMotors+0x638>
        m4_int -= (m4_output + PWM_MAX) / Ki_Vel;
 80030aa:	4b25      	ldr	r3, [pc, #148]	@ (8003140 <updateMotors+0x670>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa0e 	bl	80004d0 <__aeabi_f2d>
 80030b4:	4604      	mov	r4, r0
 80030b6:	460d      	mov	r5, r1
 80030b8:	6938      	ldr	r0, [r7, #16]
 80030ba:	f7fd fa09 	bl	80004d0 <__aeabi_f2d>
 80030be:	a31e      	add	r3, pc, #120	@ (adr r3, 8003138 <updateMotors+0x668>)
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	f7fd f8a6 	bl	8000214 <__adddf3>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4690      	mov	r8, r2
 80030ce:	4699      	mov	r9, r3
 80030d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <updateMotors+0x674>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd f9fb 	bl	80004d0 <__aeabi_f2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4640      	mov	r0, r8
 80030e0:	4649      	mov	r1, r9
 80030e2:	f7fd fb77 	bl	80007d4 <__aeabi_ddiv>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4620      	mov	r0, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	f7fd f88f 	bl	8000210 <__aeabi_dsub>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fd fcdb 	bl	8000ab4 <__aeabi_d2f>
 80030fe:	4603      	mov	r3, r0
 8003100:	4a0f      	ldr	r2, [pc, #60]	@ (8003140 <updateMotors+0x670>)
 8003102:	6013      	str	r3, [r2, #0]
        m4_output = -PWM_MAX;
 8003104:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <updateMotors+0x678>)
 8003106:	613b      	str	r3, [r7, #16]
    }


    setForwardLeftMotorPWM(m1_output);
 8003108:	ed97 0a07 	vldr	s0, [r7, #28]
 800310c:	f7ff fbb4 	bl	8002878 <setForwardLeftMotorPWM>
    setForwardRightMotorPWM(m4_output);
 8003110:	ed97 0a04 	vldr	s0, [r7, #16]
 8003114:	f7ff fbf2 	bl	80028fc <setForwardRightMotorPWM>
    setRearLeftMotorPWM(m2_output);
 8003118:	ed97 0a06 	vldr	s0, [r7, #24]
 800311c:	f7ff fc30 	bl	8002980 <setRearLeftMotorPWM>
    setRearRightMotorPWM(m3_output);
 8003120:	ed97 0a05 	vldr	s0, [r7, #20]
 8003124:	f7ff fc6e 	bl	8002a04 <setRearRightMotorPWM>
}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003132:	bf00      	nop
 8003134:	f3af 8000 	nop.w
 8003138:	7ae147ae 	.word	0x7ae147ae
 800313c:	3fefae14 	.word	0x3fefae14
 8003140:	20000544 	.word	0x20000544
 8003144:	08007e14 	.word	0x08007e14
 8003148:	bf7d70a4 	.word	0xbf7d70a4
 800314c:	7ae147ae 	.word	0x7ae147ae
 8003150:	bfefae14 	.word	0xbfefae14

08003154 <setTargetVelocities>:
    m3_int = 0;
    m4_int = 0;
}


void setTargetVelocities(float m1_target, float m2_target, float m3_target, float m4_target) {
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	ed87 0a03 	vstr	s0, [r7, #12]
 800315e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003162:	ed87 1a01 	vstr	s2, [r7, #4]
 8003166:	edc7 1a00 	vstr	s3, [r7]
	target_wheel_W.front_left = m1_target;
 800316a:	4a09      	ldr	r2, [pc, #36]	@ (8003190 <setTargetVelocities+0x3c>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6013      	str	r3, [r2, #0]
	target_wheel_W.rear_left = m2_target;
 8003170:	4a07      	ldr	r2, [pc, #28]	@ (8003190 <setTargetVelocities+0x3c>)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6053      	str	r3, [r2, #4]
	target_wheel_W.rear_right = m3_target;
 8003176:	4a06      	ldr	r2, [pc, #24]	@ (8003190 <setTargetVelocities+0x3c>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6093      	str	r3, [r2, #8]
	target_wheel_W.front_right = m4_target;
 800317c:	4a04      	ldr	r2, [pc, #16]	@ (8003190 <setTargetVelocities+0x3c>)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	60d3      	str	r3, [r2, #12]

}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	2000006c 	.word	0x2000006c

08003194 <Profile_Reset>:
#include "bluetoothDebug.h"

extern UART_HandleTypeDef huart2;

// Reset the profile
void Profile_Reset(Profile *profile) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 80031c6:	b480      	push	{r7}
 80031c8:	b087      	sub	sp, #28
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6178      	str	r0, [r7, #20]
 80031ce:	ed87 0a04 	vstr	s0, [r7, #16]
 80031d2:	edc7 0a03 	vstr	s1, [r7, #12]
 80031d6:	ed87 1a02 	vstr	s2, [r7, #8]
 80031da:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 80031de:	edd7 7a04 	vldr	s15, [r7, #16]
 80031e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	d502      	bpl.n	80031f2 <Profile_Start+0x2c>
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	e000      	b.n	80031f4 <Profile_Start+0x2e>
 80031f2:	2201      	movs	r2, #1
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 80031f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80031fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	d505      	bpl.n	8003212 <Profile_Start+0x4c>
 8003206:	edd7 7a04 	vldr	s15, [r7, #16]
 800320a:	eef1 7a67 	vneg.f32	s15, s15
 800320e:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 8003212:	edd7 7a04 	vldr	s15, [r7, #16]
 8003216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800321a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	d503      	bpl.n	800322c <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2203      	movs	r2, #3
 8003228:	701a      	strb	r2, [r3, #0]
        return;
 800322a:	e052      	b.n	80032d2 <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 800322c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003230:	edd7 7a03 	vldr	s15, [r7, #12]
 8003234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	dd01      	ble.n	8003242 <Profile_Start+0x7c>
        final_speed = top_speed;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800325e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003262:	eef0 7ae7 	vabs.f32	s15, s15
 8003266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800327e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003282:	eef0 7ae7 	vabs.f32	s15, s15
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 8003290:	edd7 7a01 	vldr	s15, [r7, #4]
 8003294:	eef0 7ae7 	vabs.f32	s15, s15
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80032a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b0:	db07      	blt.n	80032c2 <Profile_Start+0xfc>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80032b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c0:	e001      	b.n	80032c6 <Profile_Start+0x100>
 80032c2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
}
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80032f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	edd3 6a07 	vldr	s13, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8003300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003308:	eef0 7ae7 	vabs.f32	s15, s15
 800330c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003310:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	edd3 7a05 	vldr	s15, [r3, #20]
 800331a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800331e:	eeb0 0a67 	vmov.f32	s0, s15
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <Profile_Update>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80b5 	beq.w	80034aa <Profile_Update+0x17e>

    float delta_v = profile->acceleration * CONTROLLER_LOOP_INTERVAL;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	ed93 7a04 	vldr	s14, [r3, #16]
 8003346:	4b5b      	ldr	r3, [pc, #364]	@ (80034b4 <Profile_Update+0x188>)
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003350:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	edd3 7a08 	vldr	s15, [r3, #32]
 800335a:	eeb0 7ae7 	vabs.f32	s14, s15
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	edd3 7a02 	vldr	s15, [r3, #8]
 8003364:	eef0 7ae7 	vabs.f32	s15, s15
 8003368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800336c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d128      	bne.n	80033cc <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ffae 	bl	80032dc <Profile_GetBrakingDistance>
 8003380:	eeb0 7a40 	vmov.f32	s14, s0
 8003384:	edd7 7a02 	vldr	s15, [r7, #8]
 8003388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	d51c      	bpl.n	80033cc <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	edd3 7a07 	vldr	s15, [r3, #28]
 800339e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d10b      	bne.n	80033c0 <Profile_Update+0x94>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033b6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80033ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033be:	e002      	b.n	80033c6 <Profile_Update+0x9a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80033d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	d519      	bpl.n	8003416 <Profile_Update+0xea>
        profile->speed += delta_v;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80033e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8003402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	dd28      	ble.n	800345e <Profile_Update+0x132>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	e023      	b.n	800345e <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	ed93 7a01 	vldr	s14, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	dd18      	ble.n	800345e <Profile_Update+0x132>
        profile->speed -= delta_v;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003432:	edd7 7a03 	vldr	s15, [r7, #12]
 8003436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	ed93 7a01 	vldr	s14, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	edd3 7a06 	vldr	s15, [r3, #24]
 800344c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003454:	d503      	bpl.n	800345e <Profile_Update+0x132>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * CONTROLLER_LOOP_INTERVAL;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	ed93 7a01 	vldr	s14, [r3, #4]
 8003464:	4b13      	ldr	r3, [pc, #76]	@ (80034b4 <Profile_Update+0x188>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	edd3 7a02 	vldr	s15, [r3, #8]
 8003474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b03      	cmp	r3, #3
 8003486:	d011      	beq.n	80034ac <Profile_Update+0x180>
 8003488:	edd7 7a02 	vldr	s15, [r7, #8]
 800348c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8003490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	d508      	bpl.n	80034ac <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69da      	ldr	r2, [r3, #28]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	619a      	str	r2, [r3, #24]
 80034a8:	e000      	b.n	80034ac <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 80034aa:	bf00      	nop
    }
    //UART_Transmit_Float(&huart2, ">V", profile->speed, 2);

}
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	08007e0c 	.word	0x08007e0c

080034b8 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6178      	str	r0, [r7, #20]
 80034c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80034c4:	edc7 0a03 	vstr	s1, [r7, #12]
 80034c8:	ed87 1a02 	vstr	s2, [r7, #8]
 80034cc:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 80034d0:	edd7 1a01 	vldr	s3, [r7, #4]
 80034d4:	ed97 1a02 	vldr	s2, [r7, #8]
 80034d8:	edd7 0a03 	vldr	s1, [r7, #12]
 80034dc:	ed97 0a04 	vldr	s0, [r7, #16]
 80034e0:	6978      	ldr	r0, [r7, #20]
 80034e2:	f7ff fe70 	bl	80031c6 <Profile_Start>
    //Profile_WaitUntilFinished(profile);
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <Profile_WaitUntilFinished>:
// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 80034f6:	e002      	b.n	80034fe <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 80034f8:	2002      	movs	r0, #2
 80034fa:	f000 fca1 	bl	8003e40 <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b03      	cmp	r3, #3
 8003506:	d1f7      	bne.n	80034f8 <Profile_WaitUntilFinished+0xa>
    }
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <Profile_GetSpeed>:

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
    return profile->speed;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	ee07 3a90 	vmov	s15, r3
}
 8003522:	eeb0 0a67 	vmov.f32	s0, s15
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	4b10      	ldr	r3, [pc, #64]	@ (800357c <HAL_MspInit+0x4c>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	4a0f      	ldr	r2, [pc, #60]	@ (800357c <HAL_MspInit+0x4c>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003544:	6453      	str	r3, [r2, #68]	@ 0x44
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <HAL_MspInit+0x4c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4b09      	ldr	r3, [pc, #36]	@ (800357c <HAL_MspInit+0x4c>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	4a08      	ldr	r2, [pc, #32]	@ (800357c <HAL_MspInit+0x4c>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	@ 0x40
 8003562:	4b06      	ldr	r3, [pc, #24]	@ (800357c <HAL_MspInit+0x4c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800

08003580 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	@ 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2f      	ldr	r2, [pc, #188]	@ (800365c <HAL_ADC_MspInit+0xdc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d157      	bne.n	8003652 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003660 <HAL_ADC_MspInit+0xe0>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003660 <HAL_ADC_MspInit+0xe0>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003660 <HAL_ADC_MspInit+0xe0>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <HAL_ADC_MspInit+0xe0>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	4a26      	ldr	r2, [pc, #152]	@ (8003660 <HAL_ADC_MspInit+0xe0>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_ADC_MspInit+0xe0>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = M1_CS_Pin|M2_CS_Pin|M3_CS_Pin|M4_CS_Pin;
 80035da:	23f0      	movs	r3, #240	@ 0xf0
 80035dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035de:	2303      	movs	r3, #3
 80035e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	481d      	ldr	r0, [pc, #116]	@ (8003664 <HAL_ADC_MspInit+0xe4>)
 80035ee:	f001 fb4b 	bl	8004c88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80035f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 80035f4:	4a1d      	ldr	r2, [pc, #116]	@ (800366c <HAL_ADC_MspInit+0xec>)
 80035f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003604:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800360a:	4b17      	ldr	r3, [pc, #92]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 800360c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003610:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003612:	4b15      	ldr	r3, [pc, #84]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 8003614:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003618:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800361a:	4b13      	ldr	r3, [pc, #76]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 800361c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003620:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003622:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 8003624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003628:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800362a:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 800362c:	2200      	movs	r2, #0
 800362e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003630:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 8003632:	2200      	movs	r2, #0
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003636:	480c      	ldr	r0, [pc, #48]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 8003638:	f000 ffaa 	bl	8004590 <HAL_DMA_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003642:	f7fe feaf 	bl	80023a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a07      	ldr	r2, [pc, #28]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 800364a:	639a      	str	r2, [r3, #56]	@ 0x38
 800364c:	4a06      	ldr	r2, [pc, #24]	@ (8003668 <HAL_ADC_MspInit+0xe8>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003652:	bf00      	nop
 8003654:	3728      	adds	r7, #40	@ 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40012000 	.word	0x40012000
 8003660:	40023800 	.word	0x40023800
 8003664:	40020000 	.word	0x40020000
 8003668:	200000dc 	.word	0x200000dc
 800366c:	40026410 	.word	0x40026410

08003670 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <HAL_TIM_PWM_MspInit+0x58>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d11d      	bne.n	80036be <HAL_TIM_PWM_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <HAL_TIM_PWM_MspInit+0x5c>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	4a10      	ldr	r2, [pc, #64]	@ (80036cc <HAL_TIM_PWM_MspInit+0x5c>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6453      	str	r3, [r2, #68]	@ 0x44
 8003692:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <HAL_TIM_PWM_MspInit+0x5c>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	2019      	movs	r0, #25
 80036a4:	f000 ff3d 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036a8:	2019      	movs	r0, #25
 80036aa:	f000 ff56 	bl	800455a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	201a      	movs	r0, #26
 80036b4:	f000 ff35 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80036b8:	201a      	movs	r0, #26
 80036ba:	f000 ff4e 	bl	800455a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40023800 	.word	0x40023800

080036d0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b090      	sub	sp, #64	@ 0x40
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f0:	d153      	bne.n	800379a <HAL_TIM_Encoder_MspInit+0xca>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036f6:	4b81      	ldr	r3, [pc, #516]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	4a80      	ldr	r2, [pc, #512]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6413      	str	r3, [r2, #64]	@ 0x40
 8003702:	4b7e      	ldr	r3, [pc, #504]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
 8003712:	4b7a      	ldr	r3, [pc, #488]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	4a79      	ldr	r2, [pc, #484]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6313      	str	r3, [r2, #48]	@ 0x30
 800371e:	4b77      	ldr	r3, [pc, #476]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	4b73      	ldr	r3, [pc, #460]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	4a72      	ldr	r2, [pc, #456]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	6313      	str	r3, [r2, #48]	@ 0x30
 800373a:	4b70      	ldr	r3, [pc, #448]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1_EncoderCH1_Pin;
 8003746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	2302      	movs	r3, #2
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	2300      	movs	r3, #0
 8003756:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003758:	2301      	movs	r3, #1
 800375a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH1_GPIO_Port, &GPIO_InitStruct);
 800375c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003760:	4619      	mov	r1, r3
 8003762:	4867      	ldr	r0, [pc, #412]	@ (8003900 <HAL_TIM_Encoder_MspInit+0x230>)
 8003764:	f001 fa90 	bl	8004c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_EncoderCH2_Pin;
 8003768:	2308      	movs	r3, #8
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	2300      	movs	r3, #0
 8003776:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003778:	2301      	movs	r3, #1
 800377a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M1_EncoderCH2_GPIO_Port, &GPIO_InitStruct);
 800377c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003780:	4619      	mov	r1, r3
 8003782:	4860      	ldr	r0, [pc, #384]	@ (8003904 <HAL_TIM_Encoder_MspInit+0x234>)
 8003784:	f001 fa80 	bl	8004c88 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003788:	2200      	movs	r2, #0
 800378a:	2100      	movs	r1, #0
 800378c:	201c      	movs	r0, #28
 800378e:	f000 fec8 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003792:	201c      	movs	r0, #28
 8003794:	f000 fee1 	bl	800455a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003798:	e0ac      	b.n	80038f4 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM3)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a5a      	ldr	r2, [pc, #360]	@ (8003908 <HAL_TIM_Encoder_MspInit+0x238>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d134      	bne.n	800380e <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	4b54      	ldr	r3, [pc, #336]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	4a53      	ldr	r2, [pc, #332]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b4:	4b51      	ldr	r3, [pc, #324]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	4b4d      	ldr	r3, [pc, #308]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	4a4c      	ldr	r2, [pc, #304]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d0:	4b4a      	ldr	r3, [pc, #296]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2_EncoderCH1_Pin|M2_EncoderCH2_Pin;
 80037dc:	23c0      	movs	r3, #192	@ 0xc0
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	2300      	movs	r3, #0
 80037ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ec:	2302      	movs	r3, #2
 80037ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037f4:	4619      	mov	r1, r3
 80037f6:	4845      	ldr	r0, [pc, #276]	@ (800390c <HAL_TIM_Encoder_MspInit+0x23c>)
 80037f8:	f001 fa46 	bl	8004c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	201d      	movs	r0, #29
 8003802:	f000 fe8e 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003806:	201d      	movs	r0, #29
 8003808:	f000 fea7 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 800380c:	e072      	b.n	80038f4 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM4)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3f      	ldr	r2, [pc, #252]	@ (8003910 <HAL_TIM_Encoder_MspInit+0x240>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d134      	bne.n	8003882 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	4a36      	ldr	r2, [pc, #216]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	6413      	str	r3, [r2, #64]	@ 0x40
 8003828:	4b34      	ldr	r3, [pc, #208]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	4b30      	ldr	r3, [pc, #192]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4a2f      	ldr	r2, [pc, #188]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 800383e:	f043 0302 	orr.w	r3, r3, #2
 8003842:	6313      	str	r3, [r2, #48]	@ 0x30
 8003844:	4b2d      	ldr	r3, [pc, #180]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_EncoderCH1_Pin|M3_EncoderCH2_Pin;
 8003850:	23c0      	movs	r3, #192	@ 0xc0
 8003852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003854:	2302      	movs	r3, #2
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385c:	2300      	movs	r3, #0
 800385e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003860:	2302      	movs	r3, #2
 8003862:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003868:	4619      	mov	r1, r3
 800386a:	4826      	ldr	r0, [pc, #152]	@ (8003904 <HAL_TIM_Encoder_MspInit+0x234>)
 800386c:	f001 fa0c 	bl	8004c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003870:	2200      	movs	r2, #0
 8003872:	2100      	movs	r1, #0
 8003874:	201e      	movs	r0, #30
 8003876:	f000 fe54 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800387a:	201e      	movs	r0, #30
 800387c:	f000 fe6d 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 8003880:	e038      	b.n	80038f4 <HAL_TIM_Encoder_MspInit+0x224>
  else if(htim_encoder->Instance==TIM5)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a23      	ldr	r2, [pc, #140]	@ (8003914 <HAL_TIM_Encoder_MspInit+0x244>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d133      	bne.n	80038f4 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	6413      	str	r3, [r2, #64]	@ 0x40
 800389c:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	4b13      	ldr	r3, [pc, #76]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	4a12      	ldr	r2, [pc, #72]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b8:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <HAL_TIM_Encoder_MspInit+0x22c>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_EncoderCH1_Pin|M4_EncoderCH2_Pin;
 80038c4:	2303      	movs	r3, #3
 80038c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038d4:	2302      	movs	r3, #2
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038dc:	4619      	mov	r1, r3
 80038de:	4808      	ldr	r0, [pc, #32]	@ (8003900 <HAL_TIM_Encoder_MspInit+0x230>)
 80038e0:	f001 f9d2 	bl	8004c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	2032      	movs	r0, #50	@ 0x32
 80038ea:	f000 fe1a 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80038ee:	2032      	movs	r0, #50	@ 0x32
 80038f0:	f000 fe33 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 80038f4:	bf00      	nop
 80038f6:	3740      	adds	r7, #64	@ 0x40
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020000 	.word	0x40020000
 8003904:	40020400 	.word	0x40020400
 8003908:	40000400 	.word	0x40000400
 800390c:	40020800 	.word	0x40020800
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00

08003918 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2a      	ldr	r2, [pc, #168]	@ (80039d0 <HAL_TIM_Base_MspInit+0xb8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d116      	bne.n	8003958 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	4b29      	ldr	r3, [pc, #164]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	4a28      	ldr	r2, [pc, #160]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003938:	6453      	str	r3, [r2, #68]	@ 0x44
 800393a:	4b26      	ldr	r3, [pc, #152]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	201a      	movs	r0, #26
 800394c:	f000 fde9 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003950:	201a      	movs	r0, #26
 8003952:	f000 fe02 	bl	800455a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003956:	e036      	b.n	80039c6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM13)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1e      	ldr	r2, [pc, #120]	@ (80039d8 <HAL_TIM_Base_MspInit+0xc0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d116      	bne.n	8003990 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 800396c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003970:	6413      	str	r3, [r2, #64]	@ 0x40
 8003972:	4b18      	ldr	r3, [pc, #96]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	202c      	movs	r0, #44	@ 0x2c
 8003984:	f000 fdcd 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003988:	202c      	movs	r0, #44	@ 0x2c
 800398a:	f000 fde6 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 800398e:	e01a      	b.n	80039c6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a11      	ldr	r2, [pc, #68]	@ (80039dc <HAL_TIM_Base_MspInit+0xc4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d115      	bne.n	80039c6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	4a0c      	ldr	r2, [pc, #48]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039aa:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <HAL_TIM_Base_MspInit+0xbc>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80039b6:	2200      	movs	r2, #0
 80039b8:	2100      	movs	r1, #0
 80039ba:	202d      	movs	r0, #45	@ 0x2d
 80039bc:	f000 fdb1 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80039c0:	202d      	movs	r0, #45	@ 0x2d
 80039c2:	f000 fdca 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40014800 	.word	0x40014800
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40001c00 	.word	0x40001c00
 80039dc:	40002000 	.word	0x40002000

080039e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a12      	ldr	r2, [pc, #72]	@ (8003a48 <HAL_TIM_MspPostInit+0x68>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d11e      	bne.n	8003a40 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_TIM_MspPostInit+0x6c>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	4a10      	ldr	r2, [pc, #64]	@ (8003a4c <HAL_TIM_MspPostInit+0x6c>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a12:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <HAL_TIM_MspPostInit+0x6c>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8003a1e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003a22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4805      	ldr	r0, [pc, #20]	@ (8003a50 <HAL_TIM_MspPostInit+0x70>)
 8003a3c:	f001 f924 	bl	8004c88 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a40:	bf00      	nop
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40020000 	.word	0x40020000

08003a54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	@ 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a45      	ldr	r2, [pc, #276]	@ (8003b88 <HAL_UART_MspInit+0x134>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d12c      	bne.n	8003ad0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	4b44      	ldr	r3, [pc, #272]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	4a43      	ldr	r2, [pc, #268]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a86:	4b41      	ldr	r3, [pc, #260]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	4b3d      	ldr	r3, [pc, #244]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aae:	230c      	movs	r3, #12
 8003ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aba:	2303      	movs	r3, #3
 8003abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003abe:	2307      	movs	r3, #7
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac2:	f107 031c 	add.w	r3, r7, #28
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4831      	ldr	r0, [pc, #196]	@ (8003b90 <HAL_UART_MspInit+0x13c>)
 8003aca:	f001 f8dd 	bl	8004c88 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ace:	e057      	b.n	8003b80 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8003b94 <HAL_UART_MspInit+0x140>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d152      	bne.n	8003b80 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	4b2b      	ldr	r3, [pc, #172]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aea:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b24      	ldr	r3, [pc, #144]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	4a23      	ldr	r2, [pc, #140]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b06:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003b1c:	f043 0302 	orr.w	r3, r3, #2
 8003b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b22:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <HAL_UART_MspInit+0x138>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b3e:	2307      	movs	r3, #7
 8003b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b42:	f107 031c 	add.w	r3, r7, #28
 8003b46:	4619      	mov	r1, r3
 8003b48:	4813      	ldr	r0, [pc, #76]	@ (8003b98 <HAL_UART_MspInit+0x144>)
 8003b4a:	f001 f89d 	bl	8004c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b60:	2307      	movs	r3, #7
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b64:	f107 031c 	add.w	r3, r7, #28
 8003b68:	4619      	mov	r1, r3
 8003b6a:	480c      	ldr	r0, [pc, #48]	@ (8003b9c <HAL_UART_MspInit+0x148>)
 8003b6c:	f001 f88c 	bl	8004c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003b70:	2200      	movs	r2, #0
 8003b72:	2100      	movs	r1, #0
 8003b74:	2027      	movs	r0, #39	@ 0x27
 8003b76:	f000 fcd4 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b7a:	2027      	movs	r0, #39	@ 0x27
 8003b7c:	f000 fced 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 8003b80:	bf00      	nop
 8003b82:	3730      	adds	r7, #48	@ 0x30
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40004400 	.word	0x40004400
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40020000 	.word	0x40020000
 8003b94:	40004800 	.word	0x40004800
 8003b98:	40020800 	.word	0x40020800
 8003b9c:	40020400 	.word	0x40020400

08003ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <NMI_Handler+0x4>

08003ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <HardFault_Handler+0x4>

08003bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <MemManage_Handler+0x4>

08003bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <BusFault_Handler+0x4>

08003bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <UsageFault_Handler+0x4>

08003bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bf6:	f000 f903 	bl	8003e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8003bfa:	f000 f87d 	bl	8003cf8 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c08:	4802      	ldr	r0, [pc, #8]	@ (8003c14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c0a:	f002 fb2f 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	2000013c 	.word	0x2000013c

08003c18 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c1c:	4803      	ldr	r0, [pc, #12]	@ (8003c2c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003c1e:	f002 fb25 	bl	800626c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003c22:	4803      	ldr	r0, [pc, #12]	@ (8003c30 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003c24:	f002 fb22 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	2000013c 	.word	0x2000013c
 8003c30:	200002a4 	.word	0x200002a4

08003c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c38:	4802      	ldr	r0, [pc, #8]	@ (8003c44 <TIM2_IRQHandler+0x10>)
 8003c3a:	f002 fb17 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000184 	.word	0x20000184

08003c48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <TIM3_IRQHandler+0x10>)
 8003c4e:	f002 fb0d 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200001cc 	.word	0x200001cc

08003c5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c60:	4802      	ldr	r0, [pc, #8]	@ (8003c6c <TIM4_IRQHandler+0x10>)
 8003c62:	f002 fb03 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000214 	.word	0x20000214

08003c70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c74:	4802      	ldr	r0, [pc, #8]	@ (8003c80 <USART3_IRQHandler+0x10>)
 8003c76:	f003 f937 	bl	8006ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200003c4 	.word	0x200003c4

08003c84 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003c88:	4802      	ldr	r0, [pc, #8]	@ (8003c94 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003c8a:	f002 faef 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200002ec 	.word	0x200002ec

08003c98 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003c9c:	4802      	ldr	r0, [pc, #8]	@ (8003ca8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003c9e:	f002 fae5 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000334 	.word	0x20000334

08003cac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003cb0:	4802      	ldr	r0, [pc, #8]	@ (8003cbc <TIM5_IRQHandler+0x10>)
 8003cb2:	f002 fadb 	bl	800626c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	2000025c 	.word	0x2000025c

08003cc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	@ (8003cd0 <DMA2_Stream0_IRQHandler+0x10>)
 8003cc6:	f000 fda3 	bl	8004810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200000dc 	.word	0x200000dc

08003cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd8:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <SystemInit+0x20>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	4a05      	ldr	r2, [pc, #20]	@ (8003cf4 <SystemInit+0x20>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <SysTickFunction>:
        // Reset encoders to prevent overflow
        resetEncodersinSystick();
    }
}

void SysTickFunction(void) {
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
        //        current_robot_velocity.vx,
        //        current_robot_velocity.vy,
        //        current_robot_velocity.wz);
    }
    */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d0c:	f7ff ffe2 	bl	8003cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d10:	480c      	ldr	r0, [pc, #48]	@ (8003d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d12:	490d      	ldr	r1, [pc, #52]	@ (8003d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d14:	4a0d      	ldr	r2, [pc, #52]	@ (8003d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d18:	e002      	b.n	8003d20 <LoopCopyDataInit>

08003d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d1e:	3304      	adds	r3, #4

08003d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d24:	d3f9      	bcc.n	8003d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d26:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d28:	4c0a      	ldr	r4, [pc, #40]	@ (8003d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d2c:	e001      	b.n	8003d32 <LoopFillZerobss>

08003d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d30:	3204      	adds	r2, #4

08003d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d34:	d3fb      	bcc.n	8003d2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003d36:	f004 f835 	bl	8007da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d3a:	f7fd fd9b 	bl	8001874 <main>
  bx  lr    
 8003d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d48:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8003d4c:	08007e64 	.word	0x08007e64
  ldr r2, =_sbss
 8003d50:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8003d54:	2000054c 	.word	0x2000054c

08003d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d58:	e7fe      	b.n	8003d58 <ADC_IRQHandler>
	...

08003d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d60:	4b0e      	ldr	r3, [pc, #56]	@ (8003d9c <HAL_Init+0x40>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0d      	ldr	r2, [pc, #52]	@ (8003d9c <HAL_Init+0x40>)
 8003d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <HAL_Init+0x40>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a0a      	ldr	r2, [pc, #40]	@ (8003d9c <HAL_Init+0x40>)
 8003d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d78:	4b08      	ldr	r3, [pc, #32]	@ (8003d9c <HAL_Init+0x40>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a07      	ldr	r2, [pc, #28]	@ (8003d9c <HAL_Init+0x40>)
 8003d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d84:	2003      	movs	r0, #3
 8003d86:	f000 fbc1 	bl	800450c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d8a:	200f      	movs	r0, #15
 8003d8c:	f000 f808 	bl	8003da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d90:	f7ff fbce 	bl	8003530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023c00 	.word	0x40023c00

08003da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003da8:	4b12      	ldr	r3, [pc, #72]	@ (8003df4 <HAL_InitTick+0x54>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_InitTick+0x58>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	4619      	mov	r1, r3
 8003db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fbd9 	bl	8004576 <HAL_SYSTICK_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e00e      	b.n	8003dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b0f      	cmp	r3, #15
 8003dd2:	d80a      	bhi.n	8003dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	f000 fba1 	bl	8004522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de0:	4a06      	ldr	r2, [pc, #24]	@ (8003dfc <HAL_InitTick+0x5c>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e000      	b.n	8003dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000020 	.word	0x20000020
 8003df8:	20000028 	.word	0x20000028
 8003dfc:	20000024 	.word	0x20000024

08003e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_IncTick+0x20>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_IncTick+0x24>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4413      	add	r3, r2
 8003e10:	4a04      	ldr	r2, [pc, #16]	@ (8003e24 <HAL_IncTick+0x24>)
 8003e12:	6013      	str	r3, [r2, #0]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000028 	.word	0x20000028
 8003e24:	20000548 	.word	0x20000548

08003e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <HAL_GetTick+0x14>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000548 	.word	0x20000548

08003e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7ff ffee 	bl	8003e28 <HAL_GetTick>
 8003e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d005      	beq.n	8003e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <HAL_Delay+0x44>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e66:	bf00      	nop
 8003e68:	f7ff ffde 	bl	8003e28 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d8f7      	bhi.n	8003e68 <HAL_Delay+0x28>
  {
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000028 	.word	0x20000028

08003e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e033      	b.n	8003f06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fb6a 	bl	8003580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d118      	bne.n	8003ef8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ece:	f023 0302 	bic.w	r3, r3, #2
 8003ed2:	f043 0202 	orr.w	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f94a 	bl	8004174 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ef6:	e001      	b.n	8003efc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x1c>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e113      	b.n	8004154 <HAL_ADC_ConfigChannel+0x244>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	d925      	bls.n	8003f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	3b1e      	subs	r3, #30
 8003f52:	2207      	movs	r2, #7
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	400a      	ands	r2, r1
 8003f60:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68d9      	ldr	r1, [r3, #12]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4403      	add	r3, r0
 8003f7a:	3b1e      	subs	r3, #30
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	e022      	b.n	8003fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6919      	ldr	r1, [r3, #16]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	400a      	ands	r2, r1
 8003faa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6919      	ldr	r1, [r3, #16]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4403      	add	r3, r0
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d824      	bhi.n	8004020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3b05      	subs	r3, #5
 8003fe8:	221f      	movs	r2, #31
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	4618      	mov	r0, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	3b05      	subs	r3, #5
 8004012:	fa00 f203 	lsl.w	r2, r0, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	635a      	str	r2, [r3, #52]	@ 0x34
 800401e:	e04c      	b.n	80040ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d824      	bhi.n	8004072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	3b23      	subs	r3, #35	@ 0x23
 800403a:	221f      	movs	r2, #31
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43da      	mvns	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	400a      	ands	r2, r1
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	4618      	mov	r0, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	3b23      	subs	r3, #35	@ 0x23
 8004064:	fa00 f203 	lsl.w	r2, r0, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004070:	e023      	b.n	80040ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	3b41      	subs	r3, #65	@ 0x41
 8004084:	221f      	movs	r2, #31
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	400a      	ands	r2, r1
 8004092:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4618      	mov	r0, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	3b41      	subs	r3, #65	@ 0x41
 80040ae:	fa00 f203 	lsl.w	r2, r0, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040ba:	4b29      	ldr	r3, [pc, #164]	@ (8004160 <HAL_ADC_ConfigChannel+0x250>)
 80040bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a28      	ldr	r2, [pc, #160]	@ (8004164 <HAL_ADC_ConfigChannel+0x254>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d10f      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x1d8>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b12      	cmp	r3, #18
 80040ce:	d10b      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004164 <HAL_ADC_ConfigChannel+0x254>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d12b      	bne.n	800414a <HAL_ADC_ConfigChannel+0x23a>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <HAL_ADC_ConfigChannel+0x258>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <HAL_ADC_ConfigChannel+0x1f4>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b11      	cmp	r3, #17
 8004102:	d122      	bne.n	800414a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a11      	ldr	r2, [pc, #68]	@ (8004168 <HAL_ADC_ConfigChannel+0x258>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d111      	bne.n	800414a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004126:	4b11      	ldr	r3, [pc, #68]	@ (800416c <HAL_ADC_ConfigChannel+0x25c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_ADC_ConfigChannel+0x260>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0c9a      	lsrs	r2, r3, #18
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800413c:	e002      	b.n	8004144 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3b01      	subs	r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f9      	bne.n	800413e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40012300 	.word	0x40012300
 8004164:	40012000 	.word	0x40012000
 8004168:	10000012 	.word	0x10000012
 800416c:	20000020 	.word	0x20000020
 8004170:	431bde83 	.word	0x431bde83

08004174 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800417c:	4b79      	ldr	r3, [pc, #484]	@ (8004364 <ADC_Init+0x1f0>)
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	431a      	orrs	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	021a      	lsls	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6899      	ldr	r1, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	4a58      	ldr	r2, [pc, #352]	@ (8004368 <ADC_Init+0x1f4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d022      	beq.n	8004252 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800421a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6899      	ldr	r1, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800423c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6899      	ldr	r1, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	e00f      	b.n	8004272 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004270:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0202 	bic.w	r2, r2, #2
 8004280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7e1b      	ldrb	r3, [r3, #24]
 800428c:	005a      	lsls	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01b      	beq.n	80042d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6859      	ldr	r1, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	3b01      	subs	r3, #1
 80042cc:	035a      	lsls	r2, r3, #13
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	e007      	b.n	80042e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	3b01      	subs	r3, #1
 8004304:	051a      	lsls	r2, r3, #20
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800431c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6899      	ldr	r1, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800432a:	025a      	lsls	r2, r3, #9
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6899      	ldr	r1, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	029a      	lsls	r2, r3, #10
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40012300 	.word	0x40012300
 8004368:	0f000001 	.word	0x0f000001

0800436c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004388:	4013      	ands	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800439c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439e:	4a04      	ldr	r2, [pc, #16]	@ (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	60d3      	str	r3, [r2, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b8:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <__NVIC_GetPriorityGrouping+0x18>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 0307 	and.w	r3, r3, #7
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	db0b      	blt.n	80043fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4907      	ldr	r1, [pc, #28]	@ (8004408 <__NVIC_EnableIRQ+0x38>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2001      	movs	r0, #1
 80043f2:	fa00 f202 	lsl.w	r2, r0, r2
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	@ (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	@ (800445c <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	@ 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
         );
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044d8:	d301      	bcc.n	80044de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044da:	2301      	movs	r3, #1
 80044dc:	e00f      	b.n	80044fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044de:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <SysTick_Config+0x40>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044e6:	210f      	movs	r1, #15
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	f7ff ff8e 	bl	800440c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f0:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <SysTick_Config+0x40>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044f6:	4b04      	ldr	r3, [pc, #16]	@ (8004508 <SysTick_Config+0x40>)
 80044f8:	2207      	movs	r2, #7
 80044fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	e000e010 	.word	0xe000e010

0800450c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff29 	bl	800436c <__NVIC_SetPriorityGrouping>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004534:	f7ff ff3e 	bl	80043b4 <__NVIC_GetPriorityGrouping>
 8004538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	6978      	ldr	r0, [r7, #20]
 8004540:	f7ff ff8e 	bl	8004460 <NVIC_EncodePriority>
 8004544:	4602      	mov	r2, r0
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff5d 	bl	800440c <__NVIC_SetPriority>
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff31 	bl	80043d0 <__NVIC_EnableIRQ>
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ffa2 	bl	80044c8 <SysTick_Config>
 8004584:	4603      	mov	r3, r0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff fc44 	bl	8003e28 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e099      	b.n	80046e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045cc:	e00f      	b.n	80045ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ce:	f7ff fc2b 	bl	8003e28 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d908      	bls.n	80045ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2203      	movs	r2, #3
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e078      	b.n	80046e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e8      	bne.n	80045ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4b38      	ldr	r3, [pc, #224]	@ (80046e8 <HAL_DMA_Init+0x158>)
 8004608:	4013      	ands	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	2b04      	cmp	r3, #4
 8004646:	d107      	bne.n	8004658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	4313      	orrs	r3, r2
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	2b04      	cmp	r3, #4
 8004680:	d117      	bne.n	80046b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa7b 	bl	8004b90 <DMA_CheckFifoParam>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2240      	movs	r2, #64	@ 0x40
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80046ae:	2301      	movs	r3, #1
 80046b0:	e016      	b.n	80046e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa32 	bl	8004b24 <DMA_CalcBaseAndBitshift>
 80046c0:	4603      	mov	r3, r0
 80046c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c8:	223f      	movs	r2, #63	@ 0x3f
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	f010803f 	.word	0xf010803f

080046ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046fa:	f7ff fb95 	bl	8003e28 <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d008      	beq.n	800471e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2280      	movs	r2, #128	@ 0x80
 8004710:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e052      	b.n	80047c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0216 	bic.w	r2, r2, #22
 800472c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800473c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <HAL_DMA_Abort+0x62>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0208 	bic.w	r2, r2, #8
 800475c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800476e:	e013      	b.n	8004798 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004770:	f7ff fb5a 	bl	8003e28 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b05      	cmp	r3, #5
 800477c:	d90c      	bls.n	8004798 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e015      	b.n	80047c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e4      	bne.n	8004770 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047aa:	223f      	movs	r2, #63	@ 0x3f
 80047ac:	409a      	lsls	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d004      	beq.n	80047ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2280      	movs	r2, #128	@ 0x80
 80047e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00c      	b.n	8004804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2205      	movs	r2, #5
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800481c:	4b8e      	ldr	r3, [pc, #568]	@ (8004a58 <HAL_DMA_IRQHandler+0x248>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a8e      	ldr	r2, [pc, #568]	@ (8004a5c <HAL_DMA_IRQHandler+0x24c>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483a:	2208      	movs	r2, #8
 800483c:	409a      	lsls	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01a      	beq.n	800487c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0204 	bic.w	r2, r2, #4
 8004862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	2208      	movs	r2, #8
 800486a:	409a      	lsls	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489e:	2201      	movs	r2, #1
 80048a0:	409a      	lsls	r2, r3
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	f043 0202 	orr.w	r2, r3, #2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b6:	2204      	movs	r2, #4
 80048b8:	409a      	lsls	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	2204      	movs	r2, #4
 80048d6:	409a      	lsls	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e0:	f043 0204 	orr.w	r2, r3, #4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ec:	2210      	movs	r2, #16
 80048ee:	409a      	lsls	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d043      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d03c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490a:	2210      	movs	r2, #16
 800490c:	409a      	lsls	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d024      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
 800493e:	e01f      	b.n	8004980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	e016      	b.n	8004980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d107      	bne.n	8004970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0208 	bic.w	r2, r2, #8
 800496e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004984:	2220      	movs	r2, #32
 8004986:	409a      	lsls	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 808f 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8087 	beq.w	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a6:	2220      	movs	r2, #32
 80049a8:	409a      	lsls	r2, r3
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d136      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0216 	bic.w	r2, r2, #22
 80049c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_DMA_IRQHandler+0x1da>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0208 	bic.w	r2, r2, #8
 80049f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fe:	223f      	movs	r2, #63	@ 0x3f
 8004a00:	409a      	lsls	r2, r3
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d07e      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
        }
        return;
 8004a26:	e079      	b.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01d      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d031      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e02c      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
 8004a56:	bf00      	nop
 8004a58:	20000020 	.word	0x20000020
 8004a5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d023      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
 8004a70:	e01e      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10f      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0210 	bic.w	r2, r2, #16
 8004a8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d032      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d307      	bcc.n	8004af8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f2      	bne.n	8004adc <HAL_DMA_IRQHandler+0x2cc>
 8004af6:	e000      	b.n	8004afa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004af8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	e000      	b.n	8004b1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b1c:	bf00      	nop
    }
  }
}
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	3b10      	subs	r3, #16
 8004b34:	4a14      	ldr	r2, [pc, #80]	@ (8004b88 <DMA_CalcBaseAndBitshift+0x64>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b3e:	4a13      	ldr	r2, [pc, #76]	@ (8004b8c <DMA_CalcBaseAndBitshift+0x68>)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d909      	bls.n	8004b66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b5a:	f023 0303 	bic.w	r3, r3, #3
 8004b5e:	1d1a      	adds	r2, r3, #4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b64:	e007      	b.n	8004b76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	aaaaaaab 	.word	0xaaaaaaab
 8004b8c:	08007e4c 	.word	0x08007e4c

08004b90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11f      	bne.n	8004bea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d856      	bhi.n	8004c5e <DMA_CheckFifoParam+0xce>
 8004bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <DMA_CheckFifoParam+0x28>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004bdb 	.word	0x08004bdb
 8004bc0:	08004bc9 	.word	0x08004bc9
 8004bc4:	08004c5f 	.word	0x08004c5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d046      	beq.n	8004c62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd8:	e043      	b.n	8004c62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004be2:	d140      	bne.n	8004c66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be8:	e03d      	b.n	8004c66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf2:	d121      	bne.n	8004c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d837      	bhi.n	8004c6a <DMA_CheckFifoParam+0xda>
 8004bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004c00 <DMA_CheckFifoParam+0x70>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c17 	.word	0x08004c17
 8004c08:	08004c11 	.word	0x08004c11
 8004c0c:	08004c29 	.word	0x08004c29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e030      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d025      	beq.n	8004c6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c26:	e022      	b.n	8004c6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c30:	d11f      	bne.n	8004c72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c36:	e01c      	b.n	8004c72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d903      	bls.n	8004c46 <DMA_CheckFifoParam+0xb6>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d003      	beq.n	8004c4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c44:	e018      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4a:	e015      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00e      	beq.n	8004c76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c5c:	e00b      	b.n	8004c76 <DMA_CheckFifoParam+0xe6>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e00a      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
      break;
 8004c62:	bf00      	nop
 8004c64:	e008      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
      break;
 8004c66:	bf00      	nop
 8004c68:	e006      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e004      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e002      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <DMA_CheckFifoParam+0xe8>
      break;
 8004c76:	bf00      	nop
    }
  } 
  
  return status; 
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop

08004c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	@ 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	e165      	b.n	8004f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	f040 8154 	bne.w	8004f6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d005      	beq.n	8004cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d130      	bne.n	8004d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d10:	2201      	movs	r2, #1
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 0201 	and.w	r2, r3, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d017      	beq.n	8004d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	2203      	movs	r2, #3
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d123      	bne.n	8004dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	08da      	lsrs	r2, r3, #3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3208      	adds	r2, #8
 8004d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	220f      	movs	r2, #15
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	08da      	lsrs	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3208      	adds	r2, #8
 8004dc6:	69b9      	ldr	r1, [r7, #24]
 8004dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0203 	and.w	r2, r3, #3
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80ae 	beq.w	8004f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	4b5d      	ldr	r3, [pc, #372]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	4a5c      	ldr	r2, [pc, #368]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004f88 <HAL_GPIO_Init+0x300>)
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e2a:	4a58      	ldr	r2, [pc, #352]	@ (8004f8c <HAL_GPIO_Init+0x304>)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	3302      	adds	r3, #2
 8004e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	220f      	movs	r2, #15
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a4f      	ldr	r2, [pc, #316]	@ (8004f90 <HAL_GPIO_Init+0x308>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d025      	beq.n	8004ea2 <HAL_GPIO_Init+0x21a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a4e      	ldr	r2, [pc, #312]	@ (8004f94 <HAL_GPIO_Init+0x30c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01f      	beq.n	8004e9e <HAL_GPIO_Init+0x216>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a4d      	ldr	r2, [pc, #308]	@ (8004f98 <HAL_GPIO_Init+0x310>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d019      	beq.n	8004e9a <HAL_GPIO_Init+0x212>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a4c      	ldr	r2, [pc, #304]	@ (8004f9c <HAL_GPIO_Init+0x314>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_GPIO_Init+0x20e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a4b      	ldr	r2, [pc, #300]	@ (8004fa0 <HAL_GPIO_Init+0x318>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00d      	beq.n	8004e92 <HAL_GPIO_Init+0x20a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a4a      	ldr	r2, [pc, #296]	@ (8004fa4 <HAL_GPIO_Init+0x31c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <HAL_GPIO_Init+0x206>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a49      	ldr	r2, [pc, #292]	@ (8004fa8 <HAL_GPIO_Init+0x320>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d101      	bne.n	8004e8a <HAL_GPIO_Init+0x202>
 8004e86:	2306      	movs	r3, #6
 8004e88:	e00c      	b.n	8004ea4 <HAL_GPIO_Init+0x21c>
 8004e8a:	2307      	movs	r3, #7
 8004e8c:	e00a      	b.n	8004ea4 <HAL_GPIO_Init+0x21c>
 8004e8e:	2305      	movs	r3, #5
 8004e90:	e008      	b.n	8004ea4 <HAL_GPIO_Init+0x21c>
 8004e92:	2304      	movs	r3, #4
 8004e94:	e006      	b.n	8004ea4 <HAL_GPIO_Init+0x21c>
 8004e96:	2303      	movs	r3, #3
 8004e98:	e004      	b.n	8004ea4 <HAL_GPIO_Init+0x21c>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e002      	b.n	8004ea4 <HAL_GPIO_Init+0x21c>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <HAL_GPIO_Init+0x21c>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	f002 0203 	and.w	r2, r2, #3
 8004eaa:	0092      	lsls	r2, r2, #2
 8004eac:	4093      	lsls	r3, r2
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eb4:	4935      	ldr	r1, [pc, #212]	@ (8004f8c <HAL_GPIO_Init+0x304>)
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	089b      	lsrs	r3, r3, #2
 8004eba:	3302      	adds	r3, #2
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8004fac <HAL_GPIO_Init+0x324>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ee6:	4a31      	ldr	r2, [pc, #196]	@ (8004fac <HAL_GPIO_Init+0x324>)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eec:	4b2f      	ldr	r3, [pc, #188]	@ (8004fac <HAL_GPIO_Init+0x324>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f10:	4a26      	ldr	r2, [pc, #152]	@ (8004fac <HAL_GPIO_Init+0x324>)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f16:	4b25      	ldr	r3, [pc, #148]	@ (8004fac <HAL_GPIO_Init+0x324>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4013      	ands	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fac <HAL_GPIO_Init+0x324>)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f40:	4b1a      	ldr	r3, [pc, #104]	@ (8004fac <HAL_GPIO_Init+0x324>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f64:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <HAL_GPIO_Init+0x324>)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b0f      	cmp	r3, #15
 8004f74:	f67f ae96 	bls.w	8004ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	3724      	adds	r7, #36	@ 0x24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40020000 	.word	0x40020000
 8004f94:	40020400 	.word	0x40020400
 8004f98:	40020800 	.word	0x40020800
 8004f9c:	40020c00 	.word	0x40020c00
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40021400 	.word	0x40021400
 8004fa8:	40021800 	.word	0x40021800
 8004fac:	40013c00 	.word	0x40013c00

08004fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fc0:	787b      	ldrb	r3, [r7, #1]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fc6:	887a      	ldrh	r2, [r7, #2]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fcc:	e003      	b.n	8004fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fce:	887b      	ldrh	r3, [r7, #2]
 8004fd0:	041a      	lsls	r2, r3, #16
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	619a      	str	r2, [r3, #24]
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	4b20      	ldr	r3, [pc, #128]	@ (8005074 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8005074 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8005074 <HAL_PWREx_EnableOverDrive+0x90>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800500a:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <HAL_PWREx_EnableOverDrive+0x94>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005010:	f7fe ff0a 	bl	8003e28 <HAL_GetTick>
 8005014:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005016:	e009      	b.n	800502c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005018:	f7fe ff06 	bl	8003e28 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005026:	d901      	bls.n	800502c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e01f      	b.n	800506c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800502c:	4b13      	ldr	r3, [pc, #76]	@ (800507c <HAL_PWREx_EnableOverDrive+0x98>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005038:	d1ee      	bne.n	8005018 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800503a:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005040:	f7fe fef2 	bl	8003e28 <HAL_GetTick>
 8005044:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005046:	e009      	b.n	800505c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005048:	f7fe feee 	bl	8003e28 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005056:	d901      	bls.n	800505c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e007      	b.n	800506c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800505c:	4b07      	ldr	r3, [pc, #28]	@ (800507c <HAL_PWREx_EnableOverDrive+0x98>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005068:	d1ee      	bne.n	8005048 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40023800 	.word	0x40023800
 8005078:	420e0040 	.word	0x420e0040
 800507c:	40007000 	.word	0x40007000
 8005080:	420e0044 	.word	0x420e0044

08005084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0cc      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b68      	ldr	r3, [pc, #416]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d90c      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b65      	ldr	r3, [pc, #404]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b63      	ldr	r3, [pc, #396]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0b8      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d020      	beq.n	800510e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d8:	4b59      	ldr	r3, [pc, #356]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	4a58      	ldr	r2, [pc, #352]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f0:	4b53      	ldr	r3, [pc, #332]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a52      	ldr	r2, [pc, #328]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b50      	ldr	r3, [pc, #320]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	494d      	ldr	r1, [pc, #308]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d044      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	4b47      	ldr	r3, [pc, #284]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d119      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e07f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d003      	beq.n	8005142 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	2b03      	cmp	r3, #3
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	4b3f      	ldr	r3, [pc, #252]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e06f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005152:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e067      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005162:	4b37      	ldr	r3, [pc, #220]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f023 0203 	bic.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4934      	ldr	r1, [pc, #208]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005174:	f7fe fe58 	bl	8003e28 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7fe fe54 	bl	8003e28 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e04f      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	4b2b      	ldr	r3, [pc, #172]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 020c 	and.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d1eb      	bne.n	800517c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b25      	ldr	r3, [pc, #148]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d20c      	bcs.n	80051cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b22      	ldr	r3, [pc, #136]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e032      	b.n	8005232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d8:	4b19      	ldr	r3, [pc, #100]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4916      	ldr	r1, [pc, #88]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f6:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	490e      	ldr	r1, [pc, #56]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800520a:	f000 f855 	bl	80052b8 <HAL_RCC_GetSysClockFreq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	490a      	ldr	r1, [pc, #40]	@ (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 800521c:	5ccb      	ldrb	r3, [r1, r3]
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	4a09      	ldr	r2, [pc, #36]	@ (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005226:	4b09      	ldr	r3, [pc, #36]	@ (800524c <HAL_RCC_ClockConfig+0x1c8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe fdb8 	bl	8003da0 <HAL_InitTick>

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023c00 	.word	0x40023c00
 8005240:	40023800 	.word	0x40023800
 8005244:	08007e34 	.word	0x08007e34
 8005248:	20000020 	.word	0x20000020
 800524c:	20000024 	.word	0x20000024

08005250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005254:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <HAL_RCC_GetHCLKFreq+0x14>)
 8005256:	681b      	ldr	r3, [r3, #0]
}
 8005258:	4618      	mov	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000020 	.word	0x20000020

08005268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800526c:	f7ff fff0 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0a9b      	lsrs	r3, r3, #10
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4903      	ldr	r1, [pc, #12]	@ (800528c <HAL_RCC_GetPCLK1Freq+0x24>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40023800 	.word	0x40023800
 800528c:	08007e44 	.word	0x08007e44

08005290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005294:	f7ff ffdc 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 8005298:	4602      	mov	r2, r0
 800529a:	4b05      	ldr	r3, [pc, #20]	@ (80052b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	0b5b      	lsrs	r3, r3, #13
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	4903      	ldr	r1, [pc, #12]	@ (80052b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a6:	5ccb      	ldrb	r3, [r1, r3]
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40023800 	.word	0x40023800
 80052b4:	08007e44 	.word	0x08007e44

080052b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052bc:	b0ae      	sub	sp, #184	@ 0xb8
 80052be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052de:	4bcb      	ldr	r3, [pc, #812]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	f200 8206 	bhi.w	80056f8 <HAL_RCC_GetSysClockFreq+0x440>
 80052ec:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005329 	.word	0x08005329
 80052f8:	080056f9 	.word	0x080056f9
 80052fc:	080056f9 	.word	0x080056f9
 8005300:	080056f9 	.word	0x080056f9
 8005304:	08005331 	.word	0x08005331
 8005308:	080056f9 	.word	0x080056f9
 800530c:	080056f9 	.word	0x080056f9
 8005310:	080056f9 	.word	0x080056f9
 8005314:	08005339 	.word	0x08005339
 8005318:	080056f9 	.word	0x080056f9
 800531c:	080056f9 	.word	0x080056f9
 8005320:	080056f9 	.word	0x080056f9
 8005324:	08005529 	.word	0x08005529
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4bb9      	ldr	r3, [pc, #740]	@ (8005610 <HAL_RCC_GetSysClockFreq+0x358>)
 800532a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800532e:	e1e7      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005330:	4bb8      	ldr	r3, [pc, #736]	@ (8005614 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005332:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005336:	e1e3      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005338:	4bb4      	ldr	r3, [pc, #720]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005344:	4bb1      	ldr	r3, [pc, #708]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d071      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005350:	4bae      	ldr	r3, [pc, #696]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800535c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005376:	4622      	mov	r2, r4
 8005378:	462b      	mov	r3, r5
 800537a:	f04f 0000 	mov.w	r0, #0
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	0159      	lsls	r1, r3, #5
 8005384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005388:	0150      	lsls	r0, r2, #5
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4621      	mov	r1, r4
 8005390:	1a51      	subs	r1, r2, r1
 8005392:	6439      	str	r1, [r7, #64]	@ 0x40
 8005394:	4629      	mov	r1, r5
 8005396:	eb63 0301 	sbc.w	r3, r3, r1
 800539a:	647b      	str	r3, [r7, #68]	@ 0x44
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80053a8:	4649      	mov	r1, r9
 80053aa:	018b      	lsls	r3, r1, #6
 80053ac:	4641      	mov	r1, r8
 80053ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053b2:	4641      	mov	r1, r8
 80053b4:	018a      	lsls	r2, r1, #6
 80053b6:	4641      	mov	r1, r8
 80053b8:	1a51      	subs	r1, r2, r1
 80053ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053bc:	4649      	mov	r1, r9
 80053be:	eb63 0301 	sbc.w	r3, r3, r1
 80053c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80053d0:	4649      	mov	r1, r9
 80053d2:	00cb      	lsls	r3, r1, #3
 80053d4:	4641      	mov	r1, r8
 80053d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053da:	4641      	mov	r1, r8
 80053dc:	00ca      	lsls	r2, r1, #3
 80053de:	4610      	mov	r0, r2
 80053e0:	4619      	mov	r1, r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	4622      	mov	r2, r4
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ea:	462b      	mov	r3, r5
 80053ec:	460a      	mov	r2, r1
 80053ee:	eb42 0303 	adc.w	r3, r2, r3
 80053f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005400:	4629      	mov	r1, r5
 8005402:	024b      	lsls	r3, r1, #9
 8005404:	4621      	mov	r1, r4
 8005406:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800540a:	4621      	mov	r1, r4
 800540c:	024a      	lsls	r2, r1, #9
 800540e:	4610      	mov	r0, r2
 8005410:	4619      	mov	r1, r3
 8005412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005416:	2200      	movs	r2, #0
 8005418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800541c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005420:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005424:	f7fb fb96 	bl	8000b54 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4613      	mov	r3, r2
 800542e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005432:	e067      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005434:	4b75      	ldr	r3, [pc, #468]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	099b      	lsrs	r3, r3, #6
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005440:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005444:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800544e:	2300      	movs	r3, #0
 8005450:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005452:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	f04f 0000 	mov.w	r0, #0
 800545e:	f04f 0100 	mov.w	r1, #0
 8005462:	0159      	lsls	r1, r3, #5
 8005464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005468:	0150      	lsls	r0, r2, #5
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4621      	mov	r1, r4
 8005470:	1a51      	subs	r1, r2, r1
 8005472:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005474:	4629      	mov	r1, r5
 8005476:	eb63 0301 	sbc.w	r3, r3, r1
 800547a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005488:	4649      	mov	r1, r9
 800548a:	018b      	lsls	r3, r1, #6
 800548c:	4641      	mov	r1, r8
 800548e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005492:	4641      	mov	r1, r8
 8005494:	018a      	lsls	r2, r1, #6
 8005496:	4641      	mov	r1, r8
 8005498:	ebb2 0a01 	subs.w	sl, r2, r1
 800549c:	4649      	mov	r1, r9
 800549e:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054b6:	4692      	mov	sl, r2
 80054b8:	469b      	mov	fp, r3
 80054ba:	4623      	mov	r3, r4
 80054bc:	eb1a 0303 	adds.w	r3, sl, r3
 80054c0:	623b      	str	r3, [r7, #32]
 80054c2:	462b      	mov	r3, r5
 80054c4:	eb4b 0303 	adc.w	r3, fp, r3
 80054c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80054d6:	4629      	mov	r1, r5
 80054d8:	028b      	lsls	r3, r1, #10
 80054da:	4621      	mov	r1, r4
 80054dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054e0:	4621      	mov	r1, r4
 80054e2:	028a      	lsls	r2, r1, #10
 80054e4:	4610      	mov	r0, r2
 80054e6:	4619      	mov	r1, r3
 80054e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054ec:	2200      	movs	r2, #0
 80054ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80054f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80054f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80054f6:	f7fb fb2d 	bl	8000b54 <__aeabi_uldivmod>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4613      	mov	r3, r2
 8005500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005504:	4b41      	ldr	r3, [pc, #260]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	3301      	adds	r3, #1
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800551a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800551e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005526:	e0eb      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005528:	4b38      	ldr	r3, [pc, #224]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005530:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005534:	4b35      	ldr	r3, [pc, #212]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d06b      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005540:	4b32      	ldr	r3, [pc, #200]	@ (800560c <HAL_RCC_GetSysClockFreq+0x354>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	099b      	lsrs	r3, r3, #6
 8005546:	2200      	movs	r2, #0
 8005548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800554a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800554c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800554e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005552:	663b      	str	r3, [r7, #96]	@ 0x60
 8005554:	2300      	movs	r3, #0
 8005556:	667b      	str	r3, [r7, #100]	@ 0x64
 8005558:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	f04f 0000 	mov.w	r0, #0
 8005564:	f04f 0100 	mov.w	r1, #0
 8005568:	0159      	lsls	r1, r3, #5
 800556a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800556e:	0150      	lsls	r0, r2, #5
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4621      	mov	r1, r4
 8005576:	1a51      	subs	r1, r2, r1
 8005578:	61b9      	str	r1, [r7, #24]
 800557a:	4629      	mov	r1, r5
 800557c:	eb63 0301 	sbc.w	r3, r3, r1
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800558e:	4659      	mov	r1, fp
 8005590:	018b      	lsls	r3, r1, #6
 8005592:	4651      	mov	r1, sl
 8005594:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005598:	4651      	mov	r1, sl
 800559a:	018a      	lsls	r2, r1, #6
 800559c:	4651      	mov	r1, sl
 800559e:	ebb2 0801 	subs.w	r8, r2, r1
 80055a2:	4659      	mov	r1, fp
 80055a4:	eb63 0901 	sbc.w	r9, r3, r1
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055bc:	4690      	mov	r8, r2
 80055be:	4699      	mov	r9, r3
 80055c0:	4623      	mov	r3, r4
 80055c2:	eb18 0303 	adds.w	r3, r8, r3
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	462b      	mov	r3, r5
 80055ca:	eb49 0303 	adc.w	r3, r9, r3
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80055dc:	4629      	mov	r1, r5
 80055de:	024b      	lsls	r3, r1, #9
 80055e0:	4621      	mov	r1, r4
 80055e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055e6:	4621      	mov	r1, r4
 80055e8:	024a      	lsls	r2, r1, #9
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055f2:	2200      	movs	r2, #0
 80055f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055f6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80055f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055fc:	f7fb faaa 	bl	8000b54 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4613      	mov	r3, r2
 8005606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800560a:	e065      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x420>
 800560c:	40023800 	.word	0x40023800
 8005610:	00f42400 	.word	0x00f42400
 8005614:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005618:	4b3d      	ldr	r3, [pc, #244]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x458>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	099b      	lsrs	r3, r3, #6
 800561e:	2200      	movs	r2, #0
 8005620:	4618      	mov	r0, r3
 8005622:	4611      	mov	r1, r2
 8005624:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005628:	653b      	str	r3, [r7, #80]	@ 0x50
 800562a:	2300      	movs	r3, #0
 800562c:	657b      	str	r3, [r7, #84]	@ 0x54
 800562e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005632:	4642      	mov	r2, r8
 8005634:	464b      	mov	r3, r9
 8005636:	f04f 0000 	mov.w	r0, #0
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	0159      	lsls	r1, r3, #5
 8005640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005644:	0150      	lsls	r0, r2, #5
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4641      	mov	r1, r8
 800564c:	1a51      	subs	r1, r2, r1
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	4649      	mov	r1, r9
 8005652:	eb63 0301 	sbc.w	r3, r3, r1
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005664:	4659      	mov	r1, fp
 8005666:	018b      	lsls	r3, r1, #6
 8005668:	4651      	mov	r1, sl
 800566a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800566e:	4651      	mov	r1, sl
 8005670:	018a      	lsls	r2, r1, #6
 8005672:	4651      	mov	r1, sl
 8005674:	1a54      	subs	r4, r2, r1
 8005676:	4659      	mov	r1, fp
 8005678:	eb63 0501 	sbc.w	r5, r3, r1
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	00eb      	lsls	r3, r5, #3
 8005686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568a:	00e2      	lsls	r2, r4, #3
 800568c:	4614      	mov	r4, r2
 800568e:	461d      	mov	r5, r3
 8005690:	4643      	mov	r3, r8
 8005692:	18e3      	adds	r3, r4, r3
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	464b      	mov	r3, r9
 8005698:	eb45 0303 	adc.w	r3, r5, r3
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056aa:	4629      	mov	r1, r5
 80056ac:	028b      	lsls	r3, r1, #10
 80056ae:	4621      	mov	r1, r4
 80056b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056b4:	4621      	mov	r1, r4
 80056b6:	028a      	lsls	r2, r1, #10
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056c0:	2200      	movs	r2, #0
 80056c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80056c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056ca:	f7fb fa43 	bl	8000b54 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4613      	mov	r3, r2
 80056d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80056d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005710 <HAL_RCC_GetSysClockFreq+0x458>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	0f1b      	lsrs	r3, r3, #28
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80056e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80056f6:	e003      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056f8:	4b06      	ldr	r3, [pc, #24]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x45c>)
 80056fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80056fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005704:	4618      	mov	r0, r3
 8005706:	37b8      	adds	r7, #184	@ 0xb8
 8005708:	46bd      	mov	sp, r7
 800570a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570e:	bf00      	nop
 8005710:	40023800 	.word	0x40023800
 8005714:	00f42400 	.word	0x00f42400

08005718 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e28d      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8083 	beq.w	800583e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005738:	4b94      	ldr	r3, [pc, #592]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b04      	cmp	r3, #4
 8005742:	d019      	beq.n	8005778 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005744:	4b91      	ldr	r3, [pc, #580]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 030c 	and.w	r3, r3, #12
        || \
 800574c:	2b08      	cmp	r3, #8
 800574e:	d106      	bne.n	800575e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005750:	4b8e      	ldr	r3, [pc, #568]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005758:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800575c:	d00c      	beq.n	8005778 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800575e:	4b8b      	ldr	r3, [pc, #556]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005766:	2b0c      	cmp	r3, #12
 8005768:	d112      	bne.n	8005790 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576a:	4b88      	ldr	r3, [pc, #544]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005776:	d10b      	bne.n	8005790 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005778:	4b84      	ldr	r3, [pc, #528]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d05b      	beq.n	800583c <HAL_RCC_OscConfig+0x124>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d157      	bne.n	800583c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e25a      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005798:	d106      	bne.n	80057a8 <HAL_RCC_OscConfig+0x90>
 800579a:	4b7c      	ldr	r3, [pc, #496]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a7b      	ldr	r2, [pc, #492]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e01d      	b.n	80057e4 <HAL_RCC_OscConfig+0xcc>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057b0:	d10c      	bne.n	80057cc <HAL_RCC_OscConfig+0xb4>
 80057b2:	4b76      	ldr	r3, [pc, #472]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a75      	ldr	r2, [pc, #468]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4b73      	ldr	r3, [pc, #460]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a72      	ldr	r2, [pc, #456]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e00b      	b.n	80057e4 <HAL_RCC_OscConfig+0xcc>
 80057cc:	4b6f      	ldr	r3, [pc, #444]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a6e      	ldr	r2, [pc, #440]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	4b6c      	ldr	r3, [pc, #432]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a6b      	ldr	r2, [pc, #428]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80057de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d013      	beq.n	8005814 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fe fb1c 	bl	8003e28 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f4:	f7fe fb18 	bl	8003e28 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	@ 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e21f      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	4b61      	ldr	r3, [pc, #388]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0xdc>
 8005812:	e014      	b.n	800583e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fe fb08 	bl	8003e28 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800581c:	f7fe fb04 	bl	8003e28 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	@ 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e20b      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582e:	4b57      	ldr	r3, [pc, #348]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x104>
 800583a:	e000      	b.n	800583e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800583c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d06f      	beq.n	800592a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800584a:	4b50      	ldr	r3, [pc, #320]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b00      	cmp	r3, #0
 8005854:	d017      	beq.n	8005886 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005856:	4b4d      	ldr	r3, [pc, #308]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
        || \
 800585e:	2b08      	cmp	r3, #8
 8005860:	d105      	bne.n	800586e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005862:	4b4a      	ldr	r3, [pc, #296]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800586e:	4b47      	ldr	r3, [pc, #284]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005876:	2b0c      	cmp	r3, #12
 8005878:	d11c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800587a:	4b44      	ldr	r3, [pc, #272]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d116      	bne.n	80058b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005886:	4b41      	ldr	r3, [pc, #260]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_RCC_OscConfig+0x186>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e1d3      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589e:	4b3b      	ldr	r3, [pc, #236]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4937      	ldr	r1, [pc, #220]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b2:	e03a      	b.n	800592a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d020      	beq.n	80058fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058bc:	4b34      	ldr	r3, [pc, #208]	@ (8005990 <HAL_RCC_OscConfig+0x278>)
 80058be:	2201      	movs	r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fe fab1 	bl	8003e28 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ca:	f7fe faad 	bl	8003e28 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e1b4      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058dc:	4b2b      	ldr	r3, [pc, #172]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e8:	4b28      	ldr	r3, [pc, #160]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4925      	ldr	r1, [pc, #148]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	600b      	str	r3, [r1, #0]
 80058fc:	e015      	b.n	800592a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fe:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <HAL_RCC_OscConfig+0x278>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f7fe fa90 	bl	8003e28 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800590c:	f7fe fa8c 	bl	8003e28 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e193      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591e:	4b1b      	ldr	r3, [pc, #108]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d036      	beq.n	80059a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800593e:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005944:	f7fe fa70 	bl	8003e28 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800594c:	f7fe fa6c 	bl	8003e28 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e173      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800595e:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <HAL_RCC_OscConfig+0x274>)
 8005960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0f0      	beq.n	800594c <HAL_RCC_OscConfig+0x234>
 800596a:	e01b      	b.n	80059a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800596c:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <HAL_RCC_OscConfig+0x27c>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005972:	f7fe fa59 	bl	8003e28 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005978:	e00e      	b.n	8005998 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597a:	f7fe fa55 	bl	8003e28 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d907      	bls.n	8005998 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e15c      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
 800598c:	40023800 	.word	0x40023800
 8005990:	42470000 	.word	0x42470000
 8005994:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005998:	4b8a      	ldr	r3, [pc, #552]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 800599a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1ea      	bne.n	800597a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8097 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b2:	2300      	movs	r3, #0
 80059b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059b6:	4b83      	ldr	r3, [pc, #524]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10f      	bne.n	80059e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	4b7f      	ldr	r3, [pc, #508]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	4a7e      	ldr	r2, [pc, #504]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059d2:	4b7c      	ldr	r3, [pc, #496]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059de:	2301      	movs	r3, #1
 80059e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e2:	4b79      	ldr	r3, [pc, #484]	@ (8005bc8 <HAL_RCC_OscConfig+0x4b0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d118      	bne.n	8005a20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ee:	4b76      	ldr	r3, [pc, #472]	@ (8005bc8 <HAL_RCC_OscConfig+0x4b0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a75      	ldr	r2, [pc, #468]	@ (8005bc8 <HAL_RCC_OscConfig+0x4b0>)
 80059f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059fa:	f7fe fa15 	bl	8003e28 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a02:	f7fe fa11 	bl	8003e28 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e118      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a14:	4b6c      	ldr	r3, [pc, #432]	@ (8005bc8 <HAL_RCC_OscConfig+0x4b0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d106      	bne.n	8005a36 <HAL_RCC_OscConfig+0x31e>
 8005a28:	4b66      	ldr	r3, [pc, #408]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2c:	4a65      	ldr	r2, [pc, #404]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a34:	e01c      	b.n	8005a70 <HAL_RCC_OscConfig+0x358>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d10c      	bne.n	8005a58 <HAL_RCC_OscConfig+0x340>
 8005a3e:	4b61      	ldr	r3, [pc, #388]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a42:	4a60      	ldr	r2, [pc, #384]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a44:	f043 0304 	orr.w	r3, r3, #4
 8005a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a4a:	4b5e      	ldr	r3, [pc, #376]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a4e:	4a5d      	ldr	r2, [pc, #372]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a56:	e00b      	b.n	8005a70 <HAL_RCC_OscConfig+0x358>
 8005a58:	4b5a      	ldr	r3, [pc, #360]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5c:	4a59      	ldr	r2, [pc, #356]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a5e:	f023 0301 	bic.w	r3, r3, #1
 8005a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a64:	4b57      	ldr	r3, [pc, #348]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a68:	4a56      	ldr	r2, [pc, #344]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a6a:	f023 0304 	bic.w	r3, r3, #4
 8005a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d015      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a78:	f7fe f9d6 	bl	8003e28 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7e:	e00a      	b.n	8005a96 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a80:	f7fe f9d2 	bl	8003e28 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e0d7      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a96:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0ee      	beq.n	8005a80 <HAL_RCC_OscConfig+0x368>
 8005aa2:	e014      	b.n	8005ace <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa4:	f7fe f9c0 	bl	8003e28 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aac:	f7fe f9bc 	bl	8003e28 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0c1      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac2:	4b40      	ldr	r3, [pc, #256]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1ee      	bne.n	8005aac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	4a3a      	ldr	r2, [pc, #232]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80ad 	beq.w	8005c44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aea:	4b36      	ldr	r3, [pc, #216]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d060      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d145      	bne.n	8005b8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005afe:	4b33      	ldr	r3, [pc, #204]	@ (8005bcc <HAL_RCC_OscConfig+0x4b4>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fe f990 	bl	8003e28 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0c:	f7fe f98c 	bl	8003e28 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e093      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b1e:	4b29      	ldr	r3, [pc, #164]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	019b      	lsls	r3, r3, #6
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b40:	085b      	lsrs	r3, r3, #1
 8005b42:	3b01      	subs	r3, #1
 8005b44:	041b      	lsls	r3, r3, #16
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	061b      	lsls	r3, r3, #24
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b54:	071b      	lsls	r3, r3, #28
 8005b56:	491b      	ldr	r1, [pc, #108]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bcc <HAL_RCC_OscConfig+0x4b4>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b62:	f7fe f961 	bl	8003e28 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6a:	f7fe f95d 	bl	8003e28 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e064      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7c:	4b11      	ldr	r3, [pc, #68]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f0      	beq.n	8005b6a <HAL_RCC_OscConfig+0x452>
 8005b88:	e05c      	b.n	8005c44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8a:	4b10      	ldr	r3, [pc, #64]	@ (8005bcc <HAL_RCC_OscConfig+0x4b4>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fe f94a 	bl	8003e28 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fe f946 	bl	8003e28 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e04d      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <HAL_RCC_OscConfig+0x4ac>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x480>
 8005bb6:	e045      	b.n	8005c44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e040      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	40007000 	.word	0x40007000
 8005bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c50 <HAL_RCC_OscConfig+0x538>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d030      	beq.n	8005c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d129      	bne.n	8005c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d122      	bne.n	8005c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c00:	4013      	ands	r3, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d119      	bne.n	8005c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d10f      	bne.n	8005c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d001      	beq.n	8005c44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800

08005c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e041      	b.n	8005cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fd fe4c 	bl	8003918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f000 fcc4 	bl	8006620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d001      	beq.n	8005d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e04e      	b.n	8005daa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a23      	ldr	r2, [pc, #140]	@ (8005db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d022      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d36:	d01d      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a19      	ldr	r2, [pc, #100]	@ (8005dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d111      	bne.n	8005d98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d010      	beq.n	8005da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d96:	e007      	b.n	8005da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800
 8005dc4:	40000c00 	.word	0x40000c00
 8005dc8:	40010400 	.word	0x40010400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40001800 	.word	0x40001800

08005dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e041      	b.n	8005e6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fd fc38 	bl	8003670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f000 fc04 	bl	8006620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <HAL_TIM_PWM_Start+0x24>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	e022      	b.n	8005ede <HAL_TIM_PWM_Start+0x6a>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d109      	bne.n	8005eb2 <HAL_TIM_PWM_Start+0x3e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	bf14      	ite	ne
 8005eaa:	2301      	movne	r3, #1
 8005eac:	2300      	moveq	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	e015      	b.n	8005ede <HAL_TIM_PWM_Start+0x6a>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d109      	bne.n	8005ecc <HAL_TIM_PWM_Start+0x58>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	bf14      	ite	ne
 8005ec4:	2301      	movne	r3, #1
 8005ec6:	2300      	moveq	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	e008      	b.n	8005ede <HAL_TIM_PWM_Start+0x6a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	bf14      	ite	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	2300      	moveq	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e07c      	b.n	8005fe0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0x82>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef4:	e013      	b.n	8005f1e <HAL_TIM_PWM_Start+0xaa>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_PWM_Start+0x92>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f04:	e00b      	b.n	8005f1e <HAL_TIM_PWM_Start+0xaa>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d104      	bne.n	8005f16 <HAL_TIM_PWM_Start+0xa2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f14:	e003      	b.n	8005f1e <HAL_TIM_PWM_Start+0xaa>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2201      	movs	r2, #1
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fdd6 	bl	8006ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe8 <HAL_TIM_PWM_Start+0x174>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_TIM_PWM_Start+0xcc>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005fec <HAL_TIM_PWM_Start+0x178>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_PWM_Start+0xd0>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_TIM_PWM_Start+0xd2>
 8005f44:	2300      	movs	r3, #0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a22      	ldr	r2, [pc, #136]	@ (8005fe8 <HAL_TIM_PWM_Start+0x174>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d022      	beq.n	8005faa <HAL_TIM_PWM_Start+0x136>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f6c:	d01d      	beq.n	8005faa <HAL_TIM_PWM_Start+0x136>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff0 <HAL_TIM_PWM_Start+0x17c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d018      	beq.n	8005faa <HAL_TIM_PWM_Start+0x136>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff4 <HAL_TIM_PWM_Start+0x180>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_TIM_PWM_Start+0x136>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff8 <HAL_TIM_PWM_Start+0x184>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <HAL_TIM_PWM_Start+0x136>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a16      	ldr	r2, [pc, #88]	@ (8005fec <HAL_TIM_PWM_Start+0x178>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_TIM_PWM_Start+0x136>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a18      	ldr	r2, [pc, #96]	@ (8005ffc <HAL_TIM_PWM_Start+0x188>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_TIM_PWM_Start+0x136>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	@ (8006000 <HAL_TIM_PWM_Start+0x18c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d111      	bne.n	8005fce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b06      	cmp	r3, #6
 8005fba:	d010      	beq.n	8005fde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	e007      	b.n	8005fde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40010400 	.word	0x40010400
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40001800 	.word	0x40001800

08006004 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e097      	b.n	8006148 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fd fb4f 	bl	80036d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006048:	f023 0307 	bic.w	r3, r3, #7
 800604c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f000 fae1 	bl	8006620 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	4313      	orrs	r3, r2
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80060a4:	f023 030c 	bic.w	r3, r3, #12
 80060a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	4313      	orrs	r3, r2
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	011a      	lsls	r2, r3, #4
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	031b      	lsls	r3, r3, #12
 80060d4:	4313      	orrs	r3, r2
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	4313      	orrs	r3, r2
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006160:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006168:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006170:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006178:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d110      	bne.n	80061a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d102      	bne.n	800618c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006186:	7b7b      	ldrb	r3, [r7, #13]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d001      	beq.n	8006190 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e069      	b.n	8006264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a0:	e031      	b.n	8006206 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d110      	bne.n	80061ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d102      	bne.n	80061b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061ae:	7b3b      	ldrb	r3, [r7, #12]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d001      	beq.n	80061b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e055      	b.n	8006264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061c8:	e01d      	b.n	8006206 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d108      	bne.n	80061e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d105      	bne.n	80061e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d6:	7b7b      	ldrb	r3, [r7, #13]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d102      	bne.n	80061e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061dc:	7b3b      	ldrb	r3, [r7, #12]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d001      	beq.n	80061e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e03e      	b.n	8006264 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_TIM_Encoder_Start+0xc4>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b04      	cmp	r3, #4
 8006210:	d008      	beq.n	8006224 <HAL_TIM_Encoder_Start+0xd4>
 8006212:	e00f      	b.n	8006234 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2201      	movs	r2, #1
 800621a:	2100      	movs	r1, #0
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fc5b 	bl	8006ad8 <TIM_CCxChannelCmd>
      break;
 8006222:	e016      	b.n	8006252 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2201      	movs	r2, #1
 800622a:	2104      	movs	r1, #4
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fc53 	bl	8006ad8 <TIM_CCxChannelCmd>
      break;
 8006232:	e00e      	b.n	8006252 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2201      	movs	r2, #1
 800623a:	2100      	movs	r1, #0
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fc4b 	bl	8006ad8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2201      	movs	r2, #1
 8006248:	2104      	movs	r1, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fc44 	bl	8006ad8 <TIM_CCxChannelCmd>
      break;
 8006250:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d020      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0202 	mvn.w	r2, #2
 80062a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f994 	bl	80065e4 <HAL_TIM_IC_CaptureCallback>
 80062bc:	e005      	b.n	80062ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f986 	bl	80065d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f997 	bl	80065f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d020      	beq.n	800631c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01b      	beq.n	800631c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0204 	mvn.w	r2, #4
 80062ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f96e 	bl	80065e4 <HAL_TIM_IC_CaptureCallback>
 8006308:	e005      	b.n	8006316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f960 	bl	80065d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f971 	bl	80065f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d020      	beq.n	8006368 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01b      	beq.n	8006368 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0208 	mvn.w	r2, #8
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2204      	movs	r2, #4
 800633e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f948 	bl	80065e4 <HAL_TIM_IC_CaptureCallback>
 8006354:	e005      	b.n	8006362 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f93a 	bl	80065d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f94b 	bl	80065f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b00      	cmp	r3, #0
 8006370:	d020      	beq.n	80063b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01b      	beq.n	80063b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0210 	mvn.w	r2, #16
 8006384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2208      	movs	r2, #8
 800638a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f922 	bl	80065e4 <HAL_TIM_IC_CaptureCallback>
 80063a0:	e005      	b.n	80063ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f914 	bl	80065d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f925 	bl	80065f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00c      	beq.n	80063d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d007      	beq.n	80063d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0201 	mvn.w	r2, #1
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb ff50 	bl	8002278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00c      	beq.n	80063fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fc6c 	bl	8006cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00c      	beq.n	8006420 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f8f6 	bl	800660c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0220 	mvn.w	r2, #32
 800643c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fc3e 	bl	8006cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006466:	2302      	movs	r3, #2
 8006468:	e0ae      	b.n	80065c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b0c      	cmp	r3, #12
 8006476:	f200 809f 	bhi.w	80065b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800647a:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	080064b5 	.word	0x080064b5
 8006484:	080065b9 	.word	0x080065b9
 8006488:	080065b9 	.word	0x080065b9
 800648c:	080065b9 	.word	0x080065b9
 8006490:	080064f5 	.word	0x080064f5
 8006494:	080065b9 	.word	0x080065b9
 8006498:	080065b9 	.word	0x080065b9
 800649c:	080065b9 	.word	0x080065b9
 80064a0:	08006537 	.word	0x08006537
 80064a4:	080065b9 	.word	0x080065b9
 80064a8:	080065b9 	.word	0x080065b9
 80064ac:	080065b9 	.word	0x080065b9
 80064b0:	08006577 	.word	0x08006577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 f95c 	bl	8006778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0208 	orr.w	r2, r2, #8
 80064ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0204 	bic.w	r2, r2, #4
 80064de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6999      	ldr	r1, [r3, #24]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	619a      	str	r2, [r3, #24]
      break;
 80064f2:	e064      	b.n	80065be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f9ac 	bl	8006858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800650e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800651e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6999      	ldr	r1, [r3, #24]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	021a      	lsls	r2, r3, #8
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	619a      	str	r2, [r3, #24]
      break;
 8006534:	e043      	b.n	80065be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fa01 	bl	8006944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0208 	orr.w	r2, r2, #8
 8006550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0204 	bic.w	r2, r2, #4
 8006560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69d9      	ldr	r1, [r3, #28]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	61da      	str	r2, [r3, #28]
      break;
 8006574:	e023      	b.n	80065be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fa55 	bl	8006a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69d9      	ldr	r1, [r3, #28]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	021a      	lsls	r2, r3, #8
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	61da      	str	r2, [r3, #28]
      break;
 80065b6:	e002      	b.n	80065be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	75fb      	strb	r3, [r7, #23]
      break;
 80065bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a46      	ldr	r2, [pc, #280]	@ (800674c <TIM_Base_SetConfig+0x12c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <TIM_Base_SetConfig+0x40>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663e:	d00f      	beq.n	8006660 <TIM_Base_SetConfig+0x40>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a43      	ldr	r2, [pc, #268]	@ (8006750 <TIM_Base_SetConfig+0x130>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00b      	beq.n	8006660 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a42      	ldr	r2, [pc, #264]	@ (8006754 <TIM_Base_SetConfig+0x134>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d007      	beq.n	8006660 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a41      	ldr	r2, [pc, #260]	@ (8006758 <TIM_Base_SetConfig+0x138>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a40      	ldr	r2, [pc, #256]	@ (800675c <TIM_Base_SetConfig+0x13c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d108      	bne.n	8006672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a35      	ldr	r2, [pc, #212]	@ (800674c <TIM_Base_SetConfig+0x12c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d02b      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006680:	d027      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a32      	ldr	r2, [pc, #200]	@ (8006750 <TIM_Base_SetConfig+0x130>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d023      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a31      	ldr	r2, [pc, #196]	@ (8006754 <TIM_Base_SetConfig+0x134>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d01f      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a30      	ldr	r2, [pc, #192]	@ (8006758 <TIM_Base_SetConfig+0x138>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01b      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2f      	ldr	r2, [pc, #188]	@ (800675c <TIM_Base_SetConfig+0x13c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d017      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006760 <TIM_Base_SetConfig+0x140>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006764 <TIM_Base_SetConfig+0x144>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00f      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006768 <TIM_Base_SetConfig+0x148>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2b      	ldr	r2, [pc, #172]	@ (800676c <TIM_Base_SetConfig+0x14c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d007      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006770 <TIM_Base_SetConfig+0x150>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a29      	ldr	r2, [pc, #164]	@ (8006774 <TIM_Base_SetConfig+0x154>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d108      	bne.n	80066e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a10      	ldr	r2, [pc, #64]	@ (800674c <TIM_Base_SetConfig+0x12c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_Base_SetConfig+0xf8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a12      	ldr	r2, [pc, #72]	@ (800675c <TIM_Base_SetConfig+0x13c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d103      	bne.n	8006720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d105      	bne.n	800673e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f023 0201 	bic.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	611a      	str	r2, [r3, #16]
  }
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40010000 	.word	0x40010000
 8006750:	40000400 	.word	0x40000400
 8006754:	40000800 	.word	0x40000800
 8006758:	40000c00 	.word	0x40000c00
 800675c:	40010400 	.word	0x40010400
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800
 800676c:	40001800 	.word	0x40001800
 8006770:	40001c00 	.word	0x40001c00
 8006774:	40002000 	.word	0x40002000

08006778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f023 0201 	bic.w	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 0302 	bic.w	r3, r3, #2
 80067c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a20      	ldr	r2, [pc, #128]	@ (8006850 <TIM_OC1_SetConfig+0xd8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC1_SetConfig+0x64>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006854 <TIM_OC1_SetConfig+0xdc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d10c      	bne.n	80067f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0308 	bic.w	r3, r3, #8
 80067e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 0304 	bic.w	r3, r3, #4
 80067f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a15      	ldr	r2, [pc, #84]	@ (8006850 <TIM_OC1_SetConfig+0xd8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC1_SetConfig+0x8e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a14      	ldr	r2, [pc, #80]	@ (8006854 <TIM_OC1_SetConfig+0xdc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d111      	bne.n	800682a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	40010000 	.word	0x40010000
 8006854:	40010400 	.word	0x40010400

08006858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f023 0210 	bic.w	r2, r3, #16
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800688e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f023 0320 	bic.w	r3, r3, #32
 80068a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a22      	ldr	r2, [pc, #136]	@ (800693c <TIM_OC2_SetConfig+0xe4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_OC2_SetConfig+0x68>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a21      	ldr	r2, [pc, #132]	@ (8006940 <TIM_OC2_SetConfig+0xe8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10d      	bne.n	80068dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a17      	ldr	r2, [pc, #92]	@ (800693c <TIM_OC2_SetConfig+0xe4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC2_SetConfig+0x94>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a16      	ldr	r2, [pc, #88]	@ (8006940 <TIM_OC2_SetConfig+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d113      	bne.n	8006914 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	621a      	str	r2, [r3, #32]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40010000 	.word	0x40010000
 8006940:	40010400 	.word	0x40010400

08006944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0303 	bic.w	r3, r3, #3
 800697a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800698c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a21      	ldr	r2, [pc, #132]	@ (8006a24 <TIM_OC3_SetConfig+0xe0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_OC3_SetConfig+0x66>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a20      	ldr	r2, [pc, #128]	@ (8006a28 <TIM_OC3_SetConfig+0xe4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10d      	bne.n	80069c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a16      	ldr	r2, [pc, #88]	@ (8006a24 <TIM_OC3_SetConfig+0xe0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_OC3_SetConfig+0x92>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a15      	ldr	r2, [pc, #84]	@ (8006a28 <TIM_OC3_SetConfig+0xe4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d113      	bne.n	80069fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40010400 	.word	0x40010400

08006a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a12      	ldr	r2, [pc, #72]	@ (8006ad0 <TIM_OC4_SetConfig+0xa4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC4_SetConfig+0x68>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a11      	ldr	r2, [pc, #68]	@ (8006ad4 <TIM_OC4_SetConfig+0xa8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d109      	bne.n	8006aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	019b      	lsls	r3, r3, #6
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40010400 	.word	0x40010400

08006ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	2201      	movs	r2, #1
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	43db      	mvns	r3, r3
 8006afa:	401a      	ands	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b10:	431a      	orrs	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
	...

08006b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e05a      	b.n	8006bf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a21      	ldr	r2, [pc, #132]	@ (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d022      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b88:	d01d      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d018      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1b      	ldr	r2, [pc, #108]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00e      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a18      	ldr	r2, [pc, #96]	@ (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d009      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a17      	ldr	r2, [pc, #92]	@ (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d004      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a15      	ldr	r2, [pc, #84]	@ (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d10c      	bne.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40010400 	.word	0x40010400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40001800 	.word	0x40001800

08006c1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e03d      	b.n	8006cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e042      	b.n	8006d80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fc fea0 	bl	8003a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2224      	movs	r2, #36	@ 0x24
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fdbd 	bl	80078ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695a      	ldr	r2, [r3, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08a      	sub	sp, #40	@ 0x28
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d175      	bne.n	8006e94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <HAL_UART_Transmit+0x2c>
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e06e      	b.n	8006e96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2221      	movs	r2, #33	@ 0x21
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dc6:	f7fd f82f 	bl	8003e28 <HAL_GetTick>
 8006dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de0:	d108      	bne.n	8006df4 <HAL_UART_Transmit+0x6c>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	e003      	b.n	8006dfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dfc:	e02e      	b.n	8006e5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2200      	movs	r2, #0
 8006e06:	2180      	movs	r1, #128	@ 0x80
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fb1f 	bl	800744c <UART_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e03a      	b.n	8006e96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10b      	bne.n	8006e3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	3302      	adds	r3, #2
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e007      	b.n	8006e4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	781a      	ldrb	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1cb      	bne.n	8006dfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2140      	movs	r1, #64	@ 0x40
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 faeb 	bl	800744c <UART_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e006      	b.n	8006e96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e94:	2302      	movs	r3, #2
  }
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d112      	bne.n	8006ede <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_UART_Receive_IT+0x26>
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e00b      	b.n	8006ee0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fb12 	bl	80074fe <UART_Start_Receive_IT>
 8006eda:	4603      	mov	r3, r0
 8006edc:	e000      	b.n	8006ee0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b0ba      	sub	sp, #232	@ 0xe8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10f      	bne.n	8006f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <HAL_UART_IRQHandler+0x66>
 8006f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fbf2 	bl	8007730 <UART_Receive_IT>
      return;
 8006f4c:	e25b      	b.n	8007406 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80de 	beq.w	8007114 <HAL_UART_IRQHandler+0x22c>
 8006f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80d1 	beq.w	8007114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <HAL_UART_IRQHandler+0xae>
 8006f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8e:	f043 0201 	orr.w	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <HAL_UART_IRQHandler+0xd2>
 8006fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb2:	f043 0202 	orr.w	r2, r3, #2
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <HAL_UART_IRQHandler+0xf6>
 8006fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd6:	f043 0204 	orr.w	r2, r3, #4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d011      	beq.n	800700e <HAL_UART_IRQHandler+0x126>
 8006fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007006:	f043 0208 	orr.w	r2, r3, #8
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 81f2 	beq.w	80073fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <HAL_UART_IRQHandler+0x14e>
 8007024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fb7d 	bl	8007730 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007040:	2b40      	cmp	r3, #64	@ 0x40
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <HAL_UART_IRQHandler+0x17a>
 800705a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d04f      	beq.n	8007102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa85 	bl	8007572 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007072:	2b40      	cmp	r3, #64	@ 0x40
 8007074:	d141      	bne.n	80070fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3314      	adds	r3, #20
 800707c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800708c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3314      	adds	r3, #20
 800709e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1d9      	bne.n	8007076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d013      	beq.n	80070f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ce:	4a7e      	ldr	r2, [pc, #504]	@ (80072c8 <HAL_UART_IRQHandler+0x3e0>)
 80070d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fd fb78 	bl	80047cc <HAL_DMA_Abort_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d016      	beq.n	8007110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	e00e      	b.n	8007110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f994 	bl	8007420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f8:	e00a      	b.n	8007110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f990 	bl	8007420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	e006      	b.n	8007110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f98c 	bl	8007420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800710e:	e175      	b.n	80073fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007110:	bf00      	nop
    return;
 8007112:	e173      	b.n	80073fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007118:	2b01      	cmp	r3, #1
 800711a:	f040 814f 	bne.w	80073bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 8148 	beq.w	80073bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8141 	beq.w	80073bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800713a:	2300      	movs	r3, #0
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60bb      	str	r3, [r7, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	60bb      	str	r3, [r7, #8]
 800714e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800715a:	2b40      	cmp	r3, #64	@ 0x40
 800715c:	f040 80b6 	bne.w	80072cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800716c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8145 	beq.w	8007400 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800717a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800717e:	429a      	cmp	r2, r3
 8007180:	f080 813e 	bcs.w	8007400 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800718a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007196:	f000 8088 	beq.w	80072aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80071c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1d9      	bne.n	800719a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3314      	adds	r3, #20
 80071ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3314      	adds	r3, #20
 8007206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800720a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800720e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007212:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800721c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e1      	bne.n	80071e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3314      	adds	r3, #20
 8007228:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3314      	adds	r3, #20
 8007242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007246:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007248:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800724c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e3      	bne.n	8007222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800727a:	f023 0310 	bic.w	r3, r3, #16
 800727e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800728c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800728e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800729a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e3      	bne.n	8007268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fd fa21 	bl	80046ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	b29b      	uxth	r3, r3
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f8b7 	bl	8007434 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072c6:	e09b      	b.n	8007400 <HAL_UART_IRQHandler+0x518>
 80072c8:	08007639 	.word	0x08007639
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 808e 	beq.w	8007404 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80072e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8089 	beq.w	8007404 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	330c      	adds	r3, #12
 80072f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007316:	647a      	str	r2, [r7, #68]	@ 0x44
 8007318:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800731c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e3      	bne.n	80072f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3314      	adds	r3, #20
 8007330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	623b      	str	r3, [r7, #32]
   return(result);
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3314      	adds	r3, #20
 800734a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800734e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800735c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e3      	bne.n	800732a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0310 	bic.w	r3, r3, #16
 8007386:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007394:	61fa      	str	r2, [r7, #28]
 8007396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	69b9      	ldr	r1, [r7, #24]
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	617b      	str	r3, [r7, #20]
   return(result);
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e3      	bne.n	8007370 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f83d 	bl	8007434 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073ba:	e023      	b.n	8007404 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <HAL_UART_IRQHandler+0x4f4>
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f943 	bl	8007660 <UART_Transmit_IT>
    return;
 80073da:	e014      	b.n	8007406 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <HAL_UART_IRQHandler+0x51e>
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f983 	bl	8007700 <UART_EndTransmit_IT>
    return;
 80073fa:	e004      	b.n	8007406 <HAL_UART_IRQHandler+0x51e>
    return;
 80073fc:	bf00      	nop
 80073fe:	e002      	b.n	8007406 <HAL_UART_IRQHandler+0x51e>
      return;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <HAL_UART_IRQHandler+0x51e>
      return;
 8007404:	bf00      	nop
  }
}
 8007406:	37e8      	adds	r7, #232	@ 0xe8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	4613      	mov	r3, r2
 800745a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800745c:	e03b      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007464:	d037      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007466:	f7fc fcdf 	bl	8003e28 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	6a3a      	ldr	r2, [r7, #32]
 8007472:	429a      	cmp	r2, r3
 8007474:	d302      	bcc.n	800747c <UART_WaitOnFlagUntilTimeout+0x30>
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e03a      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f003 0304 	and.w	r3, r3, #4
 800748a:	2b00      	cmp	r3, #0
 800748c:	d023      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b80      	cmp	r3, #128	@ 0x80
 8007492:	d020      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b40      	cmp	r3, #64	@ 0x40
 8007498:	d01d      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d116      	bne.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f857 	bl	8007572 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2208      	movs	r2, #8
 80074c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e00f      	b.n	80074f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf0c      	ite	eq
 80074e6:	2301      	moveq	r3, #1
 80074e8:	2300      	movne	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d0b4      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	4613      	mov	r3, r2
 800750a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	88fa      	ldrh	r2, [r7, #6]
 8007516:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	88fa      	ldrh	r2, [r7, #6]
 800751c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2222      	movs	r2, #34	@ 0x22
 8007528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007542:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695a      	ldr	r2, [r3, #20]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0220 	orr.w	r2, r2, #32
 8007562:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007572:	b480      	push	{r7}
 8007574:	b095      	sub	sp, #84	@ 0x54
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	330c      	adds	r3, #12
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800759a:	643a      	str	r2, [r7, #64]	@ 0x40
 800759c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e5      	bne.n	800757a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3314      	adds	r3, #20
 80075b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3314      	adds	r3, #20
 80075cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e5      	bne.n	80075ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d119      	bne.n	800761e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	330c      	adds	r3, #12
 80075f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f023 0310 	bic.w	r3, r3, #16
 8007600:	647b      	str	r3, [r7, #68]	@ 0x44
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	330c      	adds	r3, #12
 8007608:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800760a:	61ba      	str	r2, [r7, #24]
 800760c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6979      	ldr	r1, [r7, #20]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	613b      	str	r3, [r7, #16]
   return(result);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e5      	bne.n	80075ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800762c:	bf00      	nop
 800762e:	3754      	adds	r7, #84	@ 0x54
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007644:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7ff fee4 	bl	8007420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b21      	cmp	r3, #33	@ 0x21
 8007672:	d13e      	bne.n	80076f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767c:	d114      	bne.n	80076a8 <UART_Transmit_IT+0x48>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d110      	bne.n	80076a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800769a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	1c9a      	adds	r2, r3, #2
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	621a      	str	r2, [r3, #32]
 80076a6:	e008      	b.n	80076ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	1c59      	adds	r1, r3, #1
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6211      	str	r1, [r2, #32]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10f      	bne.n	80076ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007716:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff fe73 	bl	800740c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08c      	sub	sp, #48	@ 0x30
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b22      	cmp	r3, #34	@ 0x22
 8007742:	f040 80ae 	bne.w	80078a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800774e:	d117      	bne.n	8007780 <UART_Receive_IT+0x50>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d113      	bne.n	8007780 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007760:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776e:	b29a      	uxth	r2, r3
 8007770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007772:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007778:	1c9a      	adds	r2, r3, #2
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	629a      	str	r2, [r3, #40]	@ 0x28
 800777e:	e026      	b.n	80077ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007784:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007792:	d007      	beq.n	80077a4 <UART_Receive_IT+0x74>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <UART_Receive_IT+0x82>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d106      	bne.n	80077b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	e008      	b.n	80077c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	4619      	mov	r1, r3
 80077dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d15d      	bne.n	800789e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0220 	bic.w	r2, r2, #32
 80077f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007800:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007824:	2b01      	cmp	r3, #1
 8007826:	d135      	bne.n	8007894 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	330c      	adds	r3, #12
 8007834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	613b      	str	r3, [r7, #16]
   return(result);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f023 0310 	bic.w	r3, r3, #16
 8007844:	627b      	str	r3, [r7, #36]	@ 0x24
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	330c      	adds	r3, #12
 800784c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800784e:	623a      	str	r2, [r7, #32]
 8007850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	69f9      	ldr	r1, [r7, #28]
 8007854:	6a3a      	ldr	r2, [r7, #32]
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	61bb      	str	r3, [r7, #24]
   return(result);
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e5      	bne.n	800782e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b10      	cmp	r3, #16
 800786e:	d10a      	bne.n	8007886 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fdd1 	bl	8007434 <HAL_UARTEx_RxEventCallback>
 8007892:	e002      	b.n	800789a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7fa fd47 	bl	8002328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	e002      	b.n	80078a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	e000      	b.n	80078a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078a2:	2302      	movs	r3, #2
  }
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3730      	adds	r7, #48	@ 0x30
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b0:	b0c0      	sub	sp, #256	@ 0x100
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c8:	68d9      	ldr	r1, [r3, #12]
 80078ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	ea40 0301 	orr.w	r3, r0, r1
 80078d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007904:	f021 010c 	bic.w	r1, r1, #12
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007912:	430b      	orrs	r3, r1
 8007914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007926:	6999      	ldr	r1, [r3, #24]
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	ea40 0301 	orr.w	r3, r0, r1
 8007932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b8f      	ldr	r3, [pc, #572]	@ (8007b78 <UART_SetConfig+0x2cc>)
 800793c:	429a      	cmp	r2, r3
 800793e:	d005      	beq.n	800794c <UART_SetConfig+0xa0>
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	4b8d      	ldr	r3, [pc, #564]	@ (8007b7c <UART_SetConfig+0x2d0>)
 8007948:	429a      	cmp	r2, r3
 800794a:	d104      	bne.n	8007956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800794c:	f7fd fca0 	bl	8005290 <HAL_RCC_GetPCLK2Freq>
 8007950:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007954:	e003      	b.n	800795e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007956:	f7fd fc87 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 800795a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007968:	f040 810c 	bne.w	8007b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800796c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007970:	2200      	movs	r2, #0
 8007972:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007976:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800797a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	1891      	adds	r1, r2, r2
 8007984:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007986:	415b      	adcs	r3, r3
 8007988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800798a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800798e:	4621      	mov	r1, r4
 8007990:	eb12 0801 	adds.w	r8, r2, r1
 8007994:	4629      	mov	r1, r5
 8007996:	eb43 0901 	adc.w	r9, r3, r1
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079ae:	4690      	mov	r8, r2
 80079b0:	4699      	mov	r9, r3
 80079b2:	4623      	mov	r3, r4
 80079b4:	eb18 0303 	adds.w	r3, r8, r3
 80079b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079bc:	462b      	mov	r3, r5
 80079be:	eb49 0303 	adc.w	r3, r9, r3
 80079c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079da:	460b      	mov	r3, r1
 80079dc:	18db      	adds	r3, r3, r3
 80079de:	653b      	str	r3, [r7, #80]	@ 0x50
 80079e0:	4613      	mov	r3, r2
 80079e2:	eb42 0303 	adc.w	r3, r2, r3
 80079e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80079e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079f0:	f7f9 f8b0 	bl	8000b54 <__aeabi_uldivmod>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4b61      	ldr	r3, [pc, #388]	@ (8007b80 <UART_SetConfig+0x2d4>)
 80079fa:	fba3 2302 	umull	r2, r3, r3, r2
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	011c      	lsls	r4, r3, #4
 8007a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a14:	4642      	mov	r2, r8
 8007a16:	464b      	mov	r3, r9
 8007a18:	1891      	adds	r1, r2, r2
 8007a1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a1c:	415b      	adcs	r3, r3
 8007a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a24:	4641      	mov	r1, r8
 8007a26:	eb12 0a01 	adds.w	sl, r2, r1
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a44:	4692      	mov	sl, r2
 8007a46:	469b      	mov	fp, r3
 8007a48:	4643      	mov	r3, r8
 8007a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8007a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a52:	464b      	mov	r3, r9
 8007a54:	eb4b 0303 	adc.w	r3, fp, r3
 8007a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a70:	460b      	mov	r3, r1
 8007a72:	18db      	adds	r3, r3, r3
 8007a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a76:	4613      	mov	r3, r2
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a86:	f7f9 f865 	bl	8000b54 <__aeabi_uldivmod>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	4b3b      	ldr	r3, [pc, #236]	@ (8007b80 <UART_SetConfig+0x2d4>)
 8007a92:	fba3 2301 	umull	r2, r3, r3, r1
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	2264      	movs	r2, #100	@ 0x64
 8007a9a:	fb02 f303 	mul.w	r3, r2, r3
 8007a9e:	1acb      	subs	r3, r1, r3
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007aa6:	4b36      	ldr	r3, [pc, #216]	@ (8007b80 <UART_SetConfig+0x2d4>)
 8007aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ab4:	441c      	add	r4, r3
 8007ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	1891      	adds	r1, r2, r2
 8007ace:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ad8:	4641      	mov	r1, r8
 8007ada:	1851      	adds	r1, r2, r1
 8007adc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ade:	4649      	mov	r1, r9
 8007ae0:	414b      	adcs	r3, r1
 8007ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007af0:	4659      	mov	r1, fp
 8007af2:	00cb      	lsls	r3, r1, #3
 8007af4:	4651      	mov	r1, sl
 8007af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007afa:	4651      	mov	r1, sl
 8007afc:	00ca      	lsls	r2, r1, #3
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	4642      	mov	r2, r8
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	460a      	mov	r2, r1
 8007b10:	eb42 0303 	adc.w	r3, r2, r3
 8007b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	18db      	adds	r3, r3, r3
 8007b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b32:	4613      	mov	r3, r2
 8007b34:	eb42 0303 	adc.w	r3, r2, r3
 8007b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b42:	f7f9 f807 	bl	8000b54 <__aeabi_uldivmod>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b80 <UART_SetConfig+0x2d4>)
 8007b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	2164      	movs	r1, #100	@ 0x64
 8007b54:	fb01 f303 	mul.w	r3, r1, r3
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	3332      	adds	r3, #50	@ 0x32
 8007b5e:	4a08      	ldr	r2, [pc, #32]	@ (8007b80 <UART_SetConfig+0x2d4>)
 8007b60:	fba2 2303 	umull	r2, r3, r2, r3
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	f003 0207 	and.w	r2, r3, #7
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4422      	add	r2, r4
 8007b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b74:	e106      	b.n	8007d84 <UART_SetConfig+0x4d8>
 8007b76:	bf00      	nop
 8007b78:	40011000 	.word	0x40011000
 8007b7c:	40011400 	.word	0x40011400
 8007b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b96:	4642      	mov	r2, r8
 8007b98:	464b      	mov	r3, r9
 8007b9a:	1891      	adds	r1, r2, r2
 8007b9c:	6239      	str	r1, [r7, #32]
 8007b9e:	415b      	adcs	r3, r3
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ba6:	4641      	mov	r1, r8
 8007ba8:	1854      	adds	r4, r2, r1
 8007baa:	4649      	mov	r1, r9
 8007bac:	eb43 0501 	adc.w	r5, r3, r1
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	00eb      	lsls	r3, r5, #3
 8007bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bbe:	00e2      	lsls	r2, r4, #3
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	461d      	mov	r5, r3
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	18e3      	adds	r3, r4, r3
 8007bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bcc:	464b      	mov	r3, r9
 8007bce:	eb45 0303 	adc.w	r3, r5, r3
 8007bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007be2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	008b      	lsls	r3, r1, #2
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	008a      	lsls	r2, r1, #2
 8007c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c04:	f7f8 ffa6 	bl	8000b54 <__aeabi_uldivmod>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4b60      	ldr	r3, [pc, #384]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	011c      	lsls	r4, r3, #4
 8007c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	1891      	adds	r1, r2, r2
 8007c2e:	61b9      	str	r1, [r7, #24]
 8007c30:	415b      	adcs	r3, r3
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c38:	4641      	mov	r1, r8
 8007c3a:	1851      	adds	r1, r2, r1
 8007c3c:	6139      	str	r1, [r7, #16]
 8007c3e:	4649      	mov	r1, r9
 8007c40:	414b      	adcs	r3, r1
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c50:	4659      	mov	r1, fp
 8007c52:	00cb      	lsls	r3, r1, #3
 8007c54:	4651      	mov	r1, sl
 8007c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c5a:	4651      	mov	r1, sl
 8007c5c:	00ca      	lsls	r2, r1, #3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	4642      	mov	r2, r8
 8007c66:	189b      	adds	r3, r3, r2
 8007c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	460a      	mov	r2, r1
 8007c70:	eb42 0303 	adc.w	r3, r2, r3
 8007c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c90:	4649      	mov	r1, r9
 8007c92:	008b      	lsls	r3, r1, #2
 8007c94:	4641      	mov	r1, r8
 8007c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c9a:	4641      	mov	r1, r8
 8007c9c:	008a      	lsls	r2, r1, #2
 8007c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ca2:	f7f8 ff57 	bl	8000b54 <__aeabi_uldivmod>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	4b38      	ldr	r3, [pc, #224]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007cae:	fba3 2301 	umull	r2, r3, r3, r1
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	2264      	movs	r2, #100	@ 0x64
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	1acb      	subs	r3, r1, r3
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	3332      	adds	r3, #50	@ 0x32
 8007cc0:	4a33      	ldr	r2, [pc, #204]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ccc:	441c      	add	r4, r3
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007cd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007cdc:	4642      	mov	r2, r8
 8007cde:	464b      	mov	r3, r9
 8007ce0:	1891      	adds	r1, r2, r2
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	415b      	adcs	r3, r3
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cec:	4641      	mov	r1, r8
 8007cee:	1851      	adds	r1, r2, r1
 8007cf0:	6039      	str	r1, [r7, #0]
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	414b      	adcs	r3, r1
 8007cf6:	607b      	str	r3, [r7, #4]
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d04:	4659      	mov	r1, fp
 8007d06:	00cb      	lsls	r3, r1, #3
 8007d08:	4651      	mov	r1, sl
 8007d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d0e:	4651      	mov	r1, sl
 8007d10:	00ca      	lsls	r2, r1, #3
 8007d12:	4610      	mov	r0, r2
 8007d14:	4619      	mov	r1, r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	4642      	mov	r2, r8
 8007d1a:	189b      	adds	r3, r3, r2
 8007d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d1e:	464b      	mov	r3, r9
 8007d20:	460a      	mov	r2, r1
 8007d22:	eb42 0303 	adc.w	r3, r2, r3
 8007d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d32:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d40:	4649      	mov	r1, r9
 8007d42:	008b      	lsls	r3, r1, #2
 8007d44:	4641      	mov	r1, r8
 8007d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d4a:	4641      	mov	r1, r8
 8007d4c:	008a      	lsls	r2, r1, #2
 8007d4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d52:	f7f8 feff 	bl	8000b54 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	2164      	movs	r1, #100	@ 0x64
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	3332      	adds	r3, #50	@ 0x32
 8007d6e:	4a08      	ldr	r2, [pc, #32]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4422      	add	r2, r4
 8007d82:	609a      	str	r2, [r3, #8]
}
 8007d84:	bf00      	nop
 8007d86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d90:	51eb851f 	.word	0x51eb851f

08007d94 <memset>:
 8007d94:	4402      	add	r2, r0
 8007d96:	4603      	mov	r3, r0
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d100      	bne.n	8007d9e <memset+0xa>
 8007d9c:	4770      	bx	lr
 8007d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007da2:	e7f9      	b.n	8007d98 <memset+0x4>

08007da4 <__libc_init_array>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	4d0d      	ldr	r5, [pc, #52]	@ (8007ddc <__libc_init_array+0x38>)
 8007da8:	4c0d      	ldr	r4, [pc, #52]	@ (8007de0 <__libc_init_array+0x3c>)
 8007daa:	1b64      	subs	r4, r4, r5
 8007dac:	10a4      	asrs	r4, r4, #2
 8007dae:	2600      	movs	r6, #0
 8007db0:	42a6      	cmp	r6, r4
 8007db2:	d109      	bne.n	8007dc8 <__libc_init_array+0x24>
 8007db4:	4d0b      	ldr	r5, [pc, #44]	@ (8007de4 <__libc_init_array+0x40>)
 8007db6:	4c0c      	ldr	r4, [pc, #48]	@ (8007de8 <__libc_init_array+0x44>)
 8007db8:	f000 f818 	bl	8007dec <_init>
 8007dbc:	1b64      	subs	r4, r4, r5
 8007dbe:	10a4      	asrs	r4, r4, #2
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	42a6      	cmp	r6, r4
 8007dc4:	d105      	bne.n	8007dd2 <__libc_init_array+0x2e>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dcc:	4798      	blx	r3
 8007dce:	3601      	adds	r6, #1
 8007dd0:	e7ee      	b.n	8007db0 <__libc_init_array+0xc>
 8007dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd6:	4798      	blx	r3
 8007dd8:	3601      	adds	r6, #1
 8007dda:	e7f2      	b.n	8007dc2 <__libc_init_array+0x1e>
 8007ddc:	08007e5c 	.word	0x08007e5c
 8007de0:	08007e5c 	.word	0x08007e5c
 8007de4:	08007e5c 	.word	0x08007e5c
 8007de8:	08007e60 	.word	0x08007e60

08007dec <_init>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	bf00      	nop
 8007df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df2:	bc08      	pop	{r3}
 8007df4:	469e      	mov	lr, r3
 8007df6:	4770      	bx	lr

08007df8 <_fini>:
 8007df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfa:	bf00      	nop
 8007dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfe:	bc08      	pop	{r3}
 8007e00:	469e      	mov	lr, r3
 8007e02:	4770      	bx	lr
