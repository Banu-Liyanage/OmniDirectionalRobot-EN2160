/*
 * encoders.c
 *
 *  Created on: May 21, 2025
 *      Author: PANKAJA
 */


#include "encoders.h"

volatile float m_robot_distance = 0;
volatile float m_robot_angle = 0;

int16_t ForwardLeft_delta = 0;
int16_t ForwardRight_delta = 0;
int16_t RearLeft_delta = 0;
int16_t RearRight_delta = 0;

int16_t previous_ForwardLeft_count = 0;
int16_t previous_ForwardRight_count = 0;
int16_t previous_RearLeft_count = 0;
int16_t previous_RearRight_count = 0;


float m_fwd_change = 0;
float m_rot_change = 0;


int16_t getForwardLeftEncoderCounts() {
	return (int16_t) TIM2->CNT;
}

int16_t getForwardRightEncoderCounts() {
	return (int16_t) TIM3->CNT;
}

int16_t getRearLeftEncoderCounts() {
	return (int16_t) TIM4->CNT;
}

int16_t getRearRightEncoderCounts() {
	return (int16_t) TIM5->CNT;
}

void resetEncoders() {
	TIM2->CNT = (int16_t) 0;
	TIM3->CNT = (int16_t) 0;
	TIM4->CNT = (int16_t) 0;
	TIM5->CNT = (int16_t) 0;

	m_robot_distance = 0;
	m_robot_angle = 0;

	ForwardLeft_delta = 0;
	ForwardRight_delta = 0;
	RearLeft_delta = 0;
	RearRight_delta = 0;

	previous_ForwardLeft_count = 0;
	previous_ForwardRight_count = 0;
	previous_RearLeft_count = 0;
	previous_RearRight_count = 0;

}

void resetEncodersinSystick() {
	TIM2->CNT = (int16_t) 0;
	TIM3->CNT = (int16_t) 0;
	TIM4->CNT = (int16_t) 0;
	TIM5->CNT = (int16_t) 0;
}


void update_Encoder_Data(){
	int16_t ForwardLeft_count= getForwardLeftEncoderCounts();
	int16_t ForwardRight_count = getForwardRightEncoderCounts();
	int16_t RearLeft_count = getRearLeftEncoderCounts();
	int16_t RearRight_count = getRearRightEncoderCounts();

	ForwardLeft_delta = ForwardLeft_count - previous_ForwardLeft_count;
	previous_ForwardLeft_count = ForwardLeft_count;

	ForwardRight_delta = ForwardRight_count - previous_ForwardRight_count;
	previous_ForwardRight_count = ForwardRight_count

	right_delta = right_count - previous_right_count;
	previous_right_count = right_count;

	float left_change = left_delta * MM_PER_COUNT_LEFT;
	float right_change = right_delta * MM_PER_COUNT_RIGHT;

	m_fwd_change = 0.5 * (right_change + left_change);
	m_robot_distance += m_fwd_change;
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
	m_robot_angle += m_rot_change;


}
