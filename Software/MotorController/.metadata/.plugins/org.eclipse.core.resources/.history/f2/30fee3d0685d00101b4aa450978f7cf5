/*
 * controller.c
 *
 *  Created on: Jul 3, 2025
 *      Author: PANKAJA
 */


#include "controller.h"
#include "config.h"
#include "kinematics.h"
#include "motors.h"

void Controller_Init(Controller *controller) {
    // Initialize motor struct
	controller->x_error = 0;
	controller->y_error = 0;
	controller->w_error = 0;
	controller->previous_x_error = 0;
	controller->previous_y_error = 0;
	controller->previous_w_error = 0;

	controller->x_velocity = 0;
	controller->y_velocity = 0;
	controller->omega = 0;

	controller->controllers_enabled = 1;
}


void Controller_ResetControllers(Controller *controller) {
	controller->x_error = 0;
		controller->y_error = 0;
		controller->w_error = 0;
		controller->previous_x_error = 0;
		controller->previous_y_error = 0;
		controller->previous_w_error = 0;
}


void UpdateControllers(Controller *controller, float x_velocity, float y_velocity,  float omega, float steering_adjustment) {
    float forward_output, strafe_output, rotational_output;
//    float left_speed, right_speed;
//
    controller->x_velocity = x_velocity;
    controller->y_velocity = y_velocity;
    controller->omega = omega;
//
    float x_increment = x_velocity * CONTROLLER_LOOP_INTERVAL;
    controller->x_error += x_increment - current_robot_velocity.vx * CONTROLLER_LOOP_INTERVAL;
    float x_diff = controller->x_error - controller->previous_x_error;
    controller->previous_x_error = controller->x_error;
    forward_output = FWD_KP * controller->x_error + FWD_KD * x_diff;

    float y_increment = y_velocity * CONTROLLER_LOOP_INTERVAL;
	controller->y_error += y_increment - current_robot_velocity.vy * CONTROLLER_LOOP_INTERVAL;
	float y_diff = controller->y_error - controller->previous_y_error;
	controller->previous_y_error = controller->y_error;
	strafe_output = STRAFE_KP * controller->y_error + STRAFE_KD * y_diff;
        //x_output = K
	float w_increment = omega * CONTROLLER_LOOP_INTERVAL;
	controller->w_error += w_increment - current_robot_velocity.omega * CONTROLLER_LOOP_INTERVAL;
	float w_diff = controller->w_error - controller->previous_w_error;
	controller->previous_w_error = controller->w_error;
	rotational_output = ROT_KP * controller->omega + ROT_KD * w_diff;


	set_robot_velocity(forward_output, strafe_output, rotational_output);

}


void Controller_Stop(){
	resetMotors();
}
