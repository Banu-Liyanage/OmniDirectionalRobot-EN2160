/*
 * RS485.c
 *
 *  Created on: Jul 10, 2025
 *      Author: PANKAJA
 */


#include "RS485.h"
#include "stm32f4xx_hal.h"
#include "main.h"

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart2;


// Execute received command
void ExecuteCommand(uint8_t command, uint8_t value)
{
    //char debugMsg[100];

    // Clamp velocity value
    if (value > MAX_VELOCITY) value = MAX_VELOCITY;
    if (value < MIN_VELOCITY) value = MIN_VELOCITY;

    switch (command)
    {
        case CMD_FORWARD:
            // All motors forward
        	HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
//        	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
            break;

        case CMD_BACKWARD:
            // All motors backward
        	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, 1);
            break;

        case CMD_LEFT:
            break;

        case CMD_RIGHT:
            // Strafe right
            break;

        case CMD_FORWARD_LEFT:
            // Diagonal forward-left
            break;

        case CMD_FORWARD_RIGHT:
            // Diagonal forward-right

            break;

        case CMD_BACKWARD_LEFT:
            // Diagonal backward-left
            break;

        case CMD_BACKWARD_RIGHT:
            // Diagonal backward-right

            break;

        case CMD_VELOCITY:
            // Set current velocity for future commands
            //currentVelocity = value;
            return; // Don't update motors, just store velocity

        default:

            return;
    }

}


// Send individual telemetry packet
void SendTelemetryPacket(uint8_t dataType, uint16_t value)
{
    uint8_t packet[4];
    packet[0] = dataType;
    packet[1] = (value >> 8) & 0xFF;  // High byte
    packet[2] = value & 0xFF;         // Low byte
    packet[3] = 0xFF;                 // End marker

    HAL_UART_Transmit(&huart3, packet, 4, 100);
}


void SendTelemetryData(void)
{
    // Send battery voltage
    SendTelemetryPacket(TELEM_BATTERY_VOLT, telemetryData.batteryVoltage);
    HAL_Delay(2);

//    // Send temperature
//    SendTelemetryPacket(TELEM_TEMPERATURE, telemetryData.systemTemperature);
//    HAL_Delay(2);
//
//    // Send motor currents (send average or one at a time)
//    uint16_t avgCurrent = (telemetryData.motorCurrent[0] + telemetryData.motorCurrent[1] +
//                          telemetryData.motorCurrent[2] + telemetryData.motorCurrent[3]) / 4;
//    SendTelemetryPacket(TELEM_CURRENT, avgCurrent);
//    HAL_Delay(2);
//
//    // Send system status
//    SendTelemetryPacket(TELEM_SYSTEM_STATUS, telemetryData.systemStatus);
//    HAL_Delay(2);
//
//    // Send motor status
//    SendTelemetryPacket(TELEM_MOTOR_STATUS, telemetryData.motorStatus);
//    HAL_Delay(2);
}
