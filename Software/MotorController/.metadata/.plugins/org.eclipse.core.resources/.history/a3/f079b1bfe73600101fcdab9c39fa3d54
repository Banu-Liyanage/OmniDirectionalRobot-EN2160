/*
 * config.h
 *
 *  Created on: May 20, 2025
 *      Author: PANKAJA
 */

#ifndef CONFIG_H_
#define CONFIG_H_

#include <stdint.h>

// Mathematical constants
#define PI 3.14159265358979323846f

// Robot physical constants
extern const float ROBOT_RADIUS;
extern const float DEG_PER_MM_DIFFERENCE;
extern const float RADIANS_PER_DEGREE;
extern const float DEGREES_PER_RADIAN;

// Motion controller constants
extern const float LOOP_FREQUENCY;
extern const float LOOP_INTERVAL;

// Motor control constants
#define PWM_MAX 1.0f
#define MAX_TIMER_COUNTS 1000

// Encoder constants - adjust these based on your encoder specifications
#define ENCODER_COUNTS_PER_REVOLUTION 512  // Typical quadrature encoder
#define GEAR_RATIO 30.0f                   // Motor gearbox ratio
#define WHEEL_CIRCUMFERENCE (2.0f * PI * 30.0f) // 30mm wheel radius

// Calculate radians per encoder count for each wheel
// You may need to adjust these based on your specific setup and calibration
#define RAD_PER_COUNT_FORWARD_LEFT   (2.0f * PI / (ENCODER_COUNTS_PER_REVOLUTION * GEAR_RATIO))
#define RAD_PER_COUNT_FORWARD_RIGHT  (2.0f * PI / (ENCODER_COUNTS_PER_REVOLUTION * GEAR_RATIO))
#define RAD_PER_COUNT_REAR_LEFT      (2.0f * PI / (ENCODER_COUNTS_PER_REVOLUTION * GEAR_RATIO))
#define RAD_PER_COUNT_REAR_RIGHT     (2.0f * PI / (ENCODER_COUNTS_PER_REVOLUTION * GEAR_RATIO))

// Alternative calculation if you want to work in linear distance
#define MM_PER_COUNT_FORWARD_LEFT    (WHEEL_CIRCUMFERENCE / (ENCODER_COUNTS_PER_REVOLUTION * GEAR_RATIO))
#define MM_PER_COUNT_FORWARD_RIGHT   (WHEEL_CIRCUMFERENCE / (ENCODER_COUNTS_PER_REVOLUTION * GEAR_RATIO))
#define MM_PER_COUNT_REAR_LEFT       (WHEEL_CIRCUMFERENCE / (ENCODER_COUNTS_PER_REVOLUTION * GEAR_RATIO))
#define MM_PER_COUNT_REAR_RIGHT      (WHEEL_CIRCUMFERENCE / (ENCODER_COUNTS_PER_REVOLUTION * GEAR_RATIO))

// External variables from encoders.c
extern volatile float ForwardLeft_W;
extern volatile float ForwardRight_W;
extern volatile float RearLeft_W;
extern volatile float RearRight_W;

// Function prototypes
void update_Encoder_Data(void);
int16_t getForwardLeftEncoderCounts(void);
int16_t getForwardRightEncoderCounts(void);
int16_t getRearLeftEncoderCounts(void);
int16_t getRearRightEncoderCounts(void);
void resetEncoders(void);
void resetEncodersinSystick(void);

#endif /* CONFIG_H_ */
