
RS485-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003f3c  08003f3c  00004f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f98  08003f98  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003f98  08003f98  00004f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa0  08003fa0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa0  08003fa0  00004fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003fa8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000068  08004010  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004010  00005230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095c4  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab1  00000000  00000000  0000e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00010110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000625  00000000  00000000  00010928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002210c  00000000  00000000  00010f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae1a  00000000  00000000  00033059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cacb4  00000000  00000000  0003de73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002764  00000000  00000000  00108b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0010b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f24 	.word	0x08003f24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003f24 	.word	0x08003f24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <sendData>:
/* USER CODE BEGIN 0 */
uint8_t TxData[16];
uint8_t RxData[16];
int indx = 0;
void sendData (uint8_t *data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	// Pull DE high to enable TX operation
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005be:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <sendData+0x40>)
 80005c0:	f000 fed8 	bl	8001374 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, strlen (data) , 1000);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe23 	bl	8000210 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <sendData+0x44>)
 80005d6:	f001 fd39 	bl	800204c <HAL_UART_Transmit>
	// Pull RE Low to enable RX operation
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <sendData+0x40>)
 80005e2:	f000 fec7 	bl	8001374 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020000 	.word	0x40020000
 80005f4:	20000084 	.word	0x20000084

080005f8 <processReceivedData>:

void processReceivedData(uint8_t *data, uint16_t len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
  // Example: print to console or toggle LED
  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);  // Toggle LED when data received
 8000604:	2120      	movs	r1, #32
 8000606:	4805      	ldr	r0, [pc, #20]	@ (800061c <processReceivedData+0x24>)
 8000608:	f000 fecd 	bl	80013a6 <HAL_GPIO_TogglePin>

  // Optionally echo back
  sendData(data);  // Echo the received data
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ffcf 	bl	80005b0 <sendData>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020000 	.word	0x40020000

08000620 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <HAL_UARTEx_RxEventCallback+0x3c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d10d      	bne.n	8000652 <HAL_UARTEx_RxEventCallback+0x32>
    RxData[Size] = '\0';  // Null-terminate just in case
 8000636:	887b      	ldrh	r3, [r7, #2]
 8000638:	4a09      	ldr	r2, [pc, #36]	@ (8000660 <HAL_UARTEx_RxEventCallback+0x40>)
 800063a:	2100      	movs	r1, #0
 800063c:	54d1      	strb	r1, [r2, r3]
    processReceivedData(RxData, Size);  // Call our handler
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	4619      	mov	r1, r3
 8000642:	4807      	ldr	r0, [pc, #28]	@ (8000660 <HAL_UARTEx_RxEventCallback+0x40>)
 8000644:	f7ff ffd8 	bl	80005f8 <processReceivedData>
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 16);  // Restart reception
 8000648:	2210      	movs	r2, #16
 800064a:	4905      	ldr	r1, [pc, #20]	@ (8000660 <HAL_UARTEx_RxEventCallback+0x40>)
 800064c:	4805      	ldr	r0, [pc, #20]	@ (8000664 <HAL_UARTEx_RxEventCallback+0x44>)
 800064e:	f001 fd88 	bl	8002162 <HAL_UARTEx_ReceiveToIdle_IT>
  }
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40011000 	.word	0x40011000
 8000660:	200000cc 	.word	0x200000cc
 8000664:	20000084 	.word	0x20000084

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fad8 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f816 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f8ac 	bl	80007d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000678:	f000 f880 	bl	800077c <MX_USART1_UART_Init>

    /* USER CODE BEGIN 3 */
//	sprintf(TxData, "F103 %d", indx++);
//	sendData (TxData);
//	HAL_Delay(1000);
	if (RxData[0] != 0) {
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <main+0x30>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0fb      	beq.n	800067c <main+0x14>
		printf("Received: %s\r\n", RxData);
 8000684:	4904      	ldr	r1, [pc, #16]	@ (8000698 <main+0x30>)
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <main+0x34>)
 8000688:	f002 fdde 	bl	8003248 <iprintf>
		memset(RxData, 0, sizeof(RxData));  // Clear after reading
 800068c:	2210      	movs	r2, #16
 800068e:	2100      	movs	r1, #0
 8000690:	4801      	ldr	r0, [pc, #4]	@ (8000698 <main+0x30>)
 8000692:	f002 fe2e 	bl	80032f2 <memset>
	if (RxData[0] != 0) {
 8000696:	e7f1      	b.n	800067c <main+0x14>
 8000698:	200000cc 	.word	0x200000cc
 800069c:	08003f3c 	.word	0x08003f3c

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2234      	movs	r2, #52	@ 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fe1f 	bl	80032f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a29      	ldr	r2, [pc, #164]	@ (8000774 <SystemClock_Config+0xd4>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <SystemClock_Config+0xd4>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <SystemClock_Config+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ec:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <SystemClock_Config+0xd8>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <SystemClock_Config+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000714:	2310      	movs	r3, #16
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000718:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800071c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071e:	2304      	movs	r3, #4
 8000720:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000722:	2302      	movs	r3, #2
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f99e 	bl	8001a70 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800073a:	f000 f8b9 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fe3e 	bl	80013dc <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000766:	f000 f8a3 	bl	80008b0 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	@ 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_USART1_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f001 fbfa 	bl	8001fac <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f877 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000084 	.word	0x20000084
 80007cc:	40011000 	.word	0x40011000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a2d      	ldr	r2, [pc, #180]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b2b      	ldr	r3, [pc, #172]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a26      	ldr	r2, [pc, #152]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a1f      	ldr	r2, [pc, #124]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_GPIO_Init+0xd4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TX_EN_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800085c:	4812      	ldr	r0, [pc, #72]	@ (80008a8 <MX_GPIO_Init+0xd8>)
 800085e:	f000 fd89 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000868:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <MX_GPIO_Init+0xdc>)
 800087a:	f000 fbe7 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TX_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TX_EN_Pin;
 800087e:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_GPIO_Init+0xd8>)
 8000898:	f000 fbd8 	bl	800104c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020800 	.word	0x40020800

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008fa:	2007      	movs	r0, #7
 80008fc:	f000 fad2 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	@ 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a2c      	ldr	r2, [pc, #176]	@ (80009dc <HAL_UART_MspInit+0xd0>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d152      	bne.n	80009d4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b2b      	ldr	r3, [pc, #172]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a2a      	ldr	r2, [pc, #168]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b28      	ldr	r3, [pc, #160]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <HAL_UART_MspInit+0xd4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000994:	2307      	movs	r3, #7
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <HAL_UART_MspInit+0xd8>)
 80009a0:	f000 fb54 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009a4:	2380      	movs	r3, #128	@ 0x80
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b4:	2307      	movs	r3, #7
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <HAL_UART_MspInit+0xdc>)
 80009c0:	f000 fb44 	bl	800104c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2025      	movs	r0, #37	@ 0x25
 80009ca:	f000 fa76 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ce:	2025      	movs	r0, #37	@ 0x25
 80009d0:	f000 fa8f 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	@ 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40011000 	.word	0x40011000
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <NMI_Handler+0x4>

080009f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <MemManage_Handler+0x4>

08000a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 f93f 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <USART1_IRQHandler+0x10>)
 8000a52:	f001 fbe3 	bl	800221c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000084 	.word	0x20000084

08000a60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a72:	f3af 8000 	nop.w
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
  }

  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
  }
  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000afa:	605a      	str	r2, [r3, #4]
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_isatty>:

int _isatty(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f002 fc10 	bl	8003390 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20020000 	.word	0x20020000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	200000dc 	.word	0x200000dc
 8000ba4:	20000230 	.word	0x20000230

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 fbcf 	bl	800339c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fd33 	bl	8000668 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c10:	08003fa8 	.word	0x08003fa8
  ldr r2, =_sbss
 8000c14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c18:	20000230 	.word	0x20000230

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f92b 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fe32 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f943 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f90b 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	200000e0 	.word	0x200000e0

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000e0 	.word	0x200000e0

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	@ (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	@ (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	@ 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	@ 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff3e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff31 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff feda 	bl	8000cec <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d008      	beq.n	8000f58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e052      	b.n	8000ffe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0216 	bic.w	r2, r2, #22
 8000f66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	695a      	ldr	r2, [r3, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d103      	bne.n	8000f88 <HAL_DMA_Abort+0x62>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0208 	bic.w	r2, r2, #8
 8000f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa8:	e013      	b.n	8000fd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000faa:	f7ff fe9f 	bl	8000cec <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d90c      	bls.n	8000fd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e015      	b.n	8000ffe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e4      	bne.n	8000faa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fe4:	223f      	movs	r2, #63	@ 0x3f
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d004      	beq.n	8001024 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e00c      	b.n	800103e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2205      	movs	r2, #5
 8001028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e165      	b.n	8001334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8154 	bne.w	800132e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80ae 	beq.w	800132e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <HAL_GPIO_Init+0x300>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a5c      	ldr	r2, [pc, #368]	@ (800134c <HAL_GPIO_Init+0x300>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b5a      	ldr	r3, [pc, #360]	@ (800134c <HAL_GPIO_Init+0x300>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	4a58      	ldr	r2, [pc, #352]	@ (8001350 <HAL_GPIO_Init+0x304>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4f      	ldr	r2, [pc, #316]	@ (8001354 <HAL_GPIO_Init+0x308>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x21a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x216>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4d      	ldr	r2, [pc, #308]	@ (800135c <HAL_GPIO_Init+0x310>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x212>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4c      	ldr	r2, [pc, #304]	@ (8001360 <HAL_GPIO_Init+0x314>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x20e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4b      	ldr	r2, [pc, #300]	@ (8001364 <HAL_GPIO_Init+0x318>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x20a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	@ (8001368 <HAL_GPIO_Init+0x31c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x206>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a49      	ldr	r2, [pc, #292]	@ (800136c <HAL_GPIO_Init+0x320>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x202>
 800124a:	2306      	movs	r3, #6
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800124e:	2307      	movs	r3, #7
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	@ (8001350 <HAL_GPIO_Init+0x304>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <HAL_GPIO_Init+0x324>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a31      	ldr	r2, [pc, #196]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a26      	ldr	r2, [pc, #152]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <HAL_GPIO_Init+0x324>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <HAL_GPIO_Init+0x324>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <HAL_GPIO_Init+0x324>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001328:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <HAL_GPIO_Init+0x324>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae96 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	@ 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4013      	ands	r3, r2
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	400b      	ands	r3, r1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0cc      	b.n	800158a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f0:	4b68      	ldr	r3, [pc, #416]	@ (8001594 <HAL_RCC_ClockConfig+0x1b8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d90c      	bls.n	8001418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	4b65      	ldr	r3, [pc, #404]	@ (8001594 <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001406:	4b63      	ldr	r3, [pc, #396]	@ (8001594 <HAL_RCC_ClockConfig+0x1b8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d001      	beq.n	8001418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0b8      	b.n	800158a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001430:	4b59      	ldr	r3, [pc, #356]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a58      	ldr	r2, [pc, #352]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800143a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001448:	4b53      	ldr	r3, [pc, #332]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4a52      	ldr	r2, [pc, #328]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001454:	4b50      	ldr	r3, [pc, #320]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	494d      	ldr	r1, [pc, #308]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	4313      	orrs	r3, r2
 8001464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d044      	beq.n	80014fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d107      	bne.n	800148a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d119      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e07f      	b.n	800158a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d003      	beq.n	800149a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001496:	2b03      	cmp	r3, #3
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149a:	4b3f      	ldr	r3, [pc, #252]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e06f      	b.n	800158a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e067      	b.n	800158a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ba:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f023 0203 	bic.w	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4934      	ldr	r1, [pc, #208]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014cc:	f7ff fc0e 	bl	8000cec <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff fc0a 	bl	8000cec <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e04f      	b.n	800158a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 020c 	and.w	r2, r3, #12
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1eb      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014fc:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <HAL_RCC_ClockConfig+0x1b8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d20c      	bcs.n	8001524 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b22      	ldr	r3, [pc, #136]	@ (8001594 <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e032      	b.n	800158a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001530:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4916      	ldr	r1, [pc, #88]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	4313      	orrs	r3, r2
 8001540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d009      	beq.n	8001562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	490e      	ldr	r1, [pc, #56]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001562:	f000 f855 	bl	8001610 <HAL_RCC_GetSysClockFreq>
 8001566:	4602      	mov	r2, r0
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	490a      	ldr	r1, [pc, #40]	@ (800159c <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	5ccb      	ldrb	r3, [r1, r3]
 8001576:	fa22 f303 	lsr.w	r3, r2, r3
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fb6e 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00
 8001598:	40023800 	.word	0x40023800
 800159c:	08003f4c 	.word	0x08003f4c
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_RCC_GetHCLKFreq+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000000 	.word	0x20000000

080015c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015c4:	f7ff fff0 	bl	80015a8 <HAL_RCC_GetHCLKFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	0a9b      	lsrs	r3, r3, #10
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	4903      	ldr	r1, [pc, #12]	@ (80015e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	08003f5c 	.word	0x08003f5c

080015e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015ec:	f7ff ffdc 	bl	80015a8 <HAL_RCC_GetHCLKFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	0b5b      	lsrs	r3, r3, #13
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	4903      	ldr	r1, [pc, #12]	@ (800160c <HAL_RCC_GetPCLK2Freq+0x24>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	08003f5c 	.word	0x08003f5c

08001610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b0ae      	sub	sp, #184	@ 0xb8
 8001616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001636:	4bcb      	ldr	r3, [pc, #812]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b0c      	cmp	r3, #12
 8001640:	f200 8206 	bhi.w	8001a50 <HAL_RCC_GetSysClockFreq+0x440>
 8001644:	a201      	add	r2, pc, #4	@ (adr r2, 800164c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	08001681 	.word	0x08001681
 8001650:	08001a51 	.word	0x08001a51
 8001654:	08001a51 	.word	0x08001a51
 8001658:	08001a51 	.word	0x08001a51
 800165c:	08001689 	.word	0x08001689
 8001660:	08001a51 	.word	0x08001a51
 8001664:	08001a51 	.word	0x08001a51
 8001668:	08001a51 	.word	0x08001a51
 800166c:	08001691 	.word	0x08001691
 8001670:	08001a51 	.word	0x08001a51
 8001674:	08001a51 	.word	0x08001a51
 8001678:	08001a51 	.word	0x08001a51
 800167c:	08001881 	.word	0x08001881
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4bb9      	ldr	r3, [pc, #740]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x358>)
 8001682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001686:	e1e7      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001688:	4bb8      	ldr	r3, [pc, #736]	@ (800196c <HAL_RCC_GetSysClockFreq+0x35c>)
 800168a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800168e:	e1e3      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001690:	4bb4      	ldr	r3, [pc, #720]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169c:	4bb1      	ldr	r3, [pc, #708]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d071      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a8:	4bae      	ldr	r3, [pc, #696]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80016b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016ce:	4622      	mov	r2, r4
 80016d0:	462b      	mov	r3, r5
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	f04f 0100 	mov.w	r1, #0
 80016da:	0159      	lsls	r1, r3, #5
 80016dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e0:	0150      	lsls	r0, r2, #5
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4621      	mov	r1, r4
 80016e8:	1a51      	subs	r1, r2, r1
 80016ea:	6439      	str	r1, [r7, #64]	@ 0x40
 80016ec:	4629      	mov	r1, r5
 80016ee:	eb63 0301 	sbc.w	r3, r3, r1
 80016f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001700:	4649      	mov	r1, r9
 8001702:	018b      	lsls	r3, r1, #6
 8001704:	4641      	mov	r1, r8
 8001706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800170a:	4641      	mov	r1, r8
 800170c:	018a      	lsls	r2, r1, #6
 800170e:	4641      	mov	r1, r8
 8001710:	1a51      	subs	r1, r2, r1
 8001712:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001714:	4649      	mov	r1, r9
 8001716:	eb63 0301 	sbc.w	r3, r3, r1
 800171a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001728:	4649      	mov	r1, r9
 800172a:	00cb      	lsls	r3, r1, #3
 800172c:	4641      	mov	r1, r8
 800172e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001732:	4641      	mov	r1, r8
 8001734:	00ca      	lsls	r2, r1, #3
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	4603      	mov	r3, r0
 800173c:	4622      	mov	r2, r4
 800173e:	189b      	adds	r3, r3, r2
 8001740:	633b      	str	r3, [r7, #48]	@ 0x30
 8001742:	462b      	mov	r3, r5
 8001744:	460a      	mov	r2, r1
 8001746:	eb42 0303 	adc.w	r3, r2, r3
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001758:	4629      	mov	r1, r5
 800175a:	024b      	lsls	r3, r1, #9
 800175c:	4621      	mov	r1, r4
 800175e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001762:	4621      	mov	r1, r4
 8001764:	024a      	lsls	r2, r1, #9
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800176e:	2200      	movs	r2, #0
 8001770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001774:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001778:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800177c:	f7fe fda0 	bl	80002c0 <__aeabi_uldivmod>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4613      	mov	r3, r2
 8001786:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800178a:	e067      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178c:	4b75      	ldr	r3, [pc, #468]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	2200      	movs	r2, #0
 8001794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001798:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800179c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017a6:	2300      	movs	r3, #0
 80017a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80017ae:	4622      	mov	r2, r4
 80017b0:	462b      	mov	r3, r5
 80017b2:	f04f 0000 	mov.w	r0, #0
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	0159      	lsls	r1, r3, #5
 80017bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c0:	0150      	lsls	r0, r2, #5
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4621      	mov	r1, r4
 80017c8:	1a51      	subs	r1, r2, r1
 80017ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80017cc:	4629      	mov	r1, r5
 80017ce:	eb63 0301 	sbc.w	r3, r3, r1
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80017e0:	4649      	mov	r1, r9
 80017e2:	018b      	lsls	r3, r1, #6
 80017e4:	4641      	mov	r1, r8
 80017e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ea:	4641      	mov	r1, r8
 80017ec:	018a      	lsls	r2, r1, #6
 80017ee:	4641      	mov	r1, r8
 80017f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80017f4:	4649      	mov	r1, r9
 80017f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001806:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800180a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800180e:	4692      	mov	sl, r2
 8001810:	469b      	mov	fp, r3
 8001812:	4623      	mov	r3, r4
 8001814:	eb1a 0303 	adds.w	r3, sl, r3
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	462b      	mov	r3, r5
 800181c:	eb4b 0303 	adc.w	r3, fp, r3
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800182e:	4629      	mov	r1, r5
 8001830:	028b      	lsls	r3, r1, #10
 8001832:	4621      	mov	r1, r4
 8001834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001838:	4621      	mov	r1, r4
 800183a:	028a      	lsls	r2, r1, #10
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001844:	2200      	movs	r2, #0
 8001846:	673b      	str	r3, [r7, #112]	@ 0x70
 8001848:	677a      	str	r2, [r7, #116]	@ 0x74
 800184a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800184e:	f7fe fd37 	bl	80002c0 <__aeabi_uldivmod>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4613      	mov	r3, r2
 8001858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800185c:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	3301      	adds	r3, #1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800186e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800187e:	e0eb      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001880:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188c:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d06b      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001898:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x354>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	2200      	movs	r2, #0
 80018a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80018ac:	2300      	movs	r3, #0
 80018ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80018b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80018b4:	4622      	mov	r2, r4
 80018b6:	462b      	mov	r3, r5
 80018b8:	f04f 0000 	mov.w	r0, #0
 80018bc:	f04f 0100 	mov.w	r1, #0
 80018c0:	0159      	lsls	r1, r3, #5
 80018c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c6:	0150      	lsls	r0, r2, #5
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4621      	mov	r1, r4
 80018ce:	1a51      	subs	r1, r2, r1
 80018d0:	61b9      	str	r1, [r7, #24]
 80018d2:	4629      	mov	r1, r5
 80018d4:	eb63 0301 	sbc.w	r3, r3, r1
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018e6:	4659      	mov	r1, fp
 80018e8:	018b      	lsls	r3, r1, #6
 80018ea:	4651      	mov	r1, sl
 80018ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018f0:	4651      	mov	r1, sl
 80018f2:	018a      	lsls	r2, r1, #6
 80018f4:	4651      	mov	r1, sl
 80018f6:	ebb2 0801 	subs.w	r8, r2, r1
 80018fa:	4659      	mov	r1, fp
 80018fc:	eb63 0901 	sbc.w	r9, r3, r1
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800190c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001910:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001914:	4690      	mov	r8, r2
 8001916:	4699      	mov	r9, r3
 8001918:	4623      	mov	r3, r4
 800191a:	eb18 0303 	adds.w	r3, r8, r3
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	462b      	mov	r3, r5
 8001922:	eb49 0303 	adc.w	r3, r9, r3
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001934:	4629      	mov	r1, r5
 8001936:	024b      	lsls	r3, r1, #9
 8001938:	4621      	mov	r1, r4
 800193a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800193e:	4621      	mov	r1, r4
 8001940:	024a      	lsls	r2, r1, #9
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800194a:	2200      	movs	r2, #0
 800194c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800194e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001950:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001954:	f7fe fcb4 	bl	80002c0 <__aeabi_uldivmod>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4613      	mov	r3, r2
 800195e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001962:	e065      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x420>
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400
 800196c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001970:	4b3d      	ldr	r3, [pc, #244]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x458>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	2200      	movs	r2, #0
 8001978:	4618      	mov	r0, r3
 800197a:	4611      	mov	r1, r2
 800197c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001980:	653b      	str	r3, [r7, #80]	@ 0x50
 8001982:	2300      	movs	r3, #0
 8001984:	657b      	str	r3, [r7, #84]	@ 0x54
 8001986:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800198a:	4642      	mov	r2, r8
 800198c:	464b      	mov	r3, r9
 800198e:	f04f 0000 	mov.w	r0, #0
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	0159      	lsls	r1, r3, #5
 8001998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800199c:	0150      	lsls	r0, r2, #5
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4641      	mov	r1, r8
 80019a4:	1a51      	subs	r1, r2, r1
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	4649      	mov	r1, r9
 80019aa:	eb63 0301 	sbc.w	r3, r3, r1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019bc:	4659      	mov	r1, fp
 80019be:	018b      	lsls	r3, r1, #6
 80019c0:	4651      	mov	r1, sl
 80019c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c6:	4651      	mov	r1, sl
 80019c8:	018a      	lsls	r2, r1, #6
 80019ca:	4651      	mov	r1, sl
 80019cc:	1a54      	subs	r4, r2, r1
 80019ce:	4659      	mov	r1, fp
 80019d0:	eb63 0501 	sbc.w	r5, r3, r1
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	00eb      	lsls	r3, r5, #3
 80019de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e2:	00e2      	lsls	r2, r4, #3
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
 80019e8:	4643      	mov	r3, r8
 80019ea:	18e3      	adds	r3, r4, r3
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	464b      	mov	r3, r9
 80019f0:	eb45 0303 	adc.w	r3, r5, r3
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a02:	4629      	mov	r1, r5
 8001a04:	028b      	lsls	r3, r1, #10
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	028a      	lsls	r2, r1, #10
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a18:	2200      	movs	r2, #0
 8001a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a1c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a22:	f7fe fc4d 	bl	80002c0 <__aeabi_uldivmod>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0f1b      	lsrs	r3, r3, #28
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a4e:	e003      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	37b8      	adds	r7, #184	@ 0xb8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	00f42400 	.word	0x00f42400

08001a70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e28d      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8083 	beq.w	8001b96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a90:	4b94      	ldr	r3, [pc, #592]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d019      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a9c:	4b91      	ldr	r3, [pc, #580]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
        || \
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001aa8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ab4:	d00c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d112      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac2:	4b88      	ldr	r3, [pc, #544]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ace:	d10b      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	4b84      	ldr	r3, [pc, #528]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d05b      	beq.n	8001b94 <HAL_RCC_OscConfig+0x124>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d157      	bne.n	8001b94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e25a      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x90>
 8001af2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xcc>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xb4>
 8001b0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a75      	ldr	r2, [pc, #468]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a72      	ldr	r2, [pc, #456]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xcc>
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6b      	ldr	r2, [pc, #428]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f8d2 	bl	8000cec <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f8ce 	bl	8000cec <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e21f      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b61      	ldr	r3, [pc, #388]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xdc>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f8be 	bl	8000cec <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff f8ba 	bl	8000cec <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e20b      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x104>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d06f      	beq.n	8001c82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ba2:	4b50      	ldr	r3, [pc, #320]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d017      	beq.n	8001bde <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d105      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd2:	4b44      	ldr	r3, [pc, #272]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b41      	ldr	r3, [pc, #260]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x186>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1d3      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4937      	ldr	r1, [pc, #220]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e03a      	b.n	8001c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b34      	ldr	r3, [pc, #208]	@ (8001ce8 <HAL_RCC_OscConfig+0x278>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f867 	bl	8000cec <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff f863 	bl	8000cec <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1b4      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4925      	ldr	r1, [pc, #148]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <HAL_RCC_OscConfig+0x278>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f846 	bl	8000cec <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff f842 	bl	8000cec <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e193      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d036      	beq.n	8001cfc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <HAL_RCC_OscConfig+0x27c>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff f826 	bl	8000cec <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f822 	bl	8000cec <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e173      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x234>
 8001cc2:	e01b      	b.n	8001cfc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff f80f 	bl	8000cec <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	e00e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f80b 	bl	8000cec <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d907      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e15c      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	42470000 	.word	0x42470000
 8001cec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	4b8a      	ldr	r3, [pc, #552]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ea      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8097 	beq.w	8001e38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0e:	4b83      	ldr	r3, [pc, #524]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10f      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a7e      	ldr	r2, [pc, #504]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4b79      	ldr	r3, [pc, #484]	@ (8001f20 <HAL_RCC_OscConfig+0x4b0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4b76      	ldr	r3, [pc, #472]	@ (8001f20 <HAL_RCC_OscConfig+0x4b0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a75      	ldr	r2, [pc, #468]	@ (8001f20 <HAL_RCC_OscConfig+0x4b0>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7fe ffcb 	bl	8000cec <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7fe ffc7 	bl	8000cec <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e118      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f20 <HAL_RCC_OscConfig+0x4b0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x31e>
 8001d80:	4b66      	ldr	r3, [pc, #408]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a65      	ldr	r2, [pc, #404]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8c:	e01c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x358>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x340>
 8001d96:	4b61      	ldr	r3, [pc, #388]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9a:	4a60      	ldr	r2, [pc, #384]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	4a5d      	ldr	r2, [pc, #372]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x358>
 8001db0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db4:	4a59      	ldr	r2, [pc, #356]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dbc:	4b57      	ldr	r3, [pc, #348]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc0:	4a56      	ldr	r2, [pc, #344]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	f023 0304 	bic.w	r3, r3, #4
 8001dc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d015      	beq.n	8001dfc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7fe ff8c 	bl	8000cec <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f7fe ff88 	bl	8000cec <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0d7      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dee:	4b4b      	ldr	r3, [pc, #300]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0ee      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x368>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7fe ff76 	bl	8000cec <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7fe ff72 	bl	8000cec <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0c1      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1a:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ee      	bne.n	8001e04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	4a3a      	ldr	r2, [pc, #232]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80ad 	beq.w	8001f9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e42:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d060      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d145      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	4b33      	ldr	r3, [pc, #204]	@ (8001f24 <HAL_RCC_OscConfig+0x4b4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe ff46 	bl	8000cec <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7fe ff42 	bl	8000cec <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e093      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e76:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	019b      	lsls	r3, r3, #6
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	071b      	lsls	r3, r3, #28
 8001eae:	491b      	ldr	r1, [pc, #108]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_OscConfig+0x4b4>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7fe ff17 	bl	8000cec <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe ff13 	bl	8000cec <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e064      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x452>
 8001ee0:	e05c      	b.n	8001f9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_RCC_OscConfig+0x4b4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe ff00 	bl	8000cec <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7fe fefc 	bl	8000cec <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e04d      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x480>
 8001f0e:	e045      	b.n	8001f9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e040      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_RCC_OscConfig+0x538>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d030      	beq.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d129      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d122      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d119      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	3b01      	subs	r3, #1
 8001f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10f      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e042      	b.n	8002044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fc9a 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fdf3 	bl	8002bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	@ 0x28
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b20      	cmp	r3, #32
 800206a:	d175      	bne.n	8002158 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_UART_Transmit+0x2c>
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e06e      	b.n	800215a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2221      	movs	r2, #33	@ 0x21
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800208a:	f7fe fe2f 	bl	8000cec <HAL_GetTick>
 800208e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	88fa      	ldrh	r2, [r7, #6]
 8002094:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020a4:	d108      	bne.n	80020b8 <HAL_UART_Transmit+0x6c>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d104      	bne.n	80020b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	e003      	b.n	80020c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020c0:	e02e      	b.n	8002120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	2180      	movs	r1, #128	@ 0x80
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fb55 	bl	800277c <UART_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e03a      	b.n	800215a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10b      	bne.n	8002102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3302      	adds	r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e007      	b.n	8002112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1cb      	bne.n	80020c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	2140      	movs	r1, #64	@ 0x40
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fb21 	bl	800277c <UART_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e006      	b.n	800215a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b08c      	sub	sp, #48	@ 0x30
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b20      	cmp	r3, #32
 800217a:	d14a      	bne.n	8002212 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e043      	b.n	8002214 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	461a      	mov	r2, r3
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fb45 	bl	800282e <UART_Start_Receive_IT>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80021aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d12c      	bne.n	800220c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d125      	bne.n	8002206 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	330c      	adds	r3, #12
 80021d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	e853 3f00 	ldrex	r3, [r3]
 80021de:	617b      	str	r3, [r7, #20]
   return(result);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f043 0310 	orr.w	r3, r3, #16
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	330c      	adds	r3, #12
 80021ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80021f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f4:	6a39      	ldr	r1, [r7, #32]
 80021f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f8:	e841 2300 	strex	r3, r2, [r1]
 80021fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e5      	bne.n	80021d0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002204:	e002      	b.n	800220c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800220c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002210:	e000      	b.n	8002214 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002212:	2302      	movs	r3, #2
  }
}
 8002214:	4618      	mov	r0, r3
 8002216:	3730      	adds	r7, #48	@ 0x30
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0ba      	sub	sp, #232	@ 0xe8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800224e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800225a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_UART_IRQHandler+0x66>
 800226e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fbf0 	bl	8002a60 <UART_Receive_IT>
      return;
 8002280:	e25b      	b.n	800273a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80de 	beq.w	8002448 <HAL_UART_IRQHandler+0x22c>
 800228c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800229c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80d1 	beq.w	8002448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_UART_IRQHandler+0xae>
 80022b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_UART_IRQHandler+0xd2>
 80022d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_UART_IRQHandler+0xf6>
 80022fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d011      	beq.n	8002342 <HAL_UART_IRQHandler+0x126>
 800231e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800232a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f043 0208 	orr.w	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 81f2 	beq.w	8002730 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800234c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_UART_IRQHandler+0x14e>
 8002358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fb7b 	bl	8002a60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002374:	2b40      	cmp	r3, #64	@ 0x40
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_UART_IRQHandler+0x17a>
 800238e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d04f      	beq.n	8002436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa83 	bl	80028a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a6:	2b40      	cmp	r3, #64	@ 0x40
 80023a8:	d141      	bne.n	800242e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3314      	adds	r3, #20
 80023b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023b8:	e853 3f00 	ldrex	r3, [r3]
 80023bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80023c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3314      	adds	r3, #20
 80023d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80023da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80023e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80023e6:	e841 2300 	strex	r3, r2, [r1]
 80023ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80023ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1d9      	bne.n	80023aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d013      	beq.n	8002426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002402:	4a7e      	ldr	r2, [pc, #504]	@ (80025fc <HAL_UART_IRQHandler+0x3e0>)
 8002404:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fdfb 	bl	8001006 <HAL_DMA_Abort_IT>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002420:	4610      	mov	r0, r2
 8002422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	e00e      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f99e 	bl	8002768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	e00a      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f99a 	bl	8002768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002434:	e006      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f996 	bl	8002768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002442:	e175      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	bf00      	nop
    return;
 8002446:	e173      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	2b01      	cmp	r3, #1
 800244e:	f040 814f 	bne.w	80026f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8148 	beq.w	80026f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8141 	beq.w	80026f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248e:	2b40      	cmp	r3, #64	@ 0x40
 8002490:	f040 80b6 	bne.w	8002600 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8145 	beq.w	8002734 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024b2:	429a      	cmp	r2, r3
 80024b4:	f080 813e 	bcs.w	8002734 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ca:	f000 8088 	beq.w	80025de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	330c      	adds	r3, #12
 80024d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80024e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80024fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002506:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1d9      	bne.n	80024ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3314      	adds	r3, #20
 8002520:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800252a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3314      	adds	r3, #20
 800253a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800253e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002542:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002544:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002546:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800254a:	e841 2300 	strex	r3, r2, [r1]
 800254e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1e1      	bne.n	800251a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3314      	adds	r3, #20
 800255c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002560:	e853 3f00 	ldrex	r3, [r3]
 8002564:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800256c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3314      	adds	r3, #20
 8002576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800257a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800257c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002580:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002582:	e841 2300 	strex	r3, r2, [r1]
 8002586:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e3      	bne.n	8002556 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ae:	f023 0310 	bic.w	r3, r3, #16
 80025b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80025c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025c8:	e841 2300 	strex	r3, r2, [r1]
 80025cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80025ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e3      	bne.n	800259c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fca4 	bl	8000f26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	4619      	mov	r1, r3
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe f813 	bl	8000620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025fa:	e09b      	b.n	8002734 <HAL_UART_IRQHandler+0x518>
 80025fc:	08002969 	.word	0x08002969
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002608:	b29b      	uxth	r3, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 808e 	beq.w	8002738 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800261c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8089 	beq.w	8002738 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	330c      	adds	r3, #12
 800262c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800263c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800264a:	647a      	str	r2, [r7, #68]	@ 0x44
 800264c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002652:	e841 2300 	strex	r3, r2, [r1]
 8002656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e3      	bne.n	8002626 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3314      	adds	r3, #20
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	623b      	str	r3, [r7, #32]
   return(result);
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3314      	adds	r3, #20
 800267e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002682:	633a      	str	r2, [r7, #48]	@ 0x30
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e3      	bne.n	800265e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	e853 3f00 	ldrex	r3, [r3]
 80026b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0310 	bic.w	r3, r3, #16
 80026ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	330c      	adds	r3, #12
 80026c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80026c8:	61fa      	str	r2, [r7, #28]
 80026ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026cc:	69b9      	ldr	r1, [r7, #24]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	e841 2300 	strex	r3, r2, [r1]
 80026d4:	617b      	str	r3, [r7, #20]
   return(result);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e3      	bne.n	80026a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7fd ff99 	bl	8000620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026ee:	e023      	b.n	8002738 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_UART_IRQHandler+0x4f4>
 80026fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f941 	bl	8002990 <UART_Transmit_IT>
    return;
 800270e:	e014      	b.n	800273a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00e      	beq.n	800273a <HAL_UART_IRQHandler+0x51e>
 800271c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f981 	bl	8002a30 <UART_EndTransmit_IT>
    return;
 800272e:	e004      	b.n	800273a <HAL_UART_IRQHandler+0x51e>
    return;
 8002730:	bf00      	nop
 8002732:	e002      	b.n	800273a <HAL_UART_IRQHandler+0x51e>
      return;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <HAL_UART_IRQHandler+0x51e>
      return;
 8002738:	bf00      	nop
  }
}
 800273a:	37e8      	adds	r7, #232	@ 0xe8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278c:	e03b      	b.n	8002806 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d037      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7fe faa9 	bl	8000cec <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	6a3a      	ldr	r2, [r7, #32]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <UART_WaitOnFlagUntilTimeout+0x30>
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e03a      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d023      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b80      	cmp	r3, #128	@ 0x80
 80027c2:	d020      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b40      	cmp	r3, #64	@ 0x40
 80027c8:	d01d      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d116      	bne.n	8002806 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f857 	bl	80028a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2208      	movs	r2, #8
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e00f      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4013      	ands	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	429a      	cmp	r2, r3
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	429a      	cmp	r2, r3
 8002822:	d0b4      	beq.n	800278e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2222      	movs	r2, #34	@ 0x22
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002872:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0220 	orr.w	r2, r2, #32
 8002892:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b095      	sub	sp, #84	@ 0x54
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80028cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e5      	bne.n	80028aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3314      	adds	r3, #20
 80028e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3314      	adds	r3, #20
 80028fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002900:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e5      	bne.n	80028de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	2b01      	cmp	r3, #1
 8002918:	d119      	bne.n	800294e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	60bb      	str	r3, [r7, #8]
   return(result);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f023 0310 	bic.w	r3, r3, #16
 8002930:	647b      	str	r3, [r7, #68]	@ 0x44
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	330c      	adds	r3, #12
 8002938:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800293a:	61ba      	str	r2, [r7, #24]
 800293c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	6979      	ldr	r1, [r7, #20]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	613b      	str	r3, [r7, #16]
   return(result);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e5      	bne.n	800291a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800295c:	bf00      	nop
 800295e:	3754      	adds	r7, #84	@ 0x54
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f7ff fef0 	bl	8002768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b21      	cmp	r3, #33	@ 0x21
 80029a2:	d13e      	bne.n	8002a22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ac:	d114      	bne.n	80029d8 <UART_Transmit_IT+0x48>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d110      	bne.n	80029d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	1c9a      	adds	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	621a      	str	r2, [r3, #32]
 80029d6:	e008      	b.n	80029ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	1c59      	adds	r1, r3, #1
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6211      	str	r1, [r2, #32]
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4619      	mov	r1, r3
 80029f8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fe75 	bl	8002740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	@ 0x30
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b22      	cmp	r3, #34	@ 0x22
 8002a72:	f040 80ae 	bne.w	8002bd2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7e:	d117      	bne.n	8002ab0 <UART_Receive_IT+0x50>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d113      	bne.n	8002ab0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	1c9a      	adds	r2, r3, #2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aae:	e026      	b.n	8002afe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac2:	d007      	beq.n	8002ad4 <UART_Receive_IT+0x74>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <UART_Receive_IT+0x82>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e008      	b.n	8002af4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d15d      	bne.n	8002bce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0220 	bic.w	r2, r2, #32
 8002b20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d135      	bne.n	8002bc4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f023 0310 	bic.w	r3, r3, #16
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7e:	623a      	str	r2, [r7, #32]
 8002b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	69f9      	ldr	r1, [r7, #28]
 8002b84:	6a3a      	ldr	r2, [r7, #32]
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e5      	bne.n	8002b5e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d10a      	bne.n	8002bb6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fd fd2f 	bl	8000620 <HAL_UARTEx_RxEventCallback>
 8002bc2:	e002      	b.n	8002bca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fdc5 	bl	8002754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e002      	b.n	8002bd4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e000      	b.n	8002bd4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
  }
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3730      	adds	r7, #48	@ 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b0c0      	sub	sp, #256	@ 0x100
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf8:	68d9      	ldr	r1, [r3, #12]
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	ea40 0301 	orr.w	r3, r0, r1
 8002c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c34:	f021 010c 	bic.w	r1, r1, #12
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c42:	430b      	orrs	r3, r1
 8002c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c56:	6999      	ldr	r1, [r3, #24]
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	ea40 0301 	orr.w	r3, r0, r1
 8002c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea8 <UART_SetConfig+0x2cc>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d005      	beq.n	8002c7c <UART_SetConfig+0xa0>
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b8d      	ldr	r3, [pc, #564]	@ (8002eac <UART_SetConfig+0x2d0>)
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d104      	bne.n	8002c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c7c:	f7fe fcb4 	bl	80015e8 <HAL_RCC_GetPCLK2Freq>
 8002c80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c84:	e003      	b.n	8002c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c86:	f7fe fc9b 	bl	80015c0 <HAL_RCC_GetPCLK1Freq>
 8002c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c98:	f040 810c 	bne.w	8002eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	1891      	adds	r1, r2, r2
 8002cb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cb6:	415b      	adcs	r3, r3
 8002cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	eb12 0801 	adds.w	r8, r2, r1
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	eb43 0901 	adc.w	r9, r3, r1
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cde:	4690      	mov	r8, r2
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	eb18 0303 	adds.w	r3, r8, r3
 8002ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cec:	462b      	mov	r3, r5
 8002cee:	eb49 0303 	adc.w	r3, r9, r3
 8002cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	18db      	adds	r3, r3, r3
 8002d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d10:	4613      	mov	r3, r2
 8002d12:	eb42 0303 	adc.w	r3, r2, r3
 8002d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d20:	f7fd face 	bl	80002c0 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4b61      	ldr	r3, [pc, #388]	@ (8002eb0 <UART_SetConfig+0x2d4>)
 8002d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	011c      	lsls	r4, r3, #4
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	1891      	adds	r1, r2, r2
 8002d4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d4c:	415b      	adcs	r3, r3
 8002d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d54:	4641      	mov	r1, r8
 8002d56:	eb12 0a01 	adds.w	sl, r2, r1
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d74:	4692      	mov	sl, r2
 8002d76:	469b      	mov	fp, r3
 8002d78:	4643      	mov	r3, r8
 8002d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d82:	464b      	mov	r3, r9
 8002d84:	eb4b 0303 	adc.w	r3, fp, r3
 8002d88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002da0:	460b      	mov	r3, r1
 8002da2:	18db      	adds	r3, r3, r3
 8002da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002da6:	4613      	mov	r3, r2
 8002da8:	eb42 0303 	adc.w	r3, r2, r3
 8002dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002db6:	f7fd fa83 	bl	80002c0 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb0 <UART_SetConfig+0x2d4>)
 8002dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2264      	movs	r2, #100	@ 0x64
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	1acb      	subs	r3, r1, r3
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dd6:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <UART_SetConfig+0x2d4>)
 8002dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002de4:	441c      	add	r4, r3
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002df0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e00:	415b      	adcs	r3, r3
 8002e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e08:	4641      	mov	r1, r8
 8002e0a:	1851      	adds	r1, r2, r1
 8002e0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e0e:	4649      	mov	r1, r9
 8002e10:	414b      	adcs	r3, r1
 8002e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e20:	4659      	mov	r1, fp
 8002e22:	00cb      	lsls	r3, r1, #3
 8002e24:	4651      	mov	r1, sl
 8002e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2a:	4651      	mov	r1, sl
 8002e2c:	00ca      	lsls	r2, r1, #3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	4642      	mov	r2, r8
 8002e36:	189b      	adds	r3, r3, r2
 8002e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	460a      	mov	r2, r1
 8002e40:	eb42 0303 	adc.w	r3, r2, r3
 8002e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	18db      	adds	r3, r3, r3
 8002e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e62:	4613      	mov	r3, r2
 8002e64:	eb42 0303 	adc.w	r3, r2, r3
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e72:	f7fd fa25 	bl	80002c0 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <UART_SetConfig+0x2d4>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2164      	movs	r1, #100	@ 0x64
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	3332      	adds	r3, #50	@ 0x32
 8002e8e:	4a08      	ldr	r2, [pc, #32]	@ (8002eb0 <UART_SetConfig+0x2d4>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 0207 	and.w	r2, r3, #7
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4422      	add	r2, r4
 8002ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ea4:	e106      	b.n	80030b4 <UART_SetConfig+0x4d8>
 8002ea6:	bf00      	nop
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	40011400 	.word	0x40011400
 8002eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	464b      	mov	r3, r9
 8002eca:	1891      	adds	r1, r2, r2
 8002ecc:	6239      	str	r1, [r7, #32]
 8002ece:	415b      	adcs	r3, r3
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	1854      	adds	r4, r2, r1
 8002eda:	4649      	mov	r1, r9
 8002edc:	eb43 0501 	adc.w	r5, r3, r1
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	00eb      	lsls	r3, r5, #3
 8002eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eee:	00e2      	lsls	r2, r4, #3
 8002ef0:	4614      	mov	r4, r2
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	4643      	mov	r3, r8
 8002ef6:	18e3      	adds	r3, r4, r3
 8002ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002efc:	464b      	mov	r3, r9
 8002efe:	eb45 0303 	adc.w	r3, r5, r3
 8002f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f22:	4629      	mov	r1, r5
 8002f24:	008b      	lsls	r3, r1, #2
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	008a      	lsls	r2, r1, #2
 8002f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f34:	f7fd f9c4 	bl	80002c0 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4b60      	ldr	r3, [pc, #384]	@ (80030c0 <UART_SetConfig+0x4e4>)
 8002f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	011c      	lsls	r4, r3, #4
 8002f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f58:	4642      	mov	r2, r8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	1891      	adds	r1, r2, r2
 8002f5e:	61b9      	str	r1, [r7, #24]
 8002f60:	415b      	adcs	r3, r3
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f68:	4641      	mov	r1, r8
 8002f6a:	1851      	adds	r1, r2, r1
 8002f6c:	6139      	str	r1, [r7, #16]
 8002f6e:	4649      	mov	r1, r9
 8002f70:	414b      	adcs	r3, r1
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f80:	4659      	mov	r1, fp
 8002f82:	00cb      	lsls	r3, r1, #3
 8002f84:	4651      	mov	r1, sl
 8002f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8a:	4651      	mov	r1, sl
 8002f8c:	00ca      	lsls	r2, r1, #3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	4642      	mov	r2, r8
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f9c:	464b      	mov	r3, r9
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	eb42 0303 	adc.w	r3, r2, r3
 8002fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	008b      	lsls	r3, r1, #2
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fca:	4641      	mov	r1, r8
 8002fcc:	008a      	lsls	r2, r1, #2
 8002fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fd2:	f7fd f975 	bl	80002c0 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4b38      	ldr	r3, [pc, #224]	@ (80030c0 <UART_SetConfig+0x4e4>)
 8002fde:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2264      	movs	r2, #100	@ 0x64
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	1acb      	subs	r3, r1, r3
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	3332      	adds	r3, #50	@ 0x32
 8002ff0:	4a33      	ldr	r2, [pc, #204]	@ (80030c0 <UART_SetConfig+0x4e4>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ffc:	441c      	add	r4, r3
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003002:	2200      	movs	r2, #0
 8003004:	673b      	str	r3, [r7, #112]	@ 0x70
 8003006:	677a      	str	r2, [r7, #116]	@ 0x74
 8003008:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	1891      	adds	r1, r2, r2
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	415b      	adcs	r3, r3
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800301c:	4641      	mov	r1, r8
 800301e:	1851      	adds	r1, r2, r1
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	4649      	mov	r1, r9
 8003024:	414b      	adcs	r3, r1
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003034:	4659      	mov	r1, fp
 8003036:	00cb      	lsls	r3, r1, #3
 8003038:	4651      	mov	r1, sl
 800303a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800303e:	4651      	mov	r1, sl
 8003040:	00ca      	lsls	r2, r1, #3
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	4603      	mov	r3, r0
 8003048:	4642      	mov	r2, r8
 800304a:	189b      	adds	r3, r3, r2
 800304c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800304e:	464b      	mov	r3, r9
 8003050:	460a      	mov	r2, r1
 8003052:	eb42 0303 	adc.w	r3, r2, r3
 8003056:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	663b      	str	r3, [r7, #96]	@ 0x60
 8003062:	667a      	str	r2, [r7, #100]	@ 0x64
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003070:	4649      	mov	r1, r9
 8003072:	008b      	lsls	r3, r1, #2
 8003074:	4641      	mov	r1, r8
 8003076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800307a:	4641      	mov	r1, r8
 800307c:	008a      	lsls	r2, r1, #2
 800307e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003082:	f7fd f91d 	bl	80002c0 <__aeabi_uldivmod>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4b0d      	ldr	r3, [pc, #52]	@ (80030c0 <UART_SetConfig+0x4e4>)
 800308c:	fba3 1302 	umull	r1, r3, r3, r2
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	2164      	movs	r1, #100	@ 0x64
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	3332      	adds	r3, #50	@ 0x32
 800309e:	4a08      	ldr	r2, [pc, #32]	@ (80030c0 <UART_SetConfig+0x4e4>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	f003 020f 	and.w	r2, r3, #15
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4422      	add	r2, r4
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030ba:	46bd      	mov	sp, r7
 80030bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c0:	51eb851f 	.word	0x51eb851f

080030c4 <std>:
 80030c4:	2300      	movs	r3, #0
 80030c6:	b510      	push	{r4, lr}
 80030c8:	4604      	mov	r4, r0
 80030ca:	e9c0 3300 	strd	r3, r3, [r0]
 80030ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030d2:	6083      	str	r3, [r0, #8]
 80030d4:	8181      	strh	r1, [r0, #12]
 80030d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80030d8:	81c2      	strh	r2, [r0, #14]
 80030da:	6183      	str	r3, [r0, #24]
 80030dc:	4619      	mov	r1, r3
 80030de:	2208      	movs	r2, #8
 80030e0:	305c      	adds	r0, #92	@ 0x5c
 80030e2:	f000 f906 	bl	80032f2 <memset>
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <std+0x58>)
 80030e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <std+0x5c>)
 80030ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <std+0x60>)
 80030f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <std+0x64>)
 80030f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <std+0x68>)
 80030f8:	6224      	str	r4, [r4, #32]
 80030fa:	429c      	cmp	r4, r3
 80030fc:	d006      	beq.n	800310c <std+0x48>
 80030fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003102:	4294      	cmp	r4, r2
 8003104:	d002      	beq.n	800310c <std+0x48>
 8003106:	33d0      	adds	r3, #208	@ 0xd0
 8003108:	429c      	cmp	r4, r3
 800310a:	d105      	bne.n	8003118 <std+0x54>
 800310c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003114:	f000 b966 	b.w	80033e4 <__retarget_lock_init_recursive>
 8003118:	bd10      	pop	{r4, pc}
 800311a:	bf00      	nop
 800311c:	0800326d 	.word	0x0800326d
 8003120:	0800328f 	.word	0x0800328f
 8003124:	080032c7 	.word	0x080032c7
 8003128:	080032eb 	.word	0x080032eb
 800312c:	200000e4 	.word	0x200000e4

08003130 <stdio_exit_handler>:
 8003130:	4a02      	ldr	r2, [pc, #8]	@ (800313c <stdio_exit_handler+0xc>)
 8003132:	4903      	ldr	r1, [pc, #12]	@ (8003140 <stdio_exit_handler+0x10>)
 8003134:	4803      	ldr	r0, [pc, #12]	@ (8003144 <stdio_exit_handler+0x14>)
 8003136:	f000 b869 	b.w	800320c <_fwalk_sglue>
 800313a:	bf00      	nop
 800313c:	2000000c 	.word	0x2000000c
 8003140:	08003c85 	.word	0x08003c85
 8003144:	2000001c 	.word	0x2000001c

08003148 <cleanup_stdio>:
 8003148:	6841      	ldr	r1, [r0, #4]
 800314a:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <cleanup_stdio+0x34>)
 800314c:	4299      	cmp	r1, r3
 800314e:	b510      	push	{r4, lr}
 8003150:	4604      	mov	r4, r0
 8003152:	d001      	beq.n	8003158 <cleanup_stdio+0x10>
 8003154:	f000 fd96 	bl	8003c84 <_fflush_r>
 8003158:	68a1      	ldr	r1, [r4, #8]
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <cleanup_stdio+0x38>)
 800315c:	4299      	cmp	r1, r3
 800315e:	d002      	beq.n	8003166 <cleanup_stdio+0x1e>
 8003160:	4620      	mov	r0, r4
 8003162:	f000 fd8f 	bl	8003c84 <_fflush_r>
 8003166:	68e1      	ldr	r1, [r4, #12]
 8003168:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <cleanup_stdio+0x3c>)
 800316a:	4299      	cmp	r1, r3
 800316c:	d004      	beq.n	8003178 <cleanup_stdio+0x30>
 800316e:	4620      	mov	r0, r4
 8003170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003174:	f000 bd86 	b.w	8003c84 <_fflush_r>
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	200000e4 	.word	0x200000e4
 8003180:	2000014c 	.word	0x2000014c
 8003184:	200001b4 	.word	0x200001b4

08003188 <global_stdio_init.part.0>:
 8003188:	b510      	push	{r4, lr}
 800318a:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <global_stdio_init.part.0+0x30>)
 800318c:	4c0b      	ldr	r4, [pc, #44]	@ (80031bc <global_stdio_init.part.0+0x34>)
 800318e:	4a0c      	ldr	r2, [pc, #48]	@ (80031c0 <global_stdio_init.part.0+0x38>)
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	4620      	mov	r0, r4
 8003194:	2200      	movs	r2, #0
 8003196:	2104      	movs	r1, #4
 8003198:	f7ff ff94 	bl	80030c4 <std>
 800319c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80031a0:	2201      	movs	r2, #1
 80031a2:	2109      	movs	r1, #9
 80031a4:	f7ff ff8e 	bl	80030c4 <std>
 80031a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031ac:	2202      	movs	r2, #2
 80031ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b2:	2112      	movs	r1, #18
 80031b4:	f7ff bf86 	b.w	80030c4 <std>
 80031b8:	2000021c 	.word	0x2000021c
 80031bc:	200000e4 	.word	0x200000e4
 80031c0:	08003131 	.word	0x08003131

080031c4 <__sfp_lock_acquire>:
 80031c4:	4801      	ldr	r0, [pc, #4]	@ (80031cc <__sfp_lock_acquire+0x8>)
 80031c6:	f000 b90e 	b.w	80033e6 <__retarget_lock_acquire_recursive>
 80031ca:	bf00      	nop
 80031cc:	20000225 	.word	0x20000225

080031d0 <__sfp_lock_release>:
 80031d0:	4801      	ldr	r0, [pc, #4]	@ (80031d8 <__sfp_lock_release+0x8>)
 80031d2:	f000 b909 	b.w	80033e8 <__retarget_lock_release_recursive>
 80031d6:	bf00      	nop
 80031d8:	20000225 	.word	0x20000225

080031dc <__sinit>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	4604      	mov	r4, r0
 80031e0:	f7ff fff0 	bl	80031c4 <__sfp_lock_acquire>
 80031e4:	6a23      	ldr	r3, [r4, #32]
 80031e6:	b11b      	cbz	r3, 80031f0 <__sinit+0x14>
 80031e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ec:	f7ff bff0 	b.w	80031d0 <__sfp_lock_release>
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <__sinit+0x28>)
 80031f2:	6223      	str	r3, [r4, #32]
 80031f4:	4b04      	ldr	r3, [pc, #16]	@ (8003208 <__sinit+0x2c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f5      	bne.n	80031e8 <__sinit+0xc>
 80031fc:	f7ff ffc4 	bl	8003188 <global_stdio_init.part.0>
 8003200:	e7f2      	b.n	80031e8 <__sinit+0xc>
 8003202:	bf00      	nop
 8003204:	08003149 	.word	0x08003149
 8003208:	2000021c 	.word	0x2000021c

0800320c <_fwalk_sglue>:
 800320c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003210:	4607      	mov	r7, r0
 8003212:	4688      	mov	r8, r1
 8003214:	4614      	mov	r4, r2
 8003216:	2600      	movs	r6, #0
 8003218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800321c:	f1b9 0901 	subs.w	r9, r9, #1
 8003220:	d505      	bpl.n	800322e <_fwalk_sglue+0x22>
 8003222:	6824      	ldr	r4, [r4, #0]
 8003224:	2c00      	cmp	r4, #0
 8003226:	d1f7      	bne.n	8003218 <_fwalk_sglue+0xc>
 8003228:	4630      	mov	r0, r6
 800322a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800322e:	89ab      	ldrh	r3, [r5, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d907      	bls.n	8003244 <_fwalk_sglue+0x38>
 8003234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003238:	3301      	adds	r3, #1
 800323a:	d003      	beq.n	8003244 <_fwalk_sglue+0x38>
 800323c:	4629      	mov	r1, r5
 800323e:	4638      	mov	r0, r7
 8003240:	47c0      	blx	r8
 8003242:	4306      	orrs	r6, r0
 8003244:	3568      	adds	r5, #104	@ 0x68
 8003246:	e7e9      	b.n	800321c <_fwalk_sglue+0x10>

08003248 <iprintf>:
 8003248:	b40f      	push	{r0, r1, r2, r3}
 800324a:	b507      	push	{r0, r1, r2, lr}
 800324c:	4906      	ldr	r1, [pc, #24]	@ (8003268 <iprintf+0x20>)
 800324e:	ab04      	add	r3, sp, #16
 8003250:	6808      	ldr	r0, [r1, #0]
 8003252:	f853 2b04 	ldr.w	r2, [r3], #4
 8003256:	6881      	ldr	r1, [r0, #8]
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	f000 f9e9 	bl	8003630 <_vfiprintf_r>
 800325e:	b003      	add	sp, #12
 8003260:	f85d eb04 	ldr.w	lr, [sp], #4
 8003264:	b004      	add	sp, #16
 8003266:	4770      	bx	lr
 8003268:	20000018 	.word	0x20000018

0800326c <__sread>:
 800326c:	b510      	push	{r4, lr}
 800326e:	460c      	mov	r4, r1
 8003270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003274:	f000 f868 	bl	8003348 <_read_r>
 8003278:	2800      	cmp	r0, #0
 800327a:	bfab      	itete	ge
 800327c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800327e:	89a3      	ldrhlt	r3, [r4, #12]
 8003280:	181b      	addge	r3, r3, r0
 8003282:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003286:	bfac      	ite	ge
 8003288:	6563      	strge	r3, [r4, #84]	@ 0x54
 800328a:	81a3      	strhlt	r3, [r4, #12]
 800328c:	bd10      	pop	{r4, pc}

0800328e <__swrite>:
 800328e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003292:	461f      	mov	r7, r3
 8003294:	898b      	ldrh	r3, [r1, #12]
 8003296:	05db      	lsls	r3, r3, #23
 8003298:	4605      	mov	r5, r0
 800329a:	460c      	mov	r4, r1
 800329c:	4616      	mov	r6, r2
 800329e:	d505      	bpl.n	80032ac <__swrite+0x1e>
 80032a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a4:	2302      	movs	r3, #2
 80032a6:	2200      	movs	r2, #0
 80032a8:	f000 f83c 	bl	8003324 <_lseek_r>
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	4632      	mov	r2, r6
 80032ba:	463b      	mov	r3, r7
 80032bc:	4628      	mov	r0, r5
 80032be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032c2:	f000 b853 	b.w	800336c <_write_r>

080032c6 <__sseek>:
 80032c6:	b510      	push	{r4, lr}
 80032c8:	460c      	mov	r4, r1
 80032ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ce:	f000 f829 	bl	8003324 <_lseek_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	bf15      	itete	ne
 80032d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032e2:	81a3      	strheq	r3, [r4, #12]
 80032e4:	bf18      	it	ne
 80032e6:	81a3      	strhne	r3, [r4, #12]
 80032e8:	bd10      	pop	{r4, pc}

080032ea <__sclose>:
 80032ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ee:	f000 b809 	b.w	8003304 <_close_r>

080032f2 <memset>:
 80032f2:	4402      	add	r2, r0
 80032f4:	4603      	mov	r3, r0
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d100      	bne.n	80032fc <memset+0xa>
 80032fa:	4770      	bx	lr
 80032fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003300:	e7f9      	b.n	80032f6 <memset+0x4>
	...

08003304 <_close_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4d06      	ldr	r5, [pc, #24]	@ (8003320 <_close_r+0x1c>)
 8003308:	2300      	movs	r3, #0
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7fd fbdf 	bl	8000ad2 <_close>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_close_r+0x1a>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_close_r+0x1a>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	20000220 	.word	0x20000220

08003324 <_lseek_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4d07      	ldr	r5, [pc, #28]	@ (8003344 <_lseek_r+0x20>)
 8003328:	4604      	mov	r4, r0
 800332a:	4608      	mov	r0, r1
 800332c:	4611      	mov	r1, r2
 800332e:	2200      	movs	r2, #0
 8003330:	602a      	str	r2, [r5, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	f7fd fbf4 	bl	8000b20 <_lseek>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_lseek_r+0x1e>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	b103      	cbz	r3, 8003342 <_lseek_r+0x1e>
 8003340:	6023      	str	r3, [r4, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	20000220 	.word	0x20000220

08003348 <_read_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4d07      	ldr	r5, [pc, #28]	@ (8003368 <_read_r+0x20>)
 800334c:	4604      	mov	r4, r0
 800334e:	4608      	mov	r0, r1
 8003350:	4611      	mov	r1, r2
 8003352:	2200      	movs	r2, #0
 8003354:	602a      	str	r2, [r5, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	f7fd fb82 	bl	8000a60 <_read>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d102      	bne.n	8003366 <_read_r+0x1e>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	b103      	cbz	r3, 8003366 <_read_r+0x1e>
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	20000220 	.word	0x20000220

0800336c <_write_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	4d07      	ldr	r5, [pc, #28]	@ (800338c <_write_r+0x20>)
 8003370:	4604      	mov	r4, r0
 8003372:	4608      	mov	r0, r1
 8003374:	4611      	mov	r1, r2
 8003376:	2200      	movs	r2, #0
 8003378:	602a      	str	r2, [r5, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	f7fd fb8d 	bl	8000a9a <_write>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_write_r+0x1e>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_write_r+0x1e>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	20000220 	.word	0x20000220

08003390 <__errno>:
 8003390:	4b01      	ldr	r3, [pc, #4]	@ (8003398 <__errno+0x8>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000018 	.word	0x20000018

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4d0d      	ldr	r5, [pc, #52]	@ (80033d4 <__libc_init_array+0x38>)
 80033a0:	4c0d      	ldr	r4, [pc, #52]	@ (80033d8 <__libc_init_array+0x3c>)
 80033a2:	1b64      	subs	r4, r4, r5
 80033a4:	10a4      	asrs	r4, r4, #2
 80033a6:	2600      	movs	r6, #0
 80033a8:	42a6      	cmp	r6, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	4d0b      	ldr	r5, [pc, #44]	@ (80033dc <__libc_init_array+0x40>)
 80033ae:	4c0c      	ldr	r4, [pc, #48]	@ (80033e0 <__libc_init_array+0x44>)
 80033b0:	f000 fdb8 	bl	8003f24 <_init>
 80033b4:	1b64      	subs	r4, r4, r5
 80033b6:	10a4      	asrs	r4, r4, #2
 80033b8:	2600      	movs	r6, #0
 80033ba:	42a6      	cmp	r6, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c4:	4798      	blx	r3
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ce:	4798      	blx	r3
 80033d0:	3601      	adds	r6, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	08003fa0 	.word	0x08003fa0
 80033d8:	08003fa0 	.word	0x08003fa0
 80033dc:	08003fa0 	.word	0x08003fa0
 80033e0:	08003fa4 	.word	0x08003fa4

080033e4 <__retarget_lock_init_recursive>:
 80033e4:	4770      	bx	lr

080033e6 <__retarget_lock_acquire_recursive>:
 80033e6:	4770      	bx	lr

080033e8 <__retarget_lock_release_recursive>:
 80033e8:	4770      	bx	lr
	...

080033ec <_free_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4605      	mov	r5, r0
 80033f0:	2900      	cmp	r1, #0
 80033f2:	d041      	beq.n	8003478 <_free_r+0x8c>
 80033f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f8:	1f0c      	subs	r4, r1, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bfb8      	it	lt
 80033fe:	18e4      	addlt	r4, r4, r3
 8003400:	f000 f8e0 	bl	80035c4 <__malloc_lock>
 8003404:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <_free_r+0x90>)
 8003406:	6813      	ldr	r3, [r2, #0]
 8003408:	b933      	cbnz	r3, 8003418 <_free_r+0x2c>
 800340a:	6063      	str	r3, [r4, #4]
 800340c:	6014      	str	r4, [r2, #0]
 800340e:	4628      	mov	r0, r5
 8003410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003414:	f000 b8dc 	b.w	80035d0 <__malloc_unlock>
 8003418:	42a3      	cmp	r3, r4
 800341a:	d908      	bls.n	800342e <_free_r+0x42>
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	1821      	adds	r1, r4, r0
 8003420:	428b      	cmp	r3, r1
 8003422:	bf01      	itttt	eq
 8003424:	6819      	ldreq	r1, [r3, #0]
 8003426:	685b      	ldreq	r3, [r3, #4]
 8003428:	1809      	addeq	r1, r1, r0
 800342a:	6021      	streq	r1, [r4, #0]
 800342c:	e7ed      	b.n	800340a <_free_r+0x1e>
 800342e:	461a      	mov	r2, r3
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	b10b      	cbz	r3, 8003438 <_free_r+0x4c>
 8003434:	42a3      	cmp	r3, r4
 8003436:	d9fa      	bls.n	800342e <_free_r+0x42>
 8003438:	6811      	ldr	r1, [r2, #0]
 800343a:	1850      	adds	r0, r2, r1
 800343c:	42a0      	cmp	r0, r4
 800343e:	d10b      	bne.n	8003458 <_free_r+0x6c>
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	4401      	add	r1, r0
 8003444:	1850      	adds	r0, r2, r1
 8003446:	4283      	cmp	r3, r0
 8003448:	6011      	str	r1, [r2, #0]
 800344a:	d1e0      	bne.n	800340e <_free_r+0x22>
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	6053      	str	r3, [r2, #4]
 8003452:	4408      	add	r0, r1
 8003454:	6010      	str	r0, [r2, #0]
 8003456:	e7da      	b.n	800340e <_free_r+0x22>
 8003458:	d902      	bls.n	8003460 <_free_r+0x74>
 800345a:	230c      	movs	r3, #12
 800345c:	602b      	str	r3, [r5, #0]
 800345e:	e7d6      	b.n	800340e <_free_r+0x22>
 8003460:	6820      	ldr	r0, [r4, #0]
 8003462:	1821      	adds	r1, r4, r0
 8003464:	428b      	cmp	r3, r1
 8003466:	bf04      	itt	eq
 8003468:	6819      	ldreq	r1, [r3, #0]
 800346a:	685b      	ldreq	r3, [r3, #4]
 800346c:	6063      	str	r3, [r4, #4]
 800346e:	bf04      	itt	eq
 8003470:	1809      	addeq	r1, r1, r0
 8003472:	6021      	streq	r1, [r4, #0]
 8003474:	6054      	str	r4, [r2, #4]
 8003476:	e7ca      	b.n	800340e <_free_r+0x22>
 8003478:	bd38      	pop	{r3, r4, r5, pc}
 800347a:	bf00      	nop
 800347c:	2000022c 	.word	0x2000022c

08003480 <sbrk_aligned>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	4e0f      	ldr	r6, [pc, #60]	@ (80034c0 <sbrk_aligned+0x40>)
 8003484:	460c      	mov	r4, r1
 8003486:	6831      	ldr	r1, [r6, #0]
 8003488:	4605      	mov	r5, r0
 800348a:	b911      	cbnz	r1, 8003492 <sbrk_aligned+0x12>
 800348c:	f000 fcb6 	bl	8003dfc <_sbrk_r>
 8003490:	6030      	str	r0, [r6, #0]
 8003492:	4621      	mov	r1, r4
 8003494:	4628      	mov	r0, r5
 8003496:	f000 fcb1 	bl	8003dfc <_sbrk_r>
 800349a:	1c43      	adds	r3, r0, #1
 800349c:	d103      	bne.n	80034a6 <sbrk_aligned+0x26>
 800349e:	f04f 34ff 	mov.w	r4, #4294967295
 80034a2:	4620      	mov	r0, r4
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
 80034a6:	1cc4      	adds	r4, r0, #3
 80034a8:	f024 0403 	bic.w	r4, r4, #3
 80034ac:	42a0      	cmp	r0, r4
 80034ae:	d0f8      	beq.n	80034a2 <sbrk_aligned+0x22>
 80034b0:	1a21      	subs	r1, r4, r0
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 fca2 	bl	8003dfc <_sbrk_r>
 80034b8:	3001      	adds	r0, #1
 80034ba:	d1f2      	bne.n	80034a2 <sbrk_aligned+0x22>
 80034bc:	e7ef      	b.n	800349e <sbrk_aligned+0x1e>
 80034be:	bf00      	nop
 80034c0:	20000228 	.word	0x20000228

080034c4 <_malloc_r>:
 80034c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c8:	1ccd      	adds	r5, r1, #3
 80034ca:	f025 0503 	bic.w	r5, r5, #3
 80034ce:	3508      	adds	r5, #8
 80034d0:	2d0c      	cmp	r5, #12
 80034d2:	bf38      	it	cc
 80034d4:	250c      	movcc	r5, #12
 80034d6:	2d00      	cmp	r5, #0
 80034d8:	4606      	mov	r6, r0
 80034da:	db01      	blt.n	80034e0 <_malloc_r+0x1c>
 80034dc:	42a9      	cmp	r1, r5
 80034de:	d904      	bls.n	80034ea <_malloc_r+0x26>
 80034e0:	230c      	movs	r3, #12
 80034e2:	6033      	str	r3, [r6, #0]
 80034e4:	2000      	movs	r0, #0
 80034e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035c0 <_malloc_r+0xfc>
 80034ee:	f000 f869 	bl	80035c4 <__malloc_lock>
 80034f2:	f8d8 3000 	ldr.w	r3, [r8]
 80034f6:	461c      	mov	r4, r3
 80034f8:	bb44      	cbnz	r4, 800354c <_malloc_r+0x88>
 80034fa:	4629      	mov	r1, r5
 80034fc:	4630      	mov	r0, r6
 80034fe:	f7ff ffbf 	bl	8003480 <sbrk_aligned>
 8003502:	1c43      	adds	r3, r0, #1
 8003504:	4604      	mov	r4, r0
 8003506:	d158      	bne.n	80035ba <_malloc_r+0xf6>
 8003508:	f8d8 4000 	ldr.w	r4, [r8]
 800350c:	4627      	mov	r7, r4
 800350e:	2f00      	cmp	r7, #0
 8003510:	d143      	bne.n	800359a <_malloc_r+0xd6>
 8003512:	2c00      	cmp	r4, #0
 8003514:	d04b      	beq.n	80035ae <_malloc_r+0xea>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	4639      	mov	r1, r7
 800351a:	4630      	mov	r0, r6
 800351c:	eb04 0903 	add.w	r9, r4, r3
 8003520:	f000 fc6c 	bl	8003dfc <_sbrk_r>
 8003524:	4581      	cmp	r9, r0
 8003526:	d142      	bne.n	80035ae <_malloc_r+0xea>
 8003528:	6821      	ldr	r1, [r4, #0]
 800352a:	1a6d      	subs	r5, r5, r1
 800352c:	4629      	mov	r1, r5
 800352e:	4630      	mov	r0, r6
 8003530:	f7ff ffa6 	bl	8003480 <sbrk_aligned>
 8003534:	3001      	adds	r0, #1
 8003536:	d03a      	beq.n	80035ae <_malloc_r+0xea>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	442b      	add	r3, r5
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	f8d8 3000 	ldr.w	r3, [r8]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	bb62      	cbnz	r2, 80035a0 <_malloc_r+0xdc>
 8003546:	f8c8 7000 	str.w	r7, [r8]
 800354a:	e00f      	b.n	800356c <_malloc_r+0xa8>
 800354c:	6822      	ldr	r2, [r4, #0]
 800354e:	1b52      	subs	r2, r2, r5
 8003550:	d420      	bmi.n	8003594 <_malloc_r+0xd0>
 8003552:	2a0b      	cmp	r2, #11
 8003554:	d917      	bls.n	8003586 <_malloc_r+0xc2>
 8003556:	1961      	adds	r1, r4, r5
 8003558:	42a3      	cmp	r3, r4
 800355a:	6025      	str	r5, [r4, #0]
 800355c:	bf18      	it	ne
 800355e:	6059      	strne	r1, [r3, #4]
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	bf08      	it	eq
 8003564:	f8c8 1000 	streq.w	r1, [r8]
 8003568:	5162      	str	r2, [r4, r5]
 800356a:	604b      	str	r3, [r1, #4]
 800356c:	4630      	mov	r0, r6
 800356e:	f000 f82f 	bl	80035d0 <__malloc_unlock>
 8003572:	f104 000b 	add.w	r0, r4, #11
 8003576:	1d23      	adds	r3, r4, #4
 8003578:	f020 0007 	bic.w	r0, r0, #7
 800357c:	1ac2      	subs	r2, r0, r3
 800357e:	bf1c      	itt	ne
 8003580:	1a1b      	subne	r3, r3, r0
 8003582:	50a3      	strne	r3, [r4, r2]
 8003584:	e7af      	b.n	80034e6 <_malloc_r+0x22>
 8003586:	6862      	ldr	r2, [r4, #4]
 8003588:	42a3      	cmp	r3, r4
 800358a:	bf0c      	ite	eq
 800358c:	f8c8 2000 	streq.w	r2, [r8]
 8003590:	605a      	strne	r2, [r3, #4]
 8003592:	e7eb      	b.n	800356c <_malloc_r+0xa8>
 8003594:	4623      	mov	r3, r4
 8003596:	6864      	ldr	r4, [r4, #4]
 8003598:	e7ae      	b.n	80034f8 <_malloc_r+0x34>
 800359a:	463c      	mov	r4, r7
 800359c:	687f      	ldr	r7, [r7, #4]
 800359e:	e7b6      	b.n	800350e <_malloc_r+0x4a>
 80035a0:	461a      	mov	r2, r3
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	42a3      	cmp	r3, r4
 80035a6:	d1fb      	bne.n	80035a0 <_malloc_r+0xdc>
 80035a8:	2300      	movs	r3, #0
 80035aa:	6053      	str	r3, [r2, #4]
 80035ac:	e7de      	b.n	800356c <_malloc_r+0xa8>
 80035ae:	230c      	movs	r3, #12
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	4630      	mov	r0, r6
 80035b4:	f000 f80c 	bl	80035d0 <__malloc_unlock>
 80035b8:	e794      	b.n	80034e4 <_malloc_r+0x20>
 80035ba:	6005      	str	r5, [r0, #0]
 80035bc:	e7d6      	b.n	800356c <_malloc_r+0xa8>
 80035be:	bf00      	nop
 80035c0:	2000022c 	.word	0x2000022c

080035c4 <__malloc_lock>:
 80035c4:	4801      	ldr	r0, [pc, #4]	@ (80035cc <__malloc_lock+0x8>)
 80035c6:	f7ff bf0e 	b.w	80033e6 <__retarget_lock_acquire_recursive>
 80035ca:	bf00      	nop
 80035cc:	20000224 	.word	0x20000224

080035d0 <__malloc_unlock>:
 80035d0:	4801      	ldr	r0, [pc, #4]	@ (80035d8 <__malloc_unlock+0x8>)
 80035d2:	f7ff bf09 	b.w	80033e8 <__retarget_lock_release_recursive>
 80035d6:	bf00      	nop
 80035d8:	20000224 	.word	0x20000224

080035dc <__sfputc_r>:
 80035dc:	6893      	ldr	r3, [r2, #8]
 80035de:	3b01      	subs	r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	b410      	push	{r4}
 80035e4:	6093      	str	r3, [r2, #8]
 80035e6:	da08      	bge.n	80035fa <__sfputc_r+0x1e>
 80035e8:	6994      	ldr	r4, [r2, #24]
 80035ea:	42a3      	cmp	r3, r4
 80035ec:	db01      	blt.n	80035f2 <__sfputc_r+0x16>
 80035ee:	290a      	cmp	r1, #10
 80035f0:	d103      	bne.n	80035fa <__sfputc_r+0x1e>
 80035f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f6:	f000 bb6d 	b.w	8003cd4 <__swbuf_r>
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	1c58      	adds	r0, r3, #1
 80035fe:	6010      	str	r0, [r2, #0]
 8003600:	7019      	strb	r1, [r3, #0]
 8003602:	4608      	mov	r0, r1
 8003604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003608:	4770      	bx	lr

0800360a <__sfputs_r>:
 800360a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360c:	4606      	mov	r6, r0
 800360e:	460f      	mov	r7, r1
 8003610:	4614      	mov	r4, r2
 8003612:	18d5      	adds	r5, r2, r3
 8003614:	42ac      	cmp	r4, r5
 8003616:	d101      	bne.n	800361c <__sfputs_r+0x12>
 8003618:	2000      	movs	r0, #0
 800361a:	e007      	b.n	800362c <__sfputs_r+0x22>
 800361c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003620:	463a      	mov	r2, r7
 8003622:	4630      	mov	r0, r6
 8003624:	f7ff ffda 	bl	80035dc <__sfputc_r>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d1f3      	bne.n	8003614 <__sfputs_r+0xa>
 800362c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003630 <_vfiprintf_r>:
 8003630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003634:	460d      	mov	r5, r1
 8003636:	b09d      	sub	sp, #116	@ 0x74
 8003638:	4614      	mov	r4, r2
 800363a:	4698      	mov	r8, r3
 800363c:	4606      	mov	r6, r0
 800363e:	b118      	cbz	r0, 8003648 <_vfiprintf_r+0x18>
 8003640:	6a03      	ldr	r3, [r0, #32]
 8003642:	b90b      	cbnz	r3, 8003648 <_vfiprintf_r+0x18>
 8003644:	f7ff fdca 	bl	80031dc <__sinit>
 8003648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800364a:	07d9      	lsls	r1, r3, #31
 800364c:	d405      	bmi.n	800365a <_vfiprintf_r+0x2a>
 800364e:	89ab      	ldrh	r3, [r5, #12]
 8003650:	059a      	lsls	r2, r3, #22
 8003652:	d402      	bmi.n	800365a <_vfiprintf_r+0x2a>
 8003654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003656:	f7ff fec6 	bl	80033e6 <__retarget_lock_acquire_recursive>
 800365a:	89ab      	ldrh	r3, [r5, #12]
 800365c:	071b      	lsls	r3, r3, #28
 800365e:	d501      	bpl.n	8003664 <_vfiprintf_r+0x34>
 8003660:	692b      	ldr	r3, [r5, #16]
 8003662:	b99b      	cbnz	r3, 800368c <_vfiprintf_r+0x5c>
 8003664:	4629      	mov	r1, r5
 8003666:	4630      	mov	r0, r6
 8003668:	f000 fb72 	bl	8003d50 <__swsetup_r>
 800366c:	b170      	cbz	r0, 800368c <_vfiprintf_r+0x5c>
 800366e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003670:	07dc      	lsls	r4, r3, #31
 8003672:	d504      	bpl.n	800367e <_vfiprintf_r+0x4e>
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	b01d      	add	sp, #116	@ 0x74
 800367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367e:	89ab      	ldrh	r3, [r5, #12]
 8003680:	0598      	lsls	r0, r3, #22
 8003682:	d4f7      	bmi.n	8003674 <_vfiprintf_r+0x44>
 8003684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003686:	f7ff feaf 	bl	80033e8 <__retarget_lock_release_recursive>
 800368a:	e7f3      	b.n	8003674 <_vfiprintf_r+0x44>
 800368c:	2300      	movs	r3, #0
 800368e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003690:	2320      	movs	r3, #32
 8003692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003696:	f8cd 800c 	str.w	r8, [sp, #12]
 800369a:	2330      	movs	r3, #48	@ 0x30
 800369c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800384c <_vfiprintf_r+0x21c>
 80036a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036a4:	f04f 0901 	mov.w	r9, #1
 80036a8:	4623      	mov	r3, r4
 80036aa:	469a      	mov	sl, r3
 80036ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036b0:	b10a      	cbz	r2, 80036b6 <_vfiprintf_r+0x86>
 80036b2:	2a25      	cmp	r2, #37	@ 0x25
 80036b4:	d1f9      	bne.n	80036aa <_vfiprintf_r+0x7a>
 80036b6:	ebba 0b04 	subs.w	fp, sl, r4
 80036ba:	d00b      	beq.n	80036d4 <_vfiprintf_r+0xa4>
 80036bc:	465b      	mov	r3, fp
 80036be:	4622      	mov	r2, r4
 80036c0:	4629      	mov	r1, r5
 80036c2:	4630      	mov	r0, r6
 80036c4:	f7ff ffa1 	bl	800360a <__sfputs_r>
 80036c8:	3001      	adds	r0, #1
 80036ca:	f000 80a7 	beq.w	800381c <_vfiprintf_r+0x1ec>
 80036ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036d0:	445a      	add	r2, fp
 80036d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80036d4:	f89a 3000 	ldrb.w	r3, [sl]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 809f 	beq.w	800381c <_vfiprintf_r+0x1ec>
 80036de:	2300      	movs	r3, #0
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036e8:	f10a 0a01 	add.w	sl, sl, #1
 80036ec:	9304      	str	r3, [sp, #16]
 80036ee:	9307      	str	r3, [sp, #28]
 80036f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80036f6:	4654      	mov	r4, sl
 80036f8:	2205      	movs	r2, #5
 80036fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036fe:	4853      	ldr	r0, [pc, #332]	@ (800384c <_vfiprintf_r+0x21c>)
 8003700:	f7fc fd8e 	bl	8000220 <memchr>
 8003704:	9a04      	ldr	r2, [sp, #16]
 8003706:	b9d8      	cbnz	r0, 8003740 <_vfiprintf_r+0x110>
 8003708:	06d1      	lsls	r1, r2, #27
 800370a:	bf44      	itt	mi
 800370c:	2320      	movmi	r3, #32
 800370e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003712:	0713      	lsls	r3, r2, #28
 8003714:	bf44      	itt	mi
 8003716:	232b      	movmi	r3, #43	@ 0x2b
 8003718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800371c:	f89a 3000 	ldrb.w	r3, [sl]
 8003720:	2b2a      	cmp	r3, #42	@ 0x2a
 8003722:	d015      	beq.n	8003750 <_vfiprintf_r+0x120>
 8003724:	9a07      	ldr	r2, [sp, #28]
 8003726:	4654      	mov	r4, sl
 8003728:	2000      	movs	r0, #0
 800372a:	f04f 0c0a 	mov.w	ip, #10
 800372e:	4621      	mov	r1, r4
 8003730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003734:	3b30      	subs	r3, #48	@ 0x30
 8003736:	2b09      	cmp	r3, #9
 8003738:	d94b      	bls.n	80037d2 <_vfiprintf_r+0x1a2>
 800373a:	b1b0      	cbz	r0, 800376a <_vfiprintf_r+0x13a>
 800373c:	9207      	str	r2, [sp, #28]
 800373e:	e014      	b.n	800376a <_vfiprintf_r+0x13a>
 8003740:	eba0 0308 	sub.w	r3, r0, r8
 8003744:	fa09 f303 	lsl.w	r3, r9, r3
 8003748:	4313      	orrs	r3, r2
 800374a:	9304      	str	r3, [sp, #16]
 800374c:	46a2      	mov	sl, r4
 800374e:	e7d2      	b.n	80036f6 <_vfiprintf_r+0xc6>
 8003750:	9b03      	ldr	r3, [sp, #12]
 8003752:	1d19      	adds	r1, r3, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	9103      	str	r1, [sp, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	bfbb      	ittet	lt
 800375c:	425b      	neglt	r3, r3
 800375e:	f042 0202 	orrlt.w	r2, r2, #2
 8003762:	9307      	strge	r3, [sp, #28]
 8003764:	9307      	strlt	r3, [sp, #28]
 8003766:	bfb8      	it	lt
 8003768:	9204      	strlt	r2, [sp, #16]
 800376a:	7823      	ldrb	r3, [r4, #0]
 800376c:	2b2e      	cmp	r3, #46	@ 0x2e
 800376e:	d10a      	bne.n	8003786 <_vfiprintf_r+0x156>
 8003770:	7863      	ldrb	r3, [r4, #1]
 8003772:	2b2a      	cmp	r3, #42	@ 0x2a
 8003774:	d132      	bne.n	80037dc <_vfiprintf_r+0x1ac>
 8003776:	9b03      	ldr	r3, [sp, #12]
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	9203      	str	r2, [sp, #12]
 800377e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003782:	3402      	adds	r4, #2
 8003784:	9305      	str	r3, [sp, #20]
 8003786:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800385c <_vfiprintf_r+0x22c>
 800378a:	7821      	ldrb	r1, [r4, #0]
 800378c:	2203      	movs	r2, #3
 800378e:	4650      	mov	r0, sl
 8003790:	f7fc fd46 	bl	8000220 <memchr>
 8003794:	b138      	cbz	r0, 80037a6 <_vfiprintf_r+0x176>
 8003796:	9b04      	ldr	r3, [sp, #16]
 8003798:	eba0 000a 	sub.w	r0, r0, sl
 800379c:	2240      	movs	r2, #64	@ 0x40
 800379e:	4082      	lsls	r2, r0
 80037a0:	4313      	orrs	r3, r2
 80037a2:	3401      	adds	r4, #1
 80037a4:	9304      	str	r3, [sp, #16]
 80037a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037aa:	4829      	ldr	r0, [pc, #164]	@ (8003850 <_vfiprintf_r+0x220>)
 80037ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037b0:	2206      	movs	r2, #6
 80037b2:	f7fc fd35 	bl	8000220 <memchr>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d03f      	beq.n	800383a <_vfiprintf_r+0x20a>
 80037ba:	4b26      	ldr	r3, [pc, #152]	@ (8003854 <_vfiprintf_r+0x224>)
 80037bc:	bb1b      	cbnz	r3, 8003806 <_vfiprintf_r+0x1d6>
 80037be:	9b03      	ldr	r3, [sp, #12]
 80037c0:	3307      	adds	r3, #7
 80037c2:	f023 0307 	bic.w	r3, r3, #7
 80037c6:	3308      	adds	r3, #8
 80037c8:	9303      	str	r3, [sp, #12]
 80037ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037cc:	443b      	add	r3, r7
 80037ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80037d0:	e76a      	b.n	80036a8 <_vfiprintf_r+0x78>
 80037d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037d6:	460c      	mov	r4, r1
 80037d8:	2001      	movs	r0, #1
 80037da:	e7a8      	b.n	800372e <_vfiprintf_r+0xfe>
 80037dc:	2300      	movs	r3, #0
 80037de:	3401      	adds	r4, #1
 80037e0:	9305      	str	r3, [sp, #20]
 80037e2:	4619      	mov	r1, r3
 80037e4:	f04f 0c0a 	mov.w	ip, #10
 80037e8:	4620      	mov	r0, r4
 80037ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ee:	3a30      	subs	r2, #48	@ 0x30
 80037f0:	2a09      	cmp	r2, #9
 80037f2:	d903      	bls.n	80037fc <_vfiprintf_r+0x1cc>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0c6      	beq.n	8003786 <_vfiprintf_r+0x156>
 80037f8:	9105      	str	r1, [sp, #20]
 80037fa:	e7c4      	b.n	8003786 <_vfiprintf_r+0x156>
 80037fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003800:	4604      	mov	r4, r0
 8003802:	2301      	movs	r3, #1
 8003804:	e7f0      	b.n	80037e8 <_vfiprintf_r+0x1b8>
 8003806:	ab03      	add	r3, sp, #12
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	462a      	mov	r2, r5
 800380c:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <_vfiprintf_r+0x228>)
 800380e:	a904      	add	r1, sp, #16
 8003810:	4630      	mov	r0, r6
 8003812:	f3af 8000 	nop.w
 8003816:	4607      	mov	r7, r0
 8003818:	1c78      	adds	r0, r7, #1
 800381a:	d1d6      	bne.n	80037ca <_vfiprintf_r+0x19a>
 800381c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800381e:	07d9      	lsls	r1, r3, #31
 8003820:	d405      	bmi.n	800382e <_vfiprintf_r+0x1fe>
 8003822:	89ab      	ldrh	r3, [r5, #12]
 8003824:	059a      	lsls	r2, r3, #22
 8003826:	d402      	bmi.n	800382e <_vfiprintf_r+0x1fe>
 8003828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800382a:	f7ff fddd 	bl	80033e8 <__retarget_lock_release_recursive>
 800382e:	89ab      	ldrh	r3, [r5, #12]
 8003830:	065b      	lsls	r3, r3, #25
 8003832:	f53f af1f 	bmi.w	8003674 <_vfiprintf_r+0x44>
 8003836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003838:	e71e      	b.n	8003678 <_vfiprintf_r+0x48>
 800383a:	ab03      	add	r3, sp, #12
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	462a      	mov	r2, r5
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <_vfiprintf_r+0x228>)
 8003842:	a904      	add	r1, sp, #16
 8003844:	4630      	mov	r0, r6
 8003846:	f000 f879 	bl	800393c <_printf_i>
 800384a:	e7e4      	b.n	8003816 <_vfiprintf_r+0x1e6>
 800384c:	08003f64 	.word	0x08003f64
 8003850:	08003f6e 	.word	0x08003f6e
 8003854:	00000000 	.word	0x00000000
 8003858:	0800360b 	.word	0x0800360b
 800385c:	08003f6a 	.word	0x08003f6a

08003860 <_printf_common>:
 8003860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	4616      	mov	r6, r2
 8003866:	4698      	mov	r8, r3
 8003868:	688a      	ldr	r2, [r1, #8]
 800386a:	690b      	ldr	r3, [r1, #16]
 800386c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003870:	4293      	cmp	r3, r2
 8003872:	bfb8      	it	lt
 8003874:	4613      	movlt	r3, r2
 8003876:	6033      	str	r3, [r6, #0]
 8003878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800387c:	4607      	mov	r7, r0
 800387e:	460c      	mov	r4, r1
 8003880:	b10a      	cbz	r2, 8003886 <_printf_common+0x26>
 8003882:	3301      	adds	r3, #1
 8003884:	6033      	str	r3, [r6, #0]
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	0699      	lsls	r1, r3, #26
 800388a:	bf42      	ittt	mi
 800388c:	6833      	ldrmi	r3, [r6, #0]
 800388e:	3302      	addmi	r3, #2
 8003890:	6033      	strmi	r3, [r6, #0]
 8003892:	6825      	ldr	r5, [r4, #0]
 8003894:	f015 0506 	ands.w	r5, r5, #6
 8003898:	d106      	bne.n	80038a8 <_printf_common+0x48>
 800389a:	f104 0a19 	add.w	sl, r4, #25
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	6832      	ldr	r2, [r6, #0]
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	42ab      	cmp	r3, r5
 80038a6:	dc26      	bgt.n	80038f6 <_printf_common+0x96>
 80038a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038ac:	6822      	ldr	r2, [r4, #0]
 80038ae:	3b00      	subs	r3, #0
 80038b0:	bf18      	it	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	0692      	lsls	r2, r2, #26
 80038b6:	d42b      	bmi.n	8003910 <_printf_common+0xb0>
 80038b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038bc:	4641      	mov	r1, r8
 80038be:	4638      	mov	r0, r7
 80038c0:	47c8      	blx	r9
 80038c2:	3001      	adds	r0, #1
 80038c4:	d01e      	beq.n	8003904 <_printf_common+0xa4>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	6922      	ldr	r2, [r4, #16]
 80038ca:	f003 0306 	and.w	r3, r3, #6
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf02      	ittt	eq
 80038d2:	68e5      	ldreq	r5, [r4, #12]
 80038d4:	6833      	ldreq	r3, [r6, #0]
 80038d6:	1aed      	subeq	r5, r5, r3
 80038d8:	68a3      	ldr	r3, [r4, #8]
 80038da:	bf0c      	ite	eq
 80038dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e0:	2500      	movne	r5, #0
 80038e2:	4293      	cmp	r3, r2
 80038e4:	bfc4      	itt	gt
 80038e6:	1a9b      	subgt	r3, r3, r2
 80038e8:	18ed      	addgt	r5, r5, r3
 80038ea:	2600      	movs	r6, #0
 80038ec:	341a      	adds	r4, #26
 80038ee:	42b5      	cmp	r5, r6
 80038f0:	d11a      	bne.n	8003928 <_printf_common+0xc8>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e008      	b.n	8003908 <_printf_common+0xa8>
 80038f6:	2301      	movs	r3, #1
 80038f8:	4652      	mov	r2, sl
 80038fa:	4641      	mov	r1, r8
 80038fc:	4638      	mov	r0, r7
 80038fe:	47c8      	blx	r9
 8003900:	3001      	adds	r0, #1
 8003902:	d103      	bne.n	800390c <_printf_common+0xac>
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390c:	3501      	adds	r5, #1
 800390e:	e7c6      	b.n	800389e <_printf_common+0x3e>
 8003910:	18e1      	adds	r1, r4, r3
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	2030      	movs	r0, #48	@ 0x30
 8003916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800391a:	4422      	add	r2, r4
 800391c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003924:	3302      	adds	r3, #2
 8003926:	e7c7      	b.n	80038b8 <_printf_common+0x58>
 8003928:	2301      	movs	r3, #1
 800392a:	4622      	mov	r2, r4
 800392c:	4641      	mov	r1, r8
 800392e:	4638      	mov	r0, r7
 8003930:	47c8      	blx	r9
 8003932:	3001      	adds	r0, #1
 8003934:	d0e6      	beq.n	8003904 <_printf_common+0xa4>
 8003936:	3601      	adds	r6, #1
 8003938:	e7d9      	b.n	80038ee <_printf_common+0x8e>
	...

0800393c <_printf_i>:
 800393c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003940:	7e0f      	ldrb	r7, [r1, #24]
 8003942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003944:	2f78      	cmp	r7, #120	@ 0x78
 8003946:	4691      	mov	r9, r2
 8003948:	4680      	mov	r8, r0
 800394a:	460c      	mov	r4, r1
 800394c:	469a      	mov	sl, r3
 800394e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003952:	d807      	bhi.n	8003964 <_printf_i+0x28>
 8003954:	2f62      	cmp	r7, #98	@ 0x62
 8003956:	d80a      	bhi.n	800396e <_printf_i+0x32>
 8003958:	2f00      	cmp	r7, #0
 800395a:	f000 80d2 	beq.w	8003b02 <_printf_i+0x1c6>
 800395e:	2f58      	cmp	r7, #88	@ 0x58
 8003960:	f000 80b9 	beq.w	8003ad6 <_printf_i+0x19a>
 8003964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800396c:	e03a      	b.n	80039e4 <_printf_i+0xa8>
 800396e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003972:	2b15      	cmp	r3, #21
 8003974:	d8f6      	bhi.n	8003964 <_printf_i+0x28>
 8003976:	a101      	add	r1, pc, #4	@ (adr r1, 800397c <_printf_i+0x40>)
 8003978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800397c:	080039d5 	.word	0x080039d5
 8003980:	080039e9 	.word	0x080039e9
 8003984:	08003965 	.word	0x08003965
 8003988:	08003965 	.word	0x08003965
 800398c:	08003965 	.word	0x08003965
 8003990:	08003965 	.word	0x08003965
 8003994:	080039e9 	.word	0x080039e9
 8003998:	08003965 	.word	0x08003965
 800399c:	08003965 	.word	0x08003965
 80039a0:	08003965 	.word	0x08003965
 80039a4:	08003965 	.word	0x08003965
 80039a8:	08003ae9 	.word	0x08003ae9
 80039ac:	08003a13 	.word	0x08003a13
 80039b0:	08003aa3 	.word	0x08003aa3
 80039b4:	08003965 	.word	0x08003965
 80039b8:	08003965 	.word	0x08003965
 80039bc:	08003b0b 	.word	0x08003b0b
 80039c0:	08003965 	.word	0x08003965
 80039c4:	08003a13 	.word	0x08003a13
 80039c8:	08003965 	.word	0x08003965
 80039cc:	08003965 	.word	0x08003965
 80039d0:	08003aab 	.word	0x08003aab
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6032      	str	r2, [r6, #0]
 80039dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039e4:	2301      	movs	r3, #1
 80039e6:	e09d      	b.n	8003b24 <_printf_i+0x1e8>
 80039e8:	6833      	ldr	r3, [r6, #0]
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	1d19      	adds	r1, r3, #4
 80039ee:	6031      	str	r1, [r6, #0]
 80039f0:	0606      	lsls	r6, r0, #24
 80039f2:	d501      	bpl.n	80039f8 <_printf_i+0xbc>
 80039f4:	681d      	ldr	r5, [r3, #0]
 80039f6:	e003      	b.n	8003a00 <_printf_i+0xc4>
 80039f8:	0645      	lsls	r5, r0, #25
 80039fa:	d5fb      	bpl.n	80039f4 <_printf_i+0xb8>
 80039fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a00:	2d00      	cmp	r5, #0
 8003a02:	da03      	bge.n	8003a0c <_printf_i+0xd0>
 8003a04:	232d      	movs	r3, #45	@ 0x2d
 8003a06:	426d      	negs	r5, r5
 8003a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a0c:	4859      	ldr	r0, [pc, #356]	@ (8003b74 <_printf_i+0x238>)
 8003a0e:	230a      	movs	r3, #10
 8003a10:	e011      	b.n	8003a36 <_printf_i+0xfa>
 8003a12:	6821      	ldr	r1, [r4, #0]
 8003a14:	6833      	ldr	r3, [r6, #0]
 8003a16:	0608      	lsls	r0, r1, #24
 8003a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a1c:	d402      	bmi.n	8003a24 <_printf_i+0xe8>
 8003a1e:	0649      	lsls	r1, r1, #25
 8003a20:	bf48      	it	mi
 8003a22:	b2ad      	uxthmi	r5, r5
 8003a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a26:	4853      	ldr	r0, [pc, #332]	@ (8003b74 <_printf_i+0x238>)
 8003a28:	6033      	str	r3, [r6, #0]
 8003a2a:	bf14      	ite	ne
 8003a2c:	230a      	movne	r3, #10
 8003a2e:	2308      	moveq	r3, #8
 8003a30:	2100      	movs	r1, #0
 8003a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a36:	6866      	ldr	r6, [r4, #4]
 8003a38:	60a6      	str	r6, [r4, #8]
 8003a3a:	2e00      	cmp	r6, #0
 8003a3c:	bfa2      	ittt	ge
 8003a3e:	6821      	ldrge	r1, [r4, #0]
 8003a40:	f021 0104 	bicge.w	r1, r1, #4
 8003a44:	6021      	strge	r1, [r4, #0]
 8003a46:	b90d      	cbnz	r5, 8003a4c <_printf_i+0x110>
 8003a48:	2e00      	cmp	r6, #0
 8003a4a:	d04b      	beq.n	8003ae4 <_printf_i+0x1a8>
 8003a4c:	4616      	mov	r6, r2
 8003a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a52:	fb03 5711 	mls	r7, r3, r1, r5
 8003a56:	5dc7      	ldrb	r7, [r0, r7]
 8003a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a5c:	462f      	mov	r7, r5
 8003a5e:	42bb      	cmp	r3, r7
 8003a60:	460d      	mov	r5, r1
 8003a62:	d9f4      	bls.n	8003a4e <_printf_i+0x112>
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d10b      	bne.n	8003a80 <_printf_i+0x144>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	07df      	lsls	r7, r3, #31
 8003a6c:	d508      	bpl.n	8003a80 <_printf_i+0x144>
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	6861      	ldr	r1, [r4, #4]
 8003a72:	4299      	cmp	r1, r3
 8003a74:	bfde      	ittt	le
 8003a76:	2330      	movle	r3, #48	@ 0x30
 8003a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a80:	1b92      	subs	r2, r2, r6
 8003a82:	6122      	str	r2, [r4, #16]
 8003a84:	f8cd a000 	str.w	sl, [sp]
 8003a88:	464b      	mov	r3, r9
 8003a8a:	aa03      	add	r2, sp, #12
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4640      	mov	r0, r8
 8003a90:	f7ff fee6 	bl	8003860 <_printf_common>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d14a      	bne.n	8003b2e <_printf_i+0x1f2>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	b004      	add	sp, #16
 8003a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f043 0320 	orr.w	r3, r3, #32
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	4833      	ldr	r0, [pc, #204]	@ (8003b78 <_printf_i+0x23c>)
 8003aac:	2778      	movs	r7, #120	@ 0x78
 8003aae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	6831      	ldr	r1, [r6, #0]
 8003ab6:	061f      	lsls	r7, r3, #24
 8003ab8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003abc:	d402      	bmi.n	8003ac4 <_printf_i+0x188>
 8003abe:	065f      	lsls	r7, r3, #25
 8003ac0:	bf48      	it	mi
 8003ac2:	b2ad      	uxthmi	r5, r5
 8003ac4:	6031      	str	r1, [r6, #0]
 8003ac6:	07d9      	lsls	r1, r3, #31
 8003ac8:	bf44      	itt	mi
 8003aca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ace:	6023      	strmi	r3, [r4, #0]
 8003ad0:	b11d      	cbz	r5, 8003ada <_printf_i+0x19e>
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	e7ac      	b.n	8003a30 <_printf_i+0xf4>
 8003ad6:	4827      	ldr	r0, [pc, #156]	@ (8003b74 <_printf_i+0x238>)
 8003ad8:	e7e9      	b.n	8003aae <_printf_i+0x172>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	f023 0320 	bic.w	r3, r3, #32
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	e7f6      	b.n	8003ad2 <_printf_i+0x196>
 8003ae4:	4616      	mov	r6, r2
 8003ae6:	e7bd      	b.n	8003a64 <_printf_i+0x128>
 8003ae8:	6833      	ldr	r3, [r6, #0]
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	6961      	ldr	r1, [r4, #20]
 8003aee:	1d18      	adds	r0, r3, #4
 8003af0:	6030      	str	r0, [r6, #0]
 8003af2:	062e      	lsls	r6, r5, #24
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	d501      	bpl.n	8003afc <_printf_i+0x1c0>
 8003af8:	6019      	str	r1, [r3, #0]
 8003afa:	e002      	b.n	8003b02 <_printf_i+0x1c6>
 8003afc:	0668      	lsls	r0, r5, #25
 8003afe:	d5fb      	bpl.n	8003af8 <_printf_i+0x1bc>
 8003b00:	8019      	strh	r1, [r3, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	6123      	str	r3, [r4, #16]
 8003b06:	4616      	mov	r6, r2
 8003b08:	e7bc      	b.n	8003a84 <_printf_i+0x148>
 8003b0a:	6833      	ldr	r3, [r6, #0]
 8003b0c:	1d1a      	adds	r2, r3, #4
 8003b0e:	6032      	str	r2, [r6, #0]
 8003b10:	681e      	ldr	r6, [r3, #0]
 8003b12:	6862      	ldr	r2, [r4, #4]
 8003b14:	2100      	movs	r1, #0
 8003b16:	4630      	mov	r0, r6
 8003b18:	f7fc fb82 	bl	8000220 <memchr>
 8003b1c:	b108      	cbz	r0, 8003b22 <_printf_i+0x1e6>
 8003b1e:	1b80      	subs	r0, r0, r6
 8003b20:	6060      	str	r0, [r4, #4]
 8003b22:	6863      	ldr	r3, [r4, #4]
 8003b24:	6123      	str	r3, [r4, #16]
 8003b26:	2300      	movs	r3, #0
 8003b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b2c:	e7aa      	b.n	8003a84 <_printf_i+0x148>
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	4632      	mov	r2, r6
 8003b32:	4649      	mov	r1, r9
 8003b34:	4640      	mov	r0, r8
 8003b36:	47d0      	blx	sl
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d0ad      	beq.n	8003a98 <_printf_i+0x15c>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	079b      	lsls	r3, r3, #30
 8003b40:	d413      	bmi.n	8003b6a <_printf_i+0x22e>
 8003b42:	68e0      	ldr	r0, [r4, #12]
 8003b44:	9b03      	ldr	r3, [sp, #12]
 8003b46:	4298      	cmp	r0, r3
 8003b48:	bfb8      	it	lt
 8003b4a:	4618      	movlt	r0, r3
 8003b4c:	e7a6      	b.n	8003a9c <_printf_i+0x160>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4632      	mov	r2, r6
 8003b52:	4649      	mov	r1, r9
 8003b54:	4640      	mov	r0, r8
 8003b56:	47d0      	blx	sl
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d09d      	beq.n	8003a98 <_printf_i+0x15c>
 8003b5c:	3501      	adds	r5, #1
 8003b5e:	68e3      	ldr	r3, [r4, #12]
 8003b60:	9903      	ldr	r1, [sp, #12]
 8003b62:	1a5b      	subs	r3, r3, r1
 8003b64:	42ab      	cmp	r3, r5
 8003b66:	dcf2      	bgt.n	8003b4e <_printf_i+0x212>
 8003b68:	e7eb      	b.n	8003b42 <_printf_i+0x206>
 8003b6a:	2500      	movs	r5, #0
 8003b6c:	f104 0619 	add.w	r6, r4, #25
 8003b70:	e7f5      	b.n	8003b5e <_printf_i+0x222>
 8003b72:	bf00      	nop
 8003b74:	08003f75 	.word	0x08003f75
 8003b78:	08003f86 	.word	0x08003f86

08003b7c <__sflush_r>:
 8003b7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b84:	0716      	lsls	r6, r2, #28
 8003b86:	4605      	mov	r5, r0
 8003b88:	460c      	mov	r4, r1
 8003b8a:	d454      	bmi.n	8003c36 <__sflush_r+0xba>
 8003b8c:	684b      	ldr	r3, [r1, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	dc02      	bgt.n	8003b98 <__sflush_r+0x1c>
 8003b92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	dd48      	ble.n	8003c2a <__sflush_r+0xae>
 8003b98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b9a:	2e00      	cmp	r6, #0
 8003b9c:	d045      	beq.n	8003c2a <__sflush_r+0xae>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ba4:	682f      	ldr	r7, [r5, #0]
 8003ba6:	6a21      	ldr	r1, [r4, #32]
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	d030      	beq.n	8003c0e <__sflush_r+0x92>
 8003bac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	0759      	lsls	r1, r3, #29
 8003bb2:	d505      	bpl.n	8003bc0 <__sflush_r+0x44>
 8003bb4:	6863      	ldr	r3, [r4, #4]
 8003bb6:	1ad2      	subs	r2, r2, r3
 8003bb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bba:	b10b      	cbz	r3, 8003bc0 <__sflush_r+0x44>
 8003bbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bc4:	6a21      	ldr	r1, [r4, #32]
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	47b0      	blx	r6
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	89a3      	ldrh	r3, [r4, #12]
 8003bce:	d106      	bne.n	8003bde <__sflush_r+0x62>
 8003bd0:	6829      	ldr	r1, [r5, #0]
 8003bd2:	291d      	cmp	r1, #29
 8003bd4:	d82b      	bhi.n	8003c2e <__sflush_r+0xb2>
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c80 <__sflush_r+0x104>)
 8003bd8:	410a      	asrs	r2, r1
 8003bda:	07d6      	lsls	r6, r2, #31
 8003bdc:	d427      	bmi.n	8003c2e <__sflush_r+0xb2>
 8003bde:	2200      	movs	r2, #0
 8003be0:	6062      	str	r2, [r4, #4]
 8003be2:	04d9      	lsls	r1, r3, #19
 8003be4:	6922      	ldr	r2, [r4, #16]
 8003be6:	6022      	str	r2, [r4, #0]
 8003be8:	d504      	bpl.n	8003bf4 <__sflush_r+0x78>
 8003bea:	1c42      	adds	r2, r0, #1
 8003bec:	d101      	bne.n	8003bf2 <__sflush_r+0x76>
 8003bee:	682b      	ldr	r3, [r5, #0]
 8003bf0:	b903      	cbnz	r3, 8003bf4 <__sflush_r+0x78>
 8003bf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bf6:	602f      	str	r7, [r5, #0]
 8003bf8:	b1b9      	cbz	r1, 8003c2a <__sflush_r+0xae>
 8003bfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bfe:	4299      	cmp	r1, r3
 8003c00:	d002      	beq.n	8003c08 <__sflush_r+0x8c>
 8003c02:	4628      	mov	r0, r5
 8003c04:	f7ff fbf2 	bl	80033ec <_free_r>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c0c:	e00d      	b.n	8003c2a <__sflush_r+0xae>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	4628      	mov	r0, r5
 8003c12:	47b0      	blx	r6
 8003c14:	4602      	mov	r2, r0
 8003c16:	1c50      	adds	r0, r2, #1
 8003c18:	d1c9      	bne.n	8003bae <__sflush_r+0x32>
 8003c1a:	682b      	ldr	r3, [r5, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0c6      	beq.n	8003bae <__sflush_r+0x32>
 8003c20:	2b1d      	cmp	r3, #29
 8003c22:	d001      	beq.n	8003c28 <__sflush_r+0xac>
 8003c24:	2b16      	cmp	r3, #22
 8003c26:	d11e      	bne.n	8003c66 <__sflush_r+0xea>
 8003c28:	602f      	str	r7, [r5, #0]
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e022      	b.n	8003c74 <__sflush_r+0xf8>
 8003c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c32:	b21b      	sxth	r3, r3
 8003c34:	e01b      	b.n	8003c6e <__sflush_r+0xf2>
 8003c36:	690f      	ldr	r7, [r1, #16]
 8003c38:	2f00      	cmp	r7, #0
 8003c3a:	d0f6      	beq.n	8003c2a <__sflush_r+0xae>
 8003c3c:	0793      	lsls	r3, r2, #30
 8003c3e:	680e      	ldr	r6, [r1, #0]
 8003c40:	bf08      	it	eq
 8003c42:	694b      	ldreq	r3, [r1, #20]
 8003c44:	600f      	str	r7, [r1, #0]
 8003c46:	bf18      	it	ne
 8003c48:	2300      	movne	r3, #0
 8003c4a:	eba6 0807 	sub.w	r8, r6, r7
 8003c4e:	608b      	str	r3, [r1, #8]
 8003c50:	f1b8 0f00 	cmp.w	r8, #0
 8003c54:	dde9      	ble.n	8003c2a <__sflush_r+0xae>
 8003c56:	6a21      	ldr	r1, [r4, #32]
 8003c58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c5a:	4643      	mov	r3, r8
 8003c5c:	463a      	mov	r2, r7
 8003c5e:	4628      	mov	r0, r5
 8003c60:	47b0      	blx	r6
 8003c62:	2800      	cmp	r0, #0
 8003c64:	dc08      	bgt.n	8003c78 <__sflush_r+0xfc>
 8003c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c6e:	81a3      	strh	r3, [r4, #12]
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c78:	4407      	add	r7, r0
 8003c7a:	eba8 0800 	sub.w	r8, r8, r0
 8003c7e:	e7e7      	b.n	8003c50 <__sflush_r+0xd4>
 8003c80:	dfbffffe 	.word	0xdfbffffe

08003c84 <_fflush_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	690b      	ldr	r3, [r1, #16]
 8003c88:	4605      	mov	r5, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	b913      	cbnz	r3, 8003c94 <_fflush_r+0x10>
 8003c8e:	2500      	movs	r5, #0
 8003c90:	4628      	mov	r0, r5
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	b118      	cbz	r0, 8003c9e <_fflush_r+0x1a>
 8003c96:	6a03      	ldr	r3, [r0, #32]
 8003c98:	b90b      	cbnz	r3, 8003c9e <_fflush_r+0x1a>
 8003c9a:	f7ff fa9f 	bl	80031dc <__sinit>
 8003c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f3      	beq.n	8003c8e <_fflush_r+0xa>
 8003ca6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ca8:	07d0      	lsls	r0, r2, #31
 8003caa:	d404      	bmi.n	8003cb6 <_fflush_r+0x32>
 8003cac:	0599      	lsls	r1, r3, #22
 8003cae:	d402      	bmi.n	8003cb6 <_fflush_r+0x32>
 8003cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cb2:	f7ff fb98 	bl	80033e6 <__retarget_lock_acquire_recursive>
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	4621      	mov	r1, r4
 8003cba:	f7ff ff5f 	bl	8003b7c <__sflush_r>
 8003cbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cc0:	07da      	lsls	r2, r3, #31
 8003cc2:	4605      	mov	r5, r0
 8003cc4:	d4e4      	bmi.n	8003c90 <_fflush_r+0xc>
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	059b      	lsls	r3, r3, #22
 8003cca:	d4e1      	bmi.n	8003c90 <_fflush_r+0xc>
 8003ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cce:	f7ff fb8b 	bl	80033e8 <__retarget_lock_release_recursive>
 8003cd2:	e7dd      	b.n	8003c90 <_fflush_r+0xc>

08003cd4 <__swbuf_r>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	460e      	mov	r6, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	4605      	mov	r5, r0
 8003cdc:	b118      	cbz	r0, 8003ce6 <__swbuf_r+0x12>
 8003cde:	6a03      	ldr	r3, [r0, #32]
 8003ce0:	b90b      	cbnz	r3, 8003ce6 <__swbuf_r+0x12>
 8003ce2:	f7ff fa7b 	bl	80031dc <__sinit>
 8003ce6:	69a3      	ldr	r3, [r4, #24]
 8003ce8:	60a3      	str	r3, [r4, #8]
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	071a      	lsls	r2, r3, #28
 8003cee:	d501      	bpl.n	8003cf4 <__swbuf_r+0x20>
 8003cf0:	6923      	ldr	r3, [r4, #16]
 8003cf2:	b943      	cbnz	r3, 8003d06 <__swbuf_r+0x32>
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f000 f82a 	bl	8003d50 <__swsetup_r>
 8003cfc:	b118      	cbz	r0, 8003d06 <__swbuf_r+0x32>
 8003cfe:	f04f 37ff 	mov.w	r7, #4294967295
 8003d02:	4638      	mov	r0, r7
 8003d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	6922      	ldr	r2, [r4, #16]
 8003d0a:	1a98      	subs	r0, r3, r2
 8003d0c:	6963      	ldr	r3, [r4, #20]
 8003d0e:	b2f6      	uxtb	r6, r6
 8003d10:	4283      	cmp	r3, r0
 8003d12:	4637      	mov	r7, r6
 8003d14:	dc05      	bgt.n	8003d22 <__swbuf_r+0x4e>
 8003d16:	4621      	mov	r1, r4
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7ff ffb3 	bl	8003c84 <_fflush_r>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d1ed      	bne.n	8003cfe <__swbuf_r+0x2a>
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	60a3      	str	r3, [r4, #8]
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	6022      	str	r2, [r4, #0]
 8003d2e:	701e      	strb	r6, [r3, #0]
 8003d30:	6962      	ldr	r2, [r4, #20]
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d004      	beq.n	8003d42 <__swbuf_r+0x6e>
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	07db      	lsls	r3, r3, #31
 8003d3c:	d5e1      	bpl.n	8003d02 <__swbuf_r+0x2e>
 8003d3e:	2e0a      	cmp	r6, #10
 8003d40:	d1df      	bne.n	8003d02 <__swbuf_r+0x2e>
 8003d42:	4621      	mov	r1, r4
 8003d44:	4628      	mov	r0, r5
 8003d46:	f7ff ff9d 	bl	8003c84 <_fflush_r>
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d0d9      	beq.n	8003d02 <__swbuf_r+0x2e>
 8003d4e:	e7d6      	b.n	8003cfe <__swbuf_r+0x2a>

08003d50 <__swsetup_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4b29      	ldr	r3, [pc, #164]	@ (8003df8 <__swsetup_r+0xa8>)
 8003d54:	4605      	mov	r5, r0
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	460c      	mov	r4, r1
 8003d5a:	b118      	cbz	r0, 8003d64 <__swsetup_r+0x14>
 8003d5c:	6a03      	ldr	r3, [r0, #32]
 8003d5e:	b90b      	cbnz	r3, 8003d64 <__swsetup_r+0x14>
 8003d60:	f7ff fa3c 	bl	80031dc <__sinit>
 8003d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d68:	0719      	lsls	r1, r3, #28
 8003d6a:	d422      	bmi.n	8003db2 <__swsetup_r+0x62>
 8003d6c:	06da      	lsls	r2, r3, #27
 8003d6e:	d407      	bmi.n	8003d80 <__swsetup_r+0x30>
 8003d70:	2209      	movs	r2, #9
 8003d72:	602a      	str	r2, [r5, #0]
 8003d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7e:	e033      	b.n	8003de8 <__swsetup_r+0x98>
 8003d80:	0758      	lsls	r0, r3, #29
 8003d82:	d512      	bpl.n	8003daa <__swsetup_r+0x5a>
 8003d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d86:	b141      	cbz	r1, 8003d9a <__swsetup_r+0x4a>
 8003d88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	d002      	beq.n	8003d96 <__swsetup_r+0x46>
 8003d90:	4628      	mov	r0, r5
 8003d92:	f7ff fb2b 	bl	80033ec <_free_r>
 8003d96:	2300      	movs	r3, #0
 8003d98:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003da0:	81a3      	strh	r3, [r4, #12]
 8003da2:	2300      	movs	r3, #0
 8003da4:	6063      	str	r3, [r4, #4]
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	89a3      	ldrh	r3, [r4, #12]
 8003dac:	f043 0308 	orr.w	r3, r3, #8
 8003db0:	81a3      	strh	r3, [r4, #12]
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	b94b      	cbnz	r3, 8003dca <__swsetup_r+0x7a>
 8003db6:	89a3      	ldrh	r3, [r4, #12]
 8003db8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc0:	d003      	beq.n	8003dca <__swsetup_r+0x7a>
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f000 f84f 	bl	8003e68 <__smakebuf_r>
 8003dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dce:	f013 0201 	ands.w	r2, r3, #1
 8003dd2:	d00a      	beq.n	8003dea <__swsetup_r+0x9a>
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	60a2      	str	r2, [r4, #8]
 8003dd8:	6962      	ldr	r2, [r4, #20]
 8003dda:	4252      	negs	r2, r2
 8003ddc:	61a2      	str	r2, [r4, #24]
 8003dde:	6922      	ldr	r2, [r4, #16]
 8003de0:	b942      	cbnz	r2, 8003df4 <__swsetup_r+0xa4>
 8003de2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003de6:	d1c5      	bne.n	8003d74 <__swsetup_r+0x24>
 8003de8:	bd38      	pop	{r3, r4, r5, pc}
 8003dea:	0799      	lsls	r1, r3, #30
 8003dec:	bf58      	it	pl
 8003dee:	6962      	ldrpl	r2, [r4, #20]
 8003df0:	60a2      	str	r2, [r4, #8]
 8003df2:	e7f4      	b.n	8003dde <__swsetup_r+0x8e>
 8003df4:	2000      	movs	r0, #0
 8003df6:	e7f7      	b.n	8003de8 <__swsetup_r+0x98>
 8003df8:	20000018 	.word	0x20000018

08003dfc <_sbrk_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4d06      	ldr	r5, [pc, #24]	@ (8003e18 <_sbrk_r+0x1c>)
 8003e00:	2300      	movs	r3, #0
 8003e02:	4604      	mov	r4, r0
 8003e04:	4608      	mov	r0, r1
 8003e06:	602b      	str	r3, [r5, #0]
 8003e08:	f7fc fe98 	bl	8000b3c <_sbrk>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_sbrk_r+0x1a>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_sbrk_r+0x1a>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	20000220 	.word	0x20000220

08003e1c <__swhatbuf_r>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	460c      	mov	r4, r1
 8003e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e24:	2900      	cmp	r1, #0
 8003e26:	b096      	sub	sp, #88	@ 0x58
 8003e28:	4615      	mov	r5, r2
 8003e2a:	461e      	mov	r6, r3
 8003e2c:	da0d      	bge.n	8003e4a <__swhatbuf_r+0x2e>
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	bf14      	ite	ne
 8003e3a:	2340      	movne	r3, #64	@ 0x40
 8003e3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e40:	2000      	movs	r0, #0
 8003e42:	6031      	str	r1, [r6, #0]
 8003e44:	602b      	str	r3, [r5, #0]
 8003e46:	b016      	add	sp, #88	@ 0x58
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
 8003e4a:	466a      	mov	r2, sp
 8003e4c:	f000 f848 	bl	8003ee0 <_fstat_r>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	dbec      	blt.n	8003e2e <__swhatbuf_r+0x12>
 8003e54:	9901      	ldr	r1, [sp, #4]
 8003e56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e5e:	4259      	negs	r1, r3
 8003e60:	4159      	adcs	r1, r3
 8003e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e66:	e7eb      	b.n	8003e40 <__swhatbuf_r+0x24>

08003e68 <__smakebuf_r>:
 8003e68:	898b      	ldrh	r3, [r1, #12]
 8003e6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e6c:	079d      	lsls	r5, r3, #30
 8003e6e:	4606      	mov	r6, r0
 8003e70:	460c      	mov	r4, r1
 8003e72:	d507      	bpl.n	8003e84 <__smakebuf_r+0x1c>
 8003e74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	6123      	str	r3, [r4, #16]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	6163      	str	r3, [r4, #20]
 8003e80:	b003      	add	sp, #12
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e84:	ab01      	add	r3, sp, #4
 8003e86:	466a      	mov	r2, sp
 8003e88:	f7ff ffc8 	bl	8003e1c <__swhatbuf_r>
 8003e8c:	9f00      	ldr	r7, [sp, #0]
 8003e8e:	4605      	mov	r5, r0
 8003e90:	4639      	mov	r1, r7
 8003e92:	4630      	mov	r0, r6
 8003e94:	f7ff fb16 	bl	80034c4 <_malloc_r>
 8003e98:	b948      	cbnz	r0, 8003eae <__smakebuf_r+0x46>
 8003e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e9e:	059a      	lsls	r2, r3, #22
 8003ea0:	d4ee      	bmi.n	8003e80 <__smakebuf_r+0x18>
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	e7e2      	b.n	8003e74 <__smakebuf_r+0xc>
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	6020      	str	r0, [r4, #0]
 8003eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	9b01      	ldr	r3, [sp, #4]
 8003eba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ebe:	b15b      	cbz	r3, 8003ed8 <__smakebuf_r+0x70>
 8003ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 f81d 	bl	8003f04 <_isatty_r>
 8003eca:	b128      	cbz	r0, 8003ed8 <__smakebuf_r+0x70>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	431d      	orrs	r5, r3
 8003edc:	81a5      	strh	r5, [r4, #12]
 8003ede:	e7cf      	b.n	8003e80 <__smakebuf_r+0x18>

08003ee0 <_fstat_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4d07      	ldr	r5, [pc, #28]	@ (8003f00 <_fstat_r+0x20>)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	f7fc fdfc 	bl	8000aea <_fstat>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	d102      	bne.n	8003efc <_fstat_r+0x1c>
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	b103      	cbz	r3, 8003efc <_fstat_r+0x1c>
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
 8003efe:	bf00      	nop
 8003f00:	20000220 	.word	0x20000220

08003f04 <_isatty_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4d06      	ldr	r5, [pc, #24]	@ (8003f20 <_isatty_r+0x1c>)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	602b      	str	r3, [r5, #0]
 8003f10:	f7fc fdfb 	bl	8000b0a <_isatty>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_isatty_r+0x1a>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_isatty_r+0x1a>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	20000220 	.word	0x20000220

08003f24 <_init>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr

08003f30 <_fini>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr
